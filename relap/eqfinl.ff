*mlist
       subroutine eqfinl
c
c  This subroutine computes the new time pressure and carries out the
c  back substitution to obtain the new time liquid specific internal
c  energy, vapor specific internal energy, void fraction, noncondensible
c  quality, and boron density. It also computes the vapor generation
c  rate and mixture density.
c
c  Cognizant engineer: rar,jet,kuo.
c
       use lpdatc
       use mserrd
       use voldat
       implicit none
       include 'comctl.h'
       include 'contrl.h'
       include 'fast.h'
       include 'jundat.h'
       include 'lvectr.h'
       include 'scrtch.h'
       include 'statec.h'
       include 'stcom.h'
       include 'tsctlc.h'
       include 'ufiles.h'
       include 'voldat.h'
c
c  Local and scratch variables.
c  Scratch variables are not needed after eqfinl is done.
       real conbor,conmfv,conmgv,dalj,damx,rdt,sorcm,tarf,targ,tempq,
     & voidam,voidgx,wtf,wtg,wti,wtf1,wtg1,wti1
       integer i,ii,i1,ih1,ih2,ih3,il,ir,ix,k,kk,l,ll,m,nn,nh1,nh2,nh3
       logical ltst,lairap,lptst
c  Density ratio (gas/liquid), void limits for truncation.
       real denrat
c
c  Initialize air appearance flag.
       lairap = .false.
c
c  Compute new pressure and initialize sourcp for next loop.
       i = lpdat(issys)%liv
       ix = ixvff
       do k = 1,lpdat(issys)%livn
         b5(ix) = sourcp(k)
         p(i) = po(i) + sourcp(k)
         scv1(ix) = v(i)*dt
         sorp(ix) = gamas(i)*scv1(ix) - (hyarf(i) + hyarg(i))*
     &   (v(i) - vo(i))
         ix = ix + scskp
         i = i + ivskp
       enddo
       do nn = 1,lpdat(issys)%lnoncn
         i = lpdat(issys)%liv
         ix = ixvff
         if (nn .ne. nonhy) then
           do m = 1,lpdat(issys)%livn
             sorp(ix) = sorp(ix) + gaman(i+nn-1)*scv1(ix)
             ix = ix + scskp
             i = i + ivskp
           enddo
         else
           do m = 1,lpdat(issys)%livn
             sorp(ix) = sorp(ix) - 8.0*gaman(i+nn-1)*scv1(ix)
             ix = ix + scskp
             i = i + ivskp
           enddo
         endif
       enddo
c  Add convective terms to source terms.
       i = lpdat(issys)%lij
       ix = ixjff
       do m = 1,lpdat(issys)%lijn
         scv1(ix) = dt*ajun(i)
         conmf(ix) = scv1(ix)*voidfj(i)*rhofj(i)*velfj(i)
         conmg(ix) = scv1(ix)*voidgj(i)*rhogj(i)*velgj(i)
         scv2(ix) = conmg(ix)*qualaj(i)
         cond(ix) = conmg(ix) - conmf(ix)
         conm(ix) = conmg(ix) + conmf(ix)
         ix = ix + scskp
         i = i + ijskp
       enddo
c
       i = lpdat(issys)%lij
       ix = ixjff
       do m = 1,lpdat(issys)%lijn
c  Changes by mbs and rar.
         if (iand(jcex(i),ishft(1,15)).ne.0) then
c
           if (velgj(i) .ge. 0.0) then
             scv3(ix) = (ugj(i) + po(ij1nx(i))/rhogj(i))*conmg(ix)
             scv5(ix) = scv3(ix)
           else
             scv3(ix) = (ugj(i) + po(ij2nx(i))/rhogj(i))*conmg(ix)
             scv5(ix) = scv3(ix)
           endif
c
           if (velfj(i) .ge. 0.0) then
             scv4(ix) = (ufj(i) + po(ij1nx(i))/rhofj(i))*conmf(ix)
             scv6(ix) = scv4(ix)
           else
             scv4(ix) = (ufj(i) + po(ij2nx(i))/rhofj(i))*conmf(ix)
             scv6(ix) = scv4(ix)
           endif
c
         else
           scv3(ix) = (ugj(i) + po(ij1nx(i))/rhogj(i))*conmg(ix)
           scv4(ix) = (ufj(i) + po(ij1nx(i))/rhofj(i))*conmf(ix)
           scv5(ix) = (ugj(i) + po(ij2nx(i))/rhogj(i))*conmg(ix)
           scv6(ix) = (ufj(i) + po(ij2nx(i))/rhofj(i))*conmf(ix)
         endif
c  Changes by mbs and rar
         ix = ix + scskp
         i = i + ijskp
       enddo
       do nn = 1,lpdat(issys)%lnoncn
         i = lpdat(issys)%lij
         ix = ixjff
         do m = 1,lpdat(issys)%lijn
           scv2n(ix+nn-1) = qualnj(i+nn-1)*scv2(ix)
           ix = ix + scskp
           i = i + ijskp
         enddo
       enddo
       ll = lvjusr(lpdat(issys)%llvect)
       if (lvptr(ll) .ne. 0) then
         do ii = 1,lvptr(ll)
           ll = ll + 1
           kk = ll
           do m = 1,lvptr(ll)
             ll = ll + 1
             i = lvptr(ll)
             ix = jcnxs(i)
             k = jcnx1(i)
             l = jcnx1(i+1)
             sourca(k) = sourca(k) - scv2(ix)
             sourca(l) = sourca(l) + scv2(ix)
             sourcg(k) = sourcg(k) - scv3(ix)
             sourcg(l) = sourcg(l) + scv5(ix)
             sourcf(k) = sourcf(k) - scv4(ix)
             sourcf(l) = sourcf(l) + scv6(ix)
             sourcm(k) = sourcm(k) - cond(ix)
             sourcm(l) = sourcm(l) + cond(ix)
             sorp(k) = sorp(k) - conm(ix)
             sorp(l) = sorp(l) + conm(ix)
           enddo
           do nn = 1,lpdat(issys)%lnoncn
             ll = kk
             do m = 1,lvptr(ll)
               ll = ll + 1
               i = lvptr(ll)
               ix = jcnxs(i)
               sourcn(jcnx1(i)+nn-1) = sourcn(jcnx1(i)+nn-1) -
     &         scv2n(ix+nn-1)
               sourcn(jcnx1(i+1)+nn-1) = sourcn(jcnx1(i+1)+nn-1) +
     &         scv2n(ix+nn-1)
             enddo
           enddo
c
           if (.not.chngno(23)) then
             ll = kk
             do m = 1,lvptr(ll)
               ll = ll + 1
               i = lvptr(ll)
               ix = jcnxs(i)
               kk = ij1nx(i)
               if (velfj(i) .lt. 0.0) kk = ij2nx(i)
               conbor = borono(kk)*velfj(i)*scv1(ix)*vodfjr(i)
               if (iand(vctrl(ij1nx(i)),1) .eq. 0) boron(ij1nx(i)) =
     &         ((boron(ij1nx(i)) + gamas(ij1nx(i))*dt)*v(ij1nx(i)) -
     &         conbor)*recipv(ij1nx(i))
               if (iand(vctrl(ij2nx(i)),1) .eq. 0) boron(ij2nx(i)) =
     &         ((boron(ij2nx(i)) + gamas(ij2nx(i))*dt)*v(ij2nx(i)) +
     &         conbor)*recipv(ij2nx(i))
             enddo
           endif
         enddo
       endif
       ll = ll + 1
       if (lvptr(ll) .ne. 0) then
         kk = ll
cdir$ nextscalar
         do m = 1,lvptr(ll)
           ll = ll + 1
           i = lvptr(ll)
           ix = jcnxs(i)
           l = jcnx1(i+1)
           k = jcnx1(i)
           sourca(k) = sourca(k) - scv2(ix)
           sourca(l) = sourca(l) + scv2(ix)
           sourcg(k) = sourcg(k) - scv3(ix)
           sourcg(l) = sourcg(l) + scv5(ix)
           sourcf(k) = sourcf(k) - scv4(ix)
           sourcf(l) = sourcf(l) + scv6(ix)
           sourcm(k) = sourcm(k) - cond(ix)
           sourcm(l) = sourcm(l) + cond(ix)
           sorp(k) = sorp(k) - conm(ix)
           sorp(l) = sorp(l) + conm(ix)
         enddo
         do nn = 1,lpdat(issys)%lnoncn
           ll = kk
cdir$ nextscalar
           do m = 1,lvptr(ll)
             ll = ll + 1
             i = lvptr(ll)
             ix = jcnxs(i)
             sourcn(jcnx1(i)+nn-1) = sourcn(jcnx1(i)+nn-1) -
     &       scv2n(ix+nn-1)
             sourcn(jcnx1(i+1)+nn-1) = sourcn(jcnx1(i+1)+nn-1) +
     &       scv2n(ix+nn-1)
           enddo
         enddo
c
         if (.not.chngno(23)) then
           ll = kk
cdir$ nextscalar
           do m = 1,lvptr(ll)
             ll = ll + 1
             i = lvptr(ll)
             ix = jcnxs(i)
             kk = ij1nx(i)
             if (velfj(i) .lt. 0.0) kk = ij2nx(i)
              conbor = borono(kk)*velfj(i)*scv1(ix)*vodfjr(i)
             if (iand(vctrl(ij1nx(i)),1) .eq. 0) boron(ij1nx(i)) =
     &       ((boron(ij1nx(i)) + gamas(ij1nx(i))*dt)*v(ij1nx(i)) -
     &       conbor)*recipv(ij1nx(i))
             if (iand(vctrl(ij2nx(i)),1) .eq. 0) boron(ij2nx(i)) =
     &       ((boron(ij2nx(i)) + gamas(ij2nx(i))*dt)*v(ij2nx(i)) +
     &       conbor)*recipv(ij2nx(i))
           enddo
         endif
       endif
c
c  Debug printout.
$if def,dbgprnt
       if (help.ne.0 .and. iand(ihlppr(1),64).ne.0) then
         call helphd ('eqfinl',10)
         write (output,2001)
 2001  format ('0Common junction data'/1x,119('=')/1x,'junno',9x,
     & 'i',2x,'ajun(i)',6x,'voidfj(i)',4x,'rhofj(i)',5x,'velfj(i)',5x,
     & 'ufj(i)',7x,'conmf(i)',5x,'cond(i)',6x,'conm(i)'/18x,
     & 'qualaj(i)',4x,'voidgj(i)',4x,'rhogj(i)',5x,'velgj(i)',5x,
     & 'ugj(i)',7x,'conmg(i)'/1x,119('='))
         ll = 1
         i = lpdat(issys)%lij
         ix = ixjff
         do m = 1,lpdat(issys)%lijn
           if (iand(jcex(i),ishft(1,20)).ne.0)
     &     write (output,2002) junno(i),ll,ajun(i),voidfj(i),rhofj(i),
     &     velfj(i),ufj(i),conmf(ix),cond(ix),conm(ix),qualaj(i),
     &     voidgj(i),rhogj(i),velgj(i),ugj(i),conmg(ix)
 2002  format (i10.9,i6,1p,8g13.5/16x,6g13.5)
           ix = ix + scskp
           ll = ll + 1
           i = i + ijskp
         enddo
         write (output,2003)
 2003  format ('0From-to contributions to source terms'/1x,119('=')/
     & 1x,'junno',9x,'i',12x,'k',2x,'scv2(i)',6x,'scv3(i)',6x,'scv4(i)',
     & 16x,'l',2x,'scv2(i)',6x,'scv5(i)',6x,'scv6(i)'/1x,119('='))
         ll = 1
         i = lpdat(issys)%lij
         ix = ixjff
         do m = 1,lpdat(issys)%lijn
           if (iand(jcex(i),ishft(1,20)).ne.0)
     &     write (output,2004) junno(i),ll,ij1vn(i),scv2(ix),scv3(ix),
     &     scv4(ix),ij2vn(i),scv2(ix),scv5(ix),scv6(ix)
 2004  format (i10.9,i6,i13,1p,3g13.5,i13,3g13.5)
           ll = ll + 1
           ix = ix + scskp
           i = i + ijskp
         enddo
       endif
$endif
c
$if def,nanscr
c  Nan out conmf,conmg,cond,conm,scv1,scv2,scv3,scv4,scv5,scv6
       call nanscj(3,12)
$endif
c
c  Zero out fluid temperature changes for time dependent volumes.
       if (lvtvol(lpdat(issys)%llvect) .ne. 0) then
         i1 = lvtvol(lpdat(issys)%llvect)
         do m = 1,lvptr(i1)
           i1 = i1 + 1
           i = lvptr(i1)
           ix = vctrls(i)
           hydltf(ix) = 0.0
           hydltg(ix) = 0.0
           hydltt(ix) = 0.0
           hydltp(ix) = 0.0
         enddo
       endif
c
c  Loop over all volumes, compute volume quantities, check limits,
c  and truncate.
c  Second, solve a*x = b using factors of matrix a.
c  Initially, solve l*y = b.
       nh1 = ihld2(ixvff)
       if (nh1 .ne. 0) then
         rdt = 1.0/dt
         ih1 = ixvff
         do m = 1,nh1
           i = ihld1(ih1)
           ix = vctrls(i)
           ir = vctrln(i)
           b1(ix) = sourca(ix)*recipv(i) - a15(ix)*b5(ix)
           b2(ix) = sourcg(ix)*recipv(i) - a25(ix)*b5(ix)
           b3(ix) = sourcf(ix)*recipv(i) - a35(ix)*b5(ix)
           b4(ix) = sourcm(ix)*recipv(i) - a45(ix)*b5(ix)
c 
c  Modify coefficients to account for linearization around point
c  other than beginning of advancement values for air appearance.
           if (iand(imap(i),64).ne.0) then
             b1(ix) = b1(ix) + v(i)*
     &       ((hyarg(i)*qualao(i) - voidg(i)*rhog(i)*quala(i)))*
     &       recipv(i)
             b2(ix) = b2(ix) + v(i)*
     &       ((hyarug(i) - voidg(i)*rhog(i)*ug(i)))*recipv(i)
             b3(ix) = b3(ix) + v(i)*
     &       ((hyaruf(i) - voidf(i)*rhof(i)*uf(i)))*recipv(i)
             b4(ix) = b4(ix) + v(i)*
     &       ((hyarg(i) - hyarf(i) - (voidg(i)*rhog(i) - voidf(i)*
     &       rhof(i))))*recipv(i)
           endif
           b2(ix) = b2(ix) + a21(ix)*b1(ix)
           b3(ix) = b3(ix) + a32(ix)*b2(ix) + a31(ix)*b1(ix)
           b4(ix) = b4(ix) + a43(ix)*b3(ix) + a42(ix)*b2(ix) +
     &     a41(ix)*b1(ix)
c  Then, solve u*x = y.
           b4(ix) = b4(ix)*a44(ix)
           b3(ix) = (b3(ix) - a34(ix)*b4(ix))*a33(ix)
           b2(ix) = (b2(ix) - a23(ix)*b3(ix) - a24(ix)*b4(ix))*a22(ix)
           b1(ix) = (b1(ix) - a12(ix)*b2(ix) - a14(ix)*b4(ix))*a11(ix)
c  Compute new time variables.
           quala(i) = quala(i) + b1(ix)
           ug(i) = ug(i) + b2(ix)
           uf(i) = uf(i) + b3(ix)
           voidg(i) = voidg(i) + b4(ix)
c  Calculate rhom and vapgen.
           vol(ir)%rhomo = rhom(i)
           rhom(i) = hyarg(i) + hyarf(i) + recipv(i)*sorp(ix)
c-wdgb
           if (chngno(74)) then
             highdt(ix) = gg(ix) + gxa(ix)*b1(ix) + gug(ix)*b2(ix) +
     &       guf(ix)*b3(ix) + gal(ix)*b4(ix) + gp(ix)*b5(ix)
           else
             highdt(ix) = gg(ix) + gxa(ix)*b1(ix) + gug(ix)*b2(ix) +
     &       gal(ix)*b4(ix) + gp(ix)*b5(ix)
           endif
c-wdge
           hifhdt(ix) = ff(ix) + fxa(ix)*b1(ix) + fug(ix)*b2(ix) +
     &     fuf(ix)*b3(ix) + fal(ix)*b4(ix) + fp(ix)*b5(ix)
           hydltf(ix) = dtfduf(i)*b3(ix) + dtfdp(i)*b5(ix)
           hydltg(ix) = dtgdug(i)*b2(ix) + dtgdp(i)*b5(ix) +
     &     dtgdxa(i)*b1(ix)
           hydltt(ix) = dttdp(i)*b5(ix)
           hydltp(ix) = dtdug(i)*b2(ix) + dtdp(i)*b5(ix) +
     &     dtdxa(i)*b1(ix)
           vol(ir)%hyrhof = rhof(i) + drfdp(i)*b5(ix) +
     &     drfduf(i)*b3(ix)
           vol(ir)%hyrhog = rhog(i) + drgdp(i)*b5(ix) +
     &     drgdug(i)*b3(ix) + drgdxa(i)*b1(ix)
           ufnc(ix) = htgwff(ix)*hydltf(ix) + htgwfg(ix)*hydltg(ix) +
     &     htgwft(ix)*hydltt(ix) + htgwfp(ix)*hydltp(ix)
           ugnc(ix) = htgcgf(ix)*hydltf(ix) + htgcgg(ix)*hydltg(ix) +
     &     htgcgt(ix)*hydltt(ix) + htgcgp(ix)*hydltp(ix)
           dotm(i) = (-highdt(ix) - hifhdt(ix))*rdt
c-wdgb
            if (chngno(74)) then
           wtf1=tempf(i)+dtfduf(i)*(uf(i)-ufo(i))
     &                  +dtfdp(i)*(p(i)-po(i))
           wtg1=tempg(i)+dtgdug(i)*(ug(i)-ugo(i))
     &                  +dtgdp(i)*(p(i)-po(i))
     &                  +dtgdxa(i)*(quala(i)-qualao(i))
           wti1=ttempi(i)+dtidug(i)*(ug(i)-ugo(i))
     &                  +dtiduf(i)*(uf(i)-ufo(i))
     &                  +dtidp(i)*(p(i)-po(i))
     &                  +dtidxn(i)*(quala(i)-qualao(i))
           wtf=tempf(i)+dtfduf(i)*b3(ix)
     &                  +dtfdp(i)*b5(ix)
           wtg=tempg(i)+dtgdug(i)*b2(ix)
     &                  +dtgdp(i)*b5(ix)
     &                  +dtgdxa(i)*b1(ix)
           wti=ttempi(i)+dtidug(i)*b2(ix)
     &                  +dtiduf(i)*b3(ix)
     &                  +dtidp(i)*b5(ix)
     &                  +dtidxn(i)*b1(ix)
cwdg          extv01(i) = max((sathgx(ix) - sathfx(ix)),1.0e-4)
            endif
c-wdge
           gammaw(i) = gammsw(ix) + ufnc(ix)*rdt
           gammac(i) = gammsc(ix) + ugnc(ix)*rdt - fgrw(ix)*b4(ix)*rdt
           vapgen(i) = dotm(i) + gammaw(i) + gammac(i)
           ltest(ix) = voidgo(i).ne.0.0 .and. voidgo(i).ne.1.0
           if (voidg(i) .lt. 1.0e-3) ltest(ix) = ltest(ix)
     &     .and. voidg(i).ge.voidgo(i)
           if (voidg(i) .gt. 0.999) ltest(ix) = ltest(ix)
     &     .and. voidg(i).lt.voidgo(i)
           ltest(ix) = ltest(ix) .or. (pps(i).gt.pcrit
     &     .and. ppso(i).gt.pcrit)
c
c  Force thru conservative step if air appearance.
           ltest(ix) = ltest(ix) .or. (iand(imap(i),64).ne.0
     &     .and. sourca(ix).gt.0.0 .and. voidgo(i).ne.0.0)
           ih1 = ih1 + scskp
         enddo
c  Recalculate new time values using conservative formulation.
         nh2 = 0
         ih1 = ixvff
         ih2 = ixvff
         do m = 1,nh1
           i = ihld1(ih1)
           ix = vctrls(i)
           if (ltest(ix)) then
             ihld2(ih2) = i
             ih2 = ih2 + scskp
             nh2 = nh2 + 1
           endif
           ih1 = ih1 + scskp
         enddo
         if (nh2 .ne. 0) then
           ih2 = ixvff
           do m = 1,nh2
             i = ihld2(ih2)
             ix = vctrls(i)
             sorcm = sourcm(ix) + v(i)*2.0*(gg(ix) + ff(ix) -
     &       (gammsw(ix) + gammsc(ix))*dt)
             conmgv = (sorp(ix) + sorcm)*0.5
             conmfv = (sorp(ix) - sorcm)*0.5
             sorcm = vapgen(i)*dt
             agrg(ix) = (hyarg(i)*vo(i) + conmgv)*recipv(i) + sorcm
             afrf(ix) = (hyarf(i)*vo(i) + conmfv)*recipv(i) - sorcm
             sourci(ix) = a1(ix)*b1(ix) + a2(ix)*b2(ix) + a3(ix)*b3(ix)
     &       + (a4(ix) + po(i))*b4(ix) + a5(ix)*b5(ix) -
     &       ugnc(ix)*sathf(i) - ufnc(ix)*sathg(i)
             dalj = htcff(ix)*hydltf(ix) + htcfg(ix)*hydltg(ix) +
     &       htcft(ix)*hydltt(ix) + htcfp(ix)*hydltp(ix)
             damx = htcgf(ix)*hydltf(ix) + htcgg(ix)*hydltg(ix) +
     &       htcgt(ix)*hydltt(ix) + htcgp(ix)*hydltp(ix)
             agug(ix) = (hyarug(i)*vo(i) + sourcg(ix))*recipv(i)
     &       - sourci(ix) + damx
             afuf(ix) = (hyaruf(i)*vo(i) + sourcf(ix))*recipv(i)
     &       + sourci(ix) + dalj
             ugnc(ix) = ug(i)
             ufnc(ix) = uf(i)
             xncn(ix) = quala(i)
             if (pps(i).gt.pcrit .and. ppso(i).gt.pcrit) then
               ug(i) = (agug(ix) + afuf(ix))/(agrg(ix) + afrf(ix))
               uf(i) = ug(i)
             else
               if (agrg(ix) .ne. 0.0) ug(i) = agug(ix)/agrg(ix)
               if (afrf(ix) .ne. 0.0) uf(i) = afuf(ix)/afrf(ix)
             endif
             ltest(ix) = (((qualao(i).ne.0.0 .and. qualao(i).ne.1.0)
     &       .or.(iand(imap(i),64).ne.0 .and. agrg(ix).gt.0.0 ))
     &       .or. (quala(i).le.0.0 .or. quala(i).ge.1.0)) .and.
     &       (pps(i).le.pcrit .or. ppso(i).le.pcrit)
             b1(ix) = max(0.0,voidg(i))*(1.0 - fracal(ix))
             b2(ix) = 0.05*voidgo(i)
             ltest2(ix) = b1(ix) .lt. b2(ix)
             b3(ix) = max(0.0,1.0 - voidg(i))*(1.0 - fracag(ix))
             b4(ix) = 0.05*(1.0 - voidgo(i))
             ltest3(ix) = b3(ix) .lt. b4(ix)
             ih2 = ih2 + scskp
           enddo
           ih2 = ixvff
           do m = 1,nh2
             i = ihld2(ih2)
             ix = vctrls(i)
             if (ltest(ix)) then
               quala(i) = (hyarg(i)*qualao(i)*vo(i) + sourca(ix))*
     &         recipv(i)/agrg(ix)
             endif
             ih2 = ih2 + scskp
           enddo
           ih2 = ixvff
           do m = 1,nh2
             i = ihld2(ih2)
             ix = vctrls(i)
             if (ltest2(ix)) then
               ug(i) = (ug(i)*b1(ix) + ugnc(ix)*(b2(ix) - b1(ix)))/
     &         b2(ix)
               quala(i) = (quala(i)*b1(ix) + xncn(ix)*(b2(ix) -
     &         b1(ix)))/b2(ix)
             endif
             ih2 = ih2 + scskp
           enddo
           nh3 = 0
           ih2 = ixvff
           ih3 = ixvff
           do m = 1,nh2
             i = ihld2(ih2)
             ix = vctrls(i)
             if (ltest3(ix)) then
               ihld3(ih3) = i
               ih3 = ih3 + scskp
               nh3 = nh3 + 1
             endif
             ih2 = ih2 + scskp
           enddo
           if (nh3 .ne. 0) then
             ih3 = ixvff
             do m = 1,nh3
               i = ihld3(ih3)
               ix = vctrls(i)
               uf(i) = (uf(i)*b3(ix) + ufnc(ix)*(b4(ix) - b3(ix)))/
     &         b4(ix)
               ih3 = ih3 + scskp
             enddo
           endif
           ih2 = ixvff
           do m = 1,nh2
             i = ihld2(ih2)
             ix = vctrls(i)
             voidg(i) = 1.0 - afrf(ix)/(rhof(i) + drfdp(i)*b5(ix) +
     &       drfduf(i)*(uf(i) - ufo(i)))
             ih2 = ih2 + scskp
           enddo
         endif
c  Check for voidg, quala, and rhom limits. Check for voidg and voidf
c  appearance.
         nh2 = 0
         nh3 = 0
         ih1 = ixvff
         ih2 = ixvff
         ih3 = ixvff
         do m = 1,nh1
           i = ihld1(ih1)
           ix = vctrls(i)
           vctrlx(i) = iand(vctrlx(i),not(2048))
           voidgx = errhi*rhof(i)/(max(1.0e-05,(rhof(i) - rhog(i))))
           ltest(ix) = voidg(i).lt.-voidgx .or.
     &     voidg(i).gt.(1.0 + voidgx) .or. rhom(i).le.0.0
           ltest2(ix) = voidgo(i).le.0.0 .or. voidgo(i).ge.1.0
           if (ltest(ix)) then
             ihld2(ih2) = i
             ih2 = ih2 + scskp
             nh2 = nh2 + 1
           else if (ltest2(ix)) then
             ihld3(ih3) = i
             ih3 = ih3 + scskp
             nh3 = nh3 + 1
           endif
           ih1 = ih1 + scskp
         enddo
         ih3 = ixvff
         do m = 1,nh3
           i = ihld3(ih3)
           ix = vctrls(i)
           conbor = 0.02/dl(i)
           ltest2(ix) = voidg(i).ge.conbor .and. voidg(i).le.(1.0 -
     &     conbor)
           if (ltest2(ix)) then
             ihld2(ih2) = i
             ih2 = ih2 + scskp
             nh2 = nh2 + 1
           endif
           ih3 = ih3 + scskp
         enddo
         if (nh2 .ne. 0) then
           lpdat(issys)%lsuces = 1
           ih2 = ixvff
           do m = 1,nh2
             i = ihld2(ih2)
             vctrl(i) = ior(vctrl(i),2048)
             ih2 = ih2 + scskp
           enddo
         endif
         ih1 = ixvff
c  Truncate voidg.
c  The following line can be removed if chngno(8) and chngno(10) are
c  removed.
         ltst = .false.
         lptst = .false.
         do m = 1,nh1
           i = ihld1(ih1)
           ix = vctrls(i)
           ir = vctrln(i)
           voidaa(ix) = voidg(i)
           voidg(i) = max(0.0,min(voidg(i),1.0))
           if (voidg(i).lt.1.0e-9 .or. (voidg(i).lt.1.0e-7 .and.
     &     hifhdt(ix).ge.0.0)) voidg(i) = 0.0
           if (chngno(54)) then
c  Change limits to equivalent quality limits instead of void limits
             denrat = rhog(i)/rhof(i)
             if (voidg(i).gt.(1.0 - 1.0e-9*denrat) .or.
     &       (voidg(i).gt.(1.0 - 1.0e-7*denrat) .and.
     &       highdt(ix).le.0.0)) voidg(i) = 1.0
           else
c  Original coding
             if (voidg(i).gt.0.99999999 .or. (voidg(i).gt.0.999999 .and.
     &       highdt(ix).le.0.0)) voidg(i) = 1.0
           endif
           if (abs(voidg(i) - voidaa(ix)) .gt. 1.0e-10) then
             vctrlx(i) = ior(vctrlx(i),2048)
             tarf = (1.0 - voidaa(ix))*vol(ir)%hyrhof
             targ = voidaa(ix)*vol(ir)%hyrhog
             denrat = (tarf*uf(i) + targ*ug(i))/(tarf + targ)
             if (voidg(i) .eq. 0.0) then
               uf(i) = denrat
             else
               ug(i) = denrat
             endif
           endif
c  The following two lines can be removed if chngno(8) is removed.
           ltst = (voidgo(i).gt.0.01 .and. voidg(i).lt.0.001) .or. ltst
c  The following two lines can be removed if chngno(10) is removed.
           if (chngno(10)) ltst = (abs(po(i) - p(i)) .gt.
     &     min(po(i),p(i),50000.0)) .or. ltst
c
c  Control time step size on air appearance using pressure change.
           if (iand(imap(i),64).ne.0) then
             lptst = (abs(po(i)-p(i)).gt.min(po(i),p(i),50000.0)) .or.
     &       lptst
             if (lptst) vctrlx(i) = ior(vctrlx(i),ishft(1,2))
           endif
c  Truncate quala and adjust vapgen. Truncate boron and vapgen.
           delxa(ix) = quala(i)
           if (voidg(i).eq.0.0 .or. quala(i).lt.1.0e-9) quala(i) = 0.0
           quala(i) = min(1.0,max(0.0,quala(i)))
           if (voidg(i) .lt. 1.0) quala(i) = min(0.99999999,quala(i))
           delxa(ix) = quala(i) - delxa(ix)
           if (voidg(i) .eq. 0.0 .or. voidg(i) .eq. 1.0) then
             dotm(i) = 0.0
             vapgen(i) = 0.0
           endif
           vol(ir)%hyrho = (1.0 - voidg(i))*vol(ir)%hyrhof +
     &     voidg(i)*vol(ir)%hyrhog
           boron(i) = max(boron(i),0.0)
           ih1 = ih1 + scskp
         enddo
         if (lptst) lpdat(issys)%lsuces = 1
         if (chngno(8)) then
           if (ltst) lpdat(issys)%lsuces = 1
           damx = 0.0
           ih1 = ixvff
           do m = 1,nh1
             i = ihld1(ih1)
             if (voidg(i) .gt. 0.010) then
               dalj = (voidgo(i) - voidg(i))/voidg(i)
               if (voidg(i) .lt. 0.10) dalj = 2.5*dalj
               damx = max(damx,dalj,0.0)
             endif
             ih1 = ih1 + scskp
           enddo
           if (damx .gt. 0.5) lpdat(issys)%lsuces = 1
         endif
         if (lpdat(issys)%lnoncn .ne. 0) then
c
c  Check for non-condensible appearance.
c  Determine if this is a repeat for air appearance in at least one
c  volume in this system.
           ih1 = ixvff
           lairap = .false.
           do m = 1,nh1
             i = ihld1(ih1)
             lairap = lairap .or. iand(imap(i),64).ne.0
             ih1 = ih1 + scskp
           enddo
           ih1 = ixvff
           do m = 1,nh1
             i = ihld1(ih1)
             ix = vctrls(i)
c            if ((qualao(i).eq.0.0 .and. quala(i).ne.0.0) .or. lairap)
c    &       then
             if ((voidgo(i).ne.0.0 .and. qualao(i).eq.0.0 .and.
     &       quala(i).ne.0.0) .or. lairap) then
               if (.not.lairap) then
                 imap(i) = ior(imap(i),64)
                 lpdat(issys)%lsuces = 5
               elseif (iand(imap(i),64).ne.0) then
                 if (voidg(i).le.0.0) then
                   voidam = max(1.0e-9,5.0e-08*(1.0 +
     &             sign(1.0,hifhdt(ix))))
                   if (sourca(ix).gt.0.0) then
                     if (voidaa(ix).gt.0.0) then
                       if (srcamn(i).gt.0.0) then
                         srcamn(i) = min(5.0*srcamn(i),sourca(ix) *
     &                   voidam/(dt*max(1.e-10,voidaa(ix))))
                       else
                         srcamn(i) = sourca(ix)*voidam/
     &                   (dt*max(1.e-10,voidaa(ix)))
                       endif
                     else
                       if (srcamn(i).gt.0.0) then
                         srcamn(i) = min(5.0*srcamn(i),sourca(ix)*
     &                   (voidam - voidaa(ix))/(dt*
     &                   max(1.0e-10,abs(voidaa(ix)))))
                       else
                         srcamn(i) = sourca(ix)*(voidam - voidaa(ix))/
     &                   (dt*max(1.0e-10,abs(voidaa(ix))))
                       endif
                     endif
                   endif
                 elseif (quala(i).lt.1.e-9) then
c  New new air source term.
                   srcamn(i) = 1.0e-9*voidg(i)*rhogo(i)*vo(i)*rdt
c  Zero air source term.
                 else
                   srcamn(i) = 0.0
                 endif
                 vctrlx(i) = ior(vctrlx(i),2)
                 imap(i) = iand(imap(i),not(64))
               endif
             endif
             ih1 = ih1 + scskp
           enddo
           do i1= 1,lpdat(issys)%lnoncn
             ih1 = ixvff
             do m = 1,nh1
               i = ihld1(ih1)
               qualan(i+i1-1) = 0.0
               ih1 = ih1 + scskp
             enddo
           enddo
           nh2 = 0
           ih1 = ixvff
           ih2 = ixvff
           do m = 1,nh1
             i = ihld1(ih1)
             if (quala(i) .ge. 1.0e-20) then
               ihld2(ih2) = i
               ih2 = ih2 + scskp
               nh2 = nh2 + 1
             endif
             ih1 = ih1 + scskp
           enddo
           if (nh2 .ne. 0) then
             ih2 = ixvff
             do m = 1,nh2
               i = ihld2(ih2)
               ix = vctrls(i)
               b1(ix) = 0.0
               b2(ix) = voidgo(i)*qualao(i)*rhogo(i)*vo(i)
               b3(ix) = recipv(i)/(voidg(i)*quala(i)*rhog(i))
               ih2 = ih2 + scskp
             enddo
             do i1 = 1,lpdat(issys)%lnoncn
               ih2 = ixvff
               do m = 1,nh2
                 i = ihld2(ih2)
                 ix = vctrls(i)
                 k = i + i1
                 il = ix + i1
                 tempq = b2(ix)*qualno(k-1)
                 qualan(k-1) = (tempq + sourcn(il-1))*b3(ix)
                 qualan(k-1) = max(0.0,min(qualan(k-1),1.0))
                 if (qualan(k-1).lt.1.e-10) qualan(k-1) = 0.0
                 b1(ix) = b1(ix) + qualan(k-1)
                 ih2 = ih2 + scskp
               enddo
             enddo
             nh3 = 0
             ih2 = ixvff
             ih3 = ixvff
             do m = 1,nh2
               i = ihld2(ih2)
               ix = vctrls(i)
               if (b1(ix) .gt. 0.0) then
                 ihld3(ih3) = i
                 ih3 = ih3 + scskp
                 nh3 = nh3 + 1
               else
                 quala(i) = 0.0
               endif
               ih2 = ih2 + scskp
             enddo
             if (nh3 .ne. 0) then
               ih3 = ixvff
               do m = 1,nh3
                 i = ihld3(ih3)
                 ix = vctrls(i)
                 b1(ix) = 1.0/b1(ix)
                 ih3 = ih3 + scskp
               enddo
               do i1 = 1,lpdat(issys)%lnoncn
                 ih3 = ixvff
                 do m = 1,nh3
                   i = ihld3(ih3)
                   ix = vctrls(i)
                   qualan(i+i1-1) = qualan(i+i1-1)*b1(ix)
                   ih3 = ih3 + scskp
                 enddo
               enddo
             endif
           endif
         endif
       endif
$if def,msdbug
c  Record mass error debug information.
c  Store access information if not already done.
       if (.not.msfind) then
         if (.not.msfindo) then
           msfindo = .true.
           volnom(1) = 230010000
           volidxm = 0
           do idbx = 1,msdbvols
             ms(idbx)%drfdp = 1.0e20
             ms(idbx)%drfduf = 1.0e20
             ms(idbx)%drgdp = 1.0e20
             ms(idbx)%drgdug = 1.0e20
             ms(idbx)%dtdp = 1.0e20
             ms(idbx)%dtdug = 1.0e20
             ms(idbx)%dtdxa = 1.0e20
             ms(idbx)%dtfdp = 1.0e20
             ms(idbx)%dtfduf = 1.0e20
             ms(idbx)%dtgdp = 1.0e20
             ms(idbx)%dtgdug = 1.0e20
             ms(idbx)%dtgdxa = 1.0e20
             ms(idbx)%dttdp = 1.0e20
             ms(idbx)%p = 1.0e20
             ms(idbx)%pps = 1.0e20
             ms(idbx)%quala = 1.0e20
             ms(idbx)%rho = 1.0e20
             ms(idbx)%rhom = 1.0e20
             ms(idbx)%rhof = 1.0e20
             ms(idbx)%rhog = 1.0e20
             ms(idbx)%tempf = 1.0e20
             ms(idbx)%tempg = 1.0e20
             ms(idbx)%tsat = 1.0e20
             ms(idbx)%tsatt = 1.0e20
             ms(idbx)%uf = 1.0e20
             ms(idbx)%ug = 1.0e20
             ms(idbx)%voidf = 1.0e20
             ms(idbx)%voidg = 1.0e20
           enddo
         endif
         do idbx = 1,msdbvols
           if (volidxm(idbx) .eq. 0) then
             i = lpdat(issys)%liv
             do m = 1,lpdat(issys)%livn
               if (volno(i) .eq. volnom(idbx)) then
                 volsysm(idbx) = issys
                 volidxm(idbx) = i
                 exit
               endif
               i = i + ivskp
             enddo
           endif
         enddo
         msfind = all(volidxm .ne. 0)
       endif
c  Store data available at this point, printing some information if time
c  step is to be repeated.
       do idbx = 1,msdbvols
         if (volidxm(idbx) .eq. 0) cycle
         if (volsysm(idbx) .eq. issys) then
           i = volidxm(idbx)
           ix = vctrls(i)
           ir = vctrln(i)
           ms(idbx)%drfdp(0) = drfdp(i)
           ms(idbx)%drfduf(0) = drfduf(i)
           ms(idbx)%drgdp(0) = drgdp(i)
           ms(idbx)%drgdug(0) = drgdug(i)
           ms(idbx)%dtdp(0) = dtdp(i)
           ms(idbx)%dtdug(0) = dtdug(i)
           ms(idbx)%dtdxa(0) = dtdxa(i)
           ms(idbx)%dtfdp(0) = dtfdp(i)
           ms(idbx)%dtfduf(0) = dtfduf(i)
           ms(idbx)%dtgdp(0) = dtgdp(i)
           ms(idbx)%dtgdug(0) = dtgdug(i)
           ms(idbx)%dtgdxa(0) = dtgdxa(i)
           ms(idbx)%dttdp(0) = dttdp(i)
           ms(idbx)%p(0) = po(i)
           ms(idbx)%p(1) = p(i)
           ms(idbx)%pps(0) = ppso(i)
           ms(idbx)%pps(1) = pps(i)
           ms(idbx)%quala(0) = qualao(i)
           ms(idbx)%quala(1) = quala(i)
           ms(idbx)%rho(0) = rhoo(i)
           ms(idbx)%rhof(0) = rhofo(i)
           ms(idbx)%rhof(1) = vol(ir)%hyrhof
           ms(idbx)%rhog(0) = rhogo(i)
           ms(idbx)%rhog(1) = vol(ir)%hyrhog
           ms(idbx)%rhom(0) = vol(ir)%rhomo
           ms(idbx)%rhom(1) = rhom(i)
           ms(idbx)%tempf(0) = tempf(i)
           ms(idbx)%tempf(1) = tempf(i) + hydltf(ix)
           ms(idbx)%tempg(0) = tempg(i)
           ms(idbx)%tempg(1) = tempg(i) + hydltg(ix)
           ms(idbx)%tsat(0) = satt(i)
           ms(idbx)%tsat(1) = satt(i) + hydltp(ix)
           ms(idbx)%tsatt(0) = tsatt(i)
           ms(idbx)%tsatt(1) = tsatt(i) + hydltt(ix)
           ms(idbx)%uf(0) = ufo(i)
           ms(idbx)%uf(1) = uf(i)
           ms(idbx)%ug(0) = ugo(i)
           ms(idbx)%ug(1) = ug(i)
           ms(idbx)%voidf(1) = voidf(i)
           ms(idbx)%voidg(0) = voidgo(i)
           ms(idbx)%voidg(1) = voidg(i)
$if def,dbgprnt
           if (lpdat(issys)%lsuces .ne. 0) then
             write (12,"('mserre',i8,i10/(a7,3es13.5,4x,a7,3es13.5))")
     &       ncount,volno(i),
     &       'drfdp  ',ms(idbx)%drfdp,    'drfduf ',ms(idbx)%drfduf,
     &       'drgdp  ',ms(idbx)%drgdp,    'drgdug ',ms(idbx)%drgdug,
     &       'dtdp   ',ms(idbx)%dtdp,     'dtdug  ',ms(idbx)%dtdug,
     &       'dtdxa  ',ms(idbx)%dtdxa,    'dtfdp  ',ms(idbx)%dtfdp,
     &       'dtdxa  ',ms(idbx)%dtdxa,    'dtfdp  ',ms(idbx)%dtfdp,
     &       'dtfduf ',ms(idbx)%dtfduf,   'dtgdp  ',ms(idbx)%dtgdp,
     &       'dtgdug ',ms(idbx)%dtgdug,   'dtgdxa ',ms(idbx)%dtgdxa,
     &       'dttdp  ',ms(idbx)%dttdp,    'p      ',ms(idbx)%p,
     &       'pps    ',ms(idbx)%pps,      'quala  ',ms(idbx)%quala,
     &       'rho    ',ms(idbx)%rho,      'rhom   ',ms(idbx)%rhom,
     &       'rhof   ',ms(idbx)%rhof,     'rhog   ',ms(idbx)%rhog,
     &       'tempf  ',ms(idbx)%tempf,    'tempg  ',ms(idbx)%tempg,
     &       'tsat   ',ms(idbx)%tsat,     'tsatt  ',ms(idbx)%tsatt,
     &       'uf     ',ms(idbx)%uf,       'ug     ',ms(idbx)%ug,
     &       'voidf  ',ms(idbx)%voidf,    'voidg  ',ms(idbx)%voidg
           endif
$endif
         endif
       enddo
$endif
c
c  Debug printout.
$if def,dbgprnt
       if (help.ne.0 .and. iand(ihlppr(1),64).ne.0) then
         call helphd ('eqfinl',10)
         write (output,2005)
 2005  format ('0Volume data'/1x,132('=')/1x,'volno',9x,'i',2x,
     & 'sourcf(i)',4x,'sourcm(i)',4x,'sorp(i)  ',4x,'po(i)',8x,'ugo(i)',
     & 7x,'ufo(i)',7x,'voidgo(i)',4x,'qualao(i)',4x,'rhom(i)'/18x,
     & 'sourcg(i)',4x,'sourca(i)',4x,'delxa(i)',5x,'p(i)',9x,'ug(i)',8x,
     & 'uf(i)',8x,'voidg(i)',5x,'quala(i)',5x,'vapgen(i)'/1x,132('='))
         ix = ixvff
         ll = 1
         i = lpdat(issys)%liv
         do m = 1,lpdat(issys)%livn
           if (iand(vctrlx(i),1).ne.0)
     &     write (output,2006) volno(i),ll,sourcf(ix),sourcm(ix),
     &     sorp(ix),po(i),ugo(i),ufo(i),voidgo(i),qualao(i),rhom(i),
     &     sourcg(ix),sourca(ix),delxa(ix),p(i),ug(i),uf(i),voidg(i),
     &     quala(i),vapgen(i)
 2006  format(i10.9,i6,1p,9g13.5/16x,9g13.5)
           ix = ix + scskp
           ll = ll + 1
           i = i + ivskp
         enddo
         if (lpdat(issys)%lnoncn .ne. 0) then
           write (output,2007)
 2007  format('0noncondensibles'/1x,132('=')/1x,'volno',9x,'i',2x,
     & 'sourcn(1)',4x,'sourcn(3)',4x,'sourcn(5)',4x,'qualno(1)',4x,
     & 'qualno(2)',4x,'qualno(3)',4x,'qualno(4)',4x,'qualno(5)'/18x,
     & 'sourcn(2)',4x,'sourcn(4)',17x,'qualan(1)',4x,'qualan(2)',4x,
     & 'qualan(3)',4x,'qualan(4)',4x,'qualan(5)'/1x,132('='))
           ix = ixvff
           ll = 1
           i = lpdat(issys)%liv
           do m = 1,lpdat(issys)%livn
             if (iand(vctrlx(i),1).ne.0)
     &       write (output,2008) volno(i),ll,sourcn(ix),sourcn(ix+2),
     &       sourcn(ix+4),qualno(i),qualno(i+1),qualno(i+2),qualno(i+3),
     &       qualno(i+4),sourcn(ix+1),sourcn(ix+3),qualan(i),
     &       qualan(i+1),qualan(i+2),qualan(i+3),qualan(i+4)
 2008  format(i10.9,i6,1p,8g13.5/16x,2g13.5,13x,5g13.5)
             ix = ix + scskp
             ll = ll + 1
             i = i + ivskp
           enddo
         endif
       endif
$endif
       return
       end
