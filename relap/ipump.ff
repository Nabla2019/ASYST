*mlist
       subroutine ipump
c
c
c  Resolves table pointers and computes frictional torque if requested
c  in pump input.
c
c  Cognizant engineer: rjw.
c
       implicit none
       include 'fast.h'
       include 'cmpdat.h'
       include 'comctl.h'
       include 'contrl.h'
       include 'pumpblk.h'
       include 'ufiles.h'
       include 'voldat.h'
c
       integer i,ic,ierr,ix,iv,j,k,k2,lr,n1,n2,n3,nc,num
       real alf,ctrq,h,h2,hm,ps,ps2,s,sigrav,t,t2,tm,wflow
       logical frst,last,unres,onres
       character labl(2)*10
c
c  Data statements.
       data labl/' (N-m).',' (lbf-ft).'/
       data ctrq/1.355817948/
       data sigrav/4.903325/
c
c  Resolve pump table referrals.
       ic = filndx(3)
       nc = ncmps(ic)
       frst = .true.
       last = .false.
   10  unres = .false.
       onres = .false.
       i = ic
       do 11 k = 1,nc
         if (cmptyp(i) .ne. 4) go to 90
         num = cmpnum(i)
         n1 = 0
         n2 = 0
         n3 = 0
c  Check if single phase homologous curve referral.
         if (iand(cmpopt(i),64) .eq. 0) go to 13
         if (frst) cmpopt(i) = iand(cmpopt(i),not(128))
         if (iand(cmpopt(i),128) .ne. 0) go to 13
         lr = iputdi(i)
         j = ic
         do 14 k2 = 1,nc
         if (cmpnum(j) .eq. lr) go to 16
         j = j + cmplen(j)
   14    continue
         unres = .true.
         n1 = 1
         go to 13
   16    if (cmptyp(j) .eq. 4) go to 18
         unres = .true.
         n2 = 1
         go to 13
   18    if ((iputdi(j).ne.0 .and. iand(cmpopt(j),64).eq.0) .or.
     &   iand(cmpopt(j),128).ne.0) go to 19
         unres = .true.
         n3 = 1
         go to 13
   19    cmpopt(i) = ior(cmpopt(i),128)
         iputdi(i+1) = iputdi(j+1)
         iputdi(i+2) = iputdi(j+2)
         onres = .true.
c  Check if head and torque multipliers referral.
   13    if (iand(cmpopt(i),256) .eq. 0) go to 23
         if (frst) cmpopt(i) = iand(cmpopt(i),not(512))
         if (iand(cmpopt(i),512) .ne. 0) go to 23
         lr = ipuhmi(i)
         j = ic
         do 24 k2 = 1,nc
         if (cmpnum(j) .eq. lr) go to 26
         j = j + cmplen(j)
   24    continue
         unres = .true.
         n1 = 1
         go to 23
   26    if (cmptyp(j) .eq. 4) go to 28
         unres = .true.
         n2 = 1
         go to 23
   28    if ((ipuhmi(j).ne.0 .and. iand(cmpopt(j),256).eq.0) .or.
     &   iand(cmpopt(j),512).ne.0) go to 29
         unres = .true.
         n3 = 1
         go to 23
   29    cmpopt(i) = ior(cmpopt(i),512)
         ipuhmi(i+1) = ipuhmi(j+1)
         iputmi(i+1) = iputmi(j+1)
         onres = .true.
c  Check if two phase homologous table referral.
   23    if (iand(cmpopt(i),1024) .eq. 0) go to 33
         if (frst) cmpopt(i) = iand(cmpopt(i),not(2048))
         if (iand(cmpopt(i),2048) .ne. 0) go to 33
         lr = ipu2di(i)
         j = ic
         do 34 k2 = 1,nc
         if (cmpnum(j) .eq. lr) go to 36
           j = j + cmplen(j)
   34    continue
         unres = .true.
         n1 = 1
         go to 33
   36    if (cmptyp(j) .eq. 4) go to 38
         unres = .true.
         n2 = 1
         go to 33
   38    if ((ipu2di(j).ne.0 .and. iand(cmpopt(j),1024).eq.0) .or.
     &   iand(cmpopt(j),2048).ne.0) go to 39
         unres = .true.
         n3 = 1
         go to 33
   39    cmpopt(i) = ior(cmpopt(i),2048)
         ipu2di(i+1) = ipu2di(j+1)
         ipu2di(i+2) = ipu2di(j+2)
         onres = .true.
c  Check if pump motor torque table  referral.
   33    if (iand(cmpopt(i),4096) .eq. 0) go to 43
         if (frst) cmpopt(i) = iand(cmpopt(i),not(8192))
         if (iand(cmpopt(i),8192) .ne. 0) go to 43
         lr = ipumtk(i)
         j = ic
         do 44 k2 = 1,nc
         if (cmpnum(j) .eq. lr) go to 46
           j = j + cmplen(j)
   44    continue
         unres = .true.
         n1 = 1
         go to 43
   46    if (cmptyp(j) .eq. 4) go to 48
         unres = .true.
         n2 = 1
         go to 43
   48    if ((ipumtk(j).ne.0 .and. iand(cmpopt(j),4096).eq.0) .or.
     &   iand(cmpopt(j),8192).ne.0) go to 49
         unres = .true.
         n3 = 1
         go to 53
   49    cmpopt(i) = ior(cmpopt(i),8192)
         ipumtk(i+1) = ipumtk(j+1)
         onres = .true.
c  Check if pump speed table  referral.
   43  if (iand(cmpopt(i),16384) .eq. 0) go to 53
         if (frst) cmpopt(i) = iand(cmpopt(i),not(32768))
         if (iand(cmpopt(i),32768) .ne. 0) go to 53
         lr = ipuspi(i)
         j = ic
         do 54 k2 = 1,nc
         if (cmpnum(j) .eq. lr) go to 56
           j = j + cmplen(j)
   54    continue
         unres = .true.
         n1 = 1
         go to 53
   56    if (cmptyp(j) .eq. 4) go to 58
         unres = .true.
         n2 = 1
         go to 53
   58    if ((ipuspi(j).ne.0 .and. iand(cmpopt(j),16384).eq.0) .or.
     &   iand(cmpopt(j),32768).ne.0) go to 59
         unres = .true.
         n3 = 1
         go to 53
   59    cmpopt(i) = ior(cmpopt(i),32768)
         ipuspi(i+1) = ipuspi(j+1)
         onres = .true.
   53    if (.not.last) go to 90
         if (n1 .ne. 0) write (output,2002) num
 2002  format ('0******** A pump table referral in component,',i4,' refe
     &rs to a nonexistent component.')
         if (n2 .ne. 0) write (output,2003) num
 2003  format ('0******** A pump table referral in component,',i4,' refe
     &rs to a nonpump component.')
         if (n3 .ne. 0) write (output,2004) num
 2004  format ('0******** A pump table referral in component,',i4,' refe
     &rs to itself, is in a referral loop, or refers to a'/10x,
     & 'component not having the table or having an erroneous table.')
   90    i = i + cmplen(i)
   11  continue
c
       frst = .false.
       if (.not.unres) go to 100
       if (onres) go to 10
       if (last) go to 91
       last = .true.
       go to 10
   91  fail = .true.
c  Compute initial torque and head for pumps.
c  Also set rated pump density if default value requested.
  100  i = ic
       do 220 k = 1,nc
       if (cmptyp(i) .ne. 4) go to 200
         if (iputdi(i+1) .eq. 0) go to 200
       iv = nvco(i) + filndx(4)
       vctrl(iv) = ior(vctrl(iv),64)
       if (iand(vctrl(iv),8) .eq. 0) go to 200
       if (pmprho(i) .eq. 0.0) pmprho(i) = rho(iv)
       wflow = (voidf(iv)*rhof(iv)*velf(iv) +
     & voidg(iv)*rhog(iv)*velg(iv))*avol(iv)/rho(iv)
         call pump2 (wflow,h,t,ps,i,ierr,1)
       if (ierr .ne. 0) go to 200
         if (ipuhmi(i) .eq. 0) go to 205
         alf = voidg(iv)
         ix = ipuhmi(i+1) + filndx(3)
         call polat (pmptbl(ix),pmptbl(ix+3),alf,hm,ierr)
         ix = iputmi(i+1) + filndx(3)
         call polat (pmptbl(ix),pmptbl(ix+3),alf,tm,ierr)
         if ((hm.eq.0.0 .and. tm.eq.0.0) .or. iputdi(i+1).eq.0)
     &   go to 205
         call pump2 (wflow,h2,t2,ps2,i,ierr,2)
       if (ierr .ne. 0) go to 200
       h = h - hm * h2
       t = t - tm * t2
  205  pmpttk(i) = -t*rho(iv)/pmprho(i)
       pmpthd(i) = 2.0*h*rho(iv)*sigrav
       s = abs(pmpold(i)/pmprsp(i))
       pmpttk(i) = pmpttk(i) - sign(((pmptf4(i)*s + pmptf3(i))*s +
     & pmptf2(i))*s + pmptf1(i),pmpold(i))
       s = -pmpttk(i)
       pmpmt(i) = s
       if (ipumtk(i) .eq. 0) pmpmt(i) = 0.0
       ix = 1
       if (unito) go to 210
       ix = 2
       s = s/ctrq
  210  if( iand(ihlppr(2),ishft(1,22)).ne.0 )
     & write (output,2001) cmpnam(i),volno(iv),s,labl(ix)
 2001  format ('0Motor torque at initial conditions for ',a8,' pump',
     & i10.9,' is ',1p,g14.6,a)
         if (pmprmt(i).gt.0.0 .or. ipumtk(i).eq.0) go to 200
         ix = ipumtk(i+1) + filndx(3)
         call polat (pmptbl(ix),pmptbl(ix+3),pmpold(i),t,ierr)
       if (t .ne. 0.0) go to 206
       write (output,2005) volno(iv)
 2005  format ('0******** Rated motor torque for pump',i10.9,'cannot be
     &computed for the input initial conditions, user must supply quanti
     &ty.')
       fail = .true.
       go to 200
  206  pmprmt(i) = pmpmt(i)/t
       s = pmprmt(i)
       if (.not.unito) s = s/ctrq
       if( iand(ihlppr(2),ishft(1,22)).ne.0 )
     & write (output,2006) volno(iv),s,labl(ix)
 2006  format (' Rated motor torque for pump',i10.9,' computed to be',
     & 1p,g14.6,a)
  200  i = i + cmplen(i)
  220  continue
       return
       end
