       subroutine guinstruct
$if def,gui
!  Initial display for instructions on how to operate gui.
$if -def,ifortc,2
       use opengl_glut
       use opengl_gl
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
       implicit none
!
       interface
!
       subroutine displayw2
       end subroutine displayw2
!
       subroutine key2 (ky,x,y)
       character*1 ky
       integer x,y
       end subroutine key2
!
       subroutine mouse2 (button,state,x,y)
       integer button,state,x,y
       end subroutine mouse2
!
       subroutine reshapew2 (w,h)
       integer, intent(inout) :: w, h
       end subroutine reshapew2
!
       end interface
!
       call glutIdleFunc (glutNullFunc)
       call glutInitWindowPosition (100,50)
       call glutInitWindowSize (500,650)
       call glutInitDisplayMode (ior(GLUT_DOUBLE,GLUT_RGB))
       winno(2) = glutCreateWindow ('Instructions'C)
       call fglClearColor(1.0_4,1.0_4,1.0_4,1.0_4)
       call fglShadeModel (GL_FLAT)
       call glutDisplayFunc (displayw2)
       call glutReshapeFunc (reshapew2)
       call glutMouseFunc (mouse2)
       return
       end subroutine guinstruct
!
       subroutine reshapew2 (w,h)
$if -def,ifortc,2
       use opengl_glut
       use opengl_gl
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
       implicit none
       integer w,h
!
       instrw = w
       instrh = h
       call fglViewPort (0,0,w,h)
       call glutPostRedisplay
       end subroutine reshapew2
!
       subroutine displayw2
$if -def,ifortc,2
       use opengl_gl
       use opengl_glut
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
       real(kr) valy
       integer i
       integer, parameter :: numinst=39
       character*100 instructions(numinst)
       data instructions/
     & '     To terminate this instruction window, click either mouse bu
     &tton when this window is the active',
     & 'window. If this window is not the active window, click once with
     & the mouse inside this window to',
     & 'make this the active window and then click to terminate the wind
     &ow. Clicking the mouse outside of',
     & 'this window should iconify the window. It can be restored by cli
     &cking on the icon in the lower bar.',
     & 'The instruction window need not be terminated, but it should not
     & be needed after an initial reading.',
     & '     Do not right click the x box in the right corner of the tit
     &le bar in any window connected with',
     & 'Relap5-Scdap execution. This immediately terminates the program 
     &and tasks such as printing the last',
     & 'minor and major edits, writing the final restart record, and gen
     &erating plots are not done. There is',
     & 'no recovery from this.',
     & '     The operation of the gui is described in the ISS report, In
     &put Requirements Addendum.',
     & 'The early version of the gui allowed only key stroke input to co
     &ntrol it and thus reading the',
     & 'addendum was necessary. Now pop up and cascading menus are avail
     &able and access all features of',
     & 'the gui. While reading the addendum is still recommended, one ca
     &n probably learn the features of the',
     & 'gui by testing the options in the pull down menus.',
     & '     The top menu is popped up by clicking on the right mouse wh
     &ile the gui window is the active',
     & 'window. Entries with a right pointing arrow indicate a cascading
     & pop up window is available. Right',
     & 'clicking the highlighted entry selects that entry. Quantities in
     & parentheses indicate equivalent',
     & 'key strokes. Keystrokes are much faster for some operations. Som
     &e options require a temporary',
     & 'second window to complete a selection.',
     & '     Most gui operations are reversible and have no effect on th
     &e simulation. The following',
     & 'operations do have an effect and thus be careful with them. The 
     &Advancement/Quit advancements',
     & '(Q keystroke) terminates the simulation but the gui window remai
     &ns in place and keystrokes',
     & 'other than trying to advance the simulation can be used. The Exi
     &t window command (E keystroke)',
     & 'terminates the gui window and standard end of problem processing
     & proceeds. This command terminates',
     & 'the advancements if they have not already been terminated. This
     &command is necessary to complete',
     & 'a run.',
     & '     The toggle go/pause command is necessary to start the simul
     &ation.',
     & '     If the option -n guii is entered on the command line, the g
     &ui will be presented at the end of',
     & 'input processing to allow checking of input. The Exit window (E 
     &keystroke) must be entered to',
     & 'proceed to the simulation.',
     & '     For most features, the options shown in the menus are avail
     &able. For example, a Relap5',
     & 'only problem will not show Scdap options. But the logic is not c
     &omplete in all cases, and some',
     & 'illegal requests will generate more or more beeps to indicate an
     & error. The escape menu command',
     & 'or the escape key may be needed to clear the improper command.',
     & '     You are invited to comment on the menu additions to the gui
     &. This version has',
     & 'replaced the older utility that interfaced Open-GL to the native
     & window system',
     & 'with the GLUT package. This package provides the menu capability
     & but that and',
     & 'keystrokes are the only entry provisions. As an added bonus, the
     & special characters,',
     & 'such as commas, plus and minus signs, and the backspace, can be 
     &keyed in directly.'/
!
       call fglMatrixMode (GL_PROJECTION)
       call fglLoadIdentity
       call fgluOrtho2d (0.0_kr,instrw,0.0_kr,instrh)
       call fglMatrixMode (GL_MODELVIEW)
       call fglLoadIdentity
       call fglClear (GL_COLOR_BUFFER_BIT)
!
       call fglColor3f (0.0_4,0.0_4,0.0_4)
       valy = instrh - 20.0_kr
       do i = 1,numinst
         call prints (20.0_kr,valy,instructions(i),1)
         valy = valy - 15.0_kr
       enddo
       call fglFlush
       call glutSwapBuffers
       return
       end subroutine displayw2
!
       subroutine mouse2 (button,state,x,y)
       use opengl_glut
       use hynmod
       implicit none
       integer button,state,x,y
!
       call glutDestroyWindow (winno(2))
       call glutSetWindow (winno(1))
       return
       end subroutine mouse2
$endif
$if -def,gui,1
       end subroutine guinstruct
