*mlist
       subroutine polatr (itble,ftble,arg,val,slope,err)
*in32 itble
*in32end
c
c
c  Performs linear interpolation.
c
c  Cognizant engineer: rjw.
c
       implicit none
c
c  Performs linear interpolation on data in ftble using arg as search
c  arguments.  Interpolated values returned in val, slopes returned in
c  slope.
c  itble has three words:
c     itble(1) - the number of items per set.  If negative, error if
c                arg is not bounded by independent variable of ftble.
c                If positive, arg not bounded is not an error and
c                returned values are appropriate end values in ftble.
c     itble(2) - the total number of items.
c     itble(3) - the last used subscript.
c  ftble has table values.  The first word of each set in the table is
c  the search variable.
c
       integer itble(*)
       real ftble(*),arg,val(*),slope(*)
       logical err
       integer i,ie,in,ig,k,is
       real cx,sd
c
       err = .false.
       in = abs(itble(1))
       ie = itble(2)
       i = itble(3)
       if (ie .eq. in) go to 20
   10  if (arg - ftble(i)) 13,28,11
   13  if (i .eq. 1) go to 20
       i = i - in
       go to 10
   11  ig = i + in
   14  if (ig .gt. ie) go to 20
       if (ftble(ig) - arg) 17,27,12
   17  i = ig
       go to 11
   12  sd = 1.0/(ftble(ig) - ftble(i))
       cx = arg - ftble(i)
       do 15 k = 2,in
         slope(k-1) = (ftble(ig+k-1) - ftble(i+k-1))*sd
         val(k-1) = slope(k-1)*cx + ftble(i+k-1)
   15  continue
       go to 1000
   20  if (itble(1) .ge. 0) go to 25
       err = .true.
       return
   25  do 26 k = 2,in
       slope(k-1) = 0.0
       val(k-1) = ftble(i+k-1)
   26  continue
       goto 1000
   27  i = ig
   28  is = i - in
       is = max(is,1)
       ig = i + in
       if (ig .gt. ie) ig = i
       sd = 1. / (ftble(ig) - ftble(is))
       do 29 k = 2,in
         slope(k-1) = (ftble(ig+k-1) - ftble(is+k-1)) * sd
         val(k-1) = ftble(i+k-1)
   29  continue
 1000  itble(3) = i
       return
       end
