*mlist
       subroutine rintrv
!
!  Processes input defining interactive input and output variables.
!
!  Cognizant engineer: rjw.
!
*in32 iscr
*in32end
!
       use intrac
       implicit none
       include 'comctl.h'
       include 'contrl.h'
       include 'fast.h'
       include 'genrl.h'
       include 'ufilef.h'
       include 'ufiles.h'
!
!  Local variables.
       integer l3a(11),l3b(9),iscr(5)
       real scr(5)
       equivalence (iscr(1),scr(1))
       type (intras), allocatable :: intrat(:)
       integer i,is,ix,j,n3,n4
       logical lhed,lphlp,sfail
       character labl*64,chwrd*8
$if def,npa,1
       external fintpa
!
!  Data statements.
       data l3a/801,0,2,5,0,1,-1,1,1,-1,0/
       data l3b/6,0,0,5,0,1,2,-1,-1/
!
!  Check for presence of interactive input variable definitions.
       if (.not.allocated(intra)) intrno = 0
       l3a(1) = 801
       call inplnk (l3a(1),ix,n3,n4,fa(filndx(1)))
       if (n4.ne.0 .or. (ix.ne.-1 .and. ix.lt.1000)) then
!  Input present.
         allocate (intrat(199))
         intrat%intrni = 0
         if (allocated(intra)) then
!  Data present from restart, move to expanded array for input
!  processing.
           do i = 1,intrno
             is = intra(i)%intrni - 800
             intrat(is) = intra(i)
           enddo
           deallocate (intra)
         endif
c  Process interactive input definition cards.
         lhed = .false.
         do
           call inplnk (l3a(1),ix,n3,n4,fa(filndx(1)))
           if (n4 .ne. 0) then
             l3a(6) = 1
             call inp2 (fa(filndx(1)),iscr,l3a)
             if (l3a(6) .lt. 0) then
               fail = .true.
             else
               if (.not.lhed) then
                 lhed  = .true.
                 if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &           write (output,"('0     Interactive input variables'/
     & '  input var.num    var.name    value',9x,'conversion    request
     &code')")
               endif
               is = l3a(1) - 800
               write (chwrd,'(a8)') scr(1)
               if (chwrd .eq. 'delete') then
                 if (intrat(is)%intrni .ne. 0) then
                   if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &             write (output,"('0Interactive input variable',i4,a12,
     &             ' deleted.')") l3a(1),intrat(is)%intrla
                   intrno = intrno - 1
                   intrat(is)%intrni = 0
                 else
                   write (output,"('0******** Delete for interactive inp
     &ut variable',i4,' is incorrect, either new problem or variable not
     & previously defined.')") l3a(1)
                   fail = .true.
                 endif
               else
                 if (intrat(is)%intrni .ne. 0) then
                   if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &             write (output,"('0 Interactive input variable',i4,
     & a12,' with value',1p,g13.6,' is being changed.')")
     &             l3a(1),intrat(is)%intrla,intrat(is)%intrva
                 else
                   intrno = intrno + 1
                   intrat(is)%intrni = l3a(1)
                 endif
                 write (intrat(is)%intrla,"(a8)") scr(1)
                 lphlp = .false.
                 if (l3a(6) .le. 2) then
                   scr(3) = 1.0
                 else
                   if (scr(3) .eq. 0.0) then
                     if (l3a(6) .lt. 4) then
                       write (output,"('0******** Interactive input vari
     &able scale factor cannot be zero and variable code also not be ent
     &ered.')")
                       scr(3) = 1.0
                       fail = .true.
                     else
                       if (l3a(6) .ne. 5) iscr(5) = 0
                       write (chwrd,'(a8)') scr(4)
                       call scnreq (l3a(1),chwrd,iscr(5),-1,n3,scr(3),
     &                 labl,sfail)
                       fail = fail .or. sfail
                       if (uniti .or. sfail) then
                         scr(3) = 1.0
                       else
                         if (scr(3) .gt. 0) scr(3) = 1.0/scr(3)
                       endif
                       if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &                 write (output,"(i15,a14,1p,2g14.6,a14,i14)")
     &                 l3a(1),(scr(i),i=1,4),iscr(5)
                       lphlp = .true.
                     endif
                   endif
                 endif
                 if (.not.lphlp .and.
     &           iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &           write (output,"(i15,a14,1p,2g14.6)")
     &           l3a(1),(scr(i),i=1,3)
                 intrat(is)%intrcv = scr(3)
                 if (intrat(is)%intrcv .lt. 0.0) then
                   intrat(is)%intrva = scr(2)/1.8 - intrat(is)%intrcv
                 else
                   intrat(is)%intrva = scr(2)*intrat(is)%intrcv
                 endif
               endif
             endif
             ix = l3a(1) + 1
           endif
           if (ix.ge.1000 .or. ix.eq.-1) exit
           l3a(1) = ix
         enddo
         if (count(intrat%intrni .ne. 0) .ne. intrno) then
           write (output,"('0******** Programming error in rintrv.')")
           call fabend
         endif
         if (intrno .ne. 0) then
           allocate (intra(intrno))
           is = 0
           do i = 1,intrno
             do
               is = is + 1
               if (intrat(is)%intrni .ne. 0) exit
             enddo
             intra(i) = intrat(is)
           enddo
         endif
         deallocate (intrat)
       endif
c  Check if interactive job, if so, connect interactive output file and
c  set print flag to indicate interactive job.
       print = iand(print,not(32))
       imdctl(1) = iand(imdctl(1),not(12))
       l3b(6) = 1
       call inp2 (fa(filndx(1)),scr,l3b)
       if (l3b(6) .lt. 0) then
         write (tty,"('Card 6 to define interactive information is incor
     &rect.')")
         write (output,"('0******** ','Card 6 to define interactive info
     &rmation is incorrect.')")
         fail = .true.
       else
         if (l3b(6) .ne. 0) then
           filsch(8) = ' '
           write (filsch(8),"(5a8)") (scr(j),j=1,l3b(6))
           write (output,"('0Interactive information entered through inp
     &ut data is: ',5a8)") trim(filsch(8))
           if (filsch(8) .eq. ' ') then
             write (tty,"('Interactive information entered is blank.')")
             write (output,"(' ********','Interactive information enter
     &ed is blank.')")
             filsch(8) = 'null'
             fail = .true.
           endif
         endif
         if (filsch(8) .eq. 'gui') then
           imdctl(1) = ior(imdctl(1),8)
         elseif (filsch(8) .eq. 'guii') then
           imdctl(1) = ior(imdctl(1),4)
$if -def,npa
         elseif (filsch(8) .ne. 'null') then
           write (tty,"('Interactive information entered is incorrect.')
     &")
           write (output,"('0******** ','Interactive information entered
     & is incorrect.')")
           fail = .true.
$endif
$if def,npa
         elseif (filsch(8) .ne. 'null') then
           print = ior(print,32)
           if (filsch(12)(2:40) .ne. ' ') then
             write (tty,"('More than one character entered for NPA commu
     &nication type, only a single digit from 0 through 3 allowed.')")
             write (output,"('0******** More than one character entered 
     &for NPA communication type, only a single digit from 0 through 3 a
     &llowed.')")
             fail = .true.
           else
             n3 = ichar(filsch(12)(1:1)) - ichar('0')
             if (n3.lt.0 .or. n3.gt.3) then
             write (tty,"('NPA communication type not between 0 and 3.')
     &")
             write (output,"('0******** NPA communication type not betwe
     &en 0 and 3.')")
               fail = .true.
             else
               call fintpa (j,filsch(11),ptitle(1:12),filsch(8),' ',
     &         filsch(9),0,2,0,n3,0,0)
               if (j .ne. 0) then
                 write (tty,"(' Error number',i5,' returned from NPA rou
     &tine FINTPA.')") j
             write (output,"('0******** Error number',i5,' returned from
     & NPA routine FINTPA.')") j
                 fail = .true.
               endif
             endif
           endif
$endif
         endif
$if -def,gui
         if (iand(imdctl(1),12) .ne. 0) then
           write (output,"('0******** The interactive option, gui or gui
     &i, is not allowed in this version.')")
           write (tty,"('******** The interactive option, gui or guii, i
     &s not allowed in this version.')")
           fail = .true.
         endif
$endif
       endif
       return
       end
