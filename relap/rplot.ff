*mlist
       subroutine rplot
!
!  Process plot request data.
!
!  Cognizant engineer: rjw.
!
*in32 iscr
*in32end
!
       use ufilef
       use usrvarc
       implicit none
       include 'comctl.h'
       include 'contrl.h'
       include 'fast.h'
!
       type (plotrqs), allocatable :: plotrqt(:)
       real scr(30)
       integer i,is,iscr(30),ix,j,n3,n4
       logical hout,tfail
       equivalence (scr(1),iscr(1))
       integer :: l3a(10)=(/0,0,1,30,0,1,3,-1,0,0/)
!
!  Check for presence of plot requests.
       if (.not.allocated(plotrq)) nplotrq = 0
       l3a(1) = 20300010
       call inplnk (l3a(1),ix,n3,n4,fa(filndx(1)))
       if (n4.ne.0 .or. (ix.ne.-1 .and. ix.lt.20301000)) then
!  Input present.
         allocate (plotrqt(99))
         do i = 1,99
           nullify (plotrqt(i)%pl)
         enddo
         if (allocated (plotrq)) then
!  Data present from restart, delete it.
           deallocate (plotrq)
           nplotrq = 0
         endif
!  Process plot variable input.
         hout = .false.
         do
!  Check status of card search.
           l3a(2) = l3a(1) + 4
           if (n4.ne.0 .or. (ix.ne.-1 .and. ix.le.l3a(2))) then
!  Read card 2030xxxx.
             l3a(2) = -l3a(2)
             l3a(6) = 1
             call inp2 (fa(filndx(1)),iscr,l3a)
             if (l3a(6) .lt. 0) then
               fail = .true.
             else
!  If last one or two entries of a triplet are not entered, set to
!  defaults.
               n3 = (l3a(6) + 2)/3
               i = mod(l3a(6),3)
               l3a(6) = 3*n3
               if (i .eq. 1) iscr(l3a(6)-1) = 0
               if (i .ne. 0) iscr(l3a(6)) = 1
               if (.not.hout) then
                 hout = .true.
                 if (iand(ihlppr(2),ishft(1,22)).ne.0) write (output,"
     & ('0  Plot variables'/
     & ' req.num.',3(5x,'variable code',5x,'parameter   axis'i))")
               endif
               j = (l3a(1) - 20300000)/10
               if (iand(ihlppr(2),ishft(1,22)).ne.0)
     &         write (output,"(i9,3(5x,a10,1x,i16,i7)/
     & (9x,3(5x,a10,1x,i16,i7)))")
     &         j,(scr(i),iscr(i+1),iscr(i+2),i=1,l3a(6),3)
!  Check size of word 2, move data to array, and save card number.
               tfail = .false.
               do i = 1,l3a(6),3
                 if (iscr(i+1) .gt. 1000000000) then
                   write (output,"('0******** Number on plot request req
     &uest', i3,' is out of range.')") j
                   tfail = .true.
                 endif
                 if (iscr(i+2) .ge. 0) then
                   is = 0
                 else
                   is = 4
                 endif
                 iscr(i+2) = abs(iscr(i+2))
                 if (iscr(i+2).lt.0 .or. iscr(i+2).gt.2) then
                   write (output,"('0******** Axis selection on plot req
     &uest',i3,', is incorrect.')") j
                   tfail = .true.
                 endif
                 if (iscr(i+2) .eq. 0) iscr(i+2) = 1
                 if (tfail) then
                   fail = .true.
                   exit
                 endif
                 iscr(i+2) = ior(iscr(i+2),is)
               enddo
               if (.not.tfail) then
                 allocate (plotrqt(j)%pl(n3))
                 n4 = 1
                 do i = 1,n3
                   j = (l3a(1) - 20300000)/10
                   write (plotrqt(j)%pl(i)%ntabla,"(a8)") scr(n4)
                   plotrqt(j)%pl(i)%ntabl = iscr(n4+1)
                   plotrqt(j)%pl(i)%ntabno = ior(j,ishft(iscr(n4+2),8))
                   n4 = n4 + 3
                 enddo
!  Increment number of additional plot variables.
                 nplotrq = nplotrq + 1
               endif
             endif
           endif
           l3a(1) = l3a(1) + 10
           call inplnk (l3a(1),ix,n3,n4,fa(filndx(1)))
           if (n4 .eq. 0) then
             if (ix.eq.-1 .or. ix.ge.20301000) exit
             j = (l3a(1) - 20300000)/10
             l3a(1) = j*10 + 20300000
           endif
         enddo
!  If data has been entered, transfer to condensed file.
         if (nplotrq .ne. 0) then
           allocate (plotrq(nplotrq))
           j = 0
           do i = 1,nplotrq
             do
               j = j + 1
               if (associated(plotrqt(j)%pl)) exit
             enddo
             plotrq(i)%pl => plotrqt(j)%pl
           enddo
         endif
         deallocate (plotrqt)
       endif
       return
       end
