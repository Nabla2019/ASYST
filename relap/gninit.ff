*mlist
       subroutine gninit
!  Performs once only calculations and general initializations
!  including setting common block lengths and clearing them.
!
!  Cognizant engineer: rjw.
!
$if def,msnt
       use dflib
$if -def,ifortc,1
       use dfport, only: getcwd,getpid
$if def,ifortc,2
       use ifport, only: getcwd,getpid
       use iflport, only: getenvqq
$endif
       use blddattim
       use gentblc
       use intrac
       use invhtb
       use invtbl
       use jundat
       use jvprnt
       use lpdatc
       use sscntrc
       use statcc
       use tdpptr
       use tstpctc
$if def,iua
       use uncdata
$endif
       use usrvarc
       use voldat, only: volclear
$if def,selap,1
       use scdmod
$if def,rk3d,1
       use rkinc
!
       implicit none
       include 'comctl.h'
       include 'comlst.h'
       include 'cons.h'
       include 'contrl.h'
       include 'genrl.h'
       include 'statec.h'
       include 'stcblk.h'
       include 'maxmem.h'
       include 'machls.h'
       include 'ufiles.h'
       include 'ufilef.h'
       include 'scddat.h'
       include 'cpmdat.h'
       include 'alcm.h'
       include 'balfar.h'
       include 'bcons.h'
       include 'bconds.h'
       include 'bder.h'
       include 'bln2wk.h'
       include 'blonab.h'
       include 'bloond.h'
       include 'bsize.h'
       include 'buntim.h'
       include 'bwcons.h'
       include 'bwgeom.h'
       include 'bwprop.h'
       include 'bwtrns.h'
       include 'cdfinc.h'
       include 'cdfinv.h'
       include 'cmatp.h'
       include 'cmptim.h'
       include 'cora.h'
       include 'coupl.h'
       include 'cprdat.h'
       include 'cprops.h'
       include 'dbacct.h'
       include 'dcon.h'
       include 'debcom.h'
       include 'debout.h'
       include 'effprp.h'
       include 'eht0.h'
       include 'ehtc0.h'
       include 'farays.h'
       include 'fecom.h'
       include 'fginvc.h'
       include 'fgrcom.h'
       include 'fplim.h'
       include 'fpbin.h'
       include 'fpcoef.h'
       include 'fpctrl.h'
       include 'fpdkht.h'
       include 'fpinsh.h'
       include 'fpmas.h'
       include 'fpmdl.h'
$if def,selap,2
       integer idlagg
       equivalence (idlagg,mdlagg)
       include 'fpnonv.h'
       include 'fpvol.h'
       include 'ftbfet.h'
       include 'grscgr.h'
       include 'grsparg.h'
       include 'grsprg.h'
       include 'hardpn.h'
       include 'hfuson.h'
       include 'intcom.h'
       include 'iocom.h'
       include 'iparm.h'
       include 'iparmm.h'
       include 'k3all.h'
       include 'k3point.h'
       include 'lvel.h'
       include 'madatc.h'
       include 'matdat.h'
       include 'matsrs.h'
       include 'miscon.h'
       include 'mxnfcd.h'
       include 'nbtim.h'
       include 'ndxara.h'
       include 'nhtara.h'
       include 'nrcom.h'
       include 'oxcom1.h'
       include 'oxcom2.h'
       include 'oxcom3.h'
       include 'oxcom4.h'
       include 'parm.h'
       include 'parmm.h'
       include 'plndat.h'
       include 'prdat.h'
       include 'ptscom.h'
       include 'radata.h'
       include 'rgacct.h'
       include 'rupt.h'
       include 'scdads.h'
       include 'scdcom.h'
       include 'scdout.h'
       include 'scntl.h'
       include 'slbcom.h'
       include 'slumpv.h'
       include 'solcom.h'
       include 'tblsp.h'
       include 'thplot.h'
       include 'trnot1.h'
       include 'trnot2.h'
       include 'uoxcom.h'
       include 'uphdpn.h'
       include 'scdpow.h'
       include 'axtrns.h'
       include 'bcs.h'
       include 'blageo.h'
       include 'blinit.h'
       include 'blkage.h'
       include 'cboilx.h'
       include 'cr2.h'
       include 'cvals.h'
       include 'noval.h'
       include 'za.h'
       include 'oldcom.h'
       include 'upccon.h'
       include 'upcvar.h'
       include 'oxairv.h'
       include 'oxsrv2.h'
       include 'conele.h'
!
!  Local variables.
       logical exis
$if -def,linux,2
       integer i,il,is,iv,isfdes
       integer(2) isf,isf2
$if def,linux,1
       integer i,il,is,isf,isf2,iv,isfdes
$if def,iua
       logical uncflg
       integer jf,k,j
$endif
       real fid,ftbnid
!
       real null
$if def,ibm,1
       external xuflow
       integer mxnkwd
$if -def,iua
       parameter (mxnkwd = nflsch + mxnfld)
$endif
$if def,iua
       parameter (mxnkwd = nflsch + mxnfld + 1)
$endif
       logical stoptl(mxnkwd),stone,stone2
       character string*(mxnkwd),starg*256,tpfnpr(mxnkwd)*258
       integer iargc
       integer ilastc
       character exfile*256
       integer liccod(3),value(8)
       character temp80*80
!
!  Data statements.
$if -def,iua
       data string/'fioprsjncaXCABQwdhlkbemqtuWgH'/
$endif
$if def,iua
       data string/'fioprsjncaXCABQwdhlkbemqtuWgHU'/
$endif
!  f  Scratch random access file for ftb.
!  i  Input file.
!  o  Output file.
!  p  Internal plotting file.
!  r  Restart-plot file.
!  s  Strip file.
!  j  Information file.
!  A  Dump file 1.
!  B  Dump file 2.
!  Q  Option to automatically release window at end of execution.
!  w--file name for light water thermodynamic properties file
!  d--file name for heavy water thermodynamic properties file
!  h--file name for hydrogen thermodynamic properties file
!  l--file name for lithium thermodynamic properties file
!  k--file name for potassium thermodynamic properties file
!  b--file name for helium thermodynamic properties file
!  e--file name for nitrogen thermodynamic properties file
!  m--file name for sodium thermodynamic properties file
!  q--file name for NaK thermodynamic properties file
!  t--file name for lithium-lead thermodynamic properties file
!  u--file name for ammonia thermodynamic properties file
!  W--file name for new light water thermodynamic properties file
!  g--file name for glycerol thermodynamic properties file
!  H--file name for blood thermodynamic properties file
$if def,iua
!  U  uncrun name for IUA package
$endif
!
       include 'machlf.h'
!
$if def,hp
       on real*4 underflow call trap4
       on real*8 underflow call trap8
       on external error ignore
       on controlc call contrlc
       on real*8 div 0 call fabend
       on real*8 illegal call fabend
$endif
!
       if (iroute .eq. -1) then
       call pointer
!
!  Perform functions needed called only once.
         call timset (fid)
!  Set commonly used constants.
         pi = 3.14159265359
         e = 5.0e-7
         twopi = 2.0*pi
         piovr2 = pi*0.5
         piovr4 = pi*0.25
         sqrtpi = sqrt(pi)
         sqrt2  = sqrt(2.0)
         sqrt2p = sqrt2*sqrtpi
!  Process command arguments for Unit operating system.
$if def,iua
         filsch0 = ' '
         uncflg = .false.
         uncmode = .false.
         uncmode0 = .false.
$endif
         stone = .false.
         do i = 1,mxnkwd
           stoptl(i) = .false.
         enddo
         call getarg (0,exfile)
         is = iargc()
         i = 0
         do
           i = i + 1
           if (i .gt. is) exit
           stone2 = .false.
           call getarg(i,starg)
           if (starg(1:1) .ne. '-') then
             write (tty,"(' Expected option but minus sign missing on pa
     &rameter ',a)") starg
             stone = .true.
             cycle
           endif
           if (starg(3:40) .ne. ' ') then
             write (tty,"(' Allowed options have only one character, but
     & option entered is: ',a)") starg
             stone = .true.
             cycle
           endif
           exis = .false.
           do il = 1,mxnkwd
             if (starg(2:2) .eq. string(il:il)) then
               exis = .true.
               exit
             endif
           enddo
           if (.not.exis) then
             write (tty,"(' Option ',a2,' is an illegal option.')")
     &       starg(1:2)
             stone = .true.
             stone2 = .true.
           else
             if (stoptl(il)) then
               write (tty,"(' Option -',a2,' entered more than once.')")
     &         starg(1:2)
               stone = .true.
             endif
             stoptl(il) = .true.
           endif
           if (il .eq. 15) then
             filsch(il)(1:1) = '1'
             cycle
           endif
           i = i + 1
           if (i .gt. is) then
             write (tty,"(' No parameter following option: -',a)")
     &       string(il:il)
           else
             call getarg (i,starg)
             if (starg(1:1) .eq. '-') then
               write (tty,"(' Expected parameter, but found option: ',a)
     &")       starg
               stone = .true.
               cycle
             endif
             if (.not.stone2) then
               iv = index(starg(1:256),char(13))
               if (iv .ne. 0) starg(iv:256) = ' '
               if (il .le. nflsch) then
                 filsch(il) = starg
$if -def,iua
               else
                 tpfnam(il-nflsch) = starg
$endif
$if def,iua
               elseif (il .le. (nflsch+mxnfld)) then
                 tpfnam(il-nflsch) = starg
               else
                 uncflg = .true.
                 uncsv = starg
                 if (starg.ne.'setup' .and. starg.ne.'postpr') then
                   uncrun = 0
                   j = len_trim(starg)
                   do k=1,j
                     if (starg(k:k).lt.'0' .or. starg(k:k).gt.'9') then
                       stone = .true.
                       write (tty,"('Non digit has been entered in run n
     &umber.')")
                     else
                       uncrun = 10*uncrun + ichar(starg(k:k))
     & - ichar('0')
                     endif
                   enddo
                   if (uncrun .ne. 0) uncmode = .true.
                   if (uncrun .ge. 0) uncmode0 = .true.
                 endif  
$endif
               endif
             endif
             cycle
           endif
         enddo
$if def,iua
         if (uncflg) then
           jf = len_trim(filsch(2))
           if (uncsv .eq. 'setup') then
             if (filsch(2)(jf-2:jf) .ne. '.is') then
               stone = .true.
             else
               filsch(3) = filsch(2)(1:jf-3) // '.os'
               filsch(5) = filsch(2)(1:jf-3) // '.rs'
!mpfu: correspondence with uncdata 'Preapre base name for files ..."
               filsch(6) = filsch(2)(1:jf-3) // 'NNNN.w'
             endif
           elseif (uncsv .eq. 'postpr') then
             if (filsch(2)(jf-2:jf) .ne. '.ip') then
               stone = .true.
             else
               filsch(3) = filsch(2)(1:jf-3) // '.op'
               filsch(5) = filsch(2)(1:jf-3) // '.rs'
               filsch(6) = filsch(2)(1:jf-3) // 'ALFNUM.m'
             endif
           else
             if (filsch(2)(jf-1:jf) .ne. '.i') then
               stone = .true.
             else
               write (filsch(3),"(a,i4.4,'.o')") filsch(2)(1:jf-2),
     &               uncrun
               if (stoptl(5)) then
                 filsch0 = filsch(5)
               endif
               write (filsch(5),"(a,i4.4,'.r')") filsch(2)(1:jf-2),
     &               uncrun
               if (uncrun .eq. 0) then
               
                 filsch(7) = ' '
               else
                 write (filsch(6),"(a,i4.4,'.w')") filsch(2)(1:jf-2),
     &                 uncrun
               endif
             endif
           endif
         endif
$endif
         if (stone) then
           write (output,"(' Bad command line.')")
           stop 'gninit-7, bad cmd.'
         endif
         open (unit=output,file=filsch(3),status='new',form='formatted',
     &   iostat=is)
         if (is .ne. 0) then
           write (tty,1017) is,trim(filsch(3))
 1017  format ('Open error number',i8,' on file ',a,' perhaps file alrea
     &dy exists.')
           stop 'gninit-8, output file'
         endif
         open (unit=input,file=filsch(2),status='old',form='formatted',
     &   iostat=is)
         if (is .ne. 0) then
           write (tty,1015) is,trim(filsch(2))
 1015  format ('Open error number',i8,' on file ',a,' perhaps file is no
     &t available.')
           write (output,1016) is,trim(filsch(2))
 1016  format ('0******** Open error number',i8,' on file ',a,', perhaps
     & file is not available.')
           stop 'gninit-9, input file'
         endif
!  Set program title.
         call aatl
         write (tty,"(a)") ptitle(1:38)
         write (output,"('1',3x,a)") ptitle
$if -def,selap,1
         write (output,"('1   +  NOSCDAP  SCDAP not available')")
$if def,iua,2
         write (output,"('1   +  IUA      Integrated Uncertainty Analysi
     &s Package')")
$if def,3dkin,1
           write (output,"('1   +  3DKIN    Nodal Kinetics Package')")
$if -def,3dkin
$if def,rk3d,2
           write (output,"('1   +  NIRK3D   Neutronic Interface for 3D K
     &inetics codes')")
$endif
$if def,hydrolod,1
         write (output,"('1   +  LOADC    Hydrodynamic Loads Package')")
$if def,scdapext,2
         write (output,"('1   +  SCDAPEXT Number of SCDAP components ext
     &ended')")
$if def,dbgprnt,1
         write (output,"('1   +  DBGPRNT  Debug printouts activated')")
!  Write command line parameters.
         write (tty,"(7a)") trim(exfile),' -i ',trim(filsch(2)),
     &   ' -o ',trim(filsch(3)),' -r ',trim(filsch(5))
         write (output,"('0Execute file: ',a)") trim(exfile)
         write (output,"('0Date and time Execute file was created: ',
     &   i4.4,'/',i2.2,'/',i2.2,x,i2.2,':',i2.2,':',i2.2,' (UTC-GMT)')")
     &   datetimeqqq(1:3),datetimeqqq(5:7)
         do i = 1,nflsch
           if (i .eq. 5) then
             ilastc = index(filsch(i),' ') - 1
             tpfnpr(i) = '[' // filsch(i)(1:ilastc) // ']'
           else
             tpfnpr(i) = filsch(i)
           endif
         enddo
         do i=1,mxnfld
           tpfnpr(i+nflsch) = tpfnam(i)
         enddo
$if def,iua
         tpfnpr(30) = '0'
$endif
         write (output,1001) (string(i:i),trim(tpfnpr(i)),i=1,mxnkwd)
 1001  format ('0Effective command line parameters:'/
     & ('    -',a,1x,a))
         write (output,1002)
 1002  format (/'    [] = tentative file name (may be overridden by inpu
     &t data)'/)
!
!  Print floating point interrups.
         call getcontrolfpqq (isf)
         isf2 = ior(isf,z'0010')
         call setcontrolfpqq (isf2)
$if def,dbgprnt,1
         write (12,"('gninit03',2z10)") isf,isf2
         write (output,"('0Original floating point control flags:',z5,
     & ', used floating point control flags:',z5,'.')") isf,isf2
!  Set subroutine error handling.
$if def,ibm,1
         call xuflow (0)
!
         inquire (file=filsch(7),exist=exis)
         if (exis) then
           open (unit=jbinfo,file=filsch(7),status='old',
     &     form='formatted',iostat=is)
           if (is .eq. 0) then
             write (tty,"(' Opening user information file: ',a)")
     &       trim(filsch(7))
             write (output,'(''0Listing of user information file:'')')
             i = 0
             do
               read (jbinfo,"(a80)",iostat=is) temp80
               if (is .ne. 0) exit
               i = i + 1
               if (i .gt. 55) then
                 write (output,"('1',3x,a)") ptitle
                 i = 0
               endif
               write (output,"(' ',a80)") temp80
             enddo
             close (jbinfo)
             write (output,"('1',3x,a)") ptitle
           endif
         endif
!  Edit library version numbers and define variables status.
         call adechk
!  Set memory size.
         maxscm = 0
         maxlcm = 0
         call ftbmem (maxscm,maxlcm)
!  Initialize dynamic storage subroutines.
         call ftbint (2)
!  Set files to protect coding and common.
         call ftbrsv (1.0,1,-1,i)
       endif
!  Delete files except for protect files and data file on disk.
       if (isfdes(2.0) .eq. 1) call ftbdel (2.0)
       il = ftbnid(3)
       do i = 3,il
         fid = i
         if (isfdes(fid) .ne. 0) call ftbdel (fid)
         fid = -fid
         if (isfdes(fid) .ne. 0) call ftbdel (fid)
       enddo
!  Deallocate space.
       call gentblclear
       call intraclear
       call invhtbclear
       call invtblclear
       call jvprntclear
       call lpdatclear (.true.)
       call junclear
       call sscntrclear
       call statcclear
       call tdpptrclear
       call tstpctclear
       call usrvarclear
       call volclear
$if def,selap,1
       call scdclear
!  Set fluid variable so that proper property file will be set up
!  before first call to a thermodynamic or transport property
!  subroutine.
       nfluid = 0
!
!  Set fixed common block and dynamic storage controls.
       i = 0
!  /comctl/
       i = i + 1
       filndx(0) = 0
       do iv = 1,nfiles
         filid(iv) = 0.0
         filsiz(iv) = 0
         filndx(iv) = 1
         filflg(iv) = 0
       enddo
       comnam(i) = 'comctl'
       comdat(i) = locfi4(comdat(1))
       comdln(i) = locf4(safe1) - comdat(i)
!  /contrl/
       i = i + 1
       comnam(i) = 'contrl'
       comdat(i) = locf4(dthy)
       comdln(i) = locf4(safe2) - comdat(i)
       filflg(i) = 4
!  /statec/
       i = i+1
       comnam(i) = 'statec'
       comdat(i) = locf4(advn(1))
       comdln(i) = locf4(safe4) - comdat(i)
!  /k3all/
       i = i+1
       comnam(i) = 'k3all'
       comdat(i) = locf4(fislnn)
       comdln(i) = locf4(safe5) - comdat(i)
       filflg(i) = 4
!  /k3point/
       i = i+1
       comnam(i) = 'k3point'
       comdat(i) = locfi4(lnxstartn)
       comdln(i) = locf4(safe6) - comdat(i)
       filflg(i) = 4
!  /lvel/
       i = i + 1
       comnam(i) = 'lvel'
       comdat(i) = locf4(dtlev)
       comdln(i) = locf4(safe7) - comdat(i)
       filflg(i) = 4
$if def,selap
!  scdap commons.
!  alcm common.
       i = i + 1
       comnam(i) = 'alcm'
       comdat(i) = locf4(a(0))
       comdln(i) = locfi4(mcme01) - comdat(i)
       filflg(i) = 4
!  balfar common.
       i = i + 1
       comnam(i) = 'balfar'
       comdat(i) = locf4(rfarc(1,1))
       comdln(i) = locfi4(mcme02) - comdat(i)
       filflg(i) = 4
!  bconds common.
       i = i + 1
       comnam(i) = 'bconds'
       comdat(i) = locf4(qradab(1,1))
       comdln(i) = locfi4(mcme03) - comdat(i)
       filflg(i) = 4
!  bln2wk common.
       i = i + 1
       comnam(i) = 'bln2wk'
       comdat(i) = locf4(acs(1,1))
       comdln(i) = locfi4(mcme04) - comdat(i)
       filflg(i) = 4
!  bloona common (under *call blonab).
       i = i + 1
       comnam(i) = 'bloona'
       comdat(i) = locf4(pdrato)
       comdln(i) = locfi4(mcme05) - comdat(i)
       filflg(i) = 4
!  bloonb common (under *call blonab).
       i = i + 1
       comnam(i) = 'bloonb'
       comdat(i) = locf4(dtbal)
       comdln(i) = locfi4(mcme06) - comdat(i)
       filflg(i) = 4
!  bloond common.
       i = i + 1
       comnam(i) = 'bloond'
       comdat(i) = locf4(b5(1,1))
       comdln(i) = locfi4(mcme07) - comdat(i)
       filflg(i) = 4
!  buntim common.
       i = i + 1
       comnam(i) = 'buntim'
       comdat(i) = locf4(deltb)
       comdln(i) = locfi4(mcme08) - comdat(i)
       filflg(i) = 4
!  bwcons common.
       i = i + 1
       comnam(i) = 'bwcons'
       comdat(i) = locf4(mwox)
       comdln(i) = locfi4(mcme09) - comdat(i)
       filflg(i) = 4
!  bwgeom common.
       i = i + 1
       comnam(i) = 'bwgeom'
       comdat(i) = locf4(rbc(1))
       comdln(i) = locfi4(mcme10) - comdat(i)
       filflg(i) = 4
!  bwprop common.
       i = i + 1
       comnam(i) = 'bwprop'
       comdat(i) = locf4(denbc(1))
       comdln(i) = locfi4(mcme11) - comdat(i)
       filflg(i) = 4
!  bwtrns common.
       i = i + 1
       comnam(i) = 'bwtrns'
       comdat(i) = locf4(wtgsdt(1))
       comdln(i) = locfi4(mcme12) - comdat(i)
       filflg(i) = 4
!  cdfinc common.
       i = i + 1
       comnam(i) = 'cdfinc'
       comdat(i) = locf4(dxcfrc(1,1))
       comdln(i) = locfi4(mcme13) - comdat(i)
       filflg(i) = 4
!  cdfinv common.
       i = i + 1
       comnam(i) = 'cdfinv'
       comdat(i) = locf4(dxcfri(1))
       comdln(i) = locfi4(mcme14) - comdat(i)
       filflg(i) = 4
!  cmatp common.
       i = i + 1
       comnam(i) = 'cmatp'
       comdat(i) = locf4(zoxden)
       comdln(i) = locfi4(mcme15) - comdat(i)
       filflg(i) = 4
!  cmptim common.
       i = i + 1
       comnam(i) = 'cmptim'
       comdat(i) = locf4(timec)
       comdln(i) = locfi4(mcme16) - comdat(i)
       filflg(i) = 4
!  cora common.
       i = i + 1
       comnam(i) = 'cora'
cljs   comdat(i) = locf4(rtungs)
       comdat(i) = locf4(rhwire(1,1))
       comdln(i) = locfi4(mcme18) - comdat(i)
       filflg(i) = 4
!  coupl common.
       i = i + 1
       comnam(i) = 'coupl'
       comdat(i) = locf4(afrdeb(1,1))
       comdln(i) = locfi4(mcme19) - comdat(i)
       filflg(i) = 4
!  cprdat common.
       i = i + 1
       comnam(i) = 'cprdat'
       comdat(i) = locf4(tempc(1))
       comdln(i) = locfi4(mcme20) - comdat(i)
       filflg(i) = 4
!  cprops common.
       i = i + 1
       comnam(i) = 'cprops'
       comdat(i) = locf4(hval(1,1))
       comdln(i) = locfi4(mcme21) - comdat(i)
       filflg(i) = 4
!  dbacct common.
       i = i + 1
       comnam(i) = 'dbacct'
       comdat(i) = locf4(rgelv(1))
       comdln(i) = locfi4(mcme22) - comdat(i)
       filflg(i) = 4
!  debcom common.
       i = i + 1
       comnam(i) = 'debcom'
       comdat(i) = locf4(qbtdeb(1))
       comdln(i) = locfi4(mcme23) - comdat(i)
       filflg(i) = 4
!  debout common.
       i = i + 1
       comnam(i) = 'debout'
       comdat(i) = locf4(absms(1,1))
       comdln(i) = locfi4(mcme24) - comdat(i)
       filflg(i) = 4
!  effprp common.
       i = i + 1
       comnam(i) = 'effprp'
       comdat(i) = locf4(effka(1,1))
       comdln(i) = locfi4(mcme25) - comdat(i)
       filflg(i) = 4
!  eht0 common.
       i = i + 1
       comnam(i) = 'eht0'
       comdat(i) = locf4(dtph2)
       comdln(i) = locfi4(mcme26) - comdat(i)
       filflg(i) = 4
!  ehtc0 common.
       i = i + 1
       comnam(i) = 'ehtc0'
       comdat(i) = locf4(csol)
       comdln(i) = locfi4(mcme27) - comdat(i)
       filflg(i) = 4
!  farays common.
       i = i + 1
       comnam(i) = 'farays'
       comdat(i) = locf4(ftemp(1,1))
       comdln(i) = locfi4(mcme28) - comdat(i)
       filflg(i) = 4
!  fecom common.
       i = i + 1
       comnam(i) = 'fecom'
       comdat(i) = locf4(oxdout)
       comdln(i) = locfi4(mcme29) - comdat(i)
       filflg(i) = 4
!  fginvc common.
       i = i + 1
       comnam(i) = 'fginvc'
       comdat(i) = locf4(con(1))
       comdln(i) = locfi4(mcme30) - comdat(i)
       filflg(i) = 4
!  fgrcom common.
       i = i + 1
       comnam(i) = 'fgrcom'
       comdat(i) = locf4(fpivy(1,1))
       comdln(i) = locfi4(mcme31) - comdat(i)
       filflg(i) = 4
!  fpbin common.
       i = i + 1
       comnam(i) = 'fpbin'
       comdat(i) = locf4(pdiam(1))
       comdln(i) = locfi4(mcme77) - comdat(i)
       filflg(i) = 4
!  fpcoef common.
       i = i + 1
       comnam(i) = 'fpcoef'
       comdat(i) = locf4(ksurf(1,1))
       comdln(i) = locfi4(mcme78) - comdat(i)
       filflg(i) = 4
!  fpctrl common.
       i = i + 1
       comnam(i) = 'fpctrl'
       comdat(i) = locf4(spcrho(1))
       comdln(i) = locfi4(mcme79) - comdat(i)
       filflg(i) = 4
!  fpdkht common.
       i = i + 1
       comnam(i) = 'fpdkht'
       comdat(i) = locf4(dkhtfr(1,1))
       comdln(i) = locfi4(mcme80) - comdat(i)
       filflg(i) = 4
!  fpinsh common.
       i = i + 1
       comnam(i) = 'fpinsh'
       comdat(i) = locf4(aconfp(1))
       comdln(i) = locfi4(mcme81) - comdat(i)
       filflg(i) = 4
!  fpmass common (under *call fpmas).
       i = i + 1
       comnam(i) = 'fpmass'
       comdat(i) = locf4(fpivm(1,1,1))
       comdln(i) = locfi4(mcme32) - comdat(i)
       filflg(i) = 4
!  fpmdl common.
       i = i + 1
       comnam(i) = 'fpmdl'
       comdat(i) = locfi4(idlagg)
       comdln(i) = locfi4(mcme82) - comdat(i)
       filflg(i) = 4
!  fpnonv common.
       i = i + 1
       comnam(i) = 'fpnonv'
       comdat(i) = locf4(fpstt(1,1,1))
       comdln(i) = locfi4(mcme33) - comdat(i)
       filflg(i) = 4
!  fpvol common.
       i = i + 1
       comnam(i) = 'fpvol'
       comdat(i) = locf4(vol)
       comdln(i) = locfi4(mcme83) - comdat(i)
       filflg(i) = 4
!  grscgr common.
       i = i + 1
       comnam(i) = 'grscgr'
       comdat(i) = locf4(ci(1))
       comdln(i) = locfi4(mcme35) - comdat(i)
       filflg(i) = 4
!  grsprg common.
       i = i + 1
       comnam(i) = 'grsprg'
       comdat(i) = locf4(aq(1))
       comdln(i) = locfi4(mcme36) - comdat(i)
       filflg(i) = 4
!  hardpn common.
       i = i + 1
       comnam(i) = 'hardpn'
       comdat(i) = locf4(thkhpn(1))
       comdln(i) = locfi4(mcme37) - comdat(i)
       filflg(i) = 4
!  hfuson common.
       i = i + 1
       comnam(i) = 'hfuson'
       comdat(i) = locf4(z)
       comdln(i) = locfi4(mcme38) - comdat(i)
       filflg(i) = 4
!  intcom common.
       i = i + 1
       comnam(i) = 'intcom'
       comdat(i) = locf4(alfai(1))
       comdln(i) = locfi4(mcme39) - comdat(i)
       filflg(i) = 4
!  iocom common.
!      i = i + 1
!      comnam(i) = 'iocom'
!      comdat(i) = locfi4(ndebug)
!      comdln(i) = locfi4(mcme40) - comdat(i)
!      filflg(i) = 4
!  iparm common.
       i = i + 1
       comnam(i) = 'iparm'
       comdat(i) = locfi4(iparm(1))
       comdln(i) = locfi4(mcme41) - comdat(i)
       filflg(i) = 4
!  madatc common.
       i = i + 1
       comnam(i) = 'madatc'
       comdat(i) = locf4(ttempc(1))
       comdln(i) = locfi4(mcme43) - comdat(i)
       filflg(i) = 4
!  matdat common.
       i = i + 1
       comnam(i) = 'matdat'
       comdat(i) = locf4(ttemp(1,1))
       comdln(i) = locfi4(mcme44) - comdat(i)
       filflg(i) = 4
!  miscon common.
       i = i + 1
       comnam(i) = 'miscon'
       comdat(i) = locf4(puliq)
       comdln(i) = locfi4(mcme45) - comdat(i)
       filflg(i) = 4
!  nbtim common.
       i = i + 1
       comnam(i) = 'nbtim'
       comdat(i) = locf4(timdb)
       comdln(i) = locfi4(mcme46) - comdat(i)
       filflg(i) = 4
!  ndxara common.
       i = i + 1
       comnam(i) = 'ndxara'
       comdat(i) = locfi4(naz)
       comdln(i) = locfi4(mcme47) - comdat(i)
       filflg(i) = 4
!  nhtara common.
       i = i + 1
       comnam(i) = 'nhtara'
       comdat(i) = locf4(paxpz(1,1,1))
       comdln(i) = locfi4(mcme48) - comdat(i)
       filflg(i) = 4
!  nrcom common.
       i = i + 1
       comnam(i) = 'nrcom'
       comdat(i) = locf4(rclio(1,1))
       comdln(i) = locfi4(mcme49) - comdat(i)
       filflg(i) = 4
!  oxcom1 common.
       i = i + 1
       comnam(i) = 'oxcom1'
       comdat(i) = locf4(wtlim)
       comdln(i) = locfi4(mcme50) - comdat(i)
       filflg(i) = 4
!  oxcom2 common.
       i = i + 1
       comnam(i) = 'oxcom2'
       comdat(i) = locf4(rcoio)
       comdln(i) = locfi4(mcme51) - comdat(i)
       filflg(i) = 4
!  oxcom3 common.
       i = i + 1
       comnam(i) = 'oxcom3'
       comdat(i) = locf4(c0)
       comdln(i) = locfi4(mcme52) - comdat(i)
       filflg(i) = 4
!  parg common (under *call grsparg).
       i = i + 1
       comnam(i) = 'parg'
       comdat(i) = locf4(delt)
       comdln(i) = locfi4(mcme53) - comdat(i)
       filflg(i) = 4
!  parm common.
       i = i + 1
       comnam(i) = 'parm'
       comdat(i) = locf4(parm(1))
       comdln(i) = locfi4(mcme54) - comdat(i)
       filflg(i) = 4
!  plndat common.
       i = i + 1
       comnam(i) = 'plndat'
       comdat(i) = locf4(qchlbn(1,1))
       comdln(i) = locfi4(mcme55) - comdat(i)
       filflg(i) = 4
!  prdat common.
       i = i + 1
       comnam(i) = 'prdat'
       comdat(i) = locf4(txmpf(1))
       comdln(i) = locfi4(mcme56) - comdat(i)
       filflg(i) = 4
!  ptscom common.
       i = i + 1
       comnam(i) = 'ptscom'
       comdat(i) = locf4(alfai0(1))
       comdln(i) = locfi4(mcme57) - comdat(i)
       filflg(i) = 4
!  radata common.
       i = i + 1
       comnam(i) = 'radata'
       comdat(i) = locf4(fviewg(1,1,1))
       comdln(i) = locfi4(mcme58) - comdat(i)
       filflg(i) = 4
!  rgacct common.
       i = i + 1
       comnam(i) = 'rgacct'
       comdat(i) = locf4(hydgr(1))
       comdln(i) = locfi4(mcme59) - comdat(i)
       filflg(i) = 4
!  rupt common.
       i = i + 1
       comnam(i) = 'rupt'
       comdat(i) = locf4(timrcl)
       comdln(i) = locfi4(mcme60) - comdat(i)
       filflg(i) = 4
!  scdcom common.
       i = i + 1
       comnam(i) = 'scdcom'
       comdat(i) = locf4(acrst(1))
       comdln(i) = locfi4(mcme61) - comdat(i)
       filflg(i) = 4
!  scddat common.
       i = i + 1
       comnam(i) = 'scddat'
       comdat(i) = locfi4(icomp)
       comdln(i) = locfi4(mcme62) - comdat(i)
       filflg(i) = 4
!  scdout common.
       i = i + 1
       comnam(i) = 'scdout'
       comdat(i) = locf4(dzcond(1))
       comdln(i) = locfi4(mcme63) - comdat(i)
       filflg(i) = 4
!  scntl common.
       i = i + 1
       comnam(i) = 'scntl'
       comdat(i) = locf4(scntrl(1))
       comdln(i) = locfi4(mcme92) - comdat(i)
       filflg(i) = 4
!  slbcom common.
       i = i + 1
       comnam(i) = 'slbcom'
       comdat(i) = locf4(qslabt(1,1))
       comdln(i) = locfi4(mcme64) - comdat(i)
       filflg(i) = 4
!  slumpv common.
       i = i + 1
       comnam(i) = 'slumpv'
       comdat(i) = locf4(aflwr1)
       comdln(i) = locfi4(mcme65) - comdat(i)
       filflg(i) = 4
!  solcom common.
       i = i + 1
       comnam(i) = 'solcom'
       comdat(i) = locf4(dtmxx)
       comdln(i) = locfi4(mcme66) - comdat(i)
       filflg(i) = 4
!  tblsp common.
       i = i + 1
       comnam(i) = 'tblsp'
       comdat(i) = locf4(hfixf(1))
       comdln(i) = locfi4(mcme67) - comdat(i)
       filflg(i) = 4
!  thplot common.
       i = i + 1
       comnam(i) = 'thplot'
       comdat(i) = locf4(elvlc)
       comdln(i) = locfi4(mcme68) - comdat(i)
       filflg(i) = 4
!  trnot1 common.
       i = i + 1
       comnam(i) = 'trnot1'
       comdat(i) = locf4(hcnvec(1))
       comdln(i) = locfi4(mcme69) - comdat(i)
       filflg(i) = 4
!  trnot2 common.
       i = i + 1
       comnam(i) = 'trnot2'
       comdat(i) = locf4(flwh2(1))
       comdln(i) = locfi4(mcme70) - comdat(i)
       filflg(i) = 4
!  uoxcom common.
       i = i + 1
       comnam(i) = 'uoxcom'
       comdat(i) = locf4(uwgi(1,1))
       comdln(i) = locfi4(mcme71) - comdat(i)
       filflg(i) = 4
!  uphdpn common.
       i = i + 1
       comnam(i) = 'uphdpn'
       comdat(i) = locf4(thkupn(1))
       comdln(i) = locfi4(mcme72) - comdat(i)
       filflg(i) = 4
!  cpmdat common.
       i = i + 1
       comnam(i) = 'cpmdat'
       comdat(i) = locfi4(mcp)
       comdln(i) = locfi4(mcme73) - comdat(i)
       filflg(i) = 4
!  iparmm common.
       i = i + 1
       comnam(i) = 'iparmm'
       comdat(i) = locfi4(iparmm(1,1))
       comdln(i) = locfi4(mcme74) - comdat(i)
       filflg(i) = 4
!  parmm common.
       i = i + 1
       comnam(i) = 'parmm'
       comdat(i) = locf4(parmm(1,1))
       comdln(i) = locfi4(mcme75) - comdat(i)
       filflg(i) = 4
!  scdpow common.
       i = i + 1
       comnam(i) = 'scdpow'
       comdat(i) = locf4(pwrtot)
       comdln(i) = locfi4(mcme76) - comdat(i)
       filflg(i) = 4
!  axtrns common.
       i = i + 1
       comnam(i) = 'axtrns'
       comdat(i) = locf4(ai1(1))
       comdln(i) = locfi4(mcme84) - comdat(i)
       filflg(i) = 4
!  bcs common.
       i = i + 1
       comnam(i) = 'bcs'
       comdat(i) = locf4(dwh(1))
       comdln(i) = locfi4(mcme85) - comdat(i)
       filflg(i) = 4
!  blageo common.
       i = i + 1
       comnam(i) = 'blageo'
       comdat(i) = locf4(blawd(1))
       comdln(i) = locfi4(mcme86) - comdat(i)
       filflg(i) = 4
!  blinit common.
       i = i + 1
       comnam(i) = 'blinit'
       comdat(i) = locf4(boxt(1))
       comdln(i) = locfi4(mcme87) - comdat(i)
       filflg(i) = 4
!  blkage common.
       i = i + 1
       comnam(i) = 'bldage'
       comdat(i) = locf4(abl(1,1,1,1))
       comdln(i) = locfi4(mcme88) - comdat(i)
       filflg(i) = 4
!  cboilx common.
       i = i + 1
       comnam(i) = 'cboilx'
       comdat(i) = locf4(diab4c(1))
       comdln(i) = locfi4(mcme89) - comdat(i)
       filflg(i) = 4
!  cr2 common.
       i = i + 1
       comnam(i) = 'cr2'
       comdat(i) = locf4(gonb4c(1))
       comdln(i) = locfi4(mcme90) - comdat(i)
       filflg(i) = 4
!  cvals common.
       i = i + 1
       comnam(i) = 'cvals'
       comdat(i) = locf4(c9(1,1,1))
       comdln(i) = locfi4(mcme91) - comdat(i)
       filflg(i) = 4
!  noval common.
       i = i + 1
       comnam(i) = 'noval'
       comdat(i) = locf4(aa(1,1))
       comdln(i) = locfi4(mcme93) - comdat(i)
       filflg(i) = 4
!  za common.
       i = i + 1
       comnam(i) = 'za'
       comdat(i) = locf4(dtm)
       comdln(i) = locfi4(mcme98) - comdat(i)
       filflg(i) = 4
!  oldcom common.
       i = i + 1
       comnam(i) = 'oldcom'
       comdat(i) = locf4(acrstz(1))
       comdln(i) = locfi4(mcme99) - comdat(i)
       filflg(i) = 4
!  upccon common.
       i = i + 1
       comnam(i) = 'upccon'
       comdat(i) = locf4(wtfe)
       comdln(i) = locfi4(mcme34) - comdat(i)
       filflg(i) = 4
!  upcvar common.
       i = i + 1
       comnam(i) = 'upcvar'
       comdat(i) = locf4(tups(1,1,1))
       comdln(i) = locfi4(mcme42) - comdat(i)
       filflg(i) = 4
!  bcons common.
       i = i + 1
       comnam(i) = 'bcons'
       comdat(i) = locf4(vrise(1))
       comdln(i) = locfi4(mcme101) - comdat(i)
       filflg(i) = 4
!  bder common.
       i = i + 1
       comnam(i) = 'bder'
       comdat(i) = locf4(dadt(1))
       comdln(i) = locfi4(mcme102) - comdat(i)
       filflg(i) = 4
!  bsize common.
       i = i + 1
       comnam(i) = 'bsize'
       comdat(i) = locf4(dba(1))
       comdln(i) = locfi4(mcme103) - comdat(i)
       filflg(i) = 4
!  dcon common.
       i = i + 1
       comnam(i) = 'dcon'
       comdat(i) = locf4(topaa)
       comdln(i) = locfi4(mcme104) - comdat(i)
       filflg(i) = 4
!  matsrs common.
       i = i + 1
       comnam(i) = 'matsrs'
       comdat(i) = locf4(viscl)
       comdln(i) = locfi4(mcme105) - comdat(i)
       filflg(i) = 4
!  oxcom4 common.
       i = i + 1
       comnam(i) = 'oxcom4'
       comdat(i) = locf4(stmlmt(1,1))
       comdln(i) = locfi4(mcme106) - comdat(i)
       filflg(i) = 4
!  scdads common.
       i = i + 1
       comnam(i) = 'scdads'
       comdat(i) = locf4(ai)
       comdln(i) = locfi4(mcme107) - comdat(i)
       filflg(i) = 4
!  oxairv common
       i = i + 1
       comnam(i) = 'oxairv'
       comdat(i) = locf4(thbeg(1,1))
       comdln(i) = locfi4(mcme108) - comdat(i)
       filflg(i) = 4
!  conele common
       i = i + 1
       comnam(i) = 'conele'
       comdat(i) = locf4(cwb4c(1,1))
       comdln(i) = locfi4(mcme110) - comdat(i)
       filflg(i) = 4
$endif
!  End of common blocks.
       i = i + 1
       comdat(i) = 0
       if (i .gt. ncoms) then
         write (output,"('0******** Error, number of commons (',i3,') ex
     &ceeds the maximum (',i3,').')") i,ncoms
         fail = .true.
       endif
       return
       end
