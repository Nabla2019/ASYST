*mlist
       subroutine inputd
c
c  Controls all input data processing.  If an error is found,
c  editing for the case is completed, but all following cases only
c  have their input listed.
c
c  Cognizant engineer: rjw.
c
$if def,iua
       use uncdata
$endif
       implicit none
       include 'comctl.h'
       include 'contrl.h'
       include 'fast.h'
       include 'ufiles.h'
       include 'genrl.h'
       include 'scntl.h'
c  Local variable.
       integer l3a(8),l3b(7),l5(8)
       real iv(2)
       logical run
       integer is1,is2
$if -def,iua
       character ityp1(7)*8,ityp2(7)*8,opt(2)*8,opx(2)*8,ivc(2)*8,is3*8
$endif
$if def,iua
       character ityp1(9)*8,ityp2(7)*8,opt(2)*8,opx(2)*8,ivc(2)*8,is3*8
$endif
       character null*8
c  Data statements
       data l3a/00100,0,1,2,0,1,-1,-1/
       data l3b/101,0,0,1,0,1,-1/
       data l5/50000000,0,0,2,0,1,-1,-1/
       data ityp1/'new','restart','plot','in-cond','strip','cmpcoms',
$if -def,iua
     & 'cpyxmgr5'/
$endif
$if def,iua
     & 'cpyxmgr5','uncsetup','uncpost'/
$endif
       data ityp2/'stdy-st','transnt','binary','fmtout','fmtnrc',
     & 'binnrc','csv'/
       data opt/'run','inp-chk'/, opx/'run.','inp-chk.'/
c
c  Return if no cards left.
   10  if (ncase .eq. 0) return
c  Do general initalization.
       call gninit
c  Read input data.
       call rcards
c  Check if all cards have been processed by rcards.
       if (iroute .ne. 0) return
       print = 0
$if def,selap
!  Initialize Scdap control flags.
       scntrl(:) = .false.
c  Check couple input present.
       l5(6) = 1
       call inp2 (fa(filndx(1)),iv,l5)
       if (l5(6) .lt. 0) then
         write (output,2001) l5(1)
         fail = .true.
         return
       elseif (l5(6) .gt. 1) then
         scntrl(4) = .true.
         write (ivc(1),'(a8)') iv(2)
         if (ivc(1) .eq. 'old') then
           scntrl(6) = .true.
           call echos(1)
         elseif (ivc(1) .eq. 'new') then
           scntrl(5) = .true.
         else
           write (output,2010) l5(1)
 2010  format ('0******** Unable to determine input type on card',
     & i4,'.')
           fail = .true.
           return
         endif
       endif
$endif
c  Obtain problem type.
       l3a(6) = 1
       call inp2 (fa(filndx(1)),iv,l3a)
       if (l3a(6) .gt. 0) then
         write (ivc(1),'(a8)') iv(1)
         call aatl
         write (output,"('1   ',a)") ptitle
         write (output,"(1x,a)") ctitle
$if -def,iua
         do is1 = 1,7
$endif
$if def,iua
         do is1 = 1,9
$endif
           if (ivc(1) .eq. ityp1(is1)) go to 13
         enddo
       endif
       write (output,2001) l3a(1)
 2001  format ('0******** Unable to determine processing type on card'
     & ,i4,', no further processing possible.')
       fail = .true.
       go to 10
   13  if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     & write (output,2103) ivc(1)
 2103  format ('0Processing type is ',a8)
       if (is1 .eq. 7) then
         call rrewrite
         go to 10
       endif
       is2 = 0
       if (l3a(6) .ne. 2) go to 20
       write (ivc(2),'(a8)') iv(2)
       do is2 = 1,7
         if (ivc(2) .eq. ityp2(is2)) go to 19
       enddo
       write (output,2002) l3a(1)
 2002  format ('0******** Unable to determine problem option on card',
     & i4,'.')
       is2 = 0
       fail = .true.
       go to 18
   19  if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     & write (output,2104) ivc(2)
 2104  format ('+',39x,'problem option is ',a8)
   20  if (is1 .gt. 2) go to 22
       if (is2.gt.0 .and. is2.le.2) go to 18
       go to 23
   22  if (is1 .eq. 5) go to 24
       if (is2 .eq. 0) go to 18
       write (output,2003) l3a(1)
 2003  format ('0******** Problem option entered on card',i4,' but is no
     &t needed.')
       go to 25
   24  if (is2 .ge. 3) go to 18
   23  write (output,2105) l3a(1)
 2105  format ('0******** Wrong problem option for processing type on ca
     &rd',i4,'.')
   25  fail = .true.
   18  iroute = ior(ishft(is2,6),is1)
       run = .true.
       is3 = opx(1)
       l3b(6) = 1
       call inp2 (fa(filndx(1)),iv,l3b)
       if (l3b(6) .le. 0) go to 21
       write (ivc(1),'(a8)') iv(1)
       if (ivc(1) .eq. opt(1)) go to 21
       run = .false.
       is3 = opx(2)
       if (ivc(1) .eq. opt(2)) go to 21
       write (output,2005)
 2005 format('0******** Inp-chk, run option incorrectly specified.')
   21  if( iand(ihlppr(2),ishft(1,22)).ne.0 )
     & write (output,2102) is3
 2102 format('0inp-chk, run option is ',a8)
       select case (is1)
       case (1:4)
         call rnewp
       case (5)
         print = is2 - 3
         if (print.eq.0 .or. print.eq.3) print = ior(print,16)
         call rstrip
       case (6)
         call cmpcom
         go to 10
$if def,iua
       case (8)
         if (uncsv .eq. 'setup') then
           call unccalc
           go to 10
         else
           fail = .true.
           write (tty,"('Command and input file option do not match.
     &')")
           write (output,"('0******** Command and input file option do n
     &ot match.')")
           return
         endif
       case (9)
         if (uncsv .eq. 'postpr') then
           call uncposti (tpost)
           if (.not.tpost) call uncpost
           go to 10
         else
           fail = .true.
           write (tty,"('Command and input file option do not match.
     &')")
           write (output,"('0******** Command and input file option do n
     &ot match.')")
         endif
$endif
       case default
         call fabend
       end select
       if (fail) then
         write (output,"('0******** Errors detected during input process
     &ing.')")
         write (tty,"('******** Errors detected during input processing.
     &')")
$if -def,selap,1
         go to 10
$if def,selap,3
         if (.not.scntrl(1)) go to 10
         ncase = 0
         return
       endif
       write (output,
     & "('0$$$$$$$$ Input processing completed successfully.')")
       write (tty,
     & "('$$$$$$$$ Input processing completed successfully.')")
$if -def,selap,1
       if (.not.run) go to 10
$if def,selap,3
       if (run) return
       if (.not.scntrl(1)) go to 10
       ncase = 0
       return
       end
