*mlist
       subroutine  strtp (a,s,it,err)
c
c
c  Computes water thermodynamic properties as a function of temperature
c  and pressure.
c
c  Cognizant engineer: rjw jet.
c
c      Language: FORTRAN 77
c
c      Calling sequence:
c
c                call  strtp (rp1,rp2,ip3,lp4)
c
c      Parameters:
c
c                rp1 = a   = steam tables (input)
c
c                rp2 = s   = array into which the computed
c                            thermodynamic properties are stored
c                            (input,output)
c
c                ip3 = it  = flag indicating physical state of steam
c                            table fluid, i.e., liquid, vapor,
c                            superheated vapor (output)
c
c                lp4 = err = error flag (output)
c
c      This routine adapted from sth2x3 routine written by R. J. Wagner
c      for light water steam tables
c
       implicit none
c
       real  a(*), s(*)
       integer  it
       logical  err
c
       include 'stcom.h'
c
       real  unp,dpsdts,pa,ta,
     &       f1,f2,d1,d2,c0,c1,c2,c3,cv,ren,dum,dpdtcr,
     &       pb,tb,fr1,fr,frn,px,frc,frc2,frd,frd2,hfg1,hfg2,dpdt1,dpdt2
       integer  ip,jp,jpp,kp2,kp,
     &          ia,ib,jpq,lpp,lqq,ic,id
       logical s1, s2
$if -def,in32,2
       integer  msk
       parameter (msk=1073741823)
$if def,in32,2
       integer iunp(2)
       equivalence (unp,iunp(1))
c
c--check for valid input
       if (s(1).lt.a(1) .or. s(1).gt.5000.) go to 1001
       if (s(2).le.0.0 .or. s(2).gt.a(it3p0)) go to 1001
c
$if -def,in32,5
$if def,cray,1
       ip = shiftr(s(23),30)
$if -def,cray,1
       ip = ishft(s(23),-30)
       jp = and(s(23),msk)
$if def,in32,3
       unp = s(23)
       ip = iunp(1)
       jp = iunp(2)
       if (ip.le.0 .or. ip.gt.nt) ip = 1
       if (jp.le.0 .or. jp.ge.np) jp = 1
       if (s(1) .ge. a(nt)) go to 46
c
c--set indexes in temperature and pressure tables for saturation
c--computations
c
   11  if (s(1) .ge. a(ip)) go to 10
       ip = ip - 1
       go to 11
   10  if (s(1) .lt. a(ip+1)) go to 12
       ip = ip + 1
       go to 10
   12  if (ip .ge. nst) go to 44
       s1 = .false.
       s2 = .false.
c
c--get saturation pressure
c
       call  strsat (a,1,s(1),s(10),dpsdts,err)
       if (err)  go to 1001
c
       jpp = jp + nt
   13  if (s(10) .ge. a(jpp)) go to 14
       jpp = jpp - 1
       if (jpp .gt. nt) go to 13
       s2 = .true.
       go to 15
   14  if (s(10) .lt. a(jpp+1)) go to 15
       jpp = jpp + 1
       if (jpp .lt. it3p0) go to 14
       s1 = .true.
   15  kp2 = it4bp + (jpp-nt)*13
       kp = it3bp + ip*13
       if (s2 .or. a(jpp) .le. a(kp)) go to 16
       pa = a(jpp)
       ta = a(kp2)
       ia = kp2
       go to 17
   16  ta = a(ip)
       pa = a(kp)
       ia = kp
   17  if (s1 .or. a(jpp+1) .ge. a(kp+13)) go to 18
       pb = a(jpp+1)
       tb = a(kp2+13)
       ib = kp2 + 13
       go to 19
   18  tb = a(ip+1)
       pb = a(kp+13)
       ib = kp + 13
   19  fr1 = s(1) - ta
c
c--compare input pressure to saturation pressure to determine vapor or
c--liquid
c
       fr = fr1/(tb-ta)
       if (s(2) .le. s(10)) go to 43
       it = 1
       s(9)=0.0
       go to 50
   46  ip = nt
   44  it = 4
       go to 45
   43  it = 3
   45  s(9)=1.0
   50  jpq = jp + nt
c
c--search for single phase indexes
c
   51  if (s(2) .ge. a(jpq)) go to 53
       jpq = jpq - 1
       if (jpq .gt. nt) go to 51
       go to 90
   53  if (s(2) .lt. a(jpq+1)) go to 54
       jpq = jpq + 1
       if (jpq .lt. it3p0) go to 53
       go to 1001
   54  jp = jpq - nt
       lpp = it5bp + jp*nprpnt + ip*6
       lqq = lpp + nprpnt
       kp2 = it4bp + jp*13
       frn = s(1)-a(ip)
       if (it-3) 60,70,73
c--liquid phase
c
   60  if (a(jpq) .ge. s(10)) go to 61
      px = s (10)
       s2 = .false.
       go to 62
   61 px = a (jpq)
       s2 = .true.
       if (jp .gt. nsp) go to 63
       if (a(kp2) .gt. a(ip+1)) go to 63
       frc = frn/(a(kp2)-a(ip))
       frc2 = s(1) - a(kp2)
       ic = kp2+1
       go to 62
   63  frc = frn/(a(ip+1)-a(ip))
       frc2 = s(1) - a(ip+1)
       ic = lpp+6
       frd = frc
       frd2 = frc2
       go to 65
   62  if (jp .ge. nsp) go to 67
       if (a(kp2+13).gt. a(ip+1)) go to 67
       frd = frn/(a(kp2+13)-a(ip))
       frd2 = s(1) - a(kp2+13)
       id = kp2 + 14
       go to 66
   67  frd = frn/(a(ip+1)-a(ip))
       frd2 = s(1) - a(ip+1)
   65  id = lqq+6
   66  if (s2) go to 69
       hfg1 = a (ia+8) - a (ia+2) + pa * ( a (ia+7) - a (ia+1))
       hfg2 = a (ib+8) - a (ib+2) + pb * ( a (ib+7) - a (ib+1))
       dpdt1 = hfg1 / ( ta   *( a(ia+7)- a(ia+1)))
       if ( tb .ne. tcrit .and. pb .ne. pcrit ) then
         dpdt2 = hfg2 / ( tb   *( a(ib+7)- a(ib+1)))
       else
         if ( tb .eq. tcrit ) then
           call  strsat (a,1,tb,dum,dpdtcr,err)
         else
           call  strsat (a,2,pb,dum,dpdtcr,err)
         endif
         dpdt2 = dpdtcr
       endif
       f1 = a (ia+1) * ( a (ia+3) - a (ia+4) * dpdt1)
       f2 = a (ib+1) * ( a (ib+3) - a (ib+4) * dpdt2)
       d1 = f1 * ( tb - ta )
       d2 = f2 * ( tb - ta )
       c0 = a (ia+1)
       c1 = d1
       c2 = 3. *( a(ib+1) - a(ia+1)) - d2 - 2. * d1
       c3 = d2 + d1 - 2. *( a(ib+1) - a(ia+1))
       s (11) = c0 + fr *( c1 + fr *( c2 + fr * c3 ))
       s(13) = a(ia+2) + (a(ib+2)-a(ia+2))*fr
       s(17) = a(ia+3) + (a(ib+3)-a(ia+3))*fr
       s(19) = a(ia+4) + (a(ib+4)-a(ia+4))*fr
       s(21) = a(ia+5) + (a(ib+5)-a(ia+5))*fr
       s(25) = a(ia+6) + (a(ib+6)-a(ia+6))*fr
       go to 56
   69  d1 = a(lpp+2) * a (lpp) * (frn - frc2)
       d2 = a(ic +2) * a (ic ) * (frn - frc2)
       c0 = a (lpp)
       c1 = d1
       c2 = 3. *( a(ic) - a(lpp)) - d2 - 2.* d1
       c3 = d2 + d1 - 2. *( a(ic) - a(lpp))
       s (11) = c0 + frc *( c1 + frc *( c2 + frc * c3 ))
       s(13) = a(lpp+1) + (a(ic+1)-a(lpp+1))*frc
       s(17) = a(lpp+2) + (a(ic+2)-a(lpp+2))*frc
       s(19) = a(lpp+3) + (a(ic+3)-a(lpp+3))*frc
       s(21) = a(lpp+4) + (a(ic+4)-a(lpp+4))*frc
       s(25) = a(lpp+5) + (a(ic+5)-a(lpp+5))*frc
   56  d1 = a(lqq+2) * a (lqq) * (frn - frd2)
       d2 = a(id +2) * a (id ) * (frn - frd2)
       c0 = a (lqq)
       c1 = d1
       c2 = 3. *( a(id) - a(lqq)) - d2 - 2.* d1
       c3 = d2 + d1 - 2. *( a(id) - a(lqq))
       s (12) = c0 + frd *( c1 + frd *( c2 + frd * c3 ))
       s(14) = a(lqq+1) + (a(id+1)-a(lqq+1))*frd
       s(18) = a(lqq+2) + (a(id+2)-a(lqq+2))*frd
       s(20) = a(lqq+3) + (a(id+3)-a(lqq+3))*frd
       s(22) = a(lqq+4) + (a(id+4)-a(lqq+4))*frd
       s(26) = a(lqq+5) + (a(id+5)-a(lqq+5))*frd
       if (s(11) .gt. s(12)) go to 83
       s(3) = s(11)
       fr = 0.0
       go to 84
   83  s(15) = s(19)*s(11)
       s(16) = s(20)*s(12)
       fr1 = s(16) - s(15)
       if (abs(fr1) .lt. 1.0e-10) go to 81
       fr = s(11) + s(12) - (a(jpq+1) - px)*s(15)*s(16)/fr1
       fr1 =  sqrt(fr*fr - 4.0*s(11)*s(12)*(s(16)*
     * (1.0-s(19)*(s(2)-px)) - s(15)*(1.0-s(20)*(s(2)-a(jpq+1))))/fr1)
       s(3) = 0.5*(fr + fr1)
       if (s(3) .gt. s(11)) s(3) = 0.5*(fr - fr1)
       if (s(3) .ge. s(12)) go to 82
   81  fr = (s(2) - px)/(a(jpq+1) - px)
       s(3) = s(11)*(1.0-fr) + s(12)*fr
   82  fr = (s(3)-s(11))/(s(12)-s(11))
   84  s(4) = s(13) + (s(14)-s(13))*fr
       s(5) = s(4) + s(2)*s(3)
       s(6) = s(17) + (s(18)-s(17))*fr
       s(7) = s(19) + (s(20)-s(19))*fr
       s(8) = s(21) + (s(22)-s(21))*fr
       s(24) = s(25) + (s(26)-s(25))*fr
       go to 20
c
c--vapor phase
c
   70  s1 = .false.
       if (a(jpq+1) .le. s(10)) go to 71
       frc = s(10)
       hfg1 = a (ia+8) - a (ia+2) + pa * ( a (ia+7) - a (ia+1))
       hfg2 = a (ib+8) - a (ib+2) + pb * ( a (ib+7) - a (ib+1))
       dpdt1 = hfg1 / ( ta   *( a(ia+7)- a(ia+1)))
       if ( tb .ne. tcrit .and. pb .ne. pcrit ) then
         dpdt2 = hfg2 / ( tb   *( a(ib+7)- a(ib+1)))
       else
         if ( tb .eq. tcrit ) then
           call  strsat (a,1,tb,dum,dpdtcr,err)
         else
           call  strsat (a,2,pb,dum,dpdtcr,err)
         endif
         dpdt2 = dpdtcr
       endif
       f1 = a (ia+7) * ( a (ia+9) - a (ia+10)* dpdt1)
       f2 = a (ib+7) * ( a (ib+9) - a (ib+10)* dpdt2)
       d1 = f1 * ( tb - ta )
       d2 = f2 * ( tb - ta )
       c0 = a (ia+7)
       c1 = d1
       c2 = 3. *( a(ib+7) - a(ia+7)) - d2 - 2. * d1
       c3 = d2 + d1 - 2. *( a(ib+7) - a(ia+7))
       s (12) = c0 + fr *( c1 + fr *( c2 + fr * c3 ))
       s(14) = a(ia+8) + (a(ib+8)-a(ia+8))*fr
       s(18) = a(ia+9) + fr*tb/s(1)*(a(ib+9)-a(ia+9))
       s(20) = a(ia+10) + (s(10)-pa)/(pb-pa)*pb/s(10)*(a(ib+10)-
     * a(ia+10))
       s(22) = a(ia+11) + (a(ib+11)-a(ia+11))*fr
       s(26) = a(ia+12) + (a(ib+12)-a(ia+12))*fr
       go to 72
   71  if (a(kp2+13).lt. a(ip)) go to 73
       frd = (s(1)-a(kp2+13))/(a(ip+1)-a(kp2+13))
       ic = kp2 + 20
       go to 74
   73  if (ip .eq. nt) go to 80
       frd = frn/(a(ip+1)-a(ip))
       s1 = .true.
       ic = lqq
   74  frc = a(jpq+1)
       c0 = a (ic)
       d1 = a (ic) * a (ic+2) * ( a(ip+1) - a(ip))
       d2 = a (lqq+8) * a(lqq+6) * ( a(ip+1) - a(ip))
       c1 = d1
       c2 = 3.* (a(lqq+6) - a(ic)) - d2 - 2. * d1
       c3 = d2 + d1 - 2.* ( a(lqq+6) - a(ic))
       s (12) = c0 + frd *( c1 + frd *( c2 + frd * c3 ))
       s(14) = a(ic+1) + (a(lqq+7)-a(ic+1))*frd
       s(18) = a(ic+2) + frd*a(ip+1)/s(1)*(a(lqq+8)-a(ic+2))
       s(20) = a(ic+3) + (a(lqq+9)-a(ic+3))*frd
       s(22) = a(ic+4) + (a(lqq+10)-a(ic+4))*frd
       s(26) = a(ic+5) + (a(lqq+11)-a(ic+5))*frd
   72  if (s1) go to 75
       if (a(kp2) .lt. a(ip)) go to 77
       frd = (s(1)-a(kp2))/(a(ip+1)-a(kp2))
       ia = kp2 + 7
       go to 76
   77  frd = frn/(a(ip+1)-a(ip))
   75  ia = lpp
   76  c0 = a (ia)
       d1 = a (ia) * a (ia+2) * ( a(ip+1) - a(ip))
       d2 = a (lpp+8) * a(lpp+6) * ( a(ip+1) - a(ip))
       c1 = d1
       c2 = 3.* (a(lpp+6) - a(ia)) - d2 - 2. * d1
       c3 = d2 + d1 - 2.* ( a(lpp+6) - a(ia))
       s (11) = c0 + frd *( c1 + frd *( c2 + frd * c3 ))
       s(13) = a(ia+1) + (a(lpp+7)-a(ia+1))*frd
       s(17) = a(ia+2) + frd*a(ip+1)/s(1)*(a(lpp+8)-a(ia+2))
       s(19) = a(ia+3) + (a(lpp+9)-a(ia+3))*frd
       s(21) = a(ia+4) + (a(lpp+10)-a(ia+4))*frd
       s(25) = a(ia+5) + (a(lpp+11)-a(ia+5))*frd
       fr = s(12)*(frc-a(jpq))
       s(3) = s(11)*fr/(fr + (s(11)-s(12))*(s(2)-a(jpq)))
       fr = (s(3)-s(11))/(s(12)-s(11))
       frn = fr*s(12)/s(3)
       s(4) = s(13) + (s(14)-s(13))*fr
       s(5) = s(4) + s(2)*s(3)
       s(6) = s(17) + frn*(s(18) - s(17))
       s(7) = s(19) + (s(20) - s(19))*fr
       s(8) = s(21) + frn*(s(22) - s(21))
       s(24) = s(25) + (s(26)-s(25))*fr
$if -def,in32,1
   20  s(23) = or(shift(ip,30),jp)
$if def,in32,3
   20  iunp(1) = ip
       iunp(2) = jp
       s(23) = unp
       err = .false.
       return
c
c--vapor phase, temperature greater than highest table temperature
c
   80  fr = a(lqq)*(a(jpq+1)-a(jpq))
       s(3) = a(lpp)*fr/(fr + (a(lpp)-a(lqq))*(s(2)-a(jpq)))
       fr = (s(3)-a(lpp))/(a(lqq)-a(lpp))
       frc = fr*a(lqq)/s(3)
       s(5) = a(lpp+1) + (a(lqq+1)-a(lpp+1))*fr + s(2)*s(3)
       s(8) = a(lpp+4) + frc*(a(lqq+4) - a(lpp+4))
       frd = s(1)/a(nt)
       s(3) = s(3)*frd
       s(5) = s(5) + s(8)*frn
       s(4) = s(5) - s(2)*s(3)
       s(6) = (a(lpp+2) + frc*(a(lqq+2) - a(lpp+2)))/frd
       s(7) = a(lpp+3) + (a(lqq+3) - a(lpp+3))*fr
       s(24) = a(lpp+5) + (a(lqq+5) - a(lpp+5))*fr
       cv = s(8) - a(nt)*s(6)*s(6)*s(3)/s(7)
       s(24) = s(24) + cv*log(frd**(s(8)/cv))
       go to 20
c
c--vapor phase, pressure less than lowest table pressure
c
   90  if (it .eq. 1) go to 1001
       if (s(1) .lt. a(it4bp+13)) go to 92
       lpp = it5bp + nprpnt + ip*6
       if (ip .eq. nt) go to 95
       if (a(ip) .lt. a(it4bp+13)) go to 93
       ia = ip
       lqq = lpp
       go to 91
   93  ia = it4bp + 13
       lqq = ia + 7
   91  fr = (s(1)-a(ia))/(a(ip+1)-a(ia))
       s(3) = (fr*a(lpp+6)/a(ip+1) + (1.0-fr)*a(lqq)/a(ia))*a(jpq+1)*
     * s(1)/s(2)
       s(4) = a(lqq+1) + (a(lpp+7)-a(lqq+1))*fr
      s (6) = a(lqq+2) + ( a(lpp+8) - a(lqq+2))* fr * a(ip+1)/ s(1)
       s(8) = a(lqq+4) + (a(lpp+10)-a(lqq+4))*fr
      s(24) = a(lqq+5) + ( a(lpp+11) - a(lqq+5)) * fr
      ren = s (2) * s (3) / s(1)
      s(24) = s(24) - ren*log(s(2)/a(jpq+1))
   94  s(5) = s(4) + s(2)*s(3)
       s(7) = 1.0/s(2)
       jp = 1
       go to 20
   92  s(3) = (fr*pb*a(ib+7)/tb + (1.0-fr)*pa*a(ia+7)/ta)*s(1)/s(2)
       s(4) = a(ia+8) + (a(ib+8)-a(ia+8))*fr
       s(6) = 1.0/s(1)
       s(8) = a(ia+11) + (a(ib+11)-a(ia+11))*fr
      s(24) = a(ia+12) + ( a(ib+12) - a(ia+12)) * fr
      ren = s (2) * s (3) / s(1)
      s(24) = s(24) - ren*log(s(2)/s(10))
       go to 94
   95  frd = s(1)/a(nt)
       frc = a(nt+1)*a(lpp)
       s(3) = frc*frd/s(2)
       s(8) = a(lpp+4)
       s(5) = a(lpp+1) + frc + s(8)*(s(1)-a(nt))
       s(4) = s(5) - s(2)*s(3)
       s(6) = a(lpp+2)/frd
       s(7) = a(lpp+3)*a(nt+1)/s(2)
      ren = s (2) * s (3) / s(1)
      s(24) = a(lpp+5) + s(8)*log(s(1)/a(nt)) - ren*log(s(2)/a(jpq+1))
       go to 20
c
c--error
 1001  err = .true.
       return
       end
