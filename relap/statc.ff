       module statc
c  Storage for statistics during advancement.
c
c  Cognizant engineer: rjw.
c
       implicit none
       integer, parameter, private :: kr=selected_real_kind(12,200)
       real(kr) stscpu,stsdta,stsdtn,stsdtx
       integer strdc1,strdc2,stsatp,stsreq
       integer, allocatable :: stlte1(:),stlte2(:),strap1(:),strap2(:),
     & strcl1(:),strcl2(:),strdp1(:),strdp2(:),strex1(:),strex2(:),
     & strpe1(:),strpe2(:),strte1(:),strte2(:),strxl1(:),strxl2(:),
     & stscl1(:),stscl2(:),stvpk1(:),stvpk2(:)
       integer, allocatable :: stccf1(:),stccf2(:),stjck1(:),stjck2(:),
     & stjpk1(:),stjpk2(:)
!
! T Name    Definition
! i stccf1  Number of times junction used ccfl correlation in entire
! i         problem.
! i stccf2  Number of times junction used ccfl correlation in this major
! i         print interval.
! i stjck1  Number of times junction choked in entire problem.
! i stjck2  Number of times junction choked in this major print
! i         interval.
! i stlte1  Number of times volume had largest mass error in entire
! i         problem.
! i stlte2  Number of times volume had largest mass error in this major
! i         print interval.
! i strap1  Number of time step repeats due to air appearance in this
! i         volume in entire problem.
! i strap2  Number of time step repeats due to air appearance in this
! i         volume in this major print interval.
! i strcl1  Number of times courant limit for this volume caused reduced
! i         time step in entire problem.
! i strcl2  Number of times courant limit for this volume caused reduced
! i         time step in this major print interval.
! i strdc1  Number of repeated time steps in entire problem.
! i strdc2  Number of repeated time steps in this major print interval.
! i strdp1  Number of time step repeats due to pressure change in this
! i         volume in entire problem
! i strdp2  Number of time step repeats due to pressure change in this
! i         volume in this major print interval
! i strex1  Number of times state extrapolation in volume caused reduced
! i         time steps in entire problem.
! i strex2  Number of times state extrapolation in volume caused reduced
! i         time steps in this major print interval.
! i strpe1  Number of times water property error in volume caused
! i         reduced time steps in entire problem.
! i strpe2  Number of times water property error in volume caused
! i         reduced time steps during this major print interval.
! i strte1  Number of times mass error in volume caused reduced time
! i         steps in entire problem.
! i strte2  Number of times mass error in volume caused reduced time
! i         steps during this major print interval.
! i strxl1  Number of times quality adjustment in volume caused reduced
! i         time steps in entire problem.
! i strxl2  Number of times quality adjustment in volume caused reduced
! i         time steps in this major print interval.
! i stsatp  Total number of advancements.
! i stscl1  Number of times volume had smallest courant limit in entire
! i         problem.
! i stscl2  Number of times volume had smallest courant limit in this
! i         major print interval.
! r stscpu  Cpu time required.
! r stsdta  Sum of time steps for averge over edit.
! r stsdtn  Minimum time step during edit.
! r stsdtx  Maximum time step during edit.
! i stsreq  Total number of requested advancements.
!
       contains
!
       subroutine getstatc
!  Allocates space for ihydrodynamic statistics.
!
       use jundat, only: njuns
       use voldat, only: nvols
       implicit none
!
       if (nvols .ne. 0) allocate (stlte1(nvols),stlte2(nvols),
     & strap1(nvols),strap2(nvols),strcl1(nvols),strcl2(nvols),
     & strdp1(nvols),strdp2(nvols),strex1(nvols),strex2(nvols),
     & strpe1(nvols),strpe2(nvols),strte1(nvols),strte2(nvols),
     & strxl1(nvols),strxl2(nvols),stscl1(nvols),stscl2(nvols),
     & stvpk1(nvols),stvpk2(nvols))
       if (njuns .ne. 0) allocate (stccf1(njuns),stccf2(njuns),
     & stjck1(njuns),stjck2(njuns),stjpk1(njuns),stjpk2(njuns))
       return
       end subroutine getstatc
!
       subroutine delstatc
!  Deallocates space for hydrodynamic statistics.
!
       use jundat, only: njuns
       use voldat, only: nvols
       implicit none
!
       if (allocated(stlte1)) deallocate (stlte1,stlte2,strap1,strap2,
     & strcl1,strcl2,strdp1,strdp2,strex1,strex2,strpe1,strpe2,strte1,
     & strte2,strxl1,strxl2,stscl1,stscl2,stvpk1,stvpk2)
       if (allocated(stccf1)) deallocate (stccf1,stccf2,stjck1,stjck2,
     & stjpk1,stjpk2)
       return
       end subroutine delstatc
!
       subroutine rdstatc (fl)
!  Reads hydrodynamic statistics data from restart records, obtaining
!  space if necessary.
!
       use jundat, only: njuns
       use voldat, only: nvols
       implicit none
       logical fl
       character*8 filname
       include 'ufiles.h'
!
       read (rstplt) filname,nvols,njuns
       if (fl) then
         call delstatc
         call getstatc
       endif
       read (rstplt) stscpu,stsdta,stsdtn,stsdtx,strdc1,strdc2,stsatp,
     & stsreq,
     & stlte1,stlte2,strap1,strap2,strcl1,strcl2,strdp1,strdp2,strex1,
     & strex2,strpe1,strpe2,strte1,strte2,strxl1,strxl2,stscl1,stscl2,
     & stvpk1,stvpk2,
     & stccf1,stccf2,stjck1,stjck2,stjpk1,stjpk2
       end subroutine rdstatc
!
       subroutine wrstatc
!
       use jundat, only: njuns
       use voldat, only: nvols
       implicit none
       character*8 :: filname='statec'
       include 'ufiles.h'
!
       write (rstplt) stscpu,stsdta,stsdtn,stsdtx,strdc1,strdc2,stsatp,
     & stsreq,
     & stlte1,stlte2,strap1,strap2,strcl1,strcl2,strdp1,strdp2,strex1,
     & strex2,strpe1,strpe2,strte1,strte2,strxl1,strxl2,stscl1,stscl2,
     & stvpk1,stvpk2,
     & stccf1,stccf2,stjck1,stjck2,stjpk1,stjpk2
!
       end subroutine wrstatc
       end module statc
