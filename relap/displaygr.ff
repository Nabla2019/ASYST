$if def,gui
       subroutine displaygr
!  Create table plots
$if -def,ifortc,1
       use opengl_gl
$if def,ifortc,1
       use ifopngl
       use opengl_glut
!
       use hynmod
       use scdmod
       use voldat
       use jundat
       use vreqsd
       implicit none
!
       external myDisplay,myReshape,myMouse,myHandlemenu,
     &  handlemenu,setdata,key,keysp
!
       include 'fast.h'
       include 'contrl.h'
       include 'scddat.h'
       include 'scdcom.h'
       include 'cpmdat.h'
       include 'ndxara.h'
       include 'debout.h'
       include 'hardpn.h'
       include 'intcom.h'
       include 'miscon.h'
       include 'nrcom.h'
       include 'scdout.h'
       include 'alcm.h'
       include 'iparm.h'
       include 'coupl.h'
       include 'slumpv.h'
       include 'uoxcom.h'
       include 'buntim.h'
       include 'plndat.h'
       include 'scntl.h'
!
       interface
!
       include 'guirun.h'
!
       end interface
!
!  Local variables
       integer i,ij,j,jj,n,nv
       character*10 vno
!  Title of the window
       character*50 wintitl
!
       call glutIdleFunc(glutNullFunc)
       call glutInitWindowPosition(100+10*(nag-1),100+10*(nag-1))
       call glutInitWindowSize(800,500)
       call glutInitDisplayMode (ior(GLUT_DOUBLE,GLUT_RGB))
       write (wintitl,"('RELAP5/SCDAP Interactive Plot')")
       grwin(nag) = glutCreateWindow (TRIM(wintitl))
       call fglClearColor(1.0,1.0,1.0,1.0)
       call fglShadeModel (GL_FLAT)
!  Opengl main functions
       call glutReshapeFunc(myReshape)
       call glutDisplayFunc(myDisplay)
!  Call mouse function
       call glutMouseFunc(myMouse)
!  Key functions
       call glutKeyboardFunc (key)
       call glutSpecialFunc (keysp)
!
!  Menus for selecting quantities in the interactive graph
!  SCDAP menus
!!       if(scntrl(1)) then
!  SCDAP system variables
!!         gsmenu(1) = glutCreateMenu (setdata)
!!         do i = 1,10
!!           call glutAddMenuEntry (rp8(i),500+i)
!!         enddo
!  SCDAP component quantities
!!         if (allocated(scdcmp)) deallocate(scdcmp)
!!         allocate(scdcmp(2))
!!         j = 1
!!         do nv=1,2
!!           scdcmp(nv) = glutCreateMenu(setdata)
!!           do n=1,ncomp
!!             j = j + 1
!!             write (vno,"(i8)") scdcmpno(n)
!!             call glutAddMenuEntry(vno,510+j)
!!           enddo
!!         enddo
!!         gsmenu(2) = glutCreateMenu (setdata)
!!         do nv = 1,2
!!           call glutAddSubMenu (rp9(nv),scdcmp(nv))
!!         enddo
!  SCDAP axially dependent quantities
!!         if (allocated(scdgma)) deallocate(scdgma,scdgmx)
!!         allocate(scdgmx(5),scdgma(5,ncomp,2))
!!         jj = 1
!!         do nv=1,5
!!           do n=1,ncomp
!!             scdgma(nv,n,2) = glutCreateMenu(setdata)
!!             do j=1,naz
!!               write (vno,"('Axial',x,i2)") j
!!               call glutAddMenuEntry(vno,1000+jj)
!!               jj = jj + 1
!!             enddo
!!           enddo
!!         enddo
!!         do nv=1,5
!!           scdgmx(nv) = glutCreateMenu(setdata)
!!           do n=1,ncomp
!!             write (vno,"(i8)") scdcmpno(n)
!!             call glutAddSubMenu(vno,scdgma(nv,n,2))
!!           enddo
!!         enddo
!!         gsmenu(3) = glutCreateMenu (setdata)
!!         do nv=1,5
!!           call glutAddSubMenu(rp10(nv),scdgmx(nv))
!!         enddo
!!       endif
!
!  Start with the 2d interactive graph menus
!  Set the menus for graph window
!  Submenus for setting the SCDAP variables.
       if (scntrl(1)) then
!  SCDAP core variables
         gsmenu(1) = glutCreateMenu (setdata)
         do i = 1,numt9a
           call glutAddMenuEntry (t9a(i),500+i)
         enddo
         if (shroud) then
           call glutAddMenuEntry ('shqin',500+numt9a+1)
           call glutAddMenuEntry ('shqout',500+numt9a+2)
         endif
!
!  Loop for building the menus with the number axial and radial nodes in 
!  each SCDAP component.
         if (allocated(scdgmn)) deallocate(scdgmn,scdgmx,scdgma,scdgmr)
         allocate(scdgmn(1),scdgmx(numt9c),
     & scdgma(max(1,numt9c),ncomp,2), scdgmr(1,ncomp,naz))
!  Submenu for components and nodal dependent variables
         jj=1
         do nv=1,1 ! only one variable on t9d
           do n=1,ncomp
             do j=1,naz
               scdgmr(nv,n,j) = glutCreateMenu(setdata)
               do i=1,nrods2(1,n)
                 write (vno,"('Radial',x,i2)") i
                 call glutAddMenuEntry (vno,1000+jj)
                 jj = jj + 1
               enddo
             enddo
           enddo 
         enddo
         do nv=1,1
           do n=1,ncomp
             scdgma(nv,n,1) = glutCreateMenu(setdata)
             do j=1,naz
               write (vno,"('Axial',x,i2)") j
               call glutAddSubMenu(vno,scdgmr(nv,n,j))
             enddo
           enddo
         enddo
         do nv=1,1
           scdgmn(nv) = glutCreateMenu(setdata)
           do n=1,ncomp
             write (vno,"(i8)") scdcmpno(n)
             call glutAddSubMenu(vno,scdgma(nv,n,1))
           enddo
         enddo
         gsmenu(3) = glutCreateMenu (setdata)
         do nv=1,1
           call glutAddSubMenu(t9d,scdgmn(nv))
         enddo
!
!  Submenu for axial nodes without radial submenus
         do nv=1,numt9c
           do n=1,ncomp
             scdgma(nv,n,2) = glutCreateMenu(setdata)
             do j=1,naz
               write (vno,"('Axial',x,i2)") j
               call glutAddMenuEntry(vno,1000+jj)
               jj = jj + 1
             enddo
           enddo
         enddo
         do nv=1,numt9c
           scdgmx(nv) = glutCreateMenu(setdata)
           do n=1,ncomp
             write (vno,"(i8)") scdcmpno(n)
             call glutAddSubMenu(vno,scdgma(nv,n,2))
           enddo
         enddo
         gsmenu(2) = glutCreateMenu (setdata)
         do nv=1,numt9c
           call glutAddSubMenu(t9c(nv),scdgmx(nv))
         enddo
!         
       endif
!
!  Build submenus for volume number field in RELAP.
       n = (nvolsv + 36)/37
       if (allocated(rldgmv)) deallocate (rldgmv)
       allocate (rldgmv(0:n,numt2))
       j = 1
       do nv = 1,numt2
         ij = 1
         lp1: do i = 1,n
           rldgmv(i,nv) = glutCreateMenu (setdata)
           lp2: do jj = 1,37
             write (vno,"(i10.9)") vol(ij)%volno
             call glutAddMenuEntry (vno,j+5000)
             if (j .ge. nvolsv*numt2) exit lp1
             j = j + 1
             if (ij .ge. nvolsv) exit lp2 
             ij = ij + 1
           enddo lp2
         enddo lp1
       enddo
       do nv=1,numt2
         rldgmv(0,nv) = glutCreateMenu (setdata)
         do i = 1,n
           write (vno,"('Vols-',i2)") i
           call glutAddSubMenu (vno,rldgmv(i,nv))
         enddo
       enddo
!  Build submenus for junction number field in RELAP.
       n = (njunsj + 36)/37
       if (allocated(rldgmj)) deallocate (rldgmj)
       allocate (rldgmj(0:n,numt3))
       j = 1
       do nv = 1,numt3
         ij = 1
         lp3: do i = 1,n
           rldgmj(i,nv) = glutCreateMenu (setdata)
           lp4: do jj = 1,37
             write (vno,"(i10.9)") jun(ij)%junno
             call glutAddMenuEntry (vno,j+25000)
             if (j .ge. njunsj*numt3) exit lp3
             j = j + 1
             if (ij .ge. njunsj) exit lp4 
             ij = ij + 1
           enddo lp4
         enddo lp3
       enddo
       do nv=1,numt3
         rldgmj(0,nv) = glutCreateMenu (setdata)
         do i = 1,n
           write (vno,"('Jun-',i2)") i
           call glutAddSubMenu (vno,rldgmj(i,nv))
         enddo
       enddo
!
!  Submenus for setting the RELAP5 variables.
!  Get general quantities.
!!!!       gsmenu(4) = glutCreateMenu (setdata)
!!!!       j = 1
!!!!       do i = 1,numt1
!!!!         if (i .ne. 6)
!!!!     &   call glutAddMenuEntry (t1(i),100 + j)
!!!!         j = j + 1
!!!!       enddo
!!!!       do i = 1,numt11
!!!!         call glutAddMenuEntry (t11(i),100 + j)
!!!!         j = j + 1
!!!!       enddo
!  Get component quantities.
!!!!       gsmenu(5) = glutCreateMenu (setdata)
!!!!       do i = 1,numt5
!!!!         call glutAddMenuEntry (t5(i),200 + i)
!!!!       enddo
!  Get volume quantities.
       gsmenu(6) = glutCreateMenu (setdata)
       do i = 1,35
         call glutAddSubMenu (t2(i),rldgmv(0,i))
       enddo
       gsmenu(7) = glutCreateMenu (setdata)
       do i = 36,numt2
         call glutAddSubMenu (t2(i),rldgmv(0,i))
       enddo
!  Get junction quantities.
       gsmenu(8) = glutCreateMenu (setdata)
       do i = 1,numt3
         call glutAddSubMenu (t3(i),rldgmj(0,i))
       enddo
!  Get reactor kinetic quantities.
!!!!       if (allocated(rk)) then
!!!!         gsmenu(9) = glutCreateMenu (setdata)
!!!!         do i = 1,numt6
!!!!           call glutAddMenuEntry (t6(i),250 + i)
!!!!         enddo
!!!!       endif
!  Get heat structure quantities.
!!!!       if (nhtsgs .ne. 0) then
!!!!         gsmenu(10) = glutCreateMenu (setdata)
!!!!         do i = 1,numt4
!!!!           call glutAddMenuEntry (t4(i),300 + i)
!!!!         enddo
!!!!       endif
!  Get reflood related quantities.
!!!!       if (nrflht .ne. 0) then
!!!!         gsmenu(11) = glutCreateMenu (setdata)
!!!!         do i = 1,numt8
!!!!           call glutAddMenuEntry (t8(i),260 + i)
!!!!         enddo
!!!!       endif
!  Get Couple quantities.
!!!!       if (cplmaxnp .ne. 0) then
!!!!         gsmenu(12) = glutCreateMenu (setdata)
!!!!         j = 1
!!!!         do i = 1,numt10a
!!!!           call glutAddMenuEntry (t10a(i),350 + j)
!!!!           j = j + 1
!!!!         enddo
!  Last variable of t10b block not included because logic in subroutine
!  scnreq does not impose limits on parameter. More work is needed to
!  fix that before finishing the menu entries for that last variable.
!!!!         do i = 1,numt10b
!!!!           if (i.ne.2 .or. nspdeb.ne.0)
!!!!     &      call glutAddMenuEntry (t10b(i),400 + j)
!!!!           j = j + 1
!!!!         enddo
!!!!       endif
!
!  Prepare list of RELAP variables.
       gmmenu(1) = glutCreateMenu (setdata)
!  Provisionally commented
!       call glutAddSubMenu ('General quantities',gsmenu(4))
!       call glutAddSubMenu ('Component quantities',gsmenu(5))
       call glutAddSubMenu ('Volume quantities',gsmenu(6))
!  Provisionally commented
!       call glutAddSubMenu ('Volume-1 quantities',gsmenu(6))
!       call glutAddSubMenu ('Volume-2 quantities',gsmenu(7))
       call glutAddSubMenu ('Junction quantities',gsmenu(8))
!  Provisionally commented
!       if (nhtsgs .ne. 0)
!     & call glutAddSubMenu ('Heat structure quantities',gsmenu(10))
!       if (nrflht .ne. 0)
!     & call glutAddSubMenu ('Reflood related quantities',gsmenu(11))
!       if (allocated(rk))
!     & call glutAddSubMenu ('Reactor kinetics quantities',gsmenu(9))
!       if (cnvnum .ne. 0)
!     & call glutAddMenuEntry ('Control system quantities',10000)
!       if (cplmaxnp .ne. 0) 
!     & call glutAddSubMenu ('Lower plenum quantities',gsmenu(12))
!
!  Prepare list of SCDAP variables
       if (scntrl(1)) then
         gmmenu(2) = glutCreateMenu (setdata)
         call glutAddSubMenu ('General quantities',gsmenu(1))
         call glutAddSubMenu ('Axially quantities',gsmenu(2))
         call glutAddSubMenu ('Nodal quantities  ',gsmenu(3))
       endif
!
!  Create main menus for the 2d-graph windows
       gmmenu(3) = glutCreateMenu(handlemenu)
       call glutAddSubMenu ('Advancement ',smenu(4))
       call glutAddMenuEntry ('Pause/trip command  (p)',50)
       call glutAddMenuEntry ('Escape command      (ESC)',25)
       call glutAddMenuEntry ('Exit window         (E)',24)
!
!  The main menu uses myHandlemenu function
       gmenu(1) = glutCreateMenu(myHandlemenu)
       call glutAddMenuEntry ('Open graph window  ',1)
       call glutAddMenuEntry ('Close graph window ',2)
       call glutAddSubMenu ('Add RELAP variable/s ',gmmenu(1))
!  Add SCDAP data menus if there are scdap components
       if (scntrl(1)) then
         call glutAddSubMenu ('Add SCDAP variable/s ',gmmenu(2))
       endif
       call glutAddSubMenu ('Run management ',gmmenu(3))
!  End of menus
!
       call glutSetMenu(gmenu(1))
       call glutAttachMenu (GLUT_RIGHT_BUTTON)
!
       return
       end subroutine displaygr
!
!  Routine to set the interactive plotting data
       subroutine setdata(value)
!
!$if -def,ifortc,1
!       use opengl_gl
!$if def,ifortc,1
       use ifopngl
       use opengl_glut
!
       use hynmod
       use scdmod
       use voldat
       use jundat
       use vreqsd
       use usrvarc
!
       implicit none
!
       include 'fast.h'
       include 'contrl.h'
       include 'scddat.h'
       include 'scdcom.h'
       include 'cpmdat.h'
       include 'ndxara.h'
       include 'debout.h'
       include 'hardpn.h'
       include 'intcom.h'
       include 'miscon.h'
       include 'nrcom.h'
       include 'scdout.h'
!aag       include 'tblsp.h'
       include 'alcm.h'
       include 'iparm.h'
       include 'coupl.h'
       include 'slumpv.h'
       include 'uoxcom.h'
       include 'buntim.h'
       include 'plndat.h'
       include 'scntl.h'
!
!  Local variables
       integer value
!  value -> value of selected variable and node from menu
       type (plotrqs), allocatable :: iplotrqt(:,:)
       integer nv,i,j,nscdc,p1,p2,p3,p4,n
       integer g,ng,nn
!  nscdc -> number of nodal scdap combinations
!  j -> counter for the number of different variables
!  i -> counter for the number of items of j variable 
!  n -> counter for the number of variables in a graph g
!  g -> counter for the number of graphs
!  p1 -> position marker 1
!  p2 -> position marker 2 
!  p3 -> position marker 3
!  p4 -> position marker 4 
!
!  Allocate variables with the information of the graph
!  Max. 10 variables for graph, and 10 graphs
       if(.not. allocated(inames)) allocate(inames(10,10),
     & itabno(10,10),itabl(10,10))
!  Look for the active graph (ng)
!  Looking for a graph number
       do g=1,nag
         if(glutGetWindow() .eq. grwin(g)) then
           ng = g
           exit
         endif
       enddo
!  Initialize i and j
       j = inplotrq(ng)
       i = iinplotrq(ng)
!  Set newvar to true
       newvar = .true.
!
       select case (value)
!  SCDAP general variables (not present into the restart file)
       case(501:501+numt9a+2)
         if (value .le. 501+numt9a) then
           ngrvar(ng) = ngrvar(ng) + 1 
           ntvar = ntvar + 1
           inames(ngrvar(ng),ng) = t9a(value-500)
           itabno(ngrvar(ng),ng) = 1
           itabl(ngrvar(ng),ng) = 0 
         else  ! shroud
           ngrvar(ng) = ngrvar(ng) + 1 
           ntvar = ntvar + 1
           if (value .eq. 501+numt9a+1) then
             inames(ngrvar(ng),ng) = 'shqin'
           else
             inames(ngrvar(ng),ng) = 'shqout'
           endif
           itabno(ngrvar(ng),ng) = 1
           itabl(ngrvar(ng),ng) = 0 
         endif
!
!  SCDAP axially and nodal dependent variables (1001-5000)
       case(1001:5000)
         ngrvar(ng) = ngrvar(ng) + 1 
         ntvar = ntvar + 1
         nscdc = ncomp*naz*maxval(nrods2(1,:))
         if (value .le. 1001+nscdc) then
!  Nodal variables
!  Number of variable 'p1'
           p1 = (value-1000)/(ncomp*naz*maxval(nrods2(1,:))) + 1
!  Number of component
           p2 = mod(value-1000,ncomp*naz*maxval(nrods2(1,:)))
     & /(naz*maxval(nrods2(1,:))) + 1
!  Number of axial node
           p3 = mod(mod(value-1000,ncomp*naz*maxval(nrods2(1,:)))
     & ,naz*maxval(nrods2(1,:)))/naz + 1 
!  Number of radial node
           p4 = mod(mod(mod(value-1000,ncomp*naz*maxval(nrods2(1,:)))
     & ,naz*maxval(nrods2(1,:))),maxval(nrods2(1,:))) 
           inames(ngrvar(ng),ng) = t9d
           itabno(ngrvar(ng),ng) = 1
           itabl(ngrvar(ng),ng) = p4*1e4+p3*1e2+p2 
         else 
!  Axially dependent variables
!  Number of variable 'p1'
           p1 = (value-1000-nscdc)/(ncomp*naz) + 1
!  Number of component
           p2 = mod(value-1000-nscdc,ncomp*naz)/naz + 1
!  Number of axial node
           p3 = mod(mod(value-1000-nscdc,ncomp*naz),naz)
           inames(ngrvar(ng),ng) = t9c(p1)
           itabno(ngrvar(ng),ng) = 1
           itabl(ngrvar(ng),ng) = p3*1e2+p2 
         endif
!
!  RELAP volum variables (5001-25000)
       case(5001:25000)
         ngrvar(ng) = ngrvar(ng) + 1 
         ntvar = ntvar + 1
!  Number of variable 'p1'
         p1 = (value-5000)/nvolsv + 1
!  Number of volum 'p2'
         p2 = mod(value-5000,nvolsv)
         inames(ngrvar(ng),ng) = t2(p1)
         itabno(ngrvar(ng),ng) = 1
         itabl(ngrvar(ng),ng) = vol(p2)%volno
!
!  RELAP juntion variables (25001-40000)
       case(25001:40000)
         ngrvar(ng) = ngrvar(ng) + 1 
         ntvar = ntvar + 1
!  Number of variable 'p1'
         p1 = (value-25000)/njunsj + 1
!  Number of junction 'p2'
         p2 = mod(value-25000,njunsj)
         inames(ngrvar(ng),ng) = t3(p1)
         itabno(ngrvar(ng),ng) = 1
         itabl(ngrvar(ng),ng) = jun(p2)%junno
!  Case default (message)     
       case default
!
       end select
!
!  Set iplotrq with new requirements for interactive plotting
!  Set plotrqt structure with interactive plot data
!
       do n=1,ngrvar(ng)
         if (ngrvar(ng) .eq. 1) then
           i = i + 1
         else
           if (n .ge. ngrvar(ng)) exit
           if (inames(ngrvar(ng),ng) .eq. inames(n,ng)) then
             i = i + 1
             exit
           endif
         endif
       enddo
       if (n .ge. ngrvar(ng)) j = j + 1
!
!  Check for presence of iplot requests.
       if (.not.allocated(iplotrq)) then
         if (allocated(iplotrqt)) deallocate(iplotrqt)
         allocate (iplotrqt(j,nag))
!  Allocate iplotqt(j,ng)%pl(i)  -> j number of different variables
!                             -> i number of items of j variable 
         allocate (iplotrqt(j,nag)%pl(i))
       else
!
         allocate (iplotrqt(max(maxval(inplotrq),j),nag))
!  Allocate iplotqt(j)%pl(i)  -> j number of different variables
!                             -> i number of items of j variable 
         do g = 1, nag 
           if (g .eq. ng) then
             nn = j
           else
             nn = inplotrq(g)
           endif
           do n = 1, nn
             nullify (iplotrqt(n,g)%pl)
             if (g .eq. ng) then
               allocate (iplotrqt(n,g)%pl(i))
             else
               allocate (iplotrqt(n,g)%pl(iinplotrq(g)))
             endif
             do nv = 1, iinplotrq(g)
               iplotrqt(n,g)%pl(nv)%ntabla = iplotrq(n,g)%pl(nv)%ntabla
               iplotrqt(n,g)%pl(nv)%ntabl = iplotrq(n,g)%pl(nv)%ntabl
               iplotrqt(n,g)%pl(nv)%ntabno = iplotrq(n,g)%pl(nv)%ntabno
             enddo
           enddo
         enddo
!
       endif
!
!  Number of different plot variables
       inplotrq(ng) = j
!  Number of same type plot variables
       iinplotrq(ng) = i
!
       write(iplotrqt(j,ng)%pl(i)%ntabla,"(a8)") inames(ngrvar(ng),ng) 
       iplotrqt(j,ng)%pl(i)%ntabl = itabl(ngrvar(ng),ng)
       iplotrqt(j,ng)%pl(i)%ntabno = ior(i,ishft(itabno(ngrvar(ng),ng),
     & 8))
!aag       nullify (iplotrqt(j,ng)%pl(i)%uindxp)
!  If data has been entered, transfer to condensed file.
       if (allocated(iplotrq)) deallocate(iplotrq)
       allocate(iplotrq(maxval(inplotrq),nag))
       do g = 1, nag 
         do n=1,inplotrq(ng)
           iplotrq(n,g)%pl => iplotrqt(n,g)%pl
         enddo
       enddo
       deallocate (iplotrqt)
!
       return
       end subroutine setdata
!
!  Routine to set the data structures for interactive plotting
       subroutine setgraph (np,ml,nfound,ng)
!
!aag       use contrl
       use hynmod
       use usrvarc
!
       implicit none
!
       include 'contrl.h'
!
       integer, intent(in) :: np, ml, ng
       logical, intent(in) :: nfound
!
!  nfound -> flag for missing variables
!  np -> number of x,y points for each quantity
!  ml -> number of variables
!  ml -> number of graph
!  idata -> array containing data to be plotted:
!    idata(:,:,1:nml,ng) corresponding to the left axis.
!    idata(:,:,nml+1,ng) corresponding to the right axis.
!    idata(1:2,:,:,ng) contains x,y pairs.
!    idata(:,1:np,:,ng) contains points for each quantity.
!  lablx -> label for x axis
!  lably -> labels for y axis
!  labll -> label for the legend
!
       integer l,p
!-----------------------------------------------------------------
!  Active the protocol if variable is not in the restart-plot file
       if (nfound) then
         nullvar(ng) = .true.
         newvar = .false.
!aag         if (allocated(iplotrq)) deallocate(iplotrq)
         ngrvar(ng) = ngrvar(ng) - 1
         inplotrq(ng) = inplotrq(ng) - 1
         iinplotrq(ng) = iinplotrq(ng) - 1
         return
       else
         nullvar(ng) = .false.
       endif
!------------------------------------------------------------------ 
!
!  Allocate and initialize maxy and miny
       if (.not. allocated(maxy)) then
         allocate(maxy(10,2),miny(10,2))
         maxy = -1.e+10  
         miny = 1.e+10
       endif
!  Set the iplotd structure
       iplotd(ng)%labla => lablx(ng) 
       iplotd(ng)%labll => lably(ng,1) 
       iplotd(ng)%lablr => lably(ng,2) 
!  Allocate iplot(:)%igdata when change np or ml
       if (allocated(iplotd(ng)%igdata)) deallocate(iplotd(ng)%igdata)    
       allocate(iplotd(ng)%igdata(2,np,ml))
       do l=1,ml    ! loop over the number of variables
         iplotd(ng)%legend(l)%leg => labll(ng,l)
!  Compute the max. and min. values for left axis
         maxy(ng,1) = max(maxy(ng,1), maxval(idata(2,:,l,ng)))
         miny(ng,1) = min(miny(ng,1), minval(idata(2,:,l,ng)))
         do p=1,np  ! loop over the number of points
           iplotd(ng)%igdata(1,p,l)%igd => idata(1,p,l,ng) 
           iplotd(ng)%igdata(2,p,l)%igd => idata(2,p,l,ng) 
         enddo      ! end of points loop
       enddo        ! end of variables loop
       npoints = np
!
       return
       end subroutine setgraph
!
!  2d graph window background
       subroutine dgraphb(ng)
$if -def,ifortc,1
       use opengl_gl
$if def,ifortc,1
       use ifopngl
       use opengl_glut
       use hynmod, only: wwg,whg,iplotd,maxy,miny,ngrvar,nag
!aag       use contrl
!
       implicit none
!
       include 'contrl.h'
!
!  Graph number
       integer, intent(in) :: ng
!
       real valy,val1,val2
       real limv1,limv2,limh1,limh2,lenv,lenh 
       real ord(6), absc(6), data
       integer i,stringl,stringh
       character*20 string
       character*10 axis 
!
!  Limits for plot box
       limv1 = whg(ng)/8.
       limv2 = whg(ng)*6/8.
       limh1 = wwg(ng)/8.
       limh2 = wwg(ng)*7/8.
!
       call fglColor3f (0.0,0.0,0.0)
       call fglLineWidth (1.25)
!  Draw plot box
       call fglBegin (GL_LINE_LOOP)
         call fglVertex3d(limv1,limh1,0.0)
         call fglVertex3d(limv2,limh1,0.0)
         call fglVertex3d(limv2,limh2,0.0)
         call fglVertex3d(limv1,limh2,0.0)
       call fglEnd
!  Lenght of vetical axis
       lenv = limv2 - limv1
!  Lenght of horizontal axis
       lenh = limh2 - limh1
!  Draw the main division lines
       call fglLineWidth (1.0)
       do i=1,5
!  Vertical lines
         call fglBegin (GL_LINE_LOOP)
           call fglVertex3d(limv1,limh1+i*lenh/5,0.0)
           call fglVertex3d(limv2,limh1+i*lenh/5,0.0)
         call fglEnd
!  Horizontal lines
         call fglBegin (GL_LINE_LOOP)
           call fglVertex3d(limv1+i*lenv/5,limh1,0.0)
           call fglVertex3d(limv1+i*lenv/5,limh2,0.0)
         call fglEnd
       enddo
!  Draw the secondary division segments
       call fglLineWidth (1.25)
       do i=1,24
!  Vertical lines
         call fglBegin (GL_LINE_LOOP)
           call fglVertex3d(limv1+0.01*lenv,limh1+i*lenh/25,0.0)
           call fglVertex3d(limv1,limh1+i*lenh/25,0.0)
         call fglEnd
!  Horizontal lines
         call fglBegin (GL_LINE_LOOP)
           call fglVertex3d(limv1+i*lenv/25,limh1+0.01*lenh,0.0)
           call fglVertex3d(limv1+i*lenv/25,limh1,0.0)
         call fglEnd
       enddo
!
!  Box for leyend
       call fglColor3f (0.0,0.0,1.0)
       call fglBegin (GL_LINE_LOOP)
         call fglVertex3d(limv2+limv1*1/4,limh1,0.0)
         call fglVertex3d(limv2+limv1*1/4,limh2,0.0)
         call fglVertex3d(limv2+limv1*7/4,limh2,0.0)
         call fglVertex3d(limv2+limv1*7/4,limh1,0.0)
       call fglEnd
!
!  Set the numbers for axis                   
!  The origen of graph is the point (limv1,limh1)
!  Ajust the values of the axis
!  Ajust time axis (ordinates): last value always the greater
       ord(6) = timehy
       do i=1,5
         if (ord(6) .eq. 0.0)then
           ord(i) = 0.0
         else
           ord(i) = (i-1)*ord(6)/6
         endif
       enddo
!  Ajust vertical axis (abcises): calcule the greater value and scale
       if (timehy .eq. 0. .or. .not. allocated(iplotd(ng)%igdata)) then
         absc = 0.0 
       else
         absc(6) = maxy(ng,1) 
         absc(1) = miny(ng,1)
         do i=2,5
           absc(i) = absc(1) + (i-1)*(absc(6)-absc(1))/5
         enddo
       endif
!  Lenght and height of the string
       stringl = 4*8
       stringh = 13
!  Origin
       call fglColor3f (0.0,0.0,0.0)
       do i=1,6
!  Abcises
         write(axis(:),"(f6.1)") absc(i)
         call prints (limv1-30.0,limh1+(i-1)*lenh/5-stringh/2,
     & TRIM(axis),3) 
!  Ordinates
         write(axis(:),"(f5.1)") ord(i)
         call prints (limv1+(i-1)*lenv/5-stringl/2,limh1-20.,
     & TRIM(axis),3) 
       enddo
!
!  Set the labels
       call fglColor3f (0.0,0.0,0.0)
       call fglLineWidth(0.5)
       call fglEnable(GL_BLEND)
       call fglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
       call fglEnable(GL_LINE_SMOOTH)
       call fglHint(GL_LINE_SMOOTH_HINT, GL_NICEST)
!  Horizontal label
       stringl = 20
       call fglPushMatrix
       call fglTranslatef(limv1+(lenv-stringl)/2.,(limh1-15)/2.,0.0)
       call fglScalef(0.1*whg(ng)/wwg(ng),0.1*wwg(ng)/whg(ng),0.0)
       if (ngrvar(ng) .eq. 0) then
         call prints (0,0,'',4) 
       else
         call prints (0,0,iplotd(ng)%labla,4)
       endif
       call fglPopMatrix
!  Vertical label
       stringl = 60
       call fglPushMatrix
       call fglTranslatef((limv1-15.)/2.,(wwg(ng)-stringl)/2.,0.0)
       call fglScalef(0.1*whg(ng)/wwg(ng),0.1*wwg(ng)/whg(ng),0.0)
       call fglRotatef(90.0,0,0,1)
       if (ngrvar(ng) .eq. 0) then
         call prints (0,0,'',4) 
       else
         call prints (0,0,iplotd(ng)%labll,4) 
       endif
       call fglPopMatrix
       call fglDisable(GL_BLEND)
       call fglDisable(GL_LINE_SMOOTH)
!  Legend
       if (ngrvar(ng) .eq. 0) then
         call prints (0,0,'',4) 
       else
!  Loop over the total number of variables plotted in a graph
         do i=1,ngrvar(ng)
           call fglLineWidth(0.5)
           call fglColor3f (0.0,0.0,0.0)
           call fglEnable(GL_BLEND)
           call fglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
           call fglEnable(GL_LINE_SMOOTH)
           call fglHint(GL_LINE_SMOOTH_HINT, GL_NICEST)
           call fglPushMatrix
           call fglTranslatef(limv2+limv1/4.+5,limh2-24*i,0.0)
           call fglScalef(0.1*whg(ng)/wwg(ng),0.1*wwg(ng)/whg(ng),0.0)
           call prints (0,0,iplotd(ng)%legend(i)%leg,4) 
           call fglPopMatrix
           call fglDisable(GL_BLEND)
           call fglDisable(GL_LINE_SMOOTH)
!  Color selection
           select case(i)
           case(1)
             call fglColor3f (1.0,0.0,0.0)
           case(2)
             call fglColor3f (0.0,1.0,0.0)
           case(3)
             call fglColor3f (0.0,0.0,1.0)
           case(4)
             call fglColor3f (0.5,0.5,0.0)
           case(5)
             call fglColor3f (0.5,0.0,0.5)
           case(6)
             call fglColor3f (0.0,0.5,0.5)
           case(7)
             call fglColor3f (0.75,0.25,0.0)
           case(8)
             call fglColor3f (0.75,0.0,0.25)
           case(9)
             call fglColor3f (0.0,0.75,0.25)
           case(10)
             call fglColor3f (0.33,0.33,0.33)
           end select
!  Line for the legend
           call fglLineWidth(1.5)
           call fglBegin (GL_LINES)
             call fglVertex3d(limv2+limv1*7/4-20,limh2-24*i+10,0.0)
             call fglVertex3d(limv2+limv1*7/4-5,limh2-24*i+10,0.0)
           call fglEnd
         enddo
       endif
!
       return
       end subroutine dgraphb
!
!
!  Display the 2d graph values
       subroutine dgraphv(ng)
$if -def,ifortc,1
       use opengl_gl
$if def,ifortc,1
       use ifopngl
       use opengl_glut
       use hynmod, only: iplotd,wwg,whg,maxy,miny,ngrvar,nag
       implicit none
!
!  Graph number
       integer, intent(in) :: ng
!
       real(4) limv1,limv2,limh1,limh2
       integer p,l,i,j
       real(4) valx,valy,timerst
!
       if(ngrvar(ng) .eq. 0) return
!  The origen of graph is the point (limv1,limh1)
!  Limits for plot box
       limv1 = whg(ng)/8.
       limv2 = whg(ng)*6/8.
       limh1 = wwg(ng)/8.
       limh2 = wwg(ng)*7/8.
!  Test plot a point
       p = size(iplotd(ng)%igdata,2)   ! Number of points
       l = 1                           ! Only left axis
!  Last time of restart plot
       if( p .gt. 0) then
         timerst = iplotd(ng)%igdata(1,p,1)%igd
!  Loop to write the graph lines
         call fglLineWidth(1.5)
         do j=1,ngrvar(ng)
!  Loop over the number of variables to be plotted
!  Color selection
           select case(j)
           case(1)
             call fglColor3f (1.0,0.0,0.0)
           case(2)
             call fglColor3f (0.0,1.0,0.0)
           case(3)
             call fglColor3f (0.0,0.0,1.0)
           case(4)
             call fglColor3f (0.5,0.5,0.0)
           case(5)
             call fglColor3f (0.5,0.0,0.5)
           case(6)
             call fglColor3f (0.0,0.5,0.5)
           case(7)
             call fglColor3f (0.75,0.25,0.0)
           case(8)
             call fglColor3f (0.75,0.0,0.25)
           case(9)
             call fglColor3f (0.0,0.75,0.25)
           case(10)
             call fglColor3f (0.33,0.33,0.33)
           end select
           call fglBegin (GL_LINE_STRIP)
           do i=1,p
             valx = limv1+iplotd(ng)%igdata(1,i,j)%igd/timerst*
     & (limv2-limv1)
             if (timerst .le. 0.0) valx = limv1
             valy = limh1 + (iplotd(ng)%igdata(2,i,j)%igd - miny(ng,l))
     & / (maxy(ng,l) - miny(ng,l))* (limh2-limh1)
             if (maxy(ng,1) .le. 0.0) valy = limh1
             call fglVertex3d(valx,valy,0.0)
           enddo
           call fglEnd
         enddo
       endif
!
      return
      end subroutine dgraphv 
!
!  Open gl window manage functions
!
!  Reshape function
       subroutine myReshape(w,h)
!
$if -def,ifortc,2
       use opengl_glut
       use opengl_gl
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod, only: wwg,whg,grwin,nag
!
       implicit none
       integer w,h
       integer winid, g, ng
!
!  Adjust clipping box
       call fglMatrixMode(GL_PROJECTION)
       call fglLoadIdentity
       call fglOrtho(0.0,w,0.0,h,-1.0,1.0)
       call fglMatrixMode(GL_MODELVIEW)
       call fglLoadIdentity
!  Adjust viewport and clear
       call fglViewPort(0,0,w,h)
       call glutPostRedisplay
       call fglClearColor(1.0,1.0,1.0,1.0)
       call fglClear(GL_COLOR_BUFFER_BIT)
       call fglFlush
!  Set global size for use by drawing routine
       winid = glutGetWindow()
!  Looking for a graph number
       do g=1,nag
         if(winid .eq. grwin(g)) then
           ng = g
           exit
         endif
       enddo
       wwg(ng) = w
       whg(ng) = h
!
       return
       end subroutine myReshape
!
!  Mouse function
       subroutine myMouse(btn,state,x,y)
$if -def,ifortc,2
       use opengl_glut
       use opengl_gl
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
       implicit none
       integer btn,state,x,y
!
!       if (btn .eq. GLUT_RIGHT_BUTTOM .and 
!     & state .eq. GLUT_DOWN) return
!
       return
       end subroutine MyMouse
!
!  Display function
       subroutine myDisplay
$if -def,ifortc,1
       use opengl_gl
$if def,ifortc,1
       use ifopngl
       use opengl_glut
       use hynmod, only: wwg,whg,nullvar,nag,grwin,newvar,runflg,ngrvar
       use plottools
!
!  Local variables
       character :: txt*100
       integer :: i, winid, storewin, g, ng
!
!  Set the current graph window
       winid = glutGetWindow()
!  Looking for a graph number
       do g=1,nag
         if(winid .eq. grwin(g)) then
           ng = g
           exit
         endif
       enddo
!  Adjust clipping box
       call fglMatrixMode(GL_PROJECTION)
       call fglLoadIdentity
       call fglOrtho(0.0,whg(ng),0.0,wwg(ng),-1.0,1.0)
       call fglMatrixMode(GL_MODELVIEW)
       call fglLoadIdentity
       call fglClear(GL_COLOR_BUFFER_BIT)
!
!  Call iplotmd to read a new variable or a new value
       if (newvar .or. runflg .eq. 1) then
!  Call iplotmd to read values of restart-plot file
         call iplotmd 
!  Set newvar to false
         newvar = .false.
       endif
!  Store the id of the current window
       storewin = glutGetWindow()
!  Loop for the total number of active graphs
       do i=1,nag
!  Set the graph window
         call glutSetWindow (grwin(i))
!  Display graph background
         call dgraphb(i)
!  Display graph values
         call dgraphv(i)
!  Write a message if variable with the selected name are not in the
!  restart plot file
         if (nullvar(i)) then
           write(txt,"('The selected variable is not in the restart-' 
     &          'plot file. Please, try another one')") 
           call prints (whg(ng)/5.,wwg(ng)/2.,TRIM(txt),3)
         endif
         call glutPostRedisplay
       enddo
!  Set the original window
       call glutSetWindow (storewin)
!
       call glutSwapBuffers
       call fglFlush 
!
       return
       end subroutine myDisplay
!
!  Handlemenu function
       subroutine myHandlemenu(value)
$if -def,ifortc,1
       use opengl_gl
$if def,ifortc,1
       use ifopngl
       use opengl_glut
       use hynmod 
       use usrvarc
       implicit none
!
!       external myKey
       integer i, g, n, ii, l, p
       integer ng, ml
       integer value, winid
!  winid -> id of a window
!  ng -> number of the close graph
!  ml -> number of variables in a graph
       type (plotrqs), allocatable :: iplotrqt(:,:)
!
       select case(value)
       case(1)
!  Open interactive graph window
         nag = nag + 1
         call displaygr
       case(2)
!  Close interactive graph window
         winid = glutGetWindow()
         call glutDestroyWindow(winid)
!  Set the main as a current window
         call glutSetWindow (winno(1))
!  Looking for a graph number
         do g=1,nag
           if(winid .eq. grwin(g)) then
             ng = g
             exit
           endif
         enddo
!  Decrement the value of interactive graph counters
         ntvar = ntvar - ngrvar(ng)
         nag = nag - 1
!!!! ------------------------------------------------------------------
!  Set the new order in the iplotrq variable
         allocate (iplotrqt(maxval(inplotrq),nag))
!  Allocate iplotqt(j)%pl(i)  -> j number of different variables
!                             -> i number of items of j variable 
         do g = 1, nag 
           if (g .lt. ng) then
             do n = 1, inplotrq(g)
               nullify (iplotrqt(n,g)%pl)
               allocate (iplotrqt(n,g)%pl(iinplotrq(g)))
               do ii = 1, iinplotrq(g)
                 iplotrqt(n,g)%pl(ii)%ntabla = iplotrq(n,g)%pl(ii)%
     &  ntabla
                 iplotrqt(n,g)%pl(ii)%ntabl = iplotrq(n,g)%pl(ii)%ntabl
                 iplotrqt(n,g)%pl(ii)%ntabno = iplotrq(n,g)%pl(ii)%
     &  ntabno
               enddo
             enddo
           else  ! g=ng,nag
             do n = 1, inplotrq(g+1)
               nullify (iplotrqt(n,g)%pl)
               allocate (iplotrqt(n,g)%pl(iinplotrq(g+1)))
               do ii = 1, iinplotrq(g+1)
                 iplotrqt(n,g)%pl(ii)%ntabla = iplotrq(n,g+1)%pl(ii)%
     &  ntabla
                 iplotrqt(n,g)%pl(ii)%ntabl = iplotrq(n,g+1)%pl(ii)%
     &  ntabl
                 iplotrqt(n,g)%pl(ii)%ntabno = iplotrq(n,g+1)%pl(ii)%
     &  ntabno
               enddo
             enddo           
           endif
         enddo
         if (allocated(iplotrq)) deallocate(iplotrq)
         allocate(iplotrq(maxval(inplotrq),nag))
         do g = 1, nag 
           do n=1,inplotrq(ng)
            iplotrq(n,g)%pl => iplotrqt(n,g)%pl
           enddo
         enddo
         deallocate (iplotrqt)
!
!  Set the new order in iplotd variable
         do g = ng, nag 
!  Set the iplotd structure
           iplotd(g)%labla = iplotd(g+1)%labla
           iplotd(g)%labll = iplotd(g+1)%labll
           iplotd(g)%lablr = iplotd(g+1)%lablr
           ml = inplotrq(g+1) + iinplotrq(g+1) - 1
           if (allocated(iplotd(g)%igdata)) deallocate(iplotd(g)%igdata)
           allocate(iplotd(g)%igdata(2,npoints,ml))
           do l=1,ml    ! loop over the number of variables
             iplotd(g)%legend(l)%leg = iplotd(g+1)%legend(l)%leg
             do p=1,npoints  ! loop over the number of points
               iplotd(g)%igdata(1,p,l)%igd => iplotd(g+1)%
     &   igdata(1,p,l)%igd
               iplotd(g)%igdata(2,p,l)%igd => iplotd(g+1)%
     &   igdata(2,p,l)%igd
             enddo      ! end of points loop
           enddo        ! end of variables loop
         enddo
!
!  When a graph window is closed, the position the variables are moved to fill the gap
         do g=ng,nag
           inplotrq(g) = inplotrq(g+1)
           iinplotrq(g) = iinplotrq(g+1)
           ngrvar(g) = ngrvar(g+1)
           maxy(g,:) = maxy(g+1,:)
           miny(g,:) = miny(g+1,:)
           grwin(g) = grwin(g+1)
           wwg(g) = wwg(g+1)
           wwg(g) = wwg(g+1)
         enddo
!
!!!! ------------------------------------------------------------------
!  Nullify the labels of the higher numbered graph
         nullify(iplotd(nag+1)%labla, iplotd(nag+1)%labll, 
     & iplotd(nag+1)%lablr) 
         do i=1,10
           nullify(iplotd(nag+1)%legend(i)%leg)
         enddo
!  Set to zero inplotrq and iinplotrq
         inplotrq(nag+1) = 0
         iinplotrq(nag+1) = 0
!  Decrement the value of interactive graph counters
         ngrvar(nag+1) = 0
!  Set the initial values of miny, maxy
         maxy(nag+1,:) = -1.e+10  
         miny(nag+1,:) = 1.e+10
!!!! ------------------------------------------------------------------
!
       end select 
!
       return
       end subroutine myHandlemenu   
!
!  Key function
       subroutine myKey
$if -def,ifortc,2
       use opengl_glut
       use opengl_gl
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod, only: wwg,whg
       implicit none
       return
       end subroutine myKey   
!
$endif