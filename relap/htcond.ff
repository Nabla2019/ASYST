*mlist
       subroutine htcond (hindex,index,ito,itn,time,dtime,id)
c
c  Returns left and right boundary conditions for a heat structure.
c
c  Cognizant engineer:  ras
c
       use gentblc
$if def,iua
       use uncdata
$endif
       implicit none
c
       real time,dtime
       integer hindex,index,ito,itn,id
       include 'fast.h'
       include 'comctl.h'
       include 'contrl.h'
       include 'flood.h'
       include 'htrcom.h'
       include 'htscr.h'
       include 'htsrcm.h'
       include 'trpblk.h'
       include 'voldat.h'
c
       real srftmp,t,ti,val(1),aratio
       integer i,num,inde,itype,k,lbc
       logical err
c
c  Set boundary conditions for both left and right sides.
       onrefl = 0
       ti = time + dtime
       srftmp = httmp(ito)
       inde = index
       do k = 1,2
         lbc = hindex + k
         itype = htbntr(lbc-1)
         if (itype .eq. 0) then
           htbcao(lbc-1) = 0.0
           htbcco(lbc-1) = 0.0
           hthht(inde) = 0.0
           htqost(inde) = 0.0
           htflag(inde) = 2
           go to 51
         endif
         if (htbvc(lbc-1)) 11,12,15
   11    i = htbvo(lbc-1)
         t = ti
         if (gen(i)%gttrp(1) .ne. 0) then
           t = trptm(gen(i)%gttrp(2))
           if (t .ge. 0.0) t = ti - t
         endif
         if (t .eq. gen(i)%gtarg) then
           htbcco(lbc-1) = gen(i)%gtval(1)
           htqost(inde) = gen(i)%gtval(1)
           go to 14
         endif
         call gtpolat (gen(i)%gtinfo,gtptr(i)%gtbl,t,
     &   htbcco(lbc-1:lbc-1),err)
         htqost(inde) = htbcco(lbc-1)
         gen(i)%gtarg = t
         gen(i)%gtval(1) = htbcco(lbc-1)
         go to 14
   12    htbcco(lbc-1) = 0.0
         htqost(inde) = 0.0
         go to 14
   15    iv = htbvo(lbc-1)
         if (itype-2 .lt. 0) go to 21
         htbcco(lbc-1) = tempg(iv)*voidg(iv) + tempf(iv)*voidf(iv)
         htqost(inde) = htbcco(lbc-1)
   14    if (itype-2 .eq. 0) go to 42
         i = htbnts(lbc-1)
         if (itype .eq. 6) then
           t = srftmp
         else
           t = ti
           if (gen(i)%gttrp(1) .ne. 0) then
             if (dtime .le. 0.0) then
               ti = -1.0
             else
               t = trptm(gen(i)%gttrp(2))
               if (t .ge. 0.0) t = ti - t
             endif
           endif
         endif
         if (t .eq. gen(i)%gtarg) then
           val(1) = gen(i)%gtval(1)
         else
           call gtpolat (gen(i)%gtinfo,gtptr(i)%gtbl,t,val(1:1),err)
           gen(i)%gtarg = t
           gen(i)%gtval(1) = val(1)
         endif
         if (itype-4) 33,34,40
   33    htbcco(lbc-1) = val(1)
         htqost(inde) = val(1)
   42    htflag(inde) = 1
         go to 51
   34    htbcao(lbc-1) = 0.0
         htbcco(lbc-1) = val(1)
         hthht(inde) = 0.0
         htqost(inde) = val(1)
         htflag(inde) = 2
         go to 51
   40    htbcao(lbc-1) = val(1)
         htbcco(lbc-1) = val(1)*(srftmp - htbcco(lbc-1))
         qfgox(k) = htbcco(lbc-1)*voidg(iv)
         htcfgo(lbc-1) = val(1)*voidg(iv)
         htcffo(lbc-1) = val(1) - htcfgo(lbc-1)
         hthht(inde) = val(1)
         htqost(inde) = htbcco(lbc-1)
         htqosg(inde) = qfgox(k)
         hthhgg(inde) = htcfgo(lbc-1)
         hthhff(inde) = htcffo(lbc-1)
         hthhft(inde) = 0.0
         hthhgt(inde) = 0.0
         hthhgp(inde) = 0.0
         htgsmf(inde) = 0.0
         htgsmg(inde) = 0.0
         go to 41
   21    tw = srftmp
         htopta = iand(htbnts(lbc-1),127)
         htdiam = hthdmo(lbc-1)
         pitdia = htpovd(lbc-1)
         htlenc = htlncf(lbc-1)
         num = ishft(htbnts(lbc-1),-12)
         iv1 = iv + num
         iv2 = iv1 + num
c  nrir-mk mod block 1 begins
         pgopta = pgopti(lbc-1)
         pgflag = pgcall(lbc-1)
         if (velf(iv1) .ge. 0.0) then
           htlen = htlnfo(lbc-1)
           gridk = grdkfo(lbc-1)
           if (pgopta .gt. 0) then
             ivindx = htivfo(lbc-1)
             gridz = quale(ivindx)
           else
             gridz = grdzfo(lbc-1)
           endif
         else
           htlen = htlnro(lbc-1)
           gridk = grdkro(lbc-1)
           if (pgopta .gt. 0) then
             ivindx = htivro(lbc-1)
             gridz = quale(ivindx)
           else
             gridz = grdzro(lbc-1)
           endif
         endif
c  nrir-mk mod block 1 ends
         axpf = apfaco(lbc-1)
         qfluxo = htbcco(lbc-1)
         chf = 0.
         chfmul = 0.
         hfg = sathg(iv) - sathf(iv)
           delgrv = (hydzc(iv2) + hydzc(iv2+1))*gravcn
c                                                      1-D mass flux
           ggasa = max(abs(ggas(iv)),0.001)
           gliqa = max(abs(gliq(iv)),0.001)
           gabs  = ggasa + gliqa
           gcross = 0.
           gcrosf = 0.
c                                            Is this a 3-D problem?
         if (iand(imap(iv+1),16384) .eq. 0
     &         .and. iand(imap(iv+2),16384) .eq. 0) then
c                                      put the correct sign on mass flux
           g = sign(gabs,delgrv*gliq(iv))
           if (htopta .eq. 34) then
c                 Multiply G by average area to rod gap area for HTC.
               aratio = (pitdia**2 - 0.7854)/(pitdia**2 - pitdia)
             gcrosf = gliqa*aratio
             gabs = 0.
           endif
         else
c                                            other 2  3-D mass fluxs
           if(htopta .eq. 10 .or. htopta .eq. 11) then
c  Multiply G by average area to rod gap area for HTC.
               aratio = (pitdia**2 - 0.7854)/(pitdia**2 - pitdia)
c                                             vertical bundle primary z
             if (num .eq. 0) then
c  Bundle is parallel with x so just need cross flows.
               gcross = max((ggas(iv)**2 + ggas(iv+1)**2),0.001)
               gcross = gcross + gliq(iv)**2 + gliq(iv+1)**2
               gcross = sqrt(gcross)*aratio
               g = gabs*sign(1.0,g)*sign(1.0,gliq(iv))
             elseif (num .eq. 1) then
c                     bundle is parallel with y
               ggasa = max(abs(ggas(iv+1)),0.001)
               gliqa = max(abs(gliq(iv+1)),0.001)
               gabs  = ggasa + gliqa
               gcross = ggas(iv)**2 + ggas(iv+2)**2
               gcross = gcross + gliq(iv)**2 + gliq(iv+2)**2
               gcross = sqrt(gcross)*aratio
               g = sign(gabs,delgrv*gliq(iv+1))
             else
c                     bundle is parallel with z
               ggasa = max(abs(ggas(iv+2)),0.001)
               gliqa = max(abs(gliq(iv+2)),0.001)
               gabs  = ggasa + gliqa
               gcross = ggas(iv)**2 + ggas(iv+1)**2
               gcross = gcross + gliq(iv)**2 + gliq(iv+1)**2
               gcross = sqrt(gcross)*aratio
               g = sign(gabs,delgrv*gliq(iv+2))
             endif
           elseif (htopta .eq. 34) then
               aratio = (pitdia**2 - 0.7854)/(pitdia**2 - pitdia)
c                                      horizontal bundle primary x or y
               if (num .eq. 0) then
                 gabs = ggas(iv) + gliq(iv)
                 gabs = max(abs(gabs),0.001)
                 gliqa = gliq(iv+1)**2 + gliq(iv+2)**2
                 gliqa = max(sqrt(gliqa),0.001)
                 gcrosf = gliqa*aratio
               elseif (num .eq. 1) then
                 gabs = ggas(iv+1) + gliq(iv+1)
                 gabs = max(abs(gabs),0.001)
                 gliqa = gliq(iv)**2 + gliq(iv+2)**2
                 gliqa = max(sqrt(gliqa),0.001)
                 gcrosf = gliqa*aratio
               else
                 gabs = ggas(iv+2) + gliq(iv+2)
                 gabs = max(abs(gabs),0.001)
                 gliqa = gliq(iv)**2 + gliq(iv+1)**2
                 gliqa = max(sqrt(gliqa),0.001)
                 gcrosf = gliqa*aratio
               endif
           else
c                                                     3d with no bundle.
             ggasa = sqrt(ggasa**2 + ggas(iv+1)**2 + ggas(iv+2)**2)
             gliqa = sqrt(gliqa**2 + gliq(iv+1)**2 + gliq(iv+2)**2)
             ggasa = max(ggasa,0.001)
             gliqa = max(gliqa,0.001)
             gabs  = ggasa + gliqa
             g = sign(gabs,delgrv*gliq(iv+num))
           endif
         endif
         htsa = htsrfo(lbc-1)
         drod = 2.0*htrado(lbc-1)
         twchf = tsatt(iv) + 40.
         twqf = min(tsatt(iv) + 300.,710.)
c
c  Water and others.
           call htrc1 (id)
c        endif
         pgcall(lbc-1) = pgflag
         if (quala(iv) .gt. 1.0e-9 ) mode = mode + 20
         chfmuo(lbc-1) = chfmul
         htbcao(lbc-1) = htfftr(lbc-1)*htcoef
         htbcco(lbc-1) = htfftr(lbc-1)*qfluxo
         htchfo(lbc-1) = htfftr(lbc-1)*chf
         htrfno(lbc-1) = htfftr(lbc-1)*gamw
         htcffo(lbc-1) = htfftr(lbc-1)*htcf
         htcfgo(lbc-1) = htfftr(lbc-1)*htcg
         qfgox(k)      = htfftr(lbc-1)*qfgo
         htmod(lbc-1)  = mode
         hthht(inde)   = htfftr(lbc-1)*htzht
         hthhff(inde)  = htfftr(lbc-1)*htzhff
         hthhft(inde)  = htfftr(lbc-1)*htzhft
         hthhgg(inde)  = htfftr(lbc-1)*htzhgg
         hthhgt(inde)  = htfftr(lbc-1)*htzhgt
         hthhgp(inde)  = htfftr(lbc-1)*htzhgp
         htqost(inde)  = htfftr(lbc-1)*htqot
         htqosf(inde)  = htfftr(lbc-1)*htqof
         htqosg(inde)  = htfftr(lbc-1)*htqog
         htgsmf(inde)  = htfftr(lbc-1)*htgamf
         htgsmg(inde)  = htfftr(lbc-1)*htgamg
   41    htflag(inde) = 3
$if def,iua
         if (uncmode) call appwthtc (inde)
$endif
   51    srftmp = httmp(itn)
         inde = inde + 1
       enddo
       return
       end
