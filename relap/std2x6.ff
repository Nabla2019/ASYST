*mlist
       subroutine std2x6 (a,s,it,err)
c
c  Performs a steam table interpolation on P and internal energy.
c
c  Cognizant engineer: rjw csm.
c
c
c                          PROLOGUE
c
c TITLE= std2x6 -- steam table interpolation on P and internal energy
c
c    AUTHOR-- R. J. Wagner (modified for d2o by C. S. Miller)
c
c    PURPOSE--
c
c   compute water thermodynamic properties as a function of pressure
c   and internal energy
c
c  ARGUMENT LIST
c
c     a         =   general parameter vector
c     s(1)      =   T  temperature  deg K
c     s(2)      =   P  pressure     Pa
c     s(3)      =  v  specific volume   cubic meter / kg
c     s(4)      =  u  specific internal energy  J / kg
c     s(5)      =  h  specific enthalpy  J / kg
c     s(6)      =  beta  thermal coefficient of expansion  vol / (vol -
c     s(7)      =  kappa pressure coefficient of expansion  vol / (vol -
c     s(8)      =  Csubp  specific heat  J / (kg - deg K)
c     s(9)      =  quality X
c     s(10)     =  Psat  or  Tsat     Pa or deg K
c     s(11)      = vsubf   fluid specific volume  cubic meters / kg
c     s(12)      = vsubg   vapor specific volume  cubic meters / kg
c     s(13)      =  usubf  fluid specific internal energy  J / kg
c     s(14)      =  usubg  vapor specific internal energy  J / kg
c     s(15)      =  hsubf  fluid specific enthalpy  J / kg
c     s(16)      =  hsubg  vapor specific enthalpy  J / kg
c     s(17)      =  betaf liquid  thermal coefficient of expansion  vol
c     s(18)      =  betag vapor  thermal coefficient of expansion  vol /
c     s(19)      =  kappaf liquid pressure coefficient of expansion  vol
c     s(20)      =  kappag vapor pressure coefficient of expansion  vol
c     s(21)      =  Csubpf liquid  specific heat  J / (kg - deg K)
c     s(22)      =  Csubpg vapor  specific heat  J / (kg - deg K)
c     s(23)      =  indexes
c     s(24)      =  s   specific entropy  J /  ( kg - deg K)
c     s(25)      =  ssubf liquid  specific entropy  J /  ( kg - deg K)
c     s(26)      =  ssubg vapor  specific entropy  J /  ( kg - deg K)
c     it         =  phase flag
c     err        =  error flag
c
c  DIRECT OUTPUTS--(Arguments modified by this routine itself)
c
c    s(1), s(3), s(5) - s(26), it, err
c
c  Compute water thermodynamic properties as a function of pressure
c  and internal energy
c
c  COMMON BLOCKS
c
       implicit none
       common /std2xc/ nt,np,ns,ns2,klp,klp2,llp,nt5,jpl
       integer nt,np,ns,ns2,klp,klp2,llp,nt5,jpl
$if -def,in32,2
       integer msk
       parameter (msk=1073741823)
c
c  Local variables.
       integer ia,ib,ic,id,ip,it,j,jp,jpp,kp,kp2,lpp,lqq
       real c0,c1,c2,c3,crp,cv,dfdt,dpdt1,dpdt2,f1,f2,fr,fr1,fr2,frc,
     & frc2,frc3,frd,frd2,frd3,frn,hfg1,hfg2,pa,pb,pp,px,r2,ren,s11i,
     & s12i,t,ta,tb,tc,tr,ut,vt
       real a(1),s(26)
       logical err
       real c(6),y,yh
       real b(5)
       real d1,d2
       real tsat,pr
       logical s1, s2, s3
$if def,in32,3
       real unp
       integer iunp(2)
       equivalence (unp,iunp(1))
c
c  DATA
       data b/-7.81583,17.6012,-18.1747,-3.92488,4.19174/
       data c/0.37228924e+03, 0.88331901e+02, 0.10970708e+02,
     & 0.97251708e+00, 0.51713769e-01,0.12129545e-02/
       data crp/2.166e+07/
c
c  EXECUTION
       s3 = .false.
c   check for valid input
   23  if (s(2).le.0.0 .or. s(2).gt.a(jpl)) go to 1001
$if -def,in32,5
$if def,cray,1
       ip = shiftr(s(23),30)
$if -def,cray,1
       ip = ishft(s(23),-30)
       jp = and(s(23),msk)
$if def,in32,3
       unp = s(23)
       ip = iunp(1)
       jp = iunp(2)
       if (ip.le.0 .or. ip.ge.nt) ip = 1
       if (jp.le.0 .or. jp.ge.np) jp = 1
       jpp = jp + nt
       s1 = .false.
c  Set indexes in temperature and pressure tables for saturation
c  computations
   11  if (s(2) .ge. a(jpp)) go to 10
       jpp = jpp - 1
       if (jpp .gt. nt) go to 11
       jpp = jpp + 1
       jp = 1
       s1 = .true.
       if (s(2) .lt. a(klp+13)) go to 44
       go to 12
   10  if (s(2) .le. a(jpp+1)) go to 12
       jpp = jpp + 1
       go to 10
   12  jp = jpp - nt
       if (s(2) .ge. crp) go to 44
       if (s3) go to 15
       tc=643.89
       pp=s(2)
       tsat=0.0
       pr= (pp/21.671e6)
       yh=log(pr)
       y= 1.0
       do j = 1,6
         tsat = tsat + c(j)*y
         y = y*yh
       enddo
       t = min(max(tsat + 273.15,0.0),a(ns))
       ta = max(1.0 - t/tc,0.0)
       d1 = (tc/t)*(b(1)*ta + b(2)*ta**1.9 + b(3)*ta**2 +
     & b(4)*ta**5.5 + b(5)*ta**10)
       d2 = b(1) + 1.9*b(2)*ta**.9 + 2.*b(3)*ta + 5.5*b(4)*ta**4.5 +
     & 10.*b(5)*ta**9
       pa = crp*exp(d1)
       dfdt = -(d1 + d2)/t
       t = t - (pa - pp)/(pa*dfdt)
       ta = max(1.0 - t/tc,0.0)
       d1 = (tc/t)*(b(1)*ta + b(2)*ta**1.9 + b(3)*ta**2 +
     & b(4)*ta**5.5 + b(5)*ta**10)
       d2 = b(1) + 1.9*b(2)*ta**.9 + 2.*b(3)*ta + 5.5*b(4)*ta**4.5 +
     & 10.*b(5)*ta**9
       pa = crp*exp(d1)
       s(10) = t - (pa - pp)/(pa*dfdt)
   15  ic = ip
   16  if (s(10) .ge. a(ic)) go to 13
       ic = ic - 1
       if (ic .gt. 0) go to 16
       ic = 1
       go to 14
   13  if (s(10) .le. a(ic+1)) go to 14
       ic = ic + 1
       if (ic .lt. ns) go to 13
       ic = ic - 1
   14  kp = klp + ic*13
       kp2 = klp2 + jp*13
       if (s1 .or. a(jpp) .le. a(kp)) go to 19
       pa = a(jpp)
       ta = a(kp2)
       ia = kp2
       go to 20
   19  ta = a(ic)
       pa = a(kp)
       ia = kp
   20  if (a(jpp+1) .ge. a(kp+13)) go to 21
       pb = a(jpp+1)
       tb = a(kp2+13)
       ib = kp2 + 13
       go to 22
   21  pb = a(kp+13)
       tb = a(ic+1)
       ib = kp + 13
   22  fr1 = s(10) - ta
       fr = fr1/(tb-ta)
c  Compute vsubf and vsubg to determine liquid, two phase, or vapor
c  state
       hfg1 = a(ia+8) - a(ia+2) + pa *( a(ia+7)- a(ia+1))
       hfg2 = a(ib+8) - a(ib+2) + pb*(a(ib+7) - a(ib+1))
       dpdt1 = hfg1 / ( ta *( a(ia+7) - a(ia+1)))
       dpdt2 = hfg2/(tb*(a(ib+7) - a(ib+1)))
       f1 = a(ia+1) *(a(ia+3) - a(ia+4) * dpdt1 )
       f2 = a(ib+1) *(a(ib+3) - a(ib+4) * dpdt2 )
       c1 = f1 * (tb - ta)
       d2 = f2 * (tb - ta)
       c0 = a (ia+1)
       c2 = 3. *( a(ib+1) - c0 ) - d2 - 2. * c1
       c3 = d2 + c1 - 2. *( a(ib+1) - c0 )
       s(11) = c0 + fr *( c1 + fr *( c2 + fr * c3 ))
   24  s(13) = a(ia+2) + (a(ib+2) - a(ia+2))*fr
       if (s(4) .le. s(13)) go to 41
       f1 = a(ia+7) *(a(ia+9) - a(ia+10)* dpdt1 )
       f2 = a(ib+7) *(a(ib+9) - a(ib+10)* dpdt2 )
       c1 = f1 * (tb - ta)
       d2 = f2 * (tb - ta)
       c0 = a (ia+7)
       c2 = 3. *( a(ib+7) - c0 ) - d2 - 2. * c1
       c3 = d2 + c1 - 2. *( a(ib+7) - c0 )
       s(12) = c0 + fr *( c1 + fr *( c2 + fr * c3 ))
       s(14) = a(ia+8) + (a(ib+8)-a(ia+8))*fr
       if (s(4) .ge. s(14)) go to 43
c   two phase fluid.
       it = 2
       s(15) = s(13) + s(2)*s(11)
       s(16) = s(14) + s(2)*s(12)
       s(17) = a(ia+3) + (a(ib+3)-a(ia+3))*fr
       s(18) = a(ia+9) + fr*tb/s(10)*(a(ib+9)-a(ia+9))
       s(19) = a(ia+4) + (a(ib+4)-a(ia+4))*fr
       s(20) = a(ia+10) + (s(2)-pa)/(pb-pa)*pb/s(2)*(a(ib+10)-a(ia+10))
       s(21) = a(ia+5) + (a(ib+5)-a(ia+5))*fr
       s(22) = a(ia+11) + (a(ib+11)-a(ia+11))*fr
       s(25) = a(ia+6) + (a(ib+6)-a(ia+6))*fr
       s(26) = a(ia+12) + (a(ib+12)-a(ia+12))*fr
       s(9) = (s(4)-s(13))/(s(14)-s(13))
       fr = 1.0e0 - s(9)
       s(1) = s(10)
       s(3) = fr*s(11) + s(9)*s(12)
       s(5) = fr*s(15) + s(9)*s(16)
       s(24) = fr*s(25) + s(9)*s(26)
       ip = ic
$if -def,in32,1
   25  s(23) = or(shift(ip,30),jp)
$if def,in32,3
   25  iunp(1) = ip
       iunp(2) = jp
       s(23) = unp
       err = .false.
       return
   44  it = 4
       go to 50
c   single phase fluid, search for single phase indexes.
   41  it = 1
       if (s1) go to 1001
       go to 50
   43  it = 3
   50  lpp = llp + jp*nt5 + ip*6
   51  if (s(4) .ge. a(lpp+1)) go to 52
       lpp = lpp - 6
       ip = ip - 1
       if (ip .gt. 0) go to 51
       lpp = lpp + 6
       ip = ip + 1
       go to 54
   52  if (s(4) .le. a(lpp+7)) go to 54
       lpp = lpp + 6
       ip = ip + 1
       if (ip .lt. nt) go to 52
       if (s1) go to 95
       lpp = lpp - 6
       ip = ip - 1
       go to 53
   54  if (s1) go to 96
   53  kp = klp + ip*13
       lqq = lpp + nt5
       frn = s(2)-a(jpp)
       frc2 = s(2) - a(jpp+1)
       s3 = .false.
       if (it-3) 58,70,48
   48  if (ip .ge. ns) go to 157
       go to 57
c   liquid phase.
   58  ut = s(13)
       vt = s(11)
   60  if (a(ip) .lt. s(10)) go to 57
       ip = ip - 1
       if (ip .le. 0) go to 1001
       kp = kp - 13
       lpp = lpp - 6
       lqq = lqq - 6
       go to 60
   57  s1 = .false.
       if (it .eq. 4) go to 61
       if (a(ip+1) .le. s(10)) go to 61
       ta = s(10)
       s2 = .false.
       go to 55
   61  ta = a(ip+1)
       s2 = .true.
       if (ip+1 .gt. ns) go to 63
       if (a(kp+13) .le. a(jpp)) go to 63
       frc3 = s(2) - a(kp+13)
       frc = a(jpp+1)-a(kp+13)
       px = a (kp+13)
       ic = kp + 14
       go to 64
   63  frc3 = frn
       frc = a(jpp+1)-a(jpp)
       px = a (jpp)
       ic = lpp + 6
       frd3 = frc3
       frd = frc
       s1 = .true.
   64  pr = ( s(2) - px) / ( a(jpp+1) - px )
       c0 = 1. / a(ic )
       r2 = 1. / a(lqq+6)
       c1 = c0 * a(ic +3) * ( a(jpp+1) - px )
       d2 = r2 * a(lqq+9) * ( a(jpp+1) - px )
       c2 = 3. * ( r2 - c0 ) - d2 - 2. * c1
       c3 = d2 + c1 - 2. * ( r2 - c0 )
       s11i   = c0 + pr *( c1 + pr *( c2 + pr * c3 ))
       s (11) = 1. / s11i
   82  fr1 = (s(11)-a(ic))/(a(lqq+6)-a(ic))
       s(13) = a(ic+1) + (a(lqq+7)-a(ic+1))*fr1
   55  if (s3) go to 68
   62  if (s1) go to 65
       if (ip .gt. ns) go to 67
       if (a(kp) .le. a(jpp)) go to 67
       frd3 = s(2) - a(kp)
       frd  = a(jpp+1) - a(kp)
       px = a(kp)
       id = kp + 1
       go to 66
   67  frd3 = frn
       frd =  a(jpp+1) - a(jpp)
       px = a(jpp)
       s1 = .true.
   65  id = lpp
   66  s(6) = a(id+3)*a(id)
       s(7) = a(lqq+3)*a(lqq)
       fr2 = s(7) - s(6)
       pr = ( s(2) - px) / ( a(jpp+1) - px )
       c0 = 1. / a(id )
       r2 = 1. / a(lqq)
       c1 = c0 * a(id +3) * ( a(jpp+1) - px )
       d2 = r2 * a(lqq+3) * ( a(jpp+1) - px )
       c2 = 3. * ( r2 - c0 ) - d2 - 2. * c1
       c3 = d2 + c1 - 2. * ( r2 - c0 )
       s12i   = c0 + pr *( c1 + pr *( c2 + pr * c3 ))
       s(12) = 1. / s12i
  182  fr2 = (s(12)-a(id))/(a(lqq)-a(id))
       s(14) = a(id+1) + (a(lqq+1)-a(id+1))*fr2
       if (s(14) .le. s(4)) go to 68
       s2 = .true.
       s(11) = s(12)
       s(13) = s(14)
       fr1 = fr2
       ip = ip - 1
       ta = a(ip+1)
       if (ip .le. 0) go to 1001
       kp = kp - 13
       lqq = lqq - 6
       lpp = lpp - 6
       ic = id
       go to 62
   68  if (s(13) .ge. s(4)) go to 59
       s(12) = s(11)
       s(11) = vt
       s(14) = s(13)
       s(13) = ut
       fr2 = fr1
       lqq = lqq + 6
       lpp = lpp + 6
       kp = kp + 13
       ip = ip + 1
       if (ip .lt. ns) go to 158
       s3 = .false.
       go to 157
  158  id = ic
       s3 = .true.
       go to 57
   59  if (s2) go to 69
       s(17) = a(ia+3) + (a(ib+3)-a(ia+3))*fr
       s(19) = a(ia+4) + (a(ib+4)-a(ia+4))*fr
       s(21) = a(ia+5) + (a(ib+5)-a(ia+5))*fr
       s(25) = a(ia+6) + (a(ib+6)-a(ia+6))*fr
       go to 56
   69  s(17) = a(ic+2) + (a(lqq+8)-a(ic+2))*fr1
       s(19) = a(ic+3) + (a(lqq+9)-a(ic+3))*fr1
       s(21) = a(ic+4) + (a(lqq+10)-a(ic+4))*fr1
       s(25) = a(ic+5) + (a(lqq+11)-a(ic+5))*fr1
   56  s(18) = a(id+2) + (a(lqq+2)-a(id+2))*fr2
       s(20) = a(id+3) + (a(lqq+3)-a(id+3))*fr2
       s(22) = a(id+4) + (a(lqq+4)-a(id+4))*fr2
       s(26) = a(id+5) + (a(lqq+5)-a(id+5))*fr2
       fr = (s(4)-s(14))/(s(13)-s(14))
       frd = ta - a (ip)
       fr2 = frd * fr
       s(1) = a(ip) + fr2
       fr1 = fr2 / frd
       tr = ( s(1) - a(ip)) / frd
       c0 = s (12)
       c1 = s(12) * s(18) * frd
       d2 = s(11) * s(17) * frd
       c2 = 3. * ( s(11) - s(12)) - d2 - 2. * c1
       c3 = d2 + c1 - 2. * ( s(11) - s(12))
       s(3) = c0 + tr * ( c1 + tr * ( c2 + tr * c3 ))
       s(5) = s(4) + s(2)*s(3)
       s(6) = ( c1 + tr *( 2.* c2 + 3.* tr * c3 ))/(frd * s(3))
       s(7) = s(20) + (s(19)-s(20))*fr1
       s(8) = s(22) + (s(21)-s(22))*fr1
       s(24) = s(26) + (s(25)-s(26))*fr1
       s(9) = 0.e0
       go to 25
   70  ut = s(14)
       vt = s(12)
  160  if (a(ip+1) .gt. s(10)) go to 157
c   vapor phase.
       ip = ip + 1
       kp = kp + 13
       lpp = lpp + 6
       lqq = lqq + 6
       go to 160
  157  s1 = .false.
       if (it .eq. 4) go to 161
       if (a(ip) .ge. s(10)) go to 161
       ta = s(10)
       s2 = .false.
       go to 155
  161  ta = a(ip)
       s2 = .true.
       if (ip .ge. ns) go to 163
       if (a(kp) .ge. a(jpp+1)) go to 163
       frc3 = a(kp) - a(jpp)
       px = a (kp)
       ic = kp + 7
       go to 164
  163  frc3 = a(jpp+1) - a(jpp)
       px = a (jpp+1)
       ic = lqq
       frd3 = frc3
       s1 = .true.
  164  fr1 = a(ic)*frc3
       pr = ( s(2) -a(jpp))/( px - a(jpp))
       c0 = 1. / a(lpp)
       r2 = 1. / a(ic)
       c1 = c0 * a(lpp+3) * ( px - a(jpp))
       d2 = r2 * a(ic+3) * ( px - a(jpp) )
       c2 = 3. * ( r2 - c0 ) - d2 - 2. * c1
       c3 = d2 + c1 - 2. * ( r2 - c0 )
       s12i   = c0 + pr *( c1 + pr *( c2 + pr * c3 ))
       s(12) = 1. / s12i
       frc2 = (s(12)-a(lpp))/(a(ic)-a(lpp))
       frc = frc2*a(ic)/s(12)
       s(14) = a(lpp+1) + (a(ic+1)-a(lpp+1))*frc2
  155  if (s3) go to 168
  162  if (s1) go to 165
       if (ip+1 .gt. ns) go to 167
       if (a(kp+13) .ge. a(jpp+1)) go to 167
       frd3 = a(kp+13) - a(jpp)
       px = a(kp+13)
       id = kp + 20
       go to 166
  167  frd3 = a(jpp+1) - a(jpp)
       px = a(jpp+1)
       s1 = .true.
  165  id = lqq + 6
  166  fr1 = a(id)*frd3
       pr = ( s(2) -a(jpp))/( px - a(jpp))
       c0 = 1. / a(lpp+6)
       r2 = 1. / a(id)
       c1 = c0 * a(lpp+9) * ( px - a(jpp))
       d2 = r2 * a(id+3) * ( px - a(jpp) )
       c2 = 3. * ( r2 - c0 ) - d2 - 2. * c1
       c3 = d2 + c1 - 2. * ( r2 - c0 )
       s11i   = c0 + pr *( c1 + pr *( c2 + pr * c3 ))
       s(11) = 1. / s11i
       frd2 = (s(11)-a(lpp+6))/(a(id)-a(lpp+6))
       frd = frd2*a(id)/s(11)
       s(13) = a(lpp+7) + (a(id+1)-a(lpp+7))*frd2
       if (s(13) .ge. s(4)) go to 168
       s2 = .true.
       ip = ip + 1
       lqq = lqq + 6
       lpp = lpp + 6
       if (ip .eq. nt) go to 80
       ta = a(ip)
       kp = kp + 13
       ic = id
       s(12) = s(11)
       s(14) = s(13)
       frc2 = frd2
       frc = frd
       go to 162
  168  if (s(14) .le. s(4)) go to 159
       s3 = .true.
       s(11) = s(12)
       s(12) = vt
       s(13) = s(14)
       s(14) = ut
       frd2 = frc2
       frd = frc
       ip = ip - 1
       if (ip .le. 0) go to 1001
       kp = kp - 13
       lpp = lpp - 6
       lqq = lqq - 6
       id = ic
       if (ip .ge. ns) go to 157
       s3 = .false.
       go to 57
  159  if (s2) go to 169
       s(18) = a(ia+9) + fr*tb/s(10)*(a(ib+9)-a(ia+9))
       s(20) = a(ia+10) + (s(2)-pa)/(pb-pa)*pb/s(2)*(a(ib+10)-a(ia+10))
       s(22) = a(ia+11) + (a(ib+11)-a(ia+11))*fr
       s(26) = a(ia+12) + (a(ib+12)-a(ia+12))*fr
       go to 156
  169  s(18) = a(lpp+2) + frc*(a(ic+2)-a(lpp+2))
       s(20) = a(lpp+3) + (a(ic+3)-a(lpp+3))*frc2
       s(22) = a(lpp+4) + frc*(a(ic+4)-a(lpp+4))
       s(26) = a(lpp+5) + (a(ic+5)-a(lpp+5))*frc2
  156  s(17) = a(lpp+8) + frd*(a(id+2)-a(lpp+8))
       s(19) = a(lpp+9) + (a(id+3)-a(lpp+9))*frd2
       s(21) = a(lpp+10) + frd*(a(id+4)-a(lpp+10))
       s(25) = a(lpp+11) + (a(id+5)-a(lpp+11))*frd2
       fr = (s(4)-s(14))/(s(13)-s(14))
       frd = a(ip+1) - ta
       fr2 = frd * fr
       s(1) = ta + fr2
       fr1 = fr2 / frd
       tr = ( s(1) - ta   ) / frd
       c0 = s (12)
       c1 = s(12)*s(18)*frd
       d2 = s(11)*s(17)*frd
       c2 = 3.0*(s(11) - s(12)) - d2 - 2.0*c1
       c3 = d2 + c1 - 2.0*(s(11) - s(12))
       s(3) = c0 + tr*(c1 + tr*(c2 + tr*c3))
       s(5) = s(4) + s(2)*s(3)
       s(6) = (c1 + tr*(2.0*c2 + 3.0*tr*c3))/(frd*s(3))
       s(7) = s(20) + (s(19)-s(20))*fr1
       s(8) = s(22) + (s(21)-s(22))*fr1
       s(24) = s(26) + (s(25)-s(26))*fr1
   99  s(9) = 1.0
       go to 25
c  Vapor phase, temperature greater than highest table temperature.
   80  fr = a(lqq)*(a(jpp+1) - a(jpp))
       s(3) = a(lpp)*fr/(fr + (a(lpp) - a(lqq))*frn)
       fr = (s(3) - a(lpp))/(a(lqq) - a(lpp))
       frc = fr*a(lqq)/s(3)
       ut = a(lpp+1) + (a(lqq+1) - a(lpp+1))*fr
       s(6) = a(lpp+2) + frc*(a(lqq+2) - a(lpp+2))
       s(8) = a(lpp+4) + frc*(a(lqq+4) - a(lpp+4))
       frd = s(8) - s(2)*s(3)*s(6)
       s(1) = (s(4) - ut + frd*a(nt))/frd
       frd = s(1)/a(nt)
       s(3) = s(3)*frd
       s(6) = s(6)/frd
       s(5) = s(4) + s(2)*s(3)
       s(7) = a(lpp+3) + (a(lqq+3) - a(lpp+3))*fr
       s(24) = a(lpp+5) + (a(lqq+5) - a(lpp+5))*fr
       cv = s(8) - a(nt)*s(6)*s(6)*s(3)/s(7)
       if (s(1) .le. 0.0) go to 1001
       s(24) = s(24) + cv*log(frd**(s(8)/cv))
       if (s(1) .le. 1500.0) go to 99
       go to 1001
c  Vapor phase, pressure less than lowest table pressure.
   96  ut = a(klp2+21)
       if (s(4) .lt. ut) go to 90
       if (a(ip) .ge. a(klp2+13)) then
         ia = ip
         lqq = lpp
         ut = a(lqq+1)
       else
         ia = klp2 + 13
         lqq = ia + 7
       endif
       fr = (s(4)-ut)/(a(lpp+7)-ut)
       fr1 = a(ip+1) - a(ia)
       fr2 = fr1*fr
       s(1) = a(ia) + fr2
       fr1 = fr2/fr1
       s(3) = (fr1*a(lpp+6)/a(ip+1) + (1.0 - fr1)*a(lqq)/a(ia))*
     & a(nt+1)*s(1)/s(2)
       s(6) = a(lqq+2) + (a(lpp+8) - a(lqq+2))*fr*a(ip+1)/s(1)
       s(8) = a(lqq+4) + (a(lpp+10)-a(lqq+4))*fr
       s(24) = a(lqq+5) + (a(lpp+11) - a(lqq+5))*fr
       ren = s(2)*s(3)/s(1)
       s(24) = s(24) - ren*log(s(2)/a(nt+1))
   94  s(7) = 1.0/s(2)
   98  s(5) = s(4) + s(2)*s(3)
       go to 99
   95  s(8) = a(lpp+4)
       frd = s(8) - a(nt+1)*a(lpp)/a(nt)
       s(1) = (s(4)-a(lpp+1)+frd*a(nt))/frd
       frd = s(1)/a(nt)
       frc = a(nt+1)*a(lpp)
       s(3) = frc*frd/s(2)
       s(6) = a(lpp+2)/frd
       s(7) = a(lpp+3)*a(nt+1)/s(2)
       ren = s(2)*s(3)/s(1)
       if (s(1) .le. 0.0) go to 1001
       s(24) = a(lpp+5) + s(8)*log(s(1)/a(nt)) - ren*log(s(2)/a(nt+1))
       go to 98
   90  ip = 1
       kp = klp + 13
       if (s(4) .lt. a(klp+21)) then
         ren = a(kp+7)*a(kp)/a(ip)
         s(8) = a(kp+11)
         s(1) = a(ip) + (s(4) - a(kp+8))/(a(kp+11) - ren)
         fr = ren*s(1)
         s(5) = s(4) + fr
         s(6) = 1.0/s(1)
         s(7) = 1.0/s(2)
         s(3) = fr*s(7)
         if (s(1) .le. 0.0) go to 1001
         s(24) = a(kp+12) + s(8)*log(s(1)/a(ip)) - ren*log(s(2)/a(kp))
         go to 99
       else
  202    if (s(4) .gt. a(kp+21)) then
           ip = ip + 1
           kp = kp + 13
           ut = a(kp+21)
           go to 202
         endif
         fr = (s(4) - a(kp+8))/(a(kp+21) - a(kp+8))
         s(1) = a(ip) + fr*(a(ip+1) - a(ip))
         s(3) = (fr*a(kp+13)*a(kp+20)/a(ip+1) + (1.0 - fr)*a(kp)*
     &   a(kp+7)/a(ip))*s(1)/s(2)
         s(6) = 1.0/s(1)
         s(8) = a(kp+11) + (a(kp+24) - a(kp+11))*fr
         ren = s(2) * s(3) / s(1)
         if (s(1) .le. 0.0) go to 1001
         s(24) = a(kp+12) + s(8)*log(s(1)/a(ip)) - ren*log(s(2)/a(kp))
         go to 94
       endif
 1001  err = .true.
       return
       entry std2xf(a,s,it,err)
       s3 = .true.
       go to 23
       end
