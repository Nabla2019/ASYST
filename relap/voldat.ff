       module voldat
!  Holds hydrodynamic volume quantities.
!
!  Cognizant engineer: rjw.
!
       implicit none
       integer, parameter, private :: kr=selected_real_kind(12,200)
!
       type vold
         real(kr) vfs,vgs,ufs,ugs,betafs,betags,kapafs,kapags,cpfs,cpgs,
     &   hyanpr(3,3),hyrho,hyrhof,hyrhog,rhomo
         integer volnewold,volno
       end type vold
!  betafs     Saturated liquid thermal expansion coefficient.
!  betags     Saturated vapor thermal expansion coefficient.
!  cpfs       Saturated liquid heat capacity.
!  cpgs       Saturated vapor heat capacity.
!  hyanpr     Rotation matrix used to convert from local coordinates to
!             fixed coordinates.
!  hyrho      Mixture density from Taylor Series extrapolation.
!  hyrhof     Liquid density from Taylor Series extrapolation.
!  hyrhog     Vapor density from Taylor Series extrapolation.
!  kapafs     Saturated liquid compresibility coefficient.
!  kapags     Saturated vapor compresibility coefficient.
!  rhomo      Mixture density at old time step from convective equation.
!  ufs        Saturated liquid internal energy.
!  ugs        Saturated vapor internal energy.
!  volnewold  Index to ftb oriented variables.
!  vfs        Saturated liquid specific volume.
!  vgs        Saturated vapor specific volume.
!  volno      Volume number.
!
       integer nvolsv
!  nvolsv     Number of volumes.
       type (vold), allocatable :: vol(:)
!  vol        Hydrodynamic volume quantities.
       integer :: nsiters=0
!  nsiters    Number of iterations.
!
       contains
!
       subroutine volclear
!  Deallocates volume quantities.
       implicit none
!
       if (allocated(vol)) deallocate (vol)
       return
       end subroutine volclear
!
       subroutine volspread (fl)
!  Reads volume data from restart records, obtaining space if
!  necessary.
!
       implicit none
       logical fl
       include 'ufiles.h'
       integer iwrd,len,lent
       character*8 filname
!
       read (rstplt) len,iwrd
       inquire (iolength=lent) filname,nvolsv
       if (lent .ne. len*iwrd) call fabend
       read (rstplt) filname,nvolsv
       if (fl) then
         if (allocated(vol)) deallocate (vol)
         allocate (vol(nvolsv))
       endif
       read (rstplt) len,iwrd
       inquire (iolength=lent) vol
       if (lent .ne. len*iwrd) call fabend
       read (rstplt) vol
       return
       end subroutine volspread
!
       subroutine volspwrite
!  Writes volume data from restart records.
!
       implicit none
       include 'comctl.h'
       include 'ufiles.h'
       integer :: iwrd=1,len
       character*8 :: filname='voldat'
!
       inquire (iolength=len) filname,nvolsv
       write (rstplt) len,iwrd
       write (rstplt) filname,nvolsv
       inquire (iolength=len) vol
       write (rstplt) len,iwrd
       write (rstplt) vol
       return
       end subroutine volspwrite
!
       end module voldat
