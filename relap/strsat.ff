*mlist
       subroutine  strsat (a,icf,x,ysat,dpsdts,err)
c
c
c  Finds the saturation value of pressure or temperature which
c  corresponds to a given value of temperature or pressure and the
c  derivative of saturation pressure with respect to temperature.
c
c  Cognizant engineer: jet.
c
c      Calling sequence:
c
c                call  strsat (rp1,ip2,rp3,rp4,rp5,lp6)
c
c      Parameters:
c
c                rp1 = a      = steam tables (input)
c
c                ip2 = icf    = control flag (input)
c                               1 = find saturation pressure for given
c                                   temperature
c                               2 = find saturation temperature for
c                                   given pressure
c
c                rp3 = x      = temperature or pressure for which
c                               saturation pressure or temperature is
c                               desired (input)
c
c                rp4 = ysat   = saturation pressure or temperature
c                               (output)
c
c                rp5 = dpsdts = derivative of saturation pressure with
c                               respect to temperature (output)
c
c                lp6 = err    = error flag  (output)
c
c      Note:
c
c        The form of the interpolation function is
c
c                         log (P) = -A/T + B
c
c        where P is the saturation pressure at temperature T, and A and
c        B are constants which must be determined at each interpolation.
c
c        To derive the given functional form, the following simplifying
c        assumptions are made:
c
c        (a)  Latent heat-of-vaporization is a linear function of
c             pressure (only) which goes to zero at the critical
c             point, i.e., htvap = c1 * ( Pcrit - P ).
c
c        (b)  The vapor obeys the ideal gas law, i.e, the vapor
c             volume is vvap = c2 * T / P.
c
c        (c)  Liquid volume does not depend on P (incompressible) and
c             is an increasing linear function of T which becomes
c             equal to the vapor volume at the critical point,
c             i.e, vliq = c2 * T / Pcrit.
c
c        Applying these assumptions to the Clausius-Clapeyron equation
c        dPbydT = htvap / ( T * ( vvap - vliq ) ) gives
c
c        dPbydT = c1 * ( Pcrit - P ) / ( c2 * ( 1/P - 1/Pcrit ) * T**2 )
c
c        or, since 1/P - 1/Pcrit = ( Pcrit - P ) / ( Pcrit * P ),
c
c                          dPbydT = A * P / T**2
c
c        where A = c1 * Pcrit / c2.  Thus,
c
c                         1/P * dPbydT = A / T**2
c
c        or, integrating with respect to T,
c
c                            log (P) = -A/T + B
c
c        which is the given functional form.
c
c        If (T1,P1) and (T2,P2) are the two points on the saturation
c        line which define the lower and upper limits, respectively, of
c        the interpolation interval, then we have
c
c          (1)  log (P2) = -A/T2 + B
c
c        and
c
c          (2)  log (P1) = -A/T1 + B
c
c        from which, subtracting (2) from (1),
c
c          log (P2) - log (P1) = A * ( 1/T1 - 1/T2 )
c
c        or
c
c          (3)  A = ( log (P2) - log (P1) ) * T1 * T2 / ( T2 - T1 )
c
c        Adding (1) to (2) gives
c
c          log (P1) + log (P2) = -A * ( 1/T1 + 1/T2 ) + 2 * B
c
c        or
c
c          (4)  B = 0.5 * ( log (P1) + log (P2)
c                                    + A * ( T1 + T2 ) / ( T1 * T2 ) )
c
c        which gives a better "average" value for B than just
c        substituting (3) into either (1) or (2).
c
c
       implicit none
c
       real  a(*), x, ysat, dpsdts
       integer  icf
       logical  err
c
       include 'stcom.h'
c
       real  xmin,xmax,xtrip,xcrit,ystrip,yscrit,
     &       xlow,xhigh,x1,x2,ysx1,ysx2,x1s,x2s,ysx1s,ysx2s,
     &       xa,ysata,xb,ysatb
       real  ac, bc, p, p1, p1log, p2, p2log, t, t1, t1t2, t2
       integer  ix,iytbl,nx,kxs,kysat,nsat,l,i0,i1,
     &          i2,i
c
c--initialize variables and pointers according to control flag
c
c      xmin   = minimum allowed value of x
c      xmax   = maximum allowed value of x
c      xtrip  = triple point value of x
c      xcrit  = critical point value of x
c      ystrip = triple point value of ysat
c      yscrit = critical point value of ysat
c      ix     = base pointer to table of x values
c      iytbl  = base pointer to table containing ysat values
c      nx     = number of values of x which lie within the saturation
c               region
c      kxs    = base pointer to saturation table of x values
c      kysat  = base pointer to saturation table of ysat values
c      nsat   = number of values of ysat variable which lie within the
c               saturation region
c
       if (icf.eq.1) then
c
         xmin = tmin
         xmax = tmax
         xtrip = ttrip
         xcrit = tcrit
         ystrip = ptrip
         yscrit = pcrit
         ix = 0
         iytbl = nt
         nx = nst
         kxs = it4bp
         kysat = it3bp
         nsat = nsp
c
       else  if (icf.eq.2) then
c
         xmin = pmin
         xmax = pmax
         xtrip = ptrip
         xcrit = pcrit
         ystrip = ttrip
         yscrit = tcrit
         ix = nt
         iytbl = 0
         nx = nsp
         kxs = it3bp
         kysat = it4bp
         nsat = nst
c
       else
c
         go to 50
c
       endif
c
c--check for valid x value
c
       xlow = max (xmin,xtrip)
       xhigh = min (xmax,xcrit)
       if (x.lt.xlow .or. x.gt.xhigh)  go to 50
c
c--search x table to find interval which contains x
c
c--initialize pointers
c
       l = kysat
       i0 = ix
       i1 = i0 + 1
c
c--if x lies below the first value in the x table, use the triple point
c--values of x and ysat for the low point of the interpolation interval,
c--and the first table values of x and ysat for the high point of the
c--interpolation interval
c
       if (x.lt.a(i1)) then
         x1 = xtrip
         x2 = a(i1)
         ysx1 = ystrip
         ysx2 = a(l+13)
         go to 20
       endif
c
c--x is .ge. the lowest value in the x table
c
       i1 = i1 + 1
       i2 = i0 + nx
       do 10 i=i1,i2
         if ( a(i) .le. x )  go to 10
         x1 = a(i-1)
         x2 = a(i)
         l = l + 13*(i-i1+1)
         ysx1 = a(l)
         ysx2 = a(l+13)
         go to 20
   10  continue
c
c--x is .ge. to the highest value in the x table;  if x is equal to the
c--highest x table value, use the last two values in the x table
c--for x1 and x2;  otherwise, try to use the critical value for x2;
c--if the critical value cannot be used, set x2 to an illegally high
c--value for possible use as an error flag later on
c
       if (x.eq.a(i2)) then
         x1 = a(i2-1)
         x2 = a(i2)
         l = l + 13*(nx-1)
         ysx1 = a(l)
         ysx2 = a(l+13)
       else
         x1 = a(i2)
         ysx1 = a(l+13*nx)
         if (xcrit.le.xmax) then
           x2 = xcrit
           ysx2 = yscrit
         else
           x2 = xmax + 1.0
         endif
       endif
c
c--search appropriate saturation (a.s.) table to find interval which
c--contains x
c
c--initialize pointers
c
   20  l = iytbl
       i0 = kxs
       i1 = i0 + 13
c
c--if x lies below the first value in the a.s. table, use the triple
c--point values of x and ysat for the low point of the interpolation
c--interval, and the first a.s. table values of x and ysat for the high
c--point of the interpolation interval
c
       if (x.lt.a(i1)) then
         x1s = xtrip
         x2s = a(i1)
         ysx1s = ystrip
         ysx2s = a(l+1)
         go to 40
       endif
c
c--x is .ge. the lowest value in the a.s. table
c
       i1 = i1 + 13
       i2 = i0 + 13*nsat
       do 30 i=i1,i2,13
         if ( a(i) .le. x )  go to 30
         x1s = a(i-13)
         x2s = a(i)
         l = l + (i-i1)/13 + 1
         ysx1s = a(l)
         ysx2s = a(l+1)
         go to 40
   30  continue
c
c--x is .ge. to the highest value in the a.s. table;  if x is equal to
c--the highest a.s. table value, use the last two values in the a.s.
c--table for x1s and x2s;  otherwise, try to use the critical value for
c--x2s;  if the critical value cannot be used, set x2s to an illegally
c--high value for possible use as an error flag later on
c
       if (x.eq.a(i2)) then
         x1s = a(i2-13)
         x2s = a(i2)
         l = l + nsat - 1
         ysx1s = a(l)
         ysx2s = a(l+1)
       else
         x1s = a(i2)
         ysx1s = a(l+nsat)
         if (xcrit.le.xmax) then
           x2s = xcrit
           ysx2s = yscrit
         else
           x2s = xmax + 1.0
         endif
       endif
c
c--verify that a valid x2 or x2s value is available for interpolation
c
   40  if ( min (x2,x2s) .gt. xmax )  go to 50
c
c--find best set of x and ysat values for interpolation
c
       if (x1.ge.x1s) then
         xa = x1
         ysata = ysx1
       else
         xa = x1s
         ysata = ysx1s
       endif
c
       if (x2.le.x2s) then
         xb = x2
         ysatb = ysx2
       else
         xb = x2s
         ysatb = ysx2s
       endif
c
c--interpolate to find saturation value
c
       if ( icf .eq. 1 ) then
         t = x
         t1 = xa
         t2 = xb
         p1 = ysata
         p2 = ysatb
         t1t2 = t1 * t2
         p1log = log (p1)
         p2log = log (p2)
         ac = ( p2log - p1log ) * t1t2 / ( t2 - t1 )
         bc = 0.5 * ( p1log + p2log + ac * ( t1 + t2 ) / t1t2 )
         p = exp ( bc - ac/t )
         ysat = p
       else
         p = x
         p1 = xa
         p2 = xb
         t1 = ysata
         t2 = ysatb
         t1t2 = t1 * t2
         p1log = log (p1)
         p2log = log (p2)
         ac = ( p2log - p1log ) * t1t2 / ( t2 - t1 )
         bc = 0.5 * ( p1log + p2log + ac * ( t1 + t2 ) / t1t2 )
         t = ac / ( bc - log (p) )
         ysat = t
       endif
c
c--get derivative of saturation pressure with respect to temperature
       dpsdts = ac * p / t**2
c
       err = .false.
       return
c--error
   50  err = .true.
       return
       end
