*mlist
       subroutine rpump
c  Processes pump component input data.
c
c  Cognizant engineer: rjw.
c
*in32 init
*in32end
c
       implicit none
       include 'fast.h'
       include 'cmpdat.h'
       include 'comctl.h'
       include 'contrl.h'
       include 'jundat.h'
       include 'pumpblk.h'
       include 'rcompc.h'
       include 'ufiles.h'
       include 'voldat.h'
c
c  Local variables.
       integer init(12),l3a(9),l3f(11),l3g(9),l3h(13),pckcod(2)
       real conv,xinit(12),fr(10)
       equivalence (xinit(1),init(1))
       logical tfail,ovl
       real tbl1n2(410), tbld(216), hd1(110), tk1(102),
     & hd2(104), tk2(94), dhd(110), dtk(106)
       equivalence(tbl1n2(1),hd1(1)), (tbl1n2(111),tk1(1)),
     & (tbl1n2(213),hd2(1)), (tbl1n2(317),tk2(1)),
     & (tbld(1),dhd(1)), (tbld(111),dtk(1))
       integer ltbls(8,4),ltbld(8,2), lfxtbl(2)
       character hdrtk(2)*6,labl1*64,labl2(2)*9,chwrd*8
       integer i,ierr,ii,ij,il,inp10,itemp,ix,ixb,ixe,ixt,j,k,k1,k2,kb,
     & kc,kl,kxt,lcntgs,lencmp,lens,mx,n3,n4,nc,nc1,nj1,nj1o,nnv,nump1,
     & nv1,nv1o
       real crsec,hold
       parameter (lens=55)
c  Data statements.
       data ltbls/ 12, 14, 16, 16, 18, 10, 14, 10,
     &             14, 16, 14, 12, 12, 14, 10, 10,
     &             18, 18, 10, 14, 20, 16,  4,  4,
     &             20, 14, 16, 14, 14,  8,  4,  4/
       data ltbld/ 14, 16, 20, 20, 12, 20,  4,  4,
     &             16, 16, 12, 12, 14, 12, 12, 12/
       data lfxtbl/212,198/
c  Head curves, bingham pump data.
c #1
       data hd1/        0.00, 1.38, 0.25, 1.38, 0.35, 1.35,
     &  0.65, 1.20, 0.80, 1.10, 1.00, 1.00,
c #2
     &  0.00,-1.02, 0.10,-0.90, 0.37,-0.50, 0.50,-0.25,
     &  0.80, 0.40, 0.85, 0.60, 1.00, 1.00,
c #3
     & -1.00, 2.50,-0.90, 2.28,-0.63, 2.00,-0.55, 1.74,
     & -0.50, 1.68,-0.42, 1.60,-0.15, 1.40, 0.00, 1.38,
c #4
     & -1.00, 2.50,-0.90, 2.28,-0.63, 2.00,-0.55, 1.74,
     & -0.50, 1.68,-0.42, 1.60,-0.15, 1.40, 0.00, 1.30,
c #5
     &  0.00, 0.00, 0.15, 0.05, 0.35, 0.20, 0.55, 0.30,
     &  0.70, 0.40, 0.86, 0.60, 0.96, 0.80, 0.99, 0.90,
     &  1.00, 1.00,
c #6
     &  0.00, 1.30, 0.30, 1.10, 0.50, 1.00, 0.75, 0.88,
     &  1.00, 1.00,
c #7
     & -1.00,-2.00,-0.68,-1.50,-0.45,-1.00,-0.28,-0.40,
     & -0.23,-0.27,-0.13,-0.20, 0.00, 0.00,
c #8
     & -1.00,-2.00,-0.75,-1.94,-0.50,-1.80,-0.12,-1.20,
     &  0.00,-1.02/
c  Torque curves, bingham pump data.
c #1
       data tk1/        0.00, 0.80, 0.23, 0.80, 0.35, 0.87,
     &  0.50, 0.93, 0.60, 0.95, 0.80, 0.96, 1.00, 1.00,
c #2
     &  0.00,-1.00, 0.13,-0.80, 0.30,-0.60, 0.40,-0.40,
     &  0.50, 0.10, 0.56, 0.20, 0.90, 0.80, 1.00, 1.00,
c #3
     & -1.00, 2.50,-0.80, 2.00,-0.60, 1.45,-0.46, 1.15,
     & -0.30, 0.95,-0.13, 0.80, 0.00, 0.80,
c #4
     & -1.00, 2.50,-0.65, 2.15,-0.40, 1.79,-0.30, 1.61,
     & -0.13, 1.50, 0.00, 1.44,
c #5
     &  0.00,-0.92, 0.30,-0.60, 0.42,-0.40, 0.50,-0.05,
     &  0.75, 0.25, 1.00, 0.57,
c #6
     &  0.00, 1.44, 0.10, 1.40, 0.22, 1.20, 0.33, 1.10,
     &  0.50, 1.00, 0.80, 0.80, 1.00, 0.57,
c #7
     & -1.00,-2.00,-0.30,-1.50,-0.18,-1.35,-0.07,-1.00,
     &  0.00,-0.92,
c #8
     & -1.00,-2.00,-0.25,-1.80,-0.12,-1.50,-0.08,-1.40,
     &  0.00,-1.00/
c  Head curves, westinghouse pump data.
c #1
       data hd2/        0.00, 1.73, 0.20, 1.50, 0.46, 1.24,
     &  0.52, 1.23, 0.60, 1.24, 0.66, 1.24, 0.80, 1.17,
     &  0.90, 1.10, 1.00, 1.00,
c #2
     &  0.00,-0.96, 0.10,-0.90, 0.20,-0.81, 0.30,-0.70,
     &  0.40,-0.54, 0.53,-0.30, 0.65, 0.00, 0.80, 0.37,
     &  1.00, 1.00,
c #3
     & -1.00, 3.55,-0.60, 2.73,-0.32, 2.20,-0.18, 2.00,
     &  0.00, 1.73,
c #4
     & -1.00, 3.55,-0.89, 3.20,-0.74, 2.80,-0.60, 2.47,
     & -0.46, 2.20,-0.20, 1.73, 0.00, 1.40,
c #5
     &  0.00,-0.16, 0.10,-0.12, 0.20,-0.06, 0.28, 0.00,
     &  0.40, 0.09, 0.60, 0.31, 0.70, 0.42, 0.80, 0.50,
     &  0.88, 0.54, 1.00, 0.59,
c #6
     &  0.00, 1.40, 0.37, 0.80, 0.43, 0.74, 0.50, 0.68,
     &  0.58, 0.64, 0.64, 0.62, 0.70, 0.61, 1.00, 0.59,
c #7
     & -1.00, 0.00, 0.00, 0.00,
c #8
     & -1.00, 0.00, 0.00, 0.00/
c  Torque curves, westinghouse pump data.
c #1
       data tk2/        0.00, 1.01, 0.10, 0.96, 0.20, 0.92,
     &  0.30, 0.90, 0.40, 0.89, 0.50, 0.91, 0.70, 0.99,
     &  0.80, 1.02, 0.90, 1.02, 1.00, 1.00,
c #2
     &  0.00,-0.87, 0.10,-0.76, 0.20,-0.63, 0.30,-0.48,
     &  0.40,-0.31, 0.74, 0.40, 1.00, 1.00,
c #3
     & -1.00, 2.98,-0.82, 2.40,-0.60, 1.87,-0.46, 1.60,
     & -0.34, 1.40,-0.20, 1.21,-0.10, 1.10, 0.00, 1.01,
c #4
     & -1.00, 2.98,-0.91, 2.80,-0.80, 2.60,-0.70, 2.42,
     & -0.60, 2.25,-0.42, 2.00, 0.00, 1.42,
c #5
     &  0.00,-1.00, 0.25,-0.60, 0.40,-0.37, 0.50,-0.25,
     &  0.60,-0.16, 0.80,-0.01, 1.00, 0.11,
c #6
     &  0.00, 1.42, 0.60, 0.61, 0.80, 0.35, 1.00, 0.11,
c #7
     & -1.00, 0.00, 0.00, 0.00,
c #8
     & -1.00, 0.00, 0.00, 0.00/
c  Head curves, difference curve data.
c #1
       data dhd/        0.00, 0.00, 0.10, 0.83, 0.20, 1.09,
     &  0.50, 1.02, 0.70, 1.01, 0.90, 0.94, 1.00, 1.00,
c #2
     &  0.00, 0.00, 0.10,-0.04, 0.20, 0.00, 0.30, 0.10,
     &  0.40, 0.21, 0.80, 0.67, 0.90, 0.80, 1.00, 1.00,
c #3
     & -1.00,-1.16,-0.90,-1.24,-0.80,-1.77,-0.70,-2.36,
     & -0.60,-2.79,-0.50,-2.91,-0.40,-2.67,-0.25,-1.69,
     & -0.10,-0.50, 0.00, 0.00,
c #4
     & -1.00,-1.16,-0.90,-0.78,-0.80,-0.50,-0.70,-0.31,
     & -0.60,-0.17,-0.50,-0.08,-0.35, 0.00,-0.20, 0.05,
     & -0.10, 0.08, 0.00, 0.11,
c #5
     &  0.00, 0.00, 0.20,-0.34, 0.40,-0.65, 0.60,-0.93,
     &  0.80,-1.19, 1.00,-1.47,
c #6
     &  0.00, 0.11, 0.10, 0.13, 0.25, 0.15, 0.40, 0.13,
     &  0.50, 0.07, 0.60,-0.04, 0.70,-0.23, 0.80,-0.51,
     &  0.90,-0.91, 1.00,-1.47,
c #7
     & -1.00, 0.00, 0.00, 0.00,
c #8
     & -1.00, 0.00, 0.00, 0.00/
c  Torque curves, difference curve data.
c #1
       data dtk/  0.00,0.54, 0.20,0.59, 0.40,0.65, 0.60,0.77,
     & 0.80,0.95, 0.90,0.98, 0.95,0.96, 1.00,0.87,
c #2
     & 0.00,-0.15,0.20,0.02, 0.40,0.22, 0.60,0.46, 0.80,0.71,
     & 0.90,0.81, 0.95,0.85, 1.00,0.87,
c #3
     & -1.00,0.62, -0.80,0.68, -0.60,0.53, -0.40,0.46,
     & -0.20,0.49, 0.00, 0.54,
c #4
     & -1.00,0.62, -0.80,0.53, -0.60,0.46, -0.40,0.42,
     & -0.20,0.39, 0.00, 0.36,
c #5
     &  0.00,-0.63, 0.20,-0.51, 0.40,-0.39, 0.60,-0.29,
     &  0.80,-0.20, 0.90,-0.16, 1.00,-0.13,
c #6
     &  0.00,0.36, 0.20,0.32, 0.40,0.27, 0.60,0.18,
     &  0.80,0.05, 1.00,-0.13,
c #7
     & -1.00,-1.44, -0.80,-1.25, -0.60,-1.08,
     & -0.40,-0.92, -0.20,-0.77, 0.00,-0.63,
c #8
     & -1.00,-1.44, -0.80,-1.12, -0.60,-0.79,
     & -0.40,-0.52, -0.20,-0.31, 0.00,-0.15/
c
       data l3a/2*0,0,3,0,1,0,-1,0/
       data l3f/2*0,0,202,0,1,0,0,2,1,1/
       data l3g/2*0,2,200,0,1,2,1,1/
       data l3h/2*0,2*7,0,1,7*0/
       data crsec/0.10471975511963/
       data labl2/'(rad/sec)','(rev/min)'/
       data hdrtk/'head','torque'/
c
       il = 1
       if (.not.unito) il = 2
c  Get component number.
       ovl = .false.
       i = ncmps(filndx(3)) + filndx(3)
       nc = cmpnum(i)
       lencmp = lens
c  Extend component block.
       filsiz(3) = filsiz(3) + lens
       if (lcntgs(filid(3),1) .lt. filsiz(3)) go to 4980
       call ftbsft (filid(3),filsiz(3),1,filndx(3))
       i = ncmps(filndx(3)) + filndx(3)
       nvc(i) = 1
       njc(i) = 2
       cmpopt(i) = 0
c  Check if replacement or flag modification is possible.
       ii = filndx(3)
       if (cmpsrc) go to 401
       nnv = ncomp - 1
       if (nnv .ne. 0) then
         nv1 = 0
         nj1 = 0
         tfail = .false.
         do k = 1,nnv
           nv1o = nvc(ii)
           nj1o = njc(ii)
           nc1 = cmplen(ii)
           j = cmpnum(ii) - nc
           if (j .eq. 0) go to 404
           if (j .gt. 0) tfail = .true.
           nv1 = nv1 + nv1o
           nj1 = nj1 + nj1o
           ii = ii + nc1
         enddo
         if (tfail) go to 410
       endif
       cmpsrc = .true.
       go to 401
  404  ncomp = nnv
       if (cmptyp(ii) .ne. cmptyp(i)) go to 406
       if (njc(ii) .ne. njc(i)) go to 406
       ovl = cmpflg
       go to 14
  410  nv1o = 0
       nj1o = 0
       nc1 = 0
  406  if (.not.cmpflg) go to 14
  409  write (output,2035) nc
 2035  format ('0******** Illegal use of component flag change option in
     & component',i4,'.')
       write (output,2008) nc
 2008  format ('0******** Data for component',i4,' cannot be processed.'
     & )
       go to 12
c  Volume and junction data input.
c  Extend volume and junction blocks for this component.
  401  if (cmpflg) go to 409
   14  ierr = 0
       call rpmvnj (ierr,i,nc,nv1,nv1o,nj1,nj1o,ovl)
       if (ierr - 1) 600,4980,4990
  600  ii = ii - i
       if (ovl) go to 1999
c  Read pump description cards.
       call rpmpdc(i,nc,lencmp)
c  Single phase pump table data curve set.
       if (iputdi(i) .ne. 0) go to 880
c  So process the single phase table set.
c  ipmtbl(i) is the first word of the 8 word pointer table for the
c  Single phase table.
       iputdi(i) = lencmp
       kc = 0
       filsiz(3) = filsiz(3) + 16
       lencmp = lencmp + 16
c  Preset 16 word pointer to zeros.
       if (lcntgs(filid(3),1) .lt. filsiz(3)) go to 4980
       call ftbsft (filid(3),filsiz(3),1,filndx(3))
       i = ncmps(filndx(3)) + filndx(3)
       ix = i + iputdi(i)
       ixe = ix + 15
       do kxt = ix,ixe
         ipmtbl(kxt) = 0
       enddo
       ixt = 11
       if (iand(ihlppr(2),ishft(1,22)) .ne. 0) write (output,
     & "('0Edit for pump single phase table input'/)")
       do
         itemp = filsiz(3) + 203
         if (lcntgs(filid(3),1) .lt. itemp) go to 4980
         call ftbsft (filid(3),itemp,1,filndx(3))
         i = ncmps(filndx(3)) + filndx(3)
         ix = i + lencmp
         l3f(1) = nc*10000 + ixt*100
         l3f(2) = -l3f(1) - 99
         l3f(6) = 1
         call inp2 (fa(filndx(1)),pmptbl(ix+1),l3f)
         if (l3f(6) .le. 0) then
           if (l3f(6) .lt. 0) fail = .true.
         else
           kc = 1
           if (mod(l3f(6),2) .ne. 0) then
             mx = ixt - 10
             write (output,2145) nc, mx
 2145  Format ('0******** For pump s. p. table data input,',i8,
     & ', the number of input items is not even.')
             fail = .true.
             l3f(6) = l3f(6) - 1
c  Check data values input.
           endif
           ixb = ix + 3
           ixe = ix + l3f(6)
           init(3) = 0
           init(4) = 0
           init(5) = 0
           mx = ixt - 10
c  Test word 1.
           if (ipmtbl(ix+1).lt.1 .or. ipmtbl(ix+1).gt.2) then
             write (output,2150) mx, ipmtbl(ix+1)
 2150  format('0******** In pump s. p. table, for curve ',i4,
     & ' word 1 is not within valid range (1 or 2), (=',i6,')')
             fail = .true.
             init(5) = 1
           endif
           if (ipmtbl(ix+2).lt.1 .or. ipmtbl(ix+2).gt.8) then
             write (output,2155) mx,ipmtbl(ix+2)
 2155  format ('0******** In pump s. p. table, for curve ',i4,
     & ' value of word 2, (=',i6,'is not in valid range (1<->8')
             fail = .true.
             init(5) = 1
           endif
           hold = -1.0
           do kxt = ixb,ixe,2
c  Test if ascending.
             if (pmptbl(kxt) .lt. hold) init(3) = 1
             if (pmptbl(kxt) .gt. 1.0) init(4) = 1
           enddo
c  Check for errors.
           if (init(3) .ne. 0) then
             write (output,2160) mx
 2160  format ('0******** For pump s. p. table data input, for curve',
     & i4,', the indep. variable is not ascending.')
             fail = .true.
           endif
           if (init(4) .ne. 0) then
             write (output,2165) mx
 2165  format ('0******** In pump s. p. table data input, for curve ',
     & i4,', the indep.variable is not within the range (-1. .le. x .le.
     &1.)')
             fail = .true.
           endif
           if (init(5) .le. 0) then
             if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &       write (output,2175) hdrtk(ipmtbl(ix+1)),ipmtbl(ix+2)
 2175  format ('0--- For ',a6,' curve no. ',i4,' in set : indep. variabl
     &e   depend. variable '/)
c  Set pointer in 16 word set.
             mx = 2*ipmtbl(ix+2) + ipmtbl(ix+1) - 3 + iputdi(i) + i
             ipmtbl(mx) = ix - i
             ipmtbl(ix) = 2
             ipmtbl(ix+1) = l3f(6) - 2
             ipmtbl(ix+2) = 1
             l3f(6) = l3f(6) + 1
             filsiz(3) = filsiz(3) + l3f(6)
             lencmp = lencmp + l3f(6)
             if (iand(ihlppr(2),ishft(1,22)) .ne. 0) then
               do kxt = ixb,ixe,2
                 write (output,"(' ',38x,1p,2g17.6)") pmptbl(kxt:kxt+1)
               enddo
             endif
           endif
         endif
         ixt = ixt + 1
         if (ixt .gt. 26) exit
       enddo
       if (kc .eq. 0) then
         write (output,"('0******** No single phase homologous data is p
     &resent for this pump.')")
         fail = .true.
       endif
       go to 890
c  If specified - put in the built-in single phase table data.
  880  if (iputdi(i) .ge. 0) then
         cmpopt(i) = ior(cmpopt(i),64)
         go to 900
       endif
c  Put in Bingham or Westinghouse data.
       kl = 0
       ij = 1
c  If Westinghouse, set flags.
       if (iputdi(i) .ne. -1) then
         kl = 212
         ij = 3
       endif
       iputdi(i) = lencmp
       lencmp = lencmp + 16
       filsiz(3) = filsiz(3) + 16
c  3*16 = 48 is for the added control words.
       itemp = filsiz(3) + lfxtbl(ij/2+1) + 48
       if (lcntgs(filid(3),1) .lt. itemp) go to 4980
       call ftbsft (filid(3),itemp,1,filndx(3))
       i = ncmps(filndx(3)) + filndx(3)
c  Zero out 16 word pointers.
       ixb = i + iputdi(i)
       ixe = ixb + 15
       do kxt =ixb,ixe
         ipmtbl(kxt) = 0
       enddo
       if (iand(ihlppr(2),ishft(1,22)) .ne. 0) write (output,
     & "('0Edit for pump single phase table input'/)")
c  Put in 8 head curves.
       do j = 1,8
       if (iand(ihlppr(2),ishft(1,22)) .ne. 0) write (output,
     & "('0    For head curve, octant',i2,'  independent variable,  depe
     &ndent variable')") j
         ix = i + lencmp
         ipmtbl(ixb+2*j-2) = ix - i
         kb = kl + 1
         kl = kl + ltbls(j,ij)
         nump1 = ltbls(j,ij) + 3
c  Add in control words - each curve.
         ipmtbl(ix) = 2
         ipmtbl(ix+1) = ltbls(j,ij)
         ipmtbl(ix+2) = 1
         ix = ix + 3
         do k = kb,kl,2
           pmptbl(ix) = tbl1n2(k)
           pmptbl(ix+1) = tbl1n2(k+1)
           if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &     write (output,"(39x,1p,2g17.6)") pmptbl(ix:ix+1)
           ix = ix + 2
         enddo
         lencmp = lencmp + nump1
         filsiz(3) = filsiz(3) + nump1
       enddo
c  Put in 8 torque curves.
       do j = 1,8
         if (iand(ihlppr(2),ishft(1,22)) .ne. 0) write (output,
     & "('0    For torque curve, octant',i2,'  independent variable,  de
     &pendent variable')") j
         ix = i + lencmp
         ipmtbl(ixb+2*j-1) = ix - i
         kb = kl + 1
         kl = kl + ltbls(j,ij+1)
         nump1 = ltbls(j,ij+1) + 3
c  Add in control words - each curve.
         ipmtbl(ix) = 2
         ipmtbl(ix+1) = ltbls(j,ij+1)
         ipmtbl(ix+2) = 1
         ix = ix + 3
         do k = kb,kl,2
           pmptbl(ix) = tbl1n2(k)
           pmptbl(ix+1) = tbl1n2(k+1)
           if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &     write (output,"(39x,1p,2g17.6)") pmptbl(ix:ix+1)
           ix = ix + 2
         enddo
         filsiz(3) = filsiz(3) + nump1
         lencmp = lencmp + nump1
       enddo
!  Do checks on appropriate end points and proper continuity for the
!  single phase homologous curves.
  890  if (iand(cmpopt(i),64).eq.0 .and. iputdi(i).ne.0)
     & call pmpcrvck (i,1)
       ix = iputdi(i) + i
       do kxt = 1,8
         if (ipmtbl(ix).eq.0 .neqv. ipmtbl(ix+1).eq.0) then
           write (output,2007)
           fail = .true.
           exit
         endif
         ix = ix + 2
       enddo
c  Head and torque multiplier data tables.
c  Test to see if need 2-phase.
c  Head & torque mult. table.
  900  if (ipuhmi(i).lt.-1 .or. ipuhmi(i).gt.999) then
         write (output,"('0******** Two phase index is out of range.')")
         ipuhmi(i) = 0
         fail = .true.
       elseif (ipuhmi(i) .lt. 0) then
         ipuhmi(i) = 0
       elseif (ipuhmi(i) .gt. 0) then
         cmpopt(i) = ior(cmpopt(i),256)
       else
c  Read head & torque mult table.
         ierr = 0
         call rpmpmd(ierr,i,nc,lencmp)
         if (ierr .ne. 0) go to 4980
       endif
c  Two phase difference table data curve set.
       if (ipu2di(i) .ne. 0) then
         if (ipu2di(i) .eq. -3) then
           ipu2di(i) = 0
           if (ipuhmi(i) .ne. 0) then
             write (output,2006)
 2006  format ('0******** Two phase and two phase difference table index
     &es are inconsistent.')
             fail = .true.
           endif
           go to 1100
         endif
         if (ipu2di(i).ge.-2 .and. ipu2di(i).le.999) go to 1080
         write(output,2220) ipu2di(i)
 2220  format('0******** Pump two ph difference table indicator',
     & i8,' is not within the valid range (-2 <---> 999)')
         ipu2di(i) = 0
         fail = .true.
         go to 1100
       endif
c  So, process 2-phase difference table.
       ipu2di(i) = lencmp
       kc = 0
       filsiz(3) = filsiz(3) + 16
       lencmp = lencmp + 16
c  Preset 16 word pointers to zeros.
       if (lcntgs(filid(3),1) .lt. filsiz(3)) go to 4980
       call ftbsft (filid(3),filsiz(3),1,filndx(3))
       i = ncmps(filndx(3)) + filndx(3)
       ix = ipu2di(i) + i
       ixe = ix + 15
       do kxt = ix,ixe
         ipmtbl(kxt) = 0
       enddo
       ixt = 41
       if (iand(ihlppr(2),ishft(1,22)) .ne. 0) write (output,
     & "('0Edit for pump 2-phase difference table set input')")
c  Loop to process a curve within set.
       do
         itemp = filsiz(3) + 203
         if (lcntgs(filid(3),1) .lt. itemp) go to 4980
         call ftbsft (filid(3),itemp,1,filndx(3))
         i = ncmps(filndx(3)) + filndx(3)
         ix = i + lencmp
         l3f(1) = nc*10000 + ixt*100
         l3f(2) = -l3f(1) -99
         l3f(6) = 1
         call inp2(fa(filndx(1)),pmptbl(ix+1),l3f)
         if (l3f(6) .le. 0) then
           if (l3f(6) .lt. 0) fail = .true.
         else
           kc = 1
           if (mod(l3f(6),2) .ne. 0) then
             mx = ixt - 40
             write(output,2225) nc, mx
 2225  format ('0******** For pump 2.p. diff. table data input,',i8,
     & 'the number of items for curve ',i4,' is not even.')
             fail = .true.
             l3f(6) = l3f(6) - 1
           endif
c  Check data values input.
           ixb = ix + 3
           ixe = ix + l3f(6)
c  Test words 1 & 2.
           init(3) = 0
           init(4) = 0
           init(5) = 0
           mx = ixt - 40
           if (ipmtbl(ix+1).lt.1 .or. ipmtbl(ix+1).gt.2) then
             write(output,2230) mx, ipmtbl(ix+1)
 2230  format ('0******** In pump 2.p. diff. table, for curve ',
     & i4,' word 1 (=',i6,') is not within valid range(1 or 2)')
             fail = .true.
             init(5) = 1
           endif
           if (ipmtbl(ix+2).lt.1 .or. ipmtbl(ix+2).gt.8) then
             write (output,2235) mx,ipmtbl(ix+2)
 2235  format('0******** In pump 2.p. diff. table, for curve ',i4,
     & ' the value of word 2 (=',i6,') is not in valid range (1<--->8)')
             fail = .true.
             init(5) = 1
           endif
           hold = -1.0
           do kxt = ixb,ixe,2
             if (pmptbl(kxt) .lt. hold) init(3) = 1
             if (pmptbl(kxt).gt.1.0) init(4) = 1
           enddo
c  Check for errors.
           if (init(3) .ne. 0) then
             write (output,2240) mx
 2240  format('0******** For pump 2.p. diff. table data input for curve'
     & ,i4,' the indep. variable is not ascending.')
             fail = .true.
           endif
           if (init(4) .ne. 0) then
             write (output,2245) mx
 2245  format ('0******** In pump 2.p. diff. table data input for curve'
     &,i4,' the indep. variable data is not within the range (-1. <--->
     &1.)')
             fail = .true.
           endif
           if (init(5) .le. 0) then
c  Set pointer in 16 word set.
             if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &       write (output,2255) hdrtk(ipmtbl(ix+1)),ipmtbl(ix+2)
 2255  format('0---- for ',a6,
     & ' curve no.',i4,' in set : indep. variable  depend. variable'/)
             mx = 2*ipmtbl(ix+2) + ipmtbl(ix+1) - 3 + ipu2di(i) + i
             ipmtbl(mx) = ix - i
             ipmtbl(ix) = 2
             ipmtbl(ix+1) = l3f(6) - 2
             ipmtbl(ix+2) = 1
             l3f(6) = l3f(6) + 1
             lencmp = lencmp + l3f(6)
             filsiz(3)= filsiz(3) + l3f(6)
             if (iand(ihlppr(2),ishft(1,22)) .ne. 0) then
               do kxt = ixb,ixe,2
                 write (output,"(' ',38x,1p,2g17.6)") pmptbl(kxt:kxt+1)
               enddo
             endif
           endif
         endif
         ixt = ixt + 1
         if (ixt .gt. 56) exit
       enddo
       if (kc .eq. 0) then
         write (output,"('0******** No two phase difference homologous d
     &ata is present for this pump.')")
         fail = .true.
       endif
       go to 1090
c  If specified - put in the built-in single-phase table data.
 1080  if (ipu2di(i) .ge. 0) then
         cmpopt(i) = ior(cmpopt(i),1024)
         go to 1100
       endif
c  Put in difference data.
       ipu2di(i) = lencmp
       filsiz(3) = filsiz(3) + 16
       lencmp = lencmp + 16
       kl = 0
       ij = 1
c  216 + 3*16 = 264 is for added control words and data.
       itemp = filsiz(3) + 264
       if (lcntgs(filid(3),1) .lt. itemp) go to 4980
       call ftbsft (filid(3),itemp,1,filndx(3))
       i = ncmps(filndx(3)) + filndx(3)
       ix = ipu2di(i) + i
c  Zero out 16 word pointers set.
       ixe = ix + 15
       do kxt = ix,ixe
         ipmtbl(kxt) = 0
       enddo
       if (iand(ihlppr(2),ishft(1,22)) .ne. 0) write (output,
     & "('0Edit for pump 2-phase difference table set input')")
c  Put in 8 head curves.
       do j = 1,8
         if (iand(ihlppr(2),ishft(1,22)) .ne. 0) write (output,
     & "('0    For head curve, octant',i2,'  independent variable,  depe
     &ndent variable')") j
         ixt = i + lencmp
         ipmtbl(ix+2*j-2) = ixt - i
         kb = kl + 1
         kl = kl + ltbld(j,ij)
         nump1 = ltbld(j,ij) + 3
c  Add in control words - each curve.
         ipmtbl(ixt) = 2
         ipmtbl(ixt+1) = ltbld(j,ij)
         ipmtbl(ixt+2) = 1
         ixt = ixt + 3
         do k = kb,kl,2
           pmptbl(ixt) = tbld(k)
           pmptbl(ixt+1) = tbld(k+1)
           if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &     write (output,"(39x,1p,2g17.6)") pmptbl(ixt:ixt+1)
           ixt = ixt + 2
         enddo
         filsiz(3) = filsiz(3) + nump1
         lencmp = lencmp + nump1
       enddo
c  Put in 8 torque curves.
       do j = 1,8
         if (iand(ihlppr(2),ishft(1,22)) .ne. 0) write (output,
     & "('0    For torque curve, octant',i2,'  independent variable,  de
     &pendent variable')") j
         ixt = i + lencmp
         ipmtbl(ix+2*j-1) = ixt - i
         kb = kl + 1
         kl = kl + ltbld(j,ij+1)
         nump1 = ltbld(j,ij+1) + 3
c  Add in control words - each curve.
         ipmtbl(ixt) = 2
         ipmtbl(ixt+1) = ltbld(j,ij+1)
         ipmtbl(ixt+2) = 1
         ixt = ixt + 3
         do k = kb,kl,2
           pmptbl(ixt) = tbld(k)
           pmptbl(ixt+1) = tbld(k+1)
           if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     &     write (output,"(39x,1p,2g17.6)") pmptbl(ixt:ixt+1)
           ixt = ixt + 2
         enddo
         filsiz(3) = filsiz(3) + nump1
         lencmp = lencmp + nump1
       enddo
 1090  ix = ipu2di(i) + i
       do kxt = 1,8
         if (ipmtbl(ix).eq.0 .neqv. ipmtbl(ix+1).eq.0) then
           write (output,2007)
 2007  format ('0******** Head or torque table entered for a homologous
     &curve type and other corresponding table is not entered.')
           fail = .true.
           exit
         endif
         ix = ix + 2
       enddo
!  Do checks on appropriate end points and proper continuity for the
!  two phase homologous curves.
 1100  if (iand(cmpopt(i),1024).eq.0 .and. ipu2di(i).ne.0)
     & call pmpcrvck (i,2)
c  Motor torque table.
       if (ipumtk(i) .eq. -1) then
         ipumtk(i) = 0
         go to 1200
       endif
       if (ipumtk(i) .ne. 0) then
         if (ipumtk(i).lt.0 .or. ipumtk(i).ge.1000) then
           write (output,2270) ipumtk(i)
 2270  format('0******** Pump motor torque table indicator,',i8,
     & ' is not within valid range (-1 <---> 999)')
           fail = .true.
           ipumtk(i) = 0
         else
           cmpopt(i) = ior(cmpopt(i),4096)
         endif
         go to 1200
       endif
c  Read in motor torque table.
       itemp = filsiz(3) + 203
       if (lcntgs(filid(3),1) .lt. itemp) go to 4980
       call ftbsft (filid(3),itemp,1,filndx(3))
       i = ncmps(filndx(3)) + filndx(3)
       ix = i + lencmp
       l3g(1) = nc*10000 + 6001
       l3g(2) = -l3g(1) - 98
       l3g(6) = 1
       call inp2 (fa(filndx(1)),pmptbl(ix+3),l3g)
       if (l3g(6) .le. 0) then
         fail = .true.
         go to 1200
       endif
       if (mod(l3g(6),2) .ne. 0) then
         write (output,2280)
 2280  format ('0******** Pump motor torque table contains an uneven num
     &ber of entries.')
         fail = .true.
         go to 1200
       endif
       ixb = ix + 5
       ixe = ix + l3g(6) + 2
       if (l3g(6) .ge. 3) then
         init(3) = 0
         do kxt = ixb,ixe,2
           if (pmptbl(kxt) .lt. pmptbl(kxt-2)) init(3) = 1
         enddo
c  Check for errors.
         if (init(3) .ne. 0) then
           write (output,2285)
 2285  format ('0******** For pump motor torque table, the indep. variab
     &le data is not ascending in values.')
           fail = .true.
         endif
       endif
c  Set fixed pointer.
       ipumtk(i) = ix - i
       ipmtbl(ix) = 2
       ipmtbl(ix+1) = l3g(6)
       ipmtbl(ix+2) = 1
       if (iand(ihlppr(2),ishft(1,22)) .ne. 0)
     & write (output,2300) labl2(il)
 2300  format ('0Edit of relative pump motor torque table'/
     & 19x,'pump velocity    rel.pump mtr.torque'/19x,a)
       fr(1) = 1.0
       fr(2) = 1.0
       if (.not.uniti .or. .not.unito) then
         fr(2) = crsec
         if (uniti .or. unito) then
           fr(1) = crsec
           if (.not.unito) then
             fr(1) = 1.0/crsec
             fr(2) = 1.0
           endif
         endif
       endif
       ixb = ix + 3
       if (iand(ihlppr(2),ishft(1,22)) .ne. 0) then
         do kxt = ixb,ixe,2
           xinit(1) = pmptbl(kxt)*fr(1)
           write (output,2305) xinit(1), pmptbl(kxt+1)
           pmptbl(kxt) = pmptbl(kxt)*fr(2)
 2305  format (1h ,18x,1p,2g17.6)
         enddo
       endif
c  Reset storage size.
       l3g(6) = l3g(6) + 1
       filsiz(3) = filsiz(3) + l3g(6)
       lencmp = lencmp + l3g(6)
c  Time-dependent pump speed table.
 1200  if (ipuspi(i) .ne. 0) then
         if (ipuspi(i) .eq. -1) then
           ipuspi(i) = 0
           go to 1999
         endif
         if (ipuspi(i).le.0 .or. ipuspi(i).gt.999) then
           write (output,2310) ipuspi(i)
 2310  format('0******** Time dep. pump speed table indicator',i8,
     & ' is not within valid range.')
           ipuspi(i) = 0
           fail = .true.
           go to 1999
         endif
         cmpopt(i) = ior(cmpopt(i),16384)
         go to 1999
       endif
c  Read in pump speed table.
       itemp = filsiz(3) + 209
       if (lcntgs(filid(3),1) .lt. itemp) go to 4980
       call ftbsft (filid(3),itemp,1,filndx(3))
       i = ncmps(filndx(3)) + filndx(3)
       ix = i + lencmp
       labl1 = ' '
       labl1(1:16) = 'time'
       labl1(17:32) = '(sec)'
       tfail = .false.
       ipmvtr(ix) = 0
       ipmvtr(ix+1) = 0
       chwrd = ' '
       read (chwrd,'(a8)') ipmval(ix)
       ipmvnm(ix) = 0
       ipmvpc(ix) = 0
       ipmvpc(ix+1) = 0
       l3a(1) = nc*10000 + 6100
       l3a(6) = 1
       call inp2 (fa(filndx(1)),init,l3a)
       if (l3a(6) .le. 0) then
         if (l3a(6) .lt. 0) fail = .true.
       else
         ipmvtr(ix) = init(1)
         if (ipmvtr(ix).lt.0 .or. ipmvtr(ix).gt.2000) then
           ipmvtr(ix) = 0
           write (output,2004)
 2004  format ('0******** Pump velocity trip number is out of range, set
     & to zero.')
           fail = .true.
         else
           write (output,2009) ipmvtr(ix)
 2009  format ('0Pump velocity trip number is',i4,'.')
         endif
         if (l3a(6) .ge. 2) then
           ipmval(ix) = xinit(2)
           ipmvnm(ix) = init(3)
           if (l3a(6) .eq. 2) ipmvnm(ix) = 0
           if (ipmvnm(ix).lt.0 .or. ipmvnm(ix).gt.1000000000) then
             write (output,2010) l3a(1)
 2010  format ('0******** Parameter value in word 3 of card',i8,' is out
     & of range.')
             tfail = .true.
             ipmvnm(ix) = 0
           endif
           write (chwrd,'(a8)') ipmval(ix)
           call scnreq (l3a(1),chwrd,ipmvnm(ix),-1,pckcod,conv,
     &     labl1,ovl)
           tfail = tfail .or. ovl
           if (tfail) then
             write (output,2011)
 2011  format ('0******** Independent variable in table assumed to be ti
     &me.')
             chwrd = ' '
             read (chwrd,'(a8)') ipmval(ix)
             fail = .true.
           endif
         endif
       endif
       l3g(1) = l3a(1) + 1
       l3g(2) = -l3g(1) - 98
       l3g(6) = 1
c
       call inp2 (fa(filndx(1)),pmpvtl(ix),l3g)
       if (l3g(6) .le. 0) then
         fail = .true.
         go to 1999
       endif
       if (mod(l3g(6),2) .ne. 0) then
         write (output,2320)
 2320  format ('0******** Pump velocity table contains an odd number of
     &entries.')
         fail = .true.
         go to 1999
       endif
       ixb = ix + 2
       ixe = ix + l3g(6) - 1
       if (ixe .ge. ixb) then
         init(3) = 0
         do kxt = ixb,ixe,2
           if (pmpvtl(kxt) .lt. pmpvtl(kxt-2)) init(3) = 1
         enddo
c  Check for errors.
         if (init(3) .ne. 0) then
           write (output,2325)
 2325  format('0******** For time dep. pump speed table, the indep. vari
     &able data is not ascending.')
           fail = .true.
         endif
       endif
c  Set fixed pointer.
       ipuspi(i) = ix - i
       ipmvtl(ix) = 2
       ipmvtl(ix+1) = l3g(6)
       ipmvtl(ix+2) = 1
       if( iand(ihlppr(2),ishft(1,22)).ne.0 )
     & write (output,2330) labl1(1:16),labl1(17:32),labl2(il),
     & labl1(33:48),labl1(49:64)
 2330  format ('0Edit of pump velocity table'/
     & 5x,a17,'pump velocity'/5x,a17,a10/5x,a17/5x,a17)
       fr(1) = 1.
       fr(2) = 1.
       if (.not.uniti .or. .not.unito) then
         fr(1) = crsec
         if (uniti .or. unito) then
           fr(2) = crsec
           if (.not.unito) then
             fr(1) = 1.
             fr(2) = 1.0/crsec
           endif
         endif
       endif
       do kxt = ix,ixe,2
         xinit(1) = pmpvtl(kxt+1)*fr(2)
         if( iand(ihlppr(2),ishft(1,22)).ne.0 )
     &   write (output,2335) pmpvtl(kxt),xinit(1)
 2335  format (1p,2g17.6)
         pmpvtl(kxt+1) = pmpvtl(kxt+1)*fr(1)
       enddo
       if (iand(cmpopt(i),16) .ne. 0) then
         write (output,2336)
 2336  format ('0******** Pump rotational velocity table cannot be enter
     &ed if pump is connected to shaft component.')
         fail = .true.
       endif
c  Reset storage size.
       l3g(6) = l3g(6) + 9
       lencmp = lencmp + l3g(6)
       filsiz(3) = filsiz(3) + l3g(6)
c  Insert new component in proper place in component block if necessary.
 1999  cmplen(i) = lencmp
       if (.not.cmpsrc .and. nc1.ne.0) then
         k2 = lencmp - nc1
         if (k2 .gt. 0) then
           n3 = filsiz(3) + k2 + lencmp
           call ftbsft (filid(3),n3,1,filndx(3))
           i = ncmps(filndx(3)) + filndx(3)
         endif
         ii = i + ii
         n3 = ii + nc1
         n4 = ii + lencmp
         k1 = i + lencmp - n3
         if (k2 .ne. 0) then
           if (k2 .gt. 0) k1 = -k1
           call ftbmov (fa(n3+1),fa(n4+1),k1)
           i = i + k2
         endif
         call ftbmov (fa(i+1),fa(ii+1),lencmp)
         ncmps(filndx(3)) = ncmps(filndx(3)) + k2
         filsiz(3) = filsiz(3) + k2 - lencmp
       else
         ncmps(filndx(3)) = ncmps(filndx(3)) + lencmp
       endif
       call ftbsft (filid(3),filsiz(3),3,filndx(3))
       return
c  Error exit.
 4980  write (output,2001) nc
 2001  format ('0******** Insufficient storage to process component',i4,
     & '.')
   12  l3f(1) = nc*10000
       l3f(2) = l3f(1) + 9999
       filsiz(1) = inp10(fa(filndx(1)),l3f(1),l3f(2))
       call ftbsft (2.0,filsiz(1),1,filndx(1))
 4990  filsiz(3) = filsiz(3) - lencmp + 3
       cmplen(i) = 3
       cmptyp(i) = 0
       call ftbsft (filid(3),filsiz(3),1,filndx(3))
       ncmps(filndx(3)) = ncmps(filndx(3)) + 3
       fail = .true.
       return
!
       contains
!
       subroutine pmpcrvck (i,im)
!  Checks for legitimate endpoints for pump homologous curves.
!
       implicit none
       integer i,im
!
!  Local variables.
       real hval(2,8),tval(2,8)
       integer ih,it,ixp,ixx,iyes(8,3),j
       integer, parameter ::
     & m(2,8)=(/1,2, 2,8, 8,7, 7,5, 5,6, 6,4, 4,3, 3,1/)
       logical hok(0:2,8),tok(0:2,8)
       character*8, parameter :: lbl(2)=(/'begining','end'/)
!
       hok = .false.; tok = .false.
!  Check the proper endpoint values are entered.
       do j = 1,8
         if (im .eq. 1) then
           ixp = iputdi(i) + 2*j - 2 + i
         else
           ixp = ipu2di(i) + 2*j - 2 + i
         endif
         ih = ipmtbl(ixp) + i
         it = ipmtbl(ixp+1) + i
         select case (j)
         case (1,2,5,6)
           if (ipmtbl(ixp) .ne. 0) then
             hok(0,j) = .true.
             hval(1,j) = pmptbl(ih+4)
             hok(1,j) = pmptbl(ih+3) .eq. 0.0
             hval(2,j) = pmptbl(ih+ipmtbl(ih+1)+2)
             hok(2,j) = pmptbl(ih+ipmtbl(ih+1)+1) .eq. 1.0
           endif
           if (ipmtbl(ixp+1) .ne. 0) then
             tok(0,j) = .true.
             tval(1,j) = pmptbl(it+4)
             tok(1,j) = pmptbl(it+3) .eq. 0.0
             tval(2,j) = pmptbl(it+ipmtbl(it+1)+2)
             tok(2,j) = pmptbl(it+ipmtbl(it+1)+1) .eq. 1.0
           endif
         case (3,4,7,8)
           if (ipmtbl(ixp) .ne. 0) then
             hok(0,j) = .true.
             hval(1,j) = pmptbl(ih+4)
             hok(1,j) = pmptbl(ih+3) .eq. -1.0
             hval(2,j) = pmptbl(ih+ipmtbl(ih+1)+2)
             hok(2,j) = pmptbl(ih+ipmtbl(ih+1)+1) .eq. 0.0
           endif
           if (ipmtbl(ixp+1) .ne. 0) then
             tok(0,j) = .true.
             tval(1,j) = pmptbl(it+4)
             tok(1,j) = pmptbl(it+3) .eq. -1.0
             tval(2,j) = pmptbl(it+ipmtbl(it+1)+2)
             tok(2,j) = pmptbl(it+ipmtbl(it+1)+1) .eq. 0.0
           endif
         end select
       enddo
       if (any(hok(0,:).and..not.hok(1,:)) .or.
     & any(hok(0,:).and..not.hok(2,:)) .or.
     & any(tok(0,:).and..not.tok(1,:)) .or.
     & any(tok(0,:).and..not.tok(1,:))) then
         k = 0
         do j = 1,8
           if (hok(0,j)) then
             if (.not.hok(1,j)) then
               k = k + 1 
               iyes(k,1) = j;  iyes(k,2) = 1;  iyes(k,3) = 1
             endif
             if (.not.hok(2,j)) then
               k = k + 1 
               iyes(k,1) = j;  iyes(k,2) = 2;  iyes(k,3) = 1
             endif
           endif
           if (tok(0,j)) then
             if (.not.tok(1,j)) then
               k = k + 1 
               iyes(k,1) = j;  iyes(k,2) = 1;  iyes(k,3) = 2
             endif
             if (.not.tok(2,j)) then
               k = k + 1 
               iyes(k,1) = j;  iyes(k,2) = 2;  iyes(k,3) = 2
             endif
           endif
         enddo
         write (output,"('0$$$$$$$$ Of the above homologous curves, the 
     &following do not have proper endpoints (0.0, 1.0, or -1.0 dependin
     &g on octant).'/(3(8x,a6,' curve',i2,2x,a8)))")
     &   (hdrtk(iyes(j,3)),iyes(j,1),lbl(iyes(j,2)),j=1,k)
       endif   
!  Check that curves are continuous.
!  Check curves 1 and 2 at 1.0.
       hok(0,1) = hok(2,1) .and. hok(2,2) .and.
     & hval(2,1) .ne. hval(2,2)
       tok(0,1) = tok(2,1) .and. tok(2,2) .and.
     & tval(2,1) .ne. tval(2,2)
!  Check curves 2 and 8 at 0.0.
       hok(0,2) = hok(1,2) .and. hok(2,8) .and.
     & hval(1,2) .ne. hval(2,8)
       tok(0,2) = tok(1,2) .and. tok(2,8) .and.
     & tval(1,2) .ne. tval(2,8)
!  Check curves 8 and 7 at -1.0.
       hok(0,3) = hok(1,8) .and. hok(1,7) .and.
     & hval(1,8) .ne. hval(1,7)
       tok(0,3) = tok(1,8) .and. tok(1,7) .and.
     & tval(1,8) .ne. tval(1,7)
!  Check curves 7 and 5 at 0.0.
       hok(0,4) = hok(2,7) .and. hok(1,5) .and.
     & hval(2,7) .ne. hval(1,5)
       tok(0,4) = tok(2,7) .and. tok(1,5) .and.
     & tval(2,7) .ne. tval(1,5)
!  Check curves 5 and 6 at 1.0.
       hok(0,5) = hok(2,5) .and. hok(2,6) .and.
     & hval(2,5) .ne. hval(2,6)
       tok(0,5) = tok(2,5) .and. tok(2,6) .and.
     & tval(2,5) .ne. tval(2,6)
!  Check curves 6 and 4 at 1.0.
       hok(0,6) = hok(1,6) .and. hok(2,4) .and.
     & hval(1,6) .ne. hval(2,4)
       tok(0,6) = tok(1,6) .and. tok(2,4) .and.
     & tval(1,6) .ne. tval(2,4)
!  Check curves 4 and 3 at -1.0.
       hok(0,7) = hok(1,4) .and. hok(1,3) .and.
     & hval(1,4) .ne. hval(1,3)
       tok(0,7) = tok(1,4) .and. tok(1,3) .and.
     & tval(1,4) .ne. tval(1,3)
!  Check curves 3 and 1 at 0.0.
       hok(0,8) = hok(2,3) .and. hok(1,1) .and.
     & hval(2,3) .ne. hval(1,1)
       tok(0,8) = tok(2,3) .and. tok(1,1) .and.
     & tval(2,3) .ne. tval(1,1)
       if (any(hok(0,:) .or. tok(0,:))) then
         k = 0
         do j = 1,8
           if (hok(0,j)) then
             k = k + 1
             iyes(k,1) = j;  iyes(k,2) = 1
           endif
           if (tok(0,j)) then
             k = k + 1
             iyes(k,1) = j;  iyes(k,2) = 2
           endif
         enddo
         write (output,"('0$$$$$$$$ Of the above homologous curves, the 
     &following endpoints do not have the same values.'/
     & (3(8x,a6,' curves',i2,',',i2)))")
     &   (hdrtk(iyes(j,2)),m(:,iyes(j,1)),j=1,k)
       endif
       return
       end subroutine pmpcrvck
!
       end subroutine rpump
