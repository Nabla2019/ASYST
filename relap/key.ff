       subroutine key (ky,x,y)
$if def,gui
!  Process ASCII keystrokes.
       use dfmt
$if -def,ifortc,2
       use opengl_gl
       use opengl_glut
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
       use vreqsd
       use scdmod
       implicit none
       character*1 ky
!  Add variable to convert scdap comp. number from int to char
       character*15 scdcc 
       integer x,y
       integer winid
!
       interface
!
       recursive subroutine guirun
       end subroutine guirun
!
       end interface
!
       include 'fast.h'
       include 'comctl.h'
       include 'contrl.h'
       include 'jundat.h'
       include 'voldat.h'
       include 'rcompc.h'
       integer i,iact,in,ir,is,lgl,m,num,pckcod(2)
       logical keyflag,keydis,tfail
!
       keydis = .true.
       iact = ishft(displno,-2)
!  Chindx will be zero for initial entry to a key function having a data
!  field and nonzero for subsequent entry while processing the data
!  field.
       if (chindx .eq. 0) then
!  Process keystroke.
         select case (ky)
!  Increase twist angle.
         case ('t')
           viewt(iact) = viewt(iact) + 5.0
           if (viewt(iact) .lt. 360.0) viewt(iact) = viewt(iact) - 360.0
!  Decrease twist angle.
         case ('T')
           viewt(iact) = viewt(iact) - 5.0
           if (viewt(iact) .lt. -360.0) viewt(iact) = viewt(iact) +
     &     360.0
!  Decrease size.
         case ('s')
           size(iact) = size(iact)/1.10
!  Increase size.
         case ('S')
           size(iact) = size(iact)*1.10
!  Decrease x displacement.
         case ('x')
           tx(iact) = tx(iact) - sinc(iact)
!  Increase x displacement.
         case ('X')
           tx(iact) = tx(iact) + sinc(iact)
!  Decrease y displacement.
         case ('y')
           ty(iact) = ty(iact) - sinc(iact)
!  Increase y displacement.
         case ('Y')
           ty(iact) = ty(iact) + sinc(iact)
!  Decrease z displacement.
         case ('z')
           tz(iact) = tz(iact) - sinc(iact)
!  Increase z displacement.
         case ('Z')
           tz(iact) = tz(iact) + sinc(iact)
!  Restore to original size and orientation.
         case ('r')
           size(iact) = 1.0
           viewa(iact) = 0.0
           viewe(iact) = 0.0
           viewt(iact) = 0.0
           tx(iact) = 0.0
           ty(iact) = 0.0
           tz(iact) = 0.0
!  Toggle between run and paused states.
         case ('g')
           if (gtype) then
             if (runflg .eq. 0) then
               runflg = 1
               call glutIdleFunc (guirun)
             elseif (runflg .eq. 1) then
               runflg = 0
               call glutIdleFunc (glutNullFunc)
!  Store the id of the current window
               winid = glutGetWindow()
!  Redisplay all the active windows
               do i = 1, nag + 1
                 if (i == 1) then
                   call glutSetWindow(winno(i))
                 else
                   call glutSetWindow(grwin(nag))
                 endif
                 call glutPostRedisplay
               enddo
!  Reset the active window
               call glutSetWindow(winid)
             else
c              write (6,"(a)") char(7)//char(7)//char(7)
               call beepqq (2000,750)
             endif
           else
c            write (6,"(a)") char(7)//char(7)//char(7)
             call beepqq (2000,750)
           endif
!  Toggle between free running and onestep modes.
         case ('o')
           onestep = .not.onestep
!  Toggle between displaying values and not displaying values.
         case ('v')
           valuep(iact) = .not.valuep(iact)
!  Enter alphanumeric name of variable to be displayed (Enters data
!  entry mode.)
         case ('V')
           intyp = 0
           vala(iact) = ' '
           chindx = 1
!  525 is 512 + 8 + 4 + 1.
           if (iact .eq. 0) then
             vjflag = ior(iand(vjflag,not(525)),2)
           else
             cplvalt = -1
           endif
           valuep(iact) = .true.
!  Display selected value.
         case ('w')
           intyp = 3
           wchfld = ' '
           chindx = 1
           vjnum = 0
!  320 is 256 + 64
           vjflag = ior(iand(vjflag,not(320)),128)
!  Highlight selected volume or junction and position in center of
!  display (Enters data entry mode.)
         case ('f')
           intyp = 1
           chfld2 = ' '
           chindx = 1
           valuep(iact) = .true.
           vjnum = 0
           fnum = -1
           isvv = 0
!  48 is 32 + 16
           vjflag = ior(vjflag,48)
!  Highlight selected volume or junction only (no positioning). 
!  Enters data entry mode.)
         case ('h')
           intyp = 1
           chfld2 = ' '
           chindx = 1
           valuep(iact) = .true.
           vjnum = 0
           fnum = -1
           isvv = 0
           vjflag = iand(ior(vjflag,32),not(16))
!  Enter mode for entering pause logic.
         case ('p')
           intyp = 2
           bcd = ' '
           chindx = 1
!  Decrease number of hydrodynamic system being displayed.
         case ('a')
           isq = max(isq-1,1)
!  Increase number of hydrodynamic system being displayed.
         case ('A')
           isq = min(isq+1,hynnsys)
!  Exit display.
         case ('E')
           if (allocated(snmenu)) deallocate (snmenu)
           call glutDestroyWindow (winno(1))
           call ExitThread (2)
!  Terminate advancements.
         case ('Q')
           runflg = 2
           done = -7
           keydis = .true.
!  Select display type.
         case ('d')
           intyp = 4
           bcd = ' '
           chindx = 1
!  Get item number.
         case ('n')
           intyp = 5
           itemnum = 0
           itemindx = 0
           chindx = 1
!  Display SCDAP core variable.
         case ('D')
           intyp = 6 
           itemnum = 0
           itemindx = 0
           chindx = 1
!  Display SCDAP axially dependent variable.
         case ('C')
           intyp = 7 
           itemnum = 0
           itemindx = 0
           chindx = 1
!  Display SCDAP nodal variables.
         case ('N')
           intyp = 8 
           itemnum = 0
           itemindx = 0
           chindx = 1
         case default
c          write (6,"(a)") char(7)//char(7)//char(7)
           call beepqq (2000,750)
         end select
       else
!  Process value field following some of the keystrokes.
         keyflag = .false.
         select case (intyp)
!  Process keystrokes following initial 'V' keystroke.
         case (0)
!  Process backspace.
           if (ky .eq. char(8)) then
             if (chindx .eq. 1) then
               keyflag = .true.
             else
               chindx = chindx - 1
               vala(iact)(chindx:chindx) = ' '
             endif
!  Process alphanumeric character.
           elseif (len(ky).eq.1 .and. (ky.ge.'a' .and. ky.le.'z' .or.
     &     ky.ge.'0' .and. ky.le.'9')) then
             if (chindx .le. 8) then
               vala(iact)(chindx:chindx) = ky
               chindx = chindx + 1
             else
               keyflag = .true.
             endif
!  Process enter keystroke.
           elseif (ky .eq. char(13)) then
             if (iact .eq. 0) then
!  Hydrodynamic node display.
!  Check if entered field is 'volno' or 'junno'.
               if (vala(iact).eq.'volno' .or. vala(iact).eq.'junno')
     &         then
                 if (vala(iact)(1:1) .eq. 'j') vjflag = ior(vjflag,1)
                 vjflag = ior(vjflag,8)
                 chindx = 0
               elseif (vala(iact) .eq. 'volerr') then
!  520 = 512 + 8
                 vjflag = ior(vjflag,520)
                 chindx = 0
               else
!  Check if entered field is in volume or junction variable tables.
                 tfail = .false.
                 do i = 1,71
                   if (vala(iact) .eq. t2(i)) then
                     tfail = .true.
                     num = volno(2,filndx(4))
                     exit
                   endif
                 enddo
                 if (.not.tfail) then
                   do i = 1,26
                     if (vala(iact) .eq. t3(i)) then
                       tfail = .true.
                       num = junno(2,filndx(5))
                       exit
                     endif
                   enddo
                 endif
!  Get index for value.
                 if (tfail) then
                   ir = 0
                   call scnreq (ir,vala(iact),num,1,pckcod,vjconv,
     &             vjlabl,tfail)
                   if (tfail) then
                     vala(iact) = ' '
                     chindx = 1
                     keyflag = .true.
                   else
                     if (pckcod(1) .eq. 5) vjflag = ior(vjflag,1)
                     vjdatax = pckcod(2)
                     vjflag = ior(vjflag,4)
                     chindx = 0
                   endif
                 else
                   keyflag = .true.
                 endif
               endif
             else
!  Couple node display.
               if (cplmaxnp .ne.0) then
                 tfail = .false.
                 do i = 1,10
                   if (vala(iact) .eq. cpltblv(i)) then
                     cplvalt = i
                     tfail = .true.
                     exit
                   endif
                 enddo
                 if (tfail) then
                   if (cplvalt .ge. 4) then
                     ir = 0
                     call scnreq (ir,vala(1),101,1,pckcod,cpluconv,
     &               cpllabl,tfail)
                     cplindx = pckcod(2)
                   endif
                   chindx = 0
                 else
                   keyflag = .true.
                 endif
               else
                 keyflag = .true.
               endif
             endif
!  Process escape key which user can use to end 'V' processing.
           elseif (ky .eq. char(27)) then
             vala(iact) = ' '
             chindx = 0
             if (iact .eq. 0) then
!  527 is 512 + 8 + 4 + 2 + 1.
               vjflag = iand(vjflag,not(527))
             else
               cplvalt = 0
             endif
           else
             keyflag = .true.
           endif
!  Process keystrokes following initial 'f' or 'h' keystrokes.
         case (1)
!  Process backspace keystroke.
           if (ky .eq. char(8)) then
             if (chindx .eq. 1) then
               keyflag = .true.
             else
               chindx = chindx - 1
               chfld2(chindx:chindx) = ' '
               if (chindx .eq. 1) fnum = -1
               vjnum = vjnum/10
             endif
           elseif (len(ky).eq.1 .and. (ky.ge.'a' .and. ky.le.'z' .or.
     &     ky.ge.'0' .and.ky.le.'9')) then
             if (chindx .le. 10) then
!  Process first character of field which should be 'j' or 'v'.
               if (chindx .eq. 1) then
                 if (ky .eq. 'j') then
                   fnum = 1
                 elseif (ky .eq. 'v') then
                   fnum = 0
                 else
                   keyflag = .true.
                 endif
               else
!  Process numeric part of field.
                 if (len(ky).eq.1 .and. (ky.ge.'0' .and. ky.le.'9'))
     &           then
                   vjnum = vjnum*10 + ichar(ky) - ichar('0')
                 else
                   keyflag = .true.
                 endif
               endif
             else
               keyflag = .true.
             endif
             if (.not.keyflag) then
               chfld2(chindx:chindx) = ky
               chindx = chindx + 1
             endif
!  Process enter keystroke.
           elseif (ky .eq. char(13)) then
             do i = 1,hyn(isq)%ntries
               if (iand(hyn(isq)%glr(i)%opt,1) .eq. fnum) then
                 if (fnum .eq. 0) then
                   if (vjnum .eq. volno(2,hyn(isq)%glr(i)%indx)) then
                     isvv = i
                     exit
                   endif
                 else
                   if (vjnum .eq. junno(2,hyn(isq)%glr(i)%indx)) then
                     isvv = i
                     exit
                   endif
                 endif
               endif
             enddo
             if (isvv .ne. 0) then
               if (iand(vjflag,16) .ne. 0) then
                 tx(iact) = -hyn(isq)%glr(i)%cxr(1)*size(iact)
                 ty(iact) = -hyn(isq)%glr(i)%cxr(2)*size(iact)
                 tz(iact) = -hyn(isq)%glr(i)%cxr(3)*size(iact)
               endif
               chindx = 0
!  48 = 32 + 16
               vjflag = iand(vjflag,not(48))
             else
               keyflag = .true.
             endif
!  Process escape key which user can use to end 'f' and 'h' processing.
           elseif (ky .eq. char(27)) then
             chfld2 = ' '
             chindx = 0
!  48 = 32 + 16
             vjflag = iand(vjflag,not(48))
           else
             keyflag = .true.
           endif
!  Process keystrokes following 'p' keystroke.
         case (2)
!  Process backspace.
           if (ky .eq. char(8)) then
             if (chindx .eq. 1) then
               keyflag = .true.
             else
               chindx = chindx - 1
               bcd(chindx:chindx) = ' '
             endif
!  Process alphanumeric characters and blanks.
           elseif ((len(ky).eq.1 .and. (ky.ge.'a' .and. ky.le.'z' .or.
     &     ky.ge.'0' .and. ky.le.'9')) .or.
     &     ky.eq.'+' .or. ky.eq.'-' .or. ky.eq.' ' .or.
     &     ky.eq.',' .or. ky.eq.'.') then
             if (chindx .le. 80) then
               bcd(chindx:chindx) = ky
               chindx = chindx + 1
             else
               keyflag = .true.
             endif
!  Process enter keystroke.
           elseif (ky .eq. char(13)) then
             call rstop (keyflag)
             if (.not.keyflag) then
               bcd = ' '
               chindx = 1
             endif
!  Process escape key. If trip is in process of being entered, escape
!  key will discard input but remain in trip entry mode. If trip is not
!  in process of being entered, escape will leave the pause/trip
!  display.
           elseif (ky .eq. char(27)) then
             bcd = ' '
             if (chindx .gt. 1) then
               chindx = 1
             else
               chindx = 0
               intyp = -1
             endif
           else
             keyflag = .true.
           endif
!  Process keystrokes following 'w' keystroke.
         case (3)
!  Process backspace.
           if (ky .eq. char(8)) then
             if (chindx .eq. 1) then
               keyflag = .true.
             else
               chindx = chindx - 1
               if (iand(vjflag,64) .ne. 0) then
                 if (wchfld(chindx:chindx) .eq. ' ') then
                   vjflag = iand(vjflag,not(64))
                 else
                   vjnum = vjnum/10
                 endif
               endif
               wchfld(chindx:chindx) = ' '
             endif
!  Process alphanumeric characters.
           elseif (len(ky).eq.1 .and. (ky.ge.'a' .and. ky.le.'z' .or.
     &     ky.ge.'0' .and. ky.le.'9')) then
             if (iand(vjflag,64) .eq. 0) then
               if (chindx .le. 20) then
                 wchfld(chindx:chindx) = ky
                 chfld2 = wchfld(1:chindx)
               else
                 keyflag = .true.
               endif
             else
               if (len(ky).eq.1 .and. (ky.ge.'0' .and. ky.le.'9')) then
                 wchfld(chindx:chindx) = ky
                 vjnum = vjnum*10 + ichar(ky) - ichar('0')
               else
                 keyflag = .true.
               endif
             endif
             chindx = chindx + 1
!  Process blank or comma keystrokes.
           elseif (ky .eq. char(32) .or. ky.eq.char(44)) then
             if (chindx.gt.1 .and. iand(vjflag,64).eq.0) then
               vjflag = ior(vjflag,64)
               if (ky .eq. char(44)) wchfld(chindx:chindx) = ','
               chindx = chindx + 1
             endif
!  Process enter keystroke.
           elseif (ky .eq. char(13)) then
             ir = 0
             if (chfld2 .eq. 'trip') then
               call itrscn (ir,vjnum,pckcod(1))
               if (ir .ge. 0) then
                 wptr = filndx(18) + pckcod(1)
                 wlabl = '(s)'
                 wconv = 1.0
                 vjflag = ior(vjflag,256)
               else
                 keyflag = .true.
               endif
             else
               call scnreq (ir,chfld2,vjnum,1,pckcod,wconv,wlabl,
     &         tfail)
               keyflag = keyflag .or. tfail
               if (.not.tfail) then
                 wptr = filndx(pckcod(1)) + pckcod(2)
                 vjflag = ior(vjflag,256)
               endif
             endif
             if (.not.keyflag) then
               chindx = 0
               intyp = -1
               vjflag = iand(vjflag,not(64))
             endif
           elseif (ky .eq. char(27)) then
             chindx = 0
!  448 is 256 + 128 + 64
             vjflag = iand(vjflag,not(448))
             intyp = -1
           else
             keyflag = .true.
           endif
!  Process display type code.
         case (4)
           if (ky .eq. char(8)) then
             if (chindx .eq. 1) then
               keyflag = .true.
             else
               chindx = chindx - 1
               bcd(chindx:chindx) = ' '
             endif
!  Process alphabetic character.
           elseif (len(ky).eq.1 .and. (ky.ge.'a' .and. ky.le.'z')) then
             if (chindx .le. 2) then
               bcd(chindx:chindx) = ky
               chindx = chindx + 1
             else
               keyflag = .true.
             endif
!  Process enter keystroke.
           elseif (ky .eq. char(13)) then
             select case (bcd(1:2))
             case ('hn')
               if (displno .eq. 0) then
                 keyflag = .true.
               else
                 displno = 0
                 chindx = 0
               endif
             case ('vv')
               if (displno .eq. 1) then
                 keyflag = .true.
               else
                 displno = 1
                 chindx = 0
               endif
             case ('vh')
               if (displno .eq. 2) then
                 keyflag = .true.
               else
                 displno = 2
                 chindx = 0
               endif
             case ('vi')
               if (displno .eq. 3) then
                 keyflag = .true.
               else
                 displno = 3
                 chindx = 0
               endif
             case ('sc')
               if (displno .eq. 5) then
                 keyflag = .true.
               else
                 displno = 5
                 chindx = 0
               endif
               call handlemenu(33)
!  SCDAP display window
             case ('sw')
               if (displno .eq. 6) then
                 keyflag = .true.
               else
                 displno = 6
                 chindx = 0
               endif
               call handlemenu(84)
!  Open 2d graph display window
             case ('gr')
                 keyflag = .true.
                 chindx = 0
                 call handlemenu(85)
             case ('cn')
               if (allocated(cplr)) then
                 if (displno .eq. 4) then
                   keyflag = .true.
                 else
                   displno = 4
                   chindx = 0
                 endif
               else
                 keyflag = .true.
               endif
             case default
               keyflag = .true.
             end select
           elseif (ky .eq. char(27)) then
             chindx = 0
           else
             keyflag = .true.
           endif
!  Process item number.
         case (5)
           if (ky .eq. char(8)) then
             if (chindx .eq. 1) then
               keyflag = .true.
             else
               chindx = chindx - 1
               itemnum = itemnum/10
             endif
!  Process numeric character.
           elseif (len(ky).eq.1 .and. (ky.ge.'0' .and. ky.le.'9')) then
             if (chindx .le. 10) then
               itemnum = itemnum*10 + ichar(ky) - ichar('0')
               chindx = chindx + 1
             else
               keyflag = .true.
             endif
!  Process enter keystroke.
           elseif (ky .eq. char(13)) then
             select case (displno)
             case (1:3)
               tfail = .true.
               i = filndx(4)
               do m = 1,nvols(2,i)
                 if (itemnum .eq. volno(2,i)) then
                   tfail = .false.
                   exit
                 endif
                 i = i + ivskp
               enddo
               if (.not.tfail) then
                 itemindx = i
                 chindx = 0
               else
                 keyflag = .true.
               endif
!  SCDAP window (intyp=5)
             case (5)
               tfail = .true.
               do i = 1,ncomp
                 if (itemnum .eq. scdcmpno(i)) then
                   tfail = .false.
                   exit
                 endif
               enddo
               if (.not.tfail) then
                 itemindx = i
                 chindx = 0
               else
                 keyflag = .true.
               endif
             end select
           elseif (ky .eq. char(27)) then
             chindx = 0
           else
              keyflag = .true.
           endif
!  Process SCDAP core variables (intyp = 6)
         case (6)
           if (ky .eq. char(8)) then
             if (chindx .eq. 1) then
               keyflag = .true.
             else
               chindx = chindx - 1
             endif
!  Process alphabetic character.
           elseif (len(ky).eq.1 .and. (ky.ge.'a' .and. ky.le.'z')) then
               bcd(chindx:chindx) = ky
               chindx = chindx + 1
!  Process enter keystroke.
           elseif (ky .eq. char(13)) then
             tfail = .true.
!  Case 'Vall' to represent all variables
             if (bcd(:) .eq. 'all') then
               tfail = .false.
!  Whether i = -1 display all the core variables of SCDAP
               i = -1
             else   
               do i = 1,numt9a
                 if (bcd(:) .eq. TRIM(t9a(i))) then
                   tfail = .false.
                   exit
                 endif
               enddo
             endif
             if (.not.tfail) then
               itemindx = i
               itemnum = 1
               chindx = 0
!  Clean bcd vector
               bcd(:) = ' '
             else
               keyflag = .true.
             endif
!  Process ESC keystroke 
           elseif (ky .eq. char(27)) then
             chindx = 0
!  Clean bcd vector
             bcd(:) = ' '
           else
             keyflag = .true.
           endif
!  Process SCDAP axially and nodal dependent variables (intyp = 7,8)
         case (7:8)
           if (ky .eq. char(8)) then
             if (chindx .eq. 1) then
               keyflag = .true.
             else
               chindx = chindx - 1
             endif
!  Process alphabetic character.
           elseif (len(ky).eq.1 .and. (ky.ge.'a' .and. ky.le.'z')) then
               bcd(chindx:chindx) = ky
               chindx = chindx + 1
!  Process number.
           elseif (len(ky).eq.1 .and. (ky.ge.'0' .and. ky.le.'9')) then
               bcd(chindx:chindx) = ky
               chindx = chindx + 1
!  Process enter keystroke.
           elseif (ky .eq. char(13)) then
             tfail = .true.
             if (intyp .eq. 7) then
!  Case of axial variables
               do i = 1,numt9c
                 if (bcd(:) .eq. TRIM(t9c(i))) then
                   tfail = .false.
                   exit
                 endif
               enddo
             else
!  Case of nodal variables (at moment only cadct)
               do i = 1,ncomp*1 ! only one variable
                 write(scdcc,"(a,i8)") TRIM(t9d),scdcmpno(i)
                 if (bcd(:) .eq. TRIM(scdcc)) then
                   tfail = .false.
                   exit
                 endif
               enddo
             endif
             if (.not.tfail) then
               itemindx = i
               itemnum = i
               chindx = 0
!  Clean bcd vector
               bcd(:) = ' '
             else
               keyflag = .true.
             endif
!  Process ESC keystroke
           elseif (ky .eq. char(27)) then
             chindx = 0
           else
              keyflag = .true.
           endif
         end select
c        if (keyflag) write (6,"(9a)") char(7)//char(7)//char(7)
         if (keyflag) call beepqq (2000,750)
       endif
       if (keydis) call glutPostRedisplay
$endif
       return
       end subroutine key
!
       subroutine keysp (kn,x,y)
$if def,gui
!  Process special keystrokes.
$if -def,ifortc,1
       use opengl_glut
$if def,ifortc,1
       use opengl_glut
       use hynmod
       implicit none
       integer kn,x,y
!
       interface
!
       recursive subroutine guirun
       end subroutine guirun
!
       end interface
!
       integer iact
       logical keyflag,keydis
!
       keydis = .true.
       iact = ishft(displno,-2)
!  Chindx will be zero for initial entry to a key function having a data
!  field and nonzero for subsequent entry while processing the data
!  field.
       if (chindx .eq. 0) then
!  Process keystroke.
         select case (kn)
!  Increase elevation angle.
         case (GLUT_KEY_UP)
           viewe(iact) = viewe(iact) + 5.0
           if (viewe(iact) .gt. 360.0) viewe(iact) = viewe(iact) - 360.0
!  Decrease elevation angle.
         case (GLUT_KEY_DOWN)
           viewe(iact) = viewe(iact) - 5.0
           if (viewe(iact) .lt. -360.0) viewe(iact) = viewe(iact) +
     &     360.0
!  Increase azimuthal angle.
         case (GLUT_KEY_LEFT)
           viewa(iact) = viewa(iact) + 5.0
           if (viewa(iact) .lt. 360.0) viewa(iact) = viewa(iact) - 360.0
!  Decrease azimuthal angle.
         case (GLUT_KEY_RIGHT)
           viewa(iact) = viewa(iact) - 5.0
           if (viewa(iact) .lt. -360.0) viewa(iact) = viewa(iact) +
     &     360.0
         case default
c          write (6,"(a)") char(7)//char(7)//char(7)
           call beepqq (2000,750)
         end select
       else
c        write (6,"(a)") char(7)//char(7)//char(7)
         call beepqq (2000,750)
       endif
       if (keydis) call glutPostRedisplay
$endif
       end subroutine keysp
!
       subroutine submitch (ch,rflag)
$if def,gui
       implicit none
       character ch*(*)
       logical rflag
!
       integer i,n
!
       interface
!
       subroutine key (ky,x,y)
       character*1 ky
       integer x,y
       end subroutine key
!
       end interface
!
       n = len_trim(ch)
       do i = 1,n
         call key (ch(i:i),1,1)
       enddo
       if (rflag) call key (char(13),1,1)
$endif
       end subroutine submitch
