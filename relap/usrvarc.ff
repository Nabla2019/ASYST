       module usrvarc
!  Contains data for additional variables to be added to plot records
!  and plot requests.
!
!  Cognizant engineer: rjw.
!
       implicit none
       integer, parameter, private :: kr=selected_real_kind(12,200)
!
       type usrvars
         integer ntabl,ntabno,nindx(2)
         character ntabla*8
       end type usrvars
!  ntabla  Alphanumeric portion of variable name.
!  ntabl   Parameter portion of variable name.
!  ntabno  Request number of request.
!  nindx   Offset number and offset to variable.
!
       type plotrqs
         type (usrvars), pointer :: pl(:)
       end type plotrqs
!  Pointer to one set of plot requests.
!
       integer nplotrq,nusrvar
       integer :: inplotrq(10)=0, iinplotrq(10)=0
!  nplotrq  Number of plot requests.
!  nusrvar  Number of additional variables.
!  inplotrq  Number of interactive plot requests for different types of var.
!  iinplotrq  Number of interactive plot requests for the same type of var.
       type (usrvars), allocatable :: usrvar(:)
!  usrvar  Holds additional plot variable information.
       type (plotrqs), allocatable :: plotrq(:)
!  plotrq  Holds pointers to plot request information. 
       type (plotrqs), allocatable :: iplotrq(:,:)
!  iplotrq  Holds pointers to interactive plot request. 
!
       contains
!
       subroutine plotrqclear
!  Deallocates plotrq quantities.
       implicit none
       integer i
!
       if (allocated (plotrq)) then
         do i = 1,nplotrq
           if (associated(plotrq(i)%pl)) deallocate (plotrq(i)%pl)
         enddo
         deallocate (plotrq)
       endif
       return
       end subroutine plotrqclear
!
       subroutine usrvarclear
!  Deallocates usrvar quantities.
       implicit none
       integer i
!
       if (allocated (usrvar)) deallocate (usrvar)
       return
       end subroutine usrvarclear
!
       subroutine usrvarread (cpy)
!  Reads additional plot variable data from restart-plot file.
       use ufilef
       implicit none
       logical cpy
!
       integer i,iwrd,len,lent,num
!
       read (rstplt) len,iwrd
       inquire (iolength=lent) nplotrq,nusrvar
c      if len .ne. lent) go to 200
       read (rstplt) nplotrq,nusrvar
       if (cpy) then
         write (stripf) len,iwrd
         write (stripf) nplotrq,nusrvar
       endif
       if (allocated(plotrq)) deallocate (plotrq)
       if (nplotrq .ne. 0) allocate (plotrq(nplotrq))
       if (allocated(usrvar)) deallocate (usrvar)
       if (nusrvar .ne. 0) allocate (usrvar(nusrvar))
       if (nusrvar .ne. 0) then
         read (rstplt) len,iwrd
         inquire (iolength=lent) usrvar
c        if len .ne. lent) go to 200
         read (rstplt) usrvar
         if (cpy) then
           write (stripf) len,iwrd
           write (stripf) usrvar
         endif
       endif
       do i = 1,nplotrq
         read (rstplt) len,iwrd
         inquire (iolength=lent) num
c        if len .ne. lent) go to 200
         read (rstplt) num
         allocate (plotrq(i)%pl(1:num))
         read (rstplt) len,iwrd
         inquire (iolength=lent) plotrq(i)%pl(:)
c        if len .ne. lent) go to 200
         read (rstplt) plotrq(i)%pl(:)
         if (cpy) then
           write (stripf) len,iwrd
           write (stripf) num
           write (stripf) len,iwrd
           write (stripf) plotrq(i)%pl(:)
         endif
       enddo
       return
       end subroutine usrvarread
!
       subroutine usrvarwrite
!  Writes additional plot variable data to restart-plot file.
       use ufilef
       implicit none
!
       integer, parameter :: iwrd=1
       integer i,len,num
!
       inquire (iolength=len) nplotrq,nusrvar
       write (rstplt) len,iwrd
       write (rstplt) nplotrq,nusrvar
       if (nusrvar .ne. 0) then
         inquire (iolength=len) usrvar
         write (rstplt) len,iwrd
         write (rstplt) usrvar
       endif
       do i = 1,nplotrq
         num = size(plotrq(i)%pl)
         inquire (iolength=len) num
         write (rstplt) len,iwrd
         write (rstplt) num
         inquire (iolength=len) plotrq(i)%pl
         write (rstplt) len,iwrd
         write (rstplt) plotrq(i)%pl
       enddo
       return
       end subroutine usrvarwrite
!
       end module usrvarc
