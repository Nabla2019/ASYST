       module tstpctc
!  Contains information from time step control data and current values
!  of counters controlling printing minor and major edits and saving
!  plot values.
!
!  Cognizant engineer: rjw.
!
       implicit none
       integer, parameter, private :: kr=selected_real_kind(12,200)
!
       type tstpctt
         real(kr) tspend,dtmin,dtmax
         integer tsppac,tsppmi,tsppmj,tspprs
       end type tstpctt
!  tspend  End time for associated time step values and counters.
!  dtmin   Miminum time step.
!  dtmax   Maximum time step.
!  tsppac  Advancement control (ssdtt).
!          Read off time step card in rtsc and packed into one word.
!            tt in bits 1-6  (6 bits total, numbered from right.
!              0 bits set  Means no error estimate time step control,
!                          max dt for hydro and heat time steps, hydro
!                          dt can be reduced by material Courant and
!                          water property errors.
!              bit 1 (=1)  Mass error estimate used to control time
!                          step.
!              bit 2 (=2)  Heat transfer time step set to hydro time
!                          step.
!              bit 3 (=4)  Hydro and heat transfer solutions coupled
!                          implicitely.
!              bit 4 (=8)  Nearly implicit solution method for hydro.
!              bit 5 (=16) Test for convergence of steady-state not
!                          made.
!              bit 6 (=32) Switches nearly implicit to semi implicit
!                          advancement if time step less than Courant
!                          limit.
!            ss in bits 7-12 (6 bits total, numbered from right.
!              0 bits set  Means standard major edits.
!              bit 1 (=1)  Heat structure temperature block is omitted.
!              bit 2 (=2)  Second part of junction block is omitted.
!              bit 3 (=4)  Third and fourth parts of volume block are
!                          omitted.
!              bit 4 (=8)  Statistics block is omitted.
!              bits 5 and 6 are not used.
!            d  in bits 13-18 (6 bits total, numbered from right.
!              0 bits set  Means standard output at requested frequency
!                          using max dt.
!              bit 1 (=1)  Major edits every successful time step.
!              bit 2 (=2)  Minor edits every successful time step.
!              bit 3 (=4)  Plot records every successful time step.
!              bits 4 through 6 are not used.
!  tsppmi  Minor edit and plot frequency (max dt steps/edit).
!  tsppmj  Major edit frequency.
!  tspprs  Restart frequency.
!
       type (tstpctt), allocatable :: tstpct(:)
!  tstpct  Array to hold data from time step information input.
!
       real(kr) curtmi,curtmj,curtrs
       integer curclm,curctl,curcmi,curcmj,curcrs,tspctr(2)
!  curtmi  Current time for plot and minor edit .
!  curtmj  Current time for major edit .
!  curtrs  Current time for restart .
!  curclm  Number of time step data lines entered.
!  curctl  Pointer to current card.
!  curcmi  Current counter for plot and minor edit.
!  curcmj  Current counter for major edit.
!  curcrs  Current counter for restart.
!  tspctr(1) Control variable number for user controlled time step.
!  tspctr(2) Offset to control var.
!
       contains
!
       subroutine tstpctclear
!  Deallocates time step control information.
       implicit none
!
       if (allocated(tstpct)) deallocate (tstpct)
       return
       end subroutine tstpctclear
!
       subroutine tstpctcread (fl)
!  Reads time step control data from restart-plot file.
       implicit none
       logical fl
       include 'ufiles.h'
!
       integer iwrd,len,lent
!
       read (rstplt) len,iwrd
       inquire (iolength=lent) curtmi,curtmj,curtrs,curclm,curctl,
     & curcmi,curcmj,curcrs,tspctr(1)
c      if len .ne. lent) go to 200
       read (rstplt) curtmi,curtmj,curtrs,curclm,curctl,curcmi,curcmj,
     & curcrs,tspctr(1)
       if (fl) then
         if (allocated(tstpct)) deallocate (tstpct)
         allocate (tstpct(curclm))
         read (rstplt) len,iwrd
         inquire (iolength=lent) tstpct
c        if len .ne. lent) go to 200
         read (rstplt) tstpct
       endif
       return
       end subroutine tstpctcread
!
       subroutine tstpctcwrite (fl)
!  Writes time step control data from restart-plot file.
       implicit none
       logical fl
!
       integer, parameter :: iwrd=1
       integer len
       include 'ufiles.h'
!
       inquire (iolength=len) curtmi,curtmj,curtrs,curclm,curctl,
     & curcmi,curcmj,curcrs,tspctr(1)
       write (rstplt) len,iwrd
       write (rstplt) curtmi,curtmj,curtrs,curclm,curctl,curcmi,curcmj,
     & curcrs,tspctr(1)
       if (fl) then
         inquire (iolength=len) tstpct
         write (rstplt) len,iwrd
         write (rstplt) tstpct
       endif
       return
       end subroutine tstpctcwrite
!
       end module tstpctc
