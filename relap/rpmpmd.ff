*mlist
       subroutine rpmpmd(ierr,i,nc,lencmp)
c  Processes pump multiplier data for two phase degredation.
c
c  Cognizant engineer: rjw.
c
*in32 init
*in32end
c
c
       implicit none
       include 'fast.h'
       include 'cmpdat.h'
       include 'comctl.h'
       include 'contrl.h'
       include 'jundat.h'
       include 'pumpblk.h'
       include 'ufiles.h'
       include 'voldat.h'
c
c  Local variables.
       integer i,ierr,init(12),itemp,ix,ixb,ixe,kxt,l3g(10),lencmp,
     & lcntgs,nc
       real hold,xinit(12)
       equivalence (xinit(1),init(1))
       character hdrtk(2)*6
c
c  Data statements.
       data l3g/2*0,3,201,0,1,0,2,1,1/
       data hdrtk/'head','torque'/
c
       itemp = filsiz(3) + 203
       if (lcntgs(filid(3),1) .lt. itemp) go to 4980
       call ftbsft (filid(3),itemp,1,filndx(3))
       i = ncmps(filndx(3)) + filndx(3)
       ix = i + lencmp
       l3g(1) = nc * 10000 + 3000
       l3g(2) = -l3g(1) - 98
       l3g(6) = 1
       call inp2 (fa(filndx(1)),pmptbl(ix+2),l3g)
       if (l3g(6) .gt. 0) go to 910
       write(output,2185) hdrtk(1)
 2185  format('0******** pump ',a,' multiplier table missing.')
       fail = .true.
       go to 950
c  See if number of values read is odd.
  910  if (mod(l3g(6),2) .ne. 0) go to 915
       write (output,2190) hdrtk(1)
 2190  format('0******** for pump ',a,' multiplier table, the number of
     &values input is not odd.')
       fail = .true.
       l3g(6) = l3g(6) - 1
  915  ixb = ix + 3
       ixe = ixb + l3g(6) - 2
       init(3) = 0
       init(4) = 0
       hold = 0.0
       do 920 kxt=ixb,ixe,2
         if (pmptbl(kxt) .lt. hold) init(3) = 1
         if (pmptbl(kxt) .gt. 1.0) init(4) = 1
         hold = pmptbl(kxt)
  920  continue
c  Check for errors.
       if (init(3) .eq. 0) go to 925
       write(output,2195) hdrtk(1)
 2195  format('0******** for pump ',a,' multiplier table, the independen
     &t variable data is not ascending in value')
           fail = .true.
  925  if (init(4) .eq. 0) go to 930
       write(output,2200) hdrtk(1)
 2200  format('0******** for pump ',a,' multiplier table, the independen
     &t variable has values out of range.')
       fail = .true.
c  Set fixed pointer.
  930  ipuhmi(i) = lencmp
       ipmtbl(ix) = 2
       ipmtbl(ix+1) = l3g(6) - 1
       ipmtbl(ix+2) = 1
       if( iand(ihlppr(2),ishft(1,22)).ne.0 ) then
       write (output,2210) hdrtk(1)
 2210  format('0edit for pump ',a,' multiplier table input')
       do 945 kxt=ixb,ixe,2
         write(output,2215) pmptbl(kxt), pmptbl(kxt+1)
 2215  format (1h ,18x,1p,2g17.6)
  945  continue
       endif
c  Reset storage size.
       l3g(6) = l3g(6) + 2
       filsiz(3) = filsiz(3) + l3g(6)
       lencmp = lencmp + l3g(6)
c  Torque table.
  950  itemp = filsiz(3) + 203
       if (lcntgs(filid(3),1) .lt. itemp) go to 4980
       call ftbsft (filid(3),itemp,1,filndx(3))
       i = ncmps(filndx(3)) + filndx(3)
       ix = i + lencmp
       l3g(1) = nc * 10000 + 3100
       l3g(2) = -l3g(1) - 98
       l3g(6) = 1
       call inp2 (fa(filndx(1)),pmptbl(ix+2),l3g)
       if (l3g(6) .gt. 0) go to 955
       write(output,2185) hdrtk(2)
       fail = .true.
       go to 1000
  955  if (mod(l3g(6),2) .ne. 0) go to 960
       write(output,2190) hdrtk(2)
       fail = .true.
       l3g(6) = l3g(6) - 1
  960  ixb = ix + 3
       ixe = ixb + l3g(6) - 2
       init(3) = 0
       init(4) = 0
       hold = 0.0
       do 965 kxt=ixb,ixe,2
         if (pmptbl(kxt) .lt. hold) init(3) = 1
         if (pmptbl(kxt) .gt. 1.0) init(4) = 1
         hold = pmptbl(kxt)
  965  continue
       if (init(3) .eq. 0) go to 970
       write (output,2195) hdrtk(2)
       fail = .true.
  970  if (init(4) .eq. 0) go to 975
       write (output,2200) hdrtk(2)
       fail = .true.
  975  iputmi(i) = lencmp
       ipmtbl(ix) = 2
       ipmtbl(ix+1) = l3g(6) - 1
       ipmtbl(ix+2) = 1
  985  if( iand(ihlppr(2),ishft(1,22)).ne.0) then
       write (output,2210) hdrtk(2)
       do 990 kxt=ixb,ixe,2
         write (output,2215) pmptbl(kxt),pmptbl(kxt+1)
  990  continue
       endif
c  Reset storage size.
       l3g(6) = l3g(6) + 2
       filsiz(3) = filsiz(3) + l3g(6)
       lencmp = lencmp + l3g(6)
c
 1000  continue
       return
c
 4980  ierr = 1
       return
       end
