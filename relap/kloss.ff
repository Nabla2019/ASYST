*mlist
       subroutine kloss (block,ih)
!
!  Calculates new energy loss coefficients for junctions above and
!  below the volume that has the failed rod blocking the channel.
!
!  Cognizant engineer: rjw.
!
       use invtbl
       implicit none
       real block
       integer ih
!  block  = channel blockage (%)
!  ih     = heat structure index
       include 'fast.h'
       include 'comctl.h'
       include 'htsrcm.h'
       include 'jundat.h'
       include 'voldat.h'
c
       integer iv,j,l,nj
       real kin,kout,ratio
c
c  Get right boundary volume index.
       iv = htbvo(ih+1)
       ratio = (100.0 - block)*0.01
c     ---------------------------------------------------------
c              ----- new flow area, volume, diameters----
c         this coding alters the volumes and diameters
c         when it was added for the test problem, the code could
c         not handle it, so it was removed.  one solution might
c         be to add it in gradually over a few time steps.
c      avol(iv)   = avol(iv)   * ratio
c      v(iv)      = v(iv)      * ratio
c      diamv(iv)  = diamv(iv)  * sqrt (ratio)
c      hthdmn(ih) = hthdmn(ih) * sqrt (ratio)
c     ---------------------------------------------------------
c  Next alter loss coeffients.
c  Compute form loss coefficients.
c  kout = outlet junction loss coefficient.
       kout = (1.0 - ratio)**2
c  kin = inlet junction loss coefficient formula from Bird, Stewart and
c  Lightfoot.
       kin = 0.45*(1.0 - ratio)
c  Now fix up all the junctions as long as they are not cross flow ones.
       l = invfnd(iv)
       do nj = 1,invcnt(iv)
c  Skip the cross flow junctions( 8 bit on).
         if (iand(invj(l)%invjun,8) .ne. 0) cycle
         j = invj(l)%invvnx
         if (iand(invj(l)%invjun,2) .ne. 0) then
c  Outlet junction (2 bit is on).
           fjunf(j) = fjunf(j) +  kout
           fjunr(j) = fjunr(j) +  kin
           cycle
         endif
c  Inlet junction (2 bit is off).
         fjunf(j) = fjunf(j) +  kin
         fjunr(j) = fjunr(j) +  kout
         l = l + 1
       enddo
       return
       end
