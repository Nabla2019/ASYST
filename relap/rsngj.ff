*mlist
       subroutine rsngj
c  Process single junction input data.
c
c  Cognizant engineer: rjw.
c
*in32 init
*in32end
       use cmpdat
       use jundat
       use voldat
       implicit none
       include 'fast.h'
       include 'cmpdat.h'
       include 'comctl.h'
       include 'cons.h'
       include 'contrl.h'
       include 'jundat.h'
       include 'rcompc.h'
       include 'statec.h'
       include 'ufiles.h'
       include 'voldat.h'
c
c  Local variables.
       integer l3a(15),l3b(10),l3c(10),init(9)
       real xinit(9)
       equivalence (init(1),xinit(1))
       logical tfail,ovl
       character labl1(2)*5,labl2(2)*9,labl3(2)*8
       integer i,icc,ick,ijt,ief,ihf,ii,ij,ink,irf,isf,ist,iv,k,k1,k2,
     & lens,n3,n4,nc,nc1,nj1,nj1o,nnv,nv1,nv1o,inp10,lcntgs
       real fr,ft,ft2,xlbsec
c  Data statements.
       parameter (lens=11)
       data l3a/2*0,6,9,0,1,0,0,1,1,1,0,1,1,1/
       data l3b/2*0,0,4,0,1,1,1,1,1/
       data l3c/2*0,3,4,0,1,0,1,1,1/
       data ft/0.3048/, ft2/9.290304e-2/, xlbsec/0.45359237/
       data labl1/' vel.',' flow'/, labl2/'(ft/sec)','(lbm/sec)'/,
     & labl3/'(m/sec)','(kg/sec)'/
c
c  Get component number.
       ovl = .false.
       i = ncmps(filndx(3)) + filndx(3)
       nc = cmpnum(i)
c  Extend component block.
       filsiz(3) = filsiz(3) + lens
       l3a(1) = filsiz(3)
       if (.not.cmpsrc) l3a(1) = l3a(1) + lens
       if (lcntgs(filid(3),1) .ge. l3a(1)) go to 10
   15  write (output,2001) nc
 2001  format ('0******** Insufficient space storage to process componen
     &t',i4,'.')
   12  l3c(1) = nc*10000
       l3c(2) = l3c(1) + 9999
       filsiz(1) = inp10(fa(filndx(1)),l3c(1),l3c(2))
       call ftbsft (2.0,filsiz(1),1,filndx(1))
  204  filsiz(3) = filsiz(3) - lens + 4
       cmplen(i) = 4
       cmptyp(i) = 0
       call ftbsft (filid(3),filsiz(3),1,filndx(3))
       ncmps(filndx(3)) = ncmps(filndx(3)) + 4
       fail = .true.
       go to 1000
   10  call ftbsft (filid(3),l3a(1),1,filndx(3))
       i = ncmps(filndx(3)) + filndx(3)
       cmplen(i) = lens
       nvc(i) = 0
       njc(i) = 1
       cmpopt(i) = 0
c  Check if replacement or flag modification is possible.
       if (cmpsrc) go to 401
       ii = filndx(3)
       nnv = ncomp - 1
       if (nnv .eq. 0) go to 407
       nv1 = 0
       nj1 = 0
       tfail = .false.
       do k = 1,nnv
         nv1o = nvc(ii)
         nj1o = njc(ii)
         nc1 = cmplen(ii)
         if (cmpnum(ii) - nc) 403,404,405
  405  tfail = .true.
  403    nv1 = nv1 + nv1o
         nj1 = nj1 + nj1o
         ii = ii + nc1
       enddo
       if ( tfail )  go to  410
  407  cmpsrc = .true.
       go to 401
  404  ncomp = nnv
       if (cmptyp(ii) .ne. cmptyp(i)) go to 406
       ovl = cmpflg
       go to 14
  410  nv1o = 0
       nj1o = 0
       nc1 = 0
  406  if (.not.cmpflg) go to 14
  409  write (output,2035) nc
 2035  format ('0******** Illegal use of component flag change option in
     & component',i4,'.')
       write (output,2007) nc
 2007  format ('0******** Data for component',i4,' cannot be processed.'
     +)
       go to 12
c  Extend volume and junction blocks for this component.
  401  if (cmpflg) go to 409
   14  if (cmpsrc) nv1o = 0
       k2 = -nv1o
       k = filsiz(4) + k2*ivskp
       k1 = max(filsiz(4),k)
       if (k1 .gt. lcntgs(filid(4),1)) go to 15
       call ftbsft (filid(4),k1,1,filndx(4))
       if (cmpsrc) nv1 = nvols(filndx(4))
       iv = nv1*ivskp + filndx(4)
       k1 = (nvols(filndx(4)) - nv1 - nv1o)*ivskp
       if (k1 .ne. 0) then
         n3 = iv + nv1o*ivskp
         n4 = iv
         ink = n3 - n4
         if (ink .ne. 0) then
           if (ink .lt. 0) k1 = -k1
           call ftbmov (fa(n3+1),fa(n4+1),k1)
         endif
       endif
       nvols(filndx(4)) = nvols(filndx(4)) + k2
       if (associated(cmphld(nc)%volp)) deallocate (cmphld(nc)%volp)
       if (associated(cmphld(nc)%junp)) deallocate (cmphld(nc)%junp)
       allocate (cmphld(nc)%junp(1))
       filsiz(4) = k
c  Get junction block, create it if it does not exist.
       if (cmpsrc) nj1o = 0
       k2 = 1 - nj1o
       k = filsiz(5) + k2*ijskp
       k1 = max(filsiz(5),k)
       if (k1 .gt. lcntgs(filid(5),1)) go to 15
       call ftbsft (filid(5),k1,2,filndx(5))
       if (cmpsrc) nj1 = njuns(filndx(5))
       ij = nj1*ijskp + filndx(5)
       k1 = (njuns(filndx(5)) - nj1 - nj1o)*ijskp
       if (k1 .ne. 0) then
         n3 = ij + nj1o*ijskp
         n4 = ij + ijskp
         ink = n3 - n4
         if (ink .ne. 0) then
           if (ink .lt. 0) k1 = -k1
           call ftbmov (fa(n3+1),fa(n4+1),k1)
         endif
       endif
       njuns(filndx(5)) = njuns(filndx(5)) + k2
   19  filsiz(5) = k
       if (.not.ovl) then
         call setndf (fa(ij+1),ijskp)
         jc(ij) = 128
         jcex(ij) = 0
         ijflg(ij) = 0
         athrot(ij) = 1.0
       endif
       call ftbsft (filid(5),filsiz(5),2,filndx(5))
       call ftbsft (filid(4),filsiz(4),2,filndx(4))
       iv = nv1*ivskp + filndx(4)
       ij = nj1*ijskp + filndx(5)
c  Insert new component in proper place in component block if necessary.
       if (cmpsrc .or. nc1.eq.0) go to 431
       k2 = lens - nc1
       n3 = ii + nc1
       n4 = ii + lens
       k1 = i + lens - n3
       if (k2) 433,432,434
  434  k1 = -k1
  433  call ftbmov (fa(n3+1),fa(n4+1),k1)
       i = i + k2
  432  call ftbmov (fa(i+1),fa(ii+1),lens)
       i = ii
       ncmps(filndx(3)) = ncmps(filndx(3)) + k2
       filsiz(3) = filsiz(3) + k2 - lens
       call ftbsft (filid(3),filsiz(3),3,filndx(3))
       go to 17
  431  ncmps(filndx(3)) = ncmps(filndx(3)) + lens
c  Write output header for component.
   17  if( iand(ihlppr(2),ishft(1,22)).ne.0 )
     & write (output,2101) nc, cmpnam(i),cmpalf(cmptyp(i))
 2101  format ('0','================================================='
     & ,'======================',/,
     & 22x,'Input data for component',i4,',',2a9,
     & ' having 0 volumes and 1 junction')
c  Process junction.
       fr = 1.0
       if (.not.uniti) fr = ft2
       l3a(1) = nc*10000 + 101
       l3a(2) = -l3a(1) - 8
       l3a(6) = 1
       call inp2 (fa(filndx(1)),init,l3a)
       if (l3a(6) .le. 0) then
         if (ovl) then
           fail = .true.
           go to 30
         endif
         write (output,2002)
 2002  format ('0******** Junction geometry set to default conditions fo
     &r continued checking.')
         ij1(ij) = 0
         ij2(ij) = 0
         ajun(ij) = 0.0
         fjunf(ij) = 0.0
         fjunr(ij) = 0.0
         fail = .true.
         go to 30
       endif
       if (.not.ovl) then
         tfail = .false.
         if (init(1) .le. 0) then
           init(1) = 0
           tfail = .true.
         endif
         if (init(2) .le. 0) then
           init(2) = 0
           tfail = .true.
         endif
         if (tfail) then
           write (output,2006)
 2006  format ('0******** Volume pointers less than or equal to 0, set t
     &o 0 for further checking.')
           fail = .true.
         endif
         ij1(ij) = init(1)
         ij2(ij) = init(2)
         if (xinit(3) .lt. 0.0) then
           write (output,2003)
 2003  format ('0******** Junction area less than 0.0, set to 0.0 for co
     &ntinued checking.')
           xinit(3) = 0.0
           fail = .true.
         endif
         ajun(ij) = xinit(3)*fr
         tfail = .false.
         if (xinit(4) .lt. 0.0) then
           xinit(4) = 0.0
           tfail = .true.
         endif
         if (xinit(5) .lt. 0.0) then
           xinit(5) = 0.0
           tfail = .true.
         endif
         fjunf(ij) = xinit(4)
         fjunr(ij) = xinit(5)
         if (tfail) then
           write (output,2004)
 2004  format ('0******** Form loss coefficients less than 0.0, set to 0
     &.0 for continued checking.')
           fail = .true.
         endif
       endif
       tfail = .false.
       if (init(6) .lt. 0) then
         init(6) = -init(6)
         tfail = .true.
       endif
       ink = 0
       ijt = init(6)/10000000
       init(6) = init(6) - 10000000*ijt
       ief = init(6)/1000000
       init(6) = init(6) - 1000000*ief
       icc = init(6)/100000
       init(6) = init(6) - 100000*icc
       ist = init(6)/10000
       init(6) = init(6) - 10000*ist
       ick = init(6)/1000
       init(6) = init(6) - 1000*ick
       irf = init(6)/100
       init(6) = init(6) - 100*irf
       ihf = init(6)/10
       isf = init(6) - ihf*10
       if (ijt .gt. 1) then
         ijt = 0
         tfail = .true.
       endif
       if (ief .gt. 1) then
         ief = 0
         tfail = .true.
       endif
       if (icc .gt. 1) then
         icc = 0
         tfail = .true.
       endif
       if (ist .gt. 3) then
         ist = 0
         tfail = .true.
       endif
       if (ick .ge. 2) then
         ick = 0
         tfail = .true.
       endif
       if (irf .ge. 3) then
         irf = 0
         tfail = .true.
       endif
       if( irf .eq. 2 ) then
         irf = 1
         ink = 1
       endif
       if (ihf .gt. 2) then
         ihf = 0
         tfail = .true.
       endif
       if (ihf .eq. 2) ihf = 1
       if (isf .gt. 3) then
         isf = 0
         tfail = .true.
       endif
       jc(ij) = ior(ior(ior(ior(ior(ior(jc(ij),ishft(irf,8)),
     & ishft(ihf,9)),ishft(isf,12)),ishft(ick,4)),ishft(ist,17)),
     & ishft(ijt,25))
       jcex(ij) = ior(ior(jcex(ij),ishft(icc,2)),ishft(ief,15))
       jcex(ij) = ior(jcex(ij),ishft(ink,29))
       if (tfail) then
         write (output,2031)
 2031  format ('0******** Junction controls incorrect, set to zero for c
     &ontinued checking.')
         fail = .true.
       endif
c  Discharge coefficients.
       if (chngno(53)) then
c  Set Discharge Coefficient & Non-Equilibrium Parameter
c  for the Henry-Fauske Critical Flow Option.
c  Set default value for discharge coeff. if not read in:
         if (l3a(6) .lt. 7) xinit(7) = 1.0
c  Check range of input value for discharge coeff.
         if(xinit(7).gt.2.0 .or. xinit(7).le.0.0) then
           write(output,2032)
           fail = .true.
           xinit(7) = 1.0
         endif
c  Store Discharge Coeff. in JDISSC.
         jdissc(ij) = xinit(7)
c  Set default value for non-equilibrium parameter:
         if (l3a(6) .lt. 8) xinit(8) = 0.14
         if (xinit(8).lt.0.01) then
           write(output,2232)
 2232  format ('0****** Henry-Fauske Non-Equilibrium Factor',
     & ' lt 0.01, the frozen option will be used.')
           xinit(8) = 0.0
         elseif (xinit(8) .gt. 1000.) then
           write (output,2332)
 2332  format ('0****** Henry-Fauske Non-Equilibrium Factor',
     & ' gt 1000, the equilibrium option will be used.')
           xinit(8) = 100.
         endif
c  Store Non-Equilibrium Parameter in JDISTP.
         jdistp(ij) = xinit(8)
c  The super-heated vapor discharge coeff is not used.
         if (l3a(6) .lt. 9) xinit(9) = 0.0
         jdissh(ij) = xinit(9)
       else
c  Set Discharge Coefficients for Standard Critical Flow Model.
         if (l3a(6) .lt. 7) xinit(7) = 1.0
         if(xinit(7).gt.2.0 .or. xinit(7).le.0.0) then
           write(output,2032)
 2032  format ('0******** Improper discharge coefficient-- gt 2.0 or le
     &0.0 -- set to 1.0 for continued checking.')
           fail = .true.
           xinit(7) = 1.0
         endif
         jdissc(ij) = xinit(7)
         if (l3a(6) .lt. 8) xinit(8) = 1.0
         if(xinit(8).gt.2.0 .or. xinit(8).le.0.0) then
           write(output,2032)
           fail = .true.
           xinit(8) = 1.0
         endif
         jdistp(ij) = xinit(8)
         if (l3a(6) .lt. 9) xinit(9) = 1.0
         if (xinit(9).gt.2.0 .or. xinit(9).le.0.0) then
           write(output,2032)
           fail = .true.
           xinit(9) = 1.0
         endif
         jdissh(ij) = xinit(9)
       endif
c  Process junction input data card.
   30  if (ovl) go to 32
       fr = 1.0
       if (.not. uniti) fr = ft
       l3b(1) = l3a(1) + 9
       l3b(6) = 1
       call inp2 (fa(filndx(1)),init,l3b)
       tfail = .false.
       if (l3b(6) .lt. 0) then
         write (output,2120)
 2120  format ('0******** Junction input data set to default for continu
     &ed checking.')
         tfail = .true.
         fail = .true.
       elseif (l3b(6) .eq. 0) then
         tfail = .true.
       elseif (l3b(6) .ne. 4) then
         write (output,2122)
 2122  format ('0******** Junction input data card contains less than 4
     &words, input set to default.')
         tfail = .true.
         fail = .true.
       endif
       if (tfail) then
         diamj(ij) = 2.0*sqrt(ajun(ij)/pi)
         betacc(ij) = 0.0
         constc(ij) = 1.0
         constm(ij) = 1.0
       else
         if (xinit(1) .lt. 0.0) then
           write (output,2123)
 2123  format ('0******** Junction diameter less then 0.0, set to 0.0 fo
     &r continued checking.')
           xinit(1) = 0.0
           fail = .true.
         endif
         diamj(ij) = xinit(1)*fr
         if (xinit(2).lt.0.0 .or. xinit(2).gt.1.0) then
           write (output,2124)
 2124  format ('0******** Beta factor less than 0.0 or greater than 1.0,
     & set to 0.0 for continued checking.')
           xinit(2) = 0.0
           fail = .true.
         endif
         betacc(ij) = xinit(2)
         if (xinit(3) .le. 0.0) then
           write (output,2125)
 2125  format ('0******** Gas intercept less than or equal to 0.0, set t
     &o 0.0 for continued checking.')
           xinit(3) = 0.0
           fail = .true.
         endif
         constc(ij) = xinit(3)
         if (xinit(4) .le. 0.0) then
           write (output,2126)
 2126  format ('0******** Slope less than or equal to 0.0, set to 0.0 fo
     &r continued checking.')
           xinit(4) = 0.0
           fail = .true.
         endif
         constm(ij) = xinit(4)
       endif
c  Process junction form loss input data card.
       fjunfb(ij) = 0.0
       fjunfc(ij) = 0.0
       fjunrb(ij) = 0.0
       fjunrc(ij) = 0.0
       if (ovl) go to 32
       l3b(1) = l3a(1) + 10
       l3b(6) = 1
       call inp2 (fa(filndx(1)),init,l3b)
       if (l3b(6) .lt. 0) then
         write (output,2220)
 2220  format ('0******** Junction input form loss data set to default f
     &or continued checking.')
         fail = .true.
         go to 69
       endif
       if (l3b(6) .eq. 0) go to 69
       if (l3b(6) .ne. 4) then
         write (output,2222)
 2222  format ('0******** Junction input form loss data card contains le
     &ss than 4 words, input set to default.')
         fail = .true.
         go to 69
       endif
       if (xinit(1) .lt. 0.0) then
         write (output,2223)
 2223  format ('0******** Forward form loss coefficient less then 0.0, s
     &et to 0.0 for continued checking.')
         xinit(1) = 0.0
         fail = .true.
       endif
       fjunfb(ij) = xinit(1)
       if (xinit(2) .lt. 0.0) then
         write (output,2224)
 2224  format ('0******** Forward form loss exponent less then 0.0, se
     &t to 0.0 for continued checking.')
         xinit(2) = 0.0
         fail = .true.
       endif
       fjunfc(ij) = xinit(2)
       if (xinit(3) .lt. 0.0) then
         write (output,2225)
 2225  format ('0******** Reverse form loss coefficient less then 0.0, s
     &et to 0.0 for continued checking.')
         xinit(3) = 0.0
         fail = .true.
       endif
       fjunrb(ij) = xinit(3)
       if (xinit(4) .lt. 0.0) then
         write (output,2226)
 2226  format ('0******** Reverse form loss exponent less then 0.0, se
     &t to 0.0 for continued checking.')
         xinit(4) = 0.0
         fail = .true.
       endif
       fjunrc(ij) = xinit(4)
c  Process card to aid hydrodynamic noding diagram.
   69  l3b(1) = l3b(1) + 2
       l3b(6) = 1
       call inp2 (fa(filndx(1)),xinit,l3b)
       tfail = .true.
       if (l3b(6) .lt. 0) then
         fail = .true.
       elseif (l3b(6) .gt. 0) then
         if (l3b(6) .eq. 4) then
           tfail = .false.
         else
           fail = .true.
           write (output,"('0******** Less than four quantities were ent
     &ered on Card',i8,', all quantities set to zero.')") l3b(1)
         endif
       endif
       if (tfail) then
         guinval(ij:ij+1) = 0.0
         guinang(ij:ij+1) = 0.0
       else
         guinval(ij) = xinit(1)
         guinval(ij+1) = xinit(3)
         guinang(ij) = xinit(2)
         guinang(ij+1) = xinit(4)
         if (.not.uniti) guinval(ij:ij+1) = guinval(ij:ij+1)*ft
         tfail = any(guinval(ij:ij+1).lt.0.0) .or.
     &   any(abs(guinang(ij:ij+1)).gt.360.0)
         if (tfail) then
           fail = .true.
           write (output,"('0******** One or more quantities on Card',
     & i8,' are negative.')") l3b(1)
         endif
       endif
c  Process junction initial conditions.
       l3c(1) = l3a(1) + 100
       l3c(6) = 1
       call inp2 (fa(filndx(1)),init,l3c)
       if (l3c(6) .le. 0) then
         write (output,2005)
 2005  format ('0******** Junction initial velocities set to 0.0 for con
     &tinued checking.')
         init(1) = 0
         velfj(ij) = 0.0
         velgj(ij) = 0.0
$if def,mmfld,1
         velmj(ij) = 0.0
         fail = .true.
         go to 32
       endif
$if def,mmfld,1
       if (l3c(6) .ne. 4) xinit(4) = 0.0
       if (init(1).ne.0 .and. init(1).ne.1) then
         init(1) = 0
         write (output,2027)
 2027  format ('0******** Control for junction initial conditions incorr
     &ect, set to 0 for continued checking.')
         fail = .true.
       endif
       fr = 1.0
       if (init(1) .eq. 0) then
         if (.not.uniti) fr = ft
         velfj(ij) = xinit(2)*fr
         velgj(ij) = xinit(3)*fr
$if def,mmfld,1
         velmj(ij) = xinit(4)*fr
       else
         cmpopt(i) = 1
         if (.not.uniti) fr = xlbsec
         velfj(ij) = xinit(2)*fr
         velgj(ij) = xinit(3)*fr
$if def,mmfld,1
         velmj(ij) = xinit(4)*fr
       endif
c  Edit component input.
   32  l3c(1) = nc*1000000
       junno(ij) = l3c(1)
       cmphld(nc)%junp(1)%junno = l3c(1)
       if (iand(ihlppr(2),ishft(1,22)).ne.0) then
         ihf =
     &   10000000*iand(ishft(jc(ij),-25),1) +
     &   1000000*iand(ishft(jcex(ij),-15),1) +
     &   100000*iand(ishft(jcex(ij),-2),1) +
     &   10000*iand(ishft(jc(ij),-17),3) +
     &   1000*iand(ishft(jc(ij),-4),1) +
     &   100*iand(ishft(jc(ij),-8),1) +
     &   10*iand(ishft(jc(ij),-9),1) +
     &   iand(ishft(jc(ij),-12),3)
         write (output,2111)
 2111  format ('0  Jun.no. from vol.   to vol.',2x,'jun. area',
     & 5x,'jun-flag',2x,'subcooled',5x,'two-phase',5x,'superheated')
         if (.not.unito) then
           write (output,2112)
 2112  format (32x,'(ft2)',9x,'jefvcahs',2x,'dschg. coef.',2x,'dschg.'
     & ' coef.',2x,'dschg. coef.')
           xinit(2) = ajun(ij)/ft2
           write (output,2102) l3c(1),ij1(ij),ij2(ij),xinit(2),ihf,
     &     jdissc(ij),jdistp(ij),jdissh(ij)
         else
           write (output,2113)
 2113  format (32x,'(m2)',10x,'jefvcahs',2x,'dschg. coef.',2x,
     & 'dschg. coef.',2x,'dschg. coef.')
           write (output,2102) l3c(1),ij1(ij),ij2(ij),ajun(ij),ihf,
     &     jdissc(ij),jdistp(ij),jdissh(ij)
 2102  format (3i10,1p,e14.6,i10.8,1x,e13.6,2e14.6)
         endif
         write (output,2121)
 2121  format ('0  Jun.no.',5x,'forward loss ',3x,'forward loss',4x,'for
     &ward loss',4x,'reverse loss ',3x,'reverse loss',4x,'reverse loss')
         write (output,2127)
 2127  format (15x,'coefficient  ',3x,'multiplier  ',4x,'exponent
     &  ','coefficient  ',3x,'multiplier  ',4x,'exponent ')
         write (output,2128) l3c(1),fjunf(ij),fjunfb(ij),fjunfc(ij),
     & fjunr(ij),fjunrb(ij),fjunrc(ij)
 2128  format(i10,1x,1p,6e16.6)
         write (output,2130)
 2130  format ('0  Jun.no.',25x,'junction diam.',3x,'beta factor',6x,
     & 'gas intercept',4x,'slope')
         if (.not.unito) then
           write (output,2131)
 2131  format (35x,'(ft)')
           xinit(2) = diamj(ij)/ft
           write (output,2132) l3c(1),xinit(2),betacc(ij),constc(ij),
     &     constm(ij)
 2132  format (i10,20x,1p,4e17.6)
         else
           write (output,2133)
 2133  format (35x,'(m)')
           write (output,2132) l3c(1),diamj(ij),betacc(ij),constc(ij),
     &     constm(ij)
         endif
         if (any(guinval(ij:ij+1).ne.0.0)) then
           write (output,"('0  Jun.no.  Noding diagram modification:  fr
     &om value',7x,'from angle',7x,'to value',9x,'to angle')")
           xinit(2:3) = guinval(ij:ij+1)
           if (.not.unito) xinit(2:3) = xinit(2:3)/ft
           write (output,"(i10,27x,4es17.6)") l3c(1),xinit(2),
     &     guinang(ij),xinit(3),guinang(ij+1)
         endif
         n3 = 2
$if def,mmfld,1
         if (nonmf .eq. 0) then
           write (output,2114) (labl1(init(1)+1),n4 = 1,n3)
 2114  format ('0  Jun.no.',25x,'init. liq.',a5,2x,'init. vap.',a5)
$if def,mmfld
         else
           n3 = 3
           write (output,2117) (labl1(init(1)+1),n4 = 1,n3)
 2117  format ('0  Jun.no.',25x,'init. liq.',a5,2x,'init. vap.',a5,
     & 2x,'init. met.',a5)
         endif
$endif
         if (.not.unito) then
           write (output,2115) (labl2(init(1)+1),n4=1,n3)
 2115  format (35x,a10,7x,a10,7x,a10)
           if (init(1) .eq. 0) then
             xinit(2) = velfj(ij)/ft
             xinit(3) = velgj(ij)/ft
$if def,mmfld,1
             if (nonmf .ne. 0) xinit(4) = velmj(ij)/ft
           else
             xinit(2) = velfj(ij)/xlbsec
             xinit(3) = velgj(ij)/xlbsec
$if def,mmfld,1
             if (nonmf .ne. 0) xinit(4) = velmj(ij)/xlbsec
           endif
           write (output,2103) l3c(1),(xinit(ihf),ihf=2,n3+1)
         else
           write (output,2116) (labl3(init(1)+1),n4=1,n3)
 2116  format (35x,a10,7x,a10,7x,a10)
$if def,mmfld,1
           if (nonmf .eq. 0) then
             write (output,2103) l3c(1),velfj(ij),velgj(ij)
$if def,mmfld,3
           else
             write (output,2103) l3c(1),velfj(ij),velgj(ij),velmj(ij)
           endif
 2103  format (i10,20x,1p,3e17.6)
         endif
       endif
 1000  return
       end
