*mlist
       subroutine jprop (icheck)
c
c  Cognizant engineer: rjw.
c
c  Donors junction properties from adjacent volume quantities.
c
c
c  If icheck=0, at end of advancement, set up for next time step.
c  If icheck=1, after vexplt, check for velocity reversal and redonor.
c  If icheck=2, after level, redonor junctions in scratch list for
c  level crossing.
c
       use lpdatc
       implicit none
       integer icheck
       include 'fast.h'
       include 'cmpdat.h'
       include 'comctl.h'
       include 'contrl.h'
       include 'jundat.h'
       include 'lvectr.h'
       include 'przdat.h'
       include 'separ.h'
       include 'scrtch.h'
       include 'statec.h'
       include 'ufiles.h'
       include 'voldat.h'
c
       real abot,atop,fctr,voids,rrho
       integer i,i1,ihx,ivbot,ivtop,ix,ix1,izz,j,jj,jupdw,k,kk,l,
     & ll,m,n,n2,lls,ilvtp,ilvbt
c
       if (icheck .ne. 1) then
c  icheck = 0,2.
         if (icheck .eq. 0) then
           ll = lvajun(lpdat(issys)%llvect)
         else
           ll = lvscr(lpdat(issys)%llvect)
         endif
         ix = ixjff
         lls = ll
         do m = 1,lvptr(ll)
           ll = ll + 1
           j = lvptr(ll)
           lgg1(ix) = .true.
           k = ij1nx(j)
           l = ij2nx(j)
           vodfjr(j) = 1.0
           vodgjr(j) = 1.0
           if (velfj(j).lt.0.0 .or.
     &     (velfj(j).eq.0.0 .and. p(k).lt.p(l))) then
             ihh1(ix) = ij2nx(j)
           else
             ihh1(ix) = ij1nx(j)
           endif
           if (velgj(j).lt.0.0 .or.
     &     (velgj(j).eq.0.0 .and. p(k).lt.p(l))) then
            ihh2(ix) = ij2nx(j)
           else
             ihh2(ix) = ij1nx(j)
           endif
           rhofj(j) = rhof(ihh1(ix))
           voidfj(j) = 1.0 - voidg(ihh1(ix))
           ufj(j) = uf(ihh1(ix))
           if (velfj(j).eq.0.0 .and. p(k).eq.p(l)) then
             rhofj(j) = 0.5*(rhof(ij1nx(j)) + rhof(ij2nx(j)))
             rrho = 0.5/rhofj(j)
             voidfj(j) = rrho*((1.-voidg(ij1nx(j)))*rhof(ij1nx(j)) +
     &       (1.0-voidg(ij2nx(j)))*rhof(ij2nx(j)))
             ufj(j) = rrho*(rhof(ij1nx(j))*uf(ij1nx(j)) +
     &       rhof(ij2nx(j))*uf(ij2nx(j)))
           endif
           if ((chngno(13) .or. chngno(66)) .and.
     &         floreg(ij1nx(j)).eq.13.0) then
             ihx = ij2nx(j)
             voidfj(j) = 1.0 - voidg(ihx)
             if( voidg(ihh1(ix)).gt.0.0 .and. voidg(ihh1(ix)).lt.1.0 )
     &        vodfjr(j) = voidfj(j)/(1.0 - voidg(ihh1(ix)))
           endif
           if ((chngno(13) .or. chngno(66)) .and.
     &         floreg(ij2nx(j)).eq.13.0) then
             ihx = ij1nx(j)
             voidfj(j) = 1.0 - voidg(ihx)
             if ( voidg(ihh1(ix)).gt.0.0 .and. voidg(ihh1(ix)).lt.1.0 )
     &       vodfjr(j) = voidfj(j)/(1.0 - voidg(ihh1(ix)))
           endif
           rhogj(j) = rhog(ihh2(ix))
           voidgj(j) = voidg(ihh2(ix))
           ugj(j) = ug(ihh2(ix))
           qualaj(j) = quala(ihh2(ix))
$if def,mmfld
           if (lpdat(issys)%lnonmf .ne. 0) then
             ihh3(ix) = ij1nx(j)
             if (velmj(j).lt.0.0) ihh3(ix) = ij2nx(j)
             rhomj(j) = rhomt(ihh3(ix))
             voidmj(j) = voidm(ihh3(ix))
             umj(j) = um(ihh3(ix))
             mmflwj(j) = voidmj(j)*rhomj(j)*velmj(j)*ajun(j)
           endif
$endif
           if (velgj(j).eq.0.0 .and. p(k).eq.p(l)) then
             rhogj(j) = 0.5*(rhog(ij1nx(j))+rhog(ij2nx(j)))
             rrho = 0.5/rhogj(j)
             voidgj(j) = rrho*(voidg(ij1nx(j))*rhog(ij1nx(j)) +
     &       voidg(ij2nx(j))*rhog(ij2nx(j)))
             ugj(j) = rrho*(rhog(ij1nx(j))*ug(ij1nx(j)) +
     &       rhog(ij2nx(j))*ug(ij2nx(j)))
             qualaj(j) = rrho*(rhog(ij1nx(j))*quala(ij1nx(j)) +
     &       rhog(ij2nx(j))*quala(ij2nx(j)))
           endif
           if ((chngno(13) .or. chngno(66)) .and.
     &         floreg(ij1nx(j)).eq.13.0) then
             ihx = ij2nx(j)
             voidgj(j) = voidg(ihx)
             if (voidg(ihh2(ix)).gt.0.0 .and. voidg(ihh2(ix)).lt.1.0)
     &       vodgjr(j) = voidgj(j)/voidg(ihh2(ix))
           endif
           if ((chngno(13) .or. chngno(66)) .and.
     &         floreg(ij2nx(j)).eq.13.0) then
             ihx = ij1nx(j)
             voidgj(j) = voidg(ihx)
             if (voidg(ihh2(ix)).gt.0.0 .and. voidg(ihh2(ix)).lt.1.0)
     &       vodgjr(j) = voidgj(j)/voidg(ihh2(ix))
           endif
c  Modify junction void for level tracking model.
           if (iand(ishft(jc(j),-26),1) .ne. 0) then
             jupdw = iand(ishft(jc(j),-27),1)
             if (jupdw .eq. 0) then
               ivbot = k
               ivtop = l
               fctr = 1.0
             else
               ivbot = l
               ivtop = k
               fctr = -1.0
             endif
             ilvtp = iand(ishft(vctrlx(ivtop),-7),1)
             ilvbt = iand(ishft(vctrlx(ivbot),-7),1)
             if (ilvtp.eq.1 .or. ilvbt.eq.1) then
               if (ilvbt.eq.1) then
                 if (fctr*velfj(j).gt.0.0 ) then
                   if( dlev(ivbot).lt.dl(ivbot) ) then
                     voidfj(j) = 1.0 - voidla(ivbot)
                   else
                     voidfj(j) = 1.0 - voidg(ivbot)
                   endif
                 else
                   voidfj(j) = 1.0 - voidg(ivtop)
                 endif
                 if(voidg(ihh1(ix)).gt.0.0 .and. voidg(ihh1(ix)).lt.1.0)
     &           vodfjr(j) = voidfj(j)/(1.0 - voidg(ihh1(ix)))
                 if (fctr*velgj(j).gt.0.0) then
                   if( dlev(ivbot).lt.dl(ivbot) ) then
                     voidgj(j) = voidla(ivbot)
                   else
                     voidgj(j) = voidg(ivbot)
                   endif
                 else
                   voidgj(j) = voidg(ivtop)
                 endif
                 if(voidg(ihh2(ix)).gt.0.0 .and. voidg(ihh2(ix)).lt.1.0)
     &           vodgjr(j) = voidgj(j)/voidg(ihh2(ix))
               endif
c
               if (ilvtp.eq.1) then
                 if (fctr*velfj(j).lt.0.0) then
                   if( dlev(ivtop).gt.0.0 ) then
                     voidfj(j) = 1.0 - voidlb(ivtop)
                   else
                     voidfj(j) = 1.0 - voidg(ivtop)
                   endif
                 else
                   voidfj(j) = 1.0 - voidg(ivbot)
                 endif
                 if(voidg(ihh1(ix)).gt.0.0 .and. voidg(ihh1(ix)).lt.1.0)
     &            vodfjr(j) = voidfj(j)/(1.0 - voidg(ihh1(ix)))
                 if (fctr*velgj(j).lt.0.0) then
                   if( dlev(ivtop).gt.0.0 ) then
                     voidgj(j) = voidlb(ivtop)
                   else
                     voidgj(j) = voidg(ivtop)
                   endif
                 else
                   voidgj(j) = voidg(ivbot)
                 endif
                 if(voidg(ihh2(ix)).gt.0.0 .and. voidg(ihh2(ix)).lt.1.0)
     &           vodgjr(j) = voidgj(j)/voidg(ihh2(ix))
               endif
             endif
             if (dfront(ivtop).gt.0.0 .or. dfront(ivbot).gt.0.0) then
               if (dfront(ivbot).gt.0.0) then
                 ufj(j) = uf(ivtop)
                 rhofj(j) = rhof(ivtop)
               endif
               if (dfront(ivtop).gt.0.0) then
                 ufj(j) = uf(ivbot)
                 rhofj(j) = rhof(ivbot)
               endif
             endif
           endif
           ix = ix + scskp
         enddo
         do i1 = 1,lpdat(issys)%lnoncn
           ix = ixjff
           ll = lls
           do m = 1,lvptr(ll)
             ll = ll + 1
             j = lvptr(ll)
             k = ij1nx(j)
             l = ij2nx(j)
             qualnj(j+i1-1) = qualan(ihh2(ix)+i1-1)
             if (velgj(j).eq.0.0 .and. p(k).eq.p(l)) then
               rrho = 0.5/rhogj(j)
               qualnj(j+i1-1) = rrho*(rhog(ij1nx(j))*
     &         qualan(ij1nx(j)+i1-1) + rhog(ij2nx(j))*
     &         qualan(ij2nx(j)+i1-1))
             endif
             ix = ix + scskp
             j = j + ijskp
           enddo
         enddo
$if def,mmfld
         if (lpdat(issys)%lnonmf .ne. 0) then
           ix1 = lpdat(issys)%lij
           do i1 = 1,lpdat(issys)%lnonmf
             ix = ixjff
             j = ix1
             do m = 1,lpdat(issys)%lijn
               qualmj(j) = qualm(ihh3(ix)+i1-1)
               ix = ix + scskp
               j = j + ijskp
             enddo
             ix1 = ix1 + 1
           enddo
         endif
$endif
       else
c  icheck = 1.
         ix = ixjff
         j = lpdat(issys)%lij
$if def,mmfld,1
         if (lpdat(issys)%lnonmf .eq. 0) then
           do m = 1,lpdat(issys)%lijn
             lgg1(ix) = velgj(j)*velgjo(j).le.0.0 .or.
     &       velfj(j)*velfjo(j).le.0.0
             ix = ix + scskp
             j = j + ijskp
           enddo
$if def,mmfld
         else
           do m = 1,lpdat(issys)%lijn
             lgg1(ix) = velgj(j)*velgjo(j).le.0.0 .or.
     &       velfj(j)*velfjo(j).le.0.0 .or. velmj(j)*velmjo(j).le.0.0
             ix = ix + scskp
             j = j + ijskp
           enddo
         endif
$endif
         ix = ixjff
         ix1 = ixjff
         n2 = 0
         j = lpdat(issys)%lij
         do m = 1,lpdat(issys)%lijn
           if (lgg1(ix)) then
             n2 = n2 + 1
             nix(ix1) = j
             ix1 = ix1 + scskp
           endif
           ix = ix + scskp
           j = j + ijskp
         enddo
         if (n2 .ne. 0) then
           ix1 = ixjff
           do m = 1,n2
             j = nix(ix1)
             ix = jcnxs(j)
             k = ij1nx(j)
             l = ij2nx(j)
             vodfjr(j) = 1.0
             vodgjr(j) = 1.0
             if (velfj(j).lt.0.0 .or.
     &       (velfj(j).eq.0.0 .and. p(k).lt.p(l))) then
               ihh1(ix) = ij2nx(j)
             else
               ihh1(ix) = ij1nx(j)
             endif
             if (velgj(j).lt.0.0 .or.
     &       (velgj(j).eq.0.0 .and. p(k).lt.p(l))) then
               ihh2(ix) = ij2nx(j)
             else
               ihh2(ix) = ij1nx(j)
             endif
             rhofj(j) = rhofo(ihh1(ix))
             voidfj(j) = 1.0 - voidgo(ihh1(ix))
             ufj(j) = ufo(ihh1(ix))
             if (velfj(j).eq.0.0 .and. p(k).eq.p(l)) then
               rhofj(j) = 0.5*(rhofo(ij1nx(j)) + rhofo(ij2nx(j)))
               rrho = 0.5/rhofj(j)
               voidfj(j) = rrho*((1.0 - voidgo(ij1nx(j)))*
     &         rhofo(ij1nx(j)) +
     &         (1.0 - voidgo(ij2nx(j)))*rhofo(ij2nx(j)))
               ufj(j) = rrho*(rhofo(ij1nx(j))*ufo(ij1nx(j)) +
     &         rhofo(ij2nx(j))*ufo(ij2nx(j)))
             endif
             if ((chngno(13) .or. chngno(66)) .and.
     &         floreg(ij1nx(j)).eq.13.0) then
               ihx = ij2nx(j)
               voidfj(j) = 1.0 - voidgo(ihx)
               if(voidgo(ihh1(ix)).gt.0.0.and.voidgo(ihh1(ix)).lt.1.0)
     &         vodfjr(j) = voidfj(j)/(1.0 - voidgo(ihh1(ix)))
             endif
             if ((chngno(13) .or. chngno(66)) .and.
     &         floreg(ij2nx(j)).eq.13.0) then
               ihx = ij1nx(j)
               voidfj(j) = 1.0 - voidgo(ihx)
               if(voidgo(ihh1(ix)).gt.0.0.and.voidgo(ihh1(ix)).lt.1.0)
     &         vodfjr(j) = voidfj(j)/(1.0 - voidgo(ihh1(ix)))
             endif
             rhogj(j) = rhogo(ihh2(ix))
             voidgj(j) = voidgo(ihh2(ix))
             ugj(j) = ugo(ihh2(ix))
             qualaj(j) = qualao(ihh2(ix))
$if def,mmfld
             if (lpdat(issys)%lnonmf .ne. 0) then
               ihh3(ix) = ij1nx(j)
               if (velmj(j).lt.0.0) ihh3(ix) = ij2nx(j)
               rhomj(j) = rhomt(ihh3(ix))
               voidmj(j) = voidm(ihh3(ix))
               umj(j) = um(ihh3(ix))
               mmflwj(j) = voidmj(j)*rhomj(j)*velmj(j)*ajun(j)
             endif
$endif
             if (velgj(j).eq.0.0 .and. p(k).eq.p(l)) then
               rhogj(j) = 0.5*(rhogo(ij1nx(j)) + rhogo(ij2nx(j)))
               rrho = 0.5/rhogj(j)
               voidgj(j) = rrho*(hyarg(ij1nx(j)) + hyarg(ij2nx(j)))
               ugj(j) = rrho*(rhogo(ij1nx(j))*ugo(ij1nx(j)) +
     &         rhogo(ij2nx(j))*ugo(ij2nx(j)))
               qualaj(j) = rrho*(rhogo(ij1nx(j))*qualao(ij1nx(j)) +
     &         rhogo(ij2nx(j))*qualao(ij2nx(j)))
             endif
             if ((chngno(13) .or. chngno(66)) .and.
     &         floreg(ij1nx(j)).eq.13.0) then
               ihx = ij2nx(j)
               voidgj(j) = voidgo(ihx)
               if(voidgo(ihh2(ix)).gt.0.0.and.voidgo(ihh2(ix)).lt.1.0)
     &         vodgjr(j) = voidgj(j)/voidgo(ihh2(ix))
             endif
             if ((chngno(13) .or. chngno(66)) .and.
     &         floreg(ij2nx(j)).eq.13.0) then
               ihx = ij1nx(j)
               voidgj(j) = voidgo(ihx)
               if(voidgo(ihh2(ix)).gt.0.0.and.voidgo(ihh2(ix)).lt.1.0)
     &         vodgjr(j) = voidgj(j)/voidgo(ihh2(ix))
             endif
c  Modify junction void for level tracking model.
               if (iand(ishft(jc(j),-26),1) .ne. 0) then
               jupdw = iand(ishft(jc(j),-27),1)
               if (jupdw .eq. 0) then
                 ivbot = k
                 ivtop = l
                 fctr = 1.0
               else
                 ivbot = l
                 ivtop = k
                 fctr = -1.0
               endif
               ilvtp = iand(ishft(vctrlx(ivtop),-7),1)
               ilvbt = iand(ishft(vctrlx(ivbot),-7),1)
               if (ilvbt.eq.1 .or. ilvtp.eq.1) then
                 if (ilvbt.eq.1) then
                   if (fctr*velfj(j).gt.0.0) then
                     if( dlev(ivbot).lt.dl(ivbot) ) then
                       voidfj(j) = 1.0 - voidla(ivbot)
                     else
                       voidfj(j) = 1.0 - voidgo(ivbot)
                     endif
                   else
                     voidfj(j) = 1.0 - voidgo(ivtop)
                   endif
                   if( voidgo(ihh1(ix)).gt.0.0 .and.
     &              voidgo(ihh1(ix)).lt.1.0)
     &              vodfjr(j) = voidfj(j)/(1.0 - voidgo(ihh1(ix)))
                   if (fctr*velgj(j).gt.0.0) then
                     if( dlev(ivbot).lt.dl(ivbot) ) then
                       voidgj(j) = voidla(ivbot)
                     else
                       voidgj(j) = voidgo(ivbot)
                     endif
                   else
                     voidgj(j) = voidgo(ivtop)
                   endif
                   if(voidgo(ihh2(ix)).gt.0.0.and.voidgo(ihh2(ix)).lt.
     &             1.0) vodgjr(j) = voidgj(j)/voidgo(ihh2(ix))
                 endif
                 if (ilvtp.eq.1) then
                   if (fctr*velfj(j).lt.0.0) then
                     if( dlev(ivtop).gt.0.0 ) then
                       voidfj(j) = 1.0 - voidlb(ivtop)
                     else
                       voidfj(j) = 1.0 - voidgo(ivtop)
                     endif
                   else
                     voidfj(j) = 1.0 - voidgo(ivbot)
                   endif
                   if( voidgo(ihh1(ix)).gt.0.0.and.
     &               voidgo(ihh1(ix)).lt.1.0)
     &               vodfjr(j) = voidfj(j)/(1.0 - voidgo(ihh1(ix)))
                   if (fctr*velgj(j).lt.0.0) then
                     if (dlev(ivtop).gt.0.0 ) then
                       voidgj(j) = voidlb(ivtop)
                     else
                       voidgj(j) = voidgo(ivtop)
                     endif
                   else
                     voidgj(j) = voidgo(ivbot)
                   endif
                   if(voidgo(ihh2(ix)).gt.0.0.and.voidgo(ihh2(ix)).lt.
     &             1.0) vodgjr(j) = voidgj(j)/voidgo(ihh2(ix))
                 endif
               endif
             if (dfront(ivtop).gt.0.0 .or. dfront(ivbot).gt.0.0) then
               if (dfront(ivbot).gt.0.0) then
                 ufj(j) = uf(ivtop)
                 rhofj(j) = rhof(ivtop)
               endif
               if (dfront(ivtop).gt.0.0) then
                 ufj(j) = uf(ivbot)
                 rhofj(j) = rhof(ivbot)
               endif
             endif
             endif
             ix1 = ix1 + scskp
           enddo
           if (lpdat(issys)%lnoncn .ne. 0) then
             do i1 = 1,lpdat(issys)%lnoncn
               ix1 = ixjff
               do m = 1,n2
                 j = nix(ix1)
                 ix = jcnxs(j)
                 k = ij1nx(j)
                 l = ij2nx(j)
                 qualnj(j+i1-1) = qualan(ihh2(ix)+i1-1)
                 if (velgj(j).eq.0.0 .and. p(k).eq.p(l)) then
                   rrho = 0.5/rhogj(j)
                   qualnj(j+i1-1) = rrho*(rhog(ij1nx(j))*
     &             qualan(ij1nx(j)+i1-1) + rhog(ij2nx(j))*
     &             qualan(ij2nx(j)+i1-1))
                 endif
                 ix1 = ix1 + scskp
               enddo
             enddo
           endif
$if def,mmfld
           if (lpdat(issys)%lnonmf.ne.0) then
             do i1 = 1,lpdat(issys)%lnonmf
               ix1 = ixjff
               do m = 1,n2
                 j = nix(ix1)
                 ix = jcnxs(j)
                 qualmj(j+i1-1) = qualm(ihh3(ix)+i1-1)
                 ix1 = ix1 + scskp
               enddo
             enddo
           endif
$endif
         endif
       endif
c  end icheck
c
       if (lvsepr(lpdat(issys)%llvect) .ne. 0) then
         i1 = lvsepr(lpdat(issys)%llvect)
         do m = 1,lvptr(i1)
           i1 = i1 + 1
           n = lvptr(i1)
           i = njco(n) + filndx(5)
           k = nvco(n) + filndx(4)
           ix = jcnxs(i)
           if ( voidg(k).gt.0.0 .and. voidg(k).lt.1.0 ) then
c  Choose the separator/dryer combination
c  Standard RELAP5 separator isepst = 0
             if (isepst(n) .eq. 0) then
               call stdsp(i1, n, i)
c  Dryer isepst = 1
             elseif (isepst(n) .eq. 1) then
               if( icheck.ne.1 ) call dryer(i1, n, i)
c  GE separator isepst 2 => 2 stage; 3 => 3 stage
             elseif (isepst(n).eq.2 .or. isepst(n).eq.3) then
               if( icheck.ne.1 ) call gesep(i1, n, i)
c  Standard RELAP5 separator with dryer isepst = 4
cc           elseif (isepst(n) .eq. 4) then
cc             if( icheck.ne.1 ) call stdry(i1, n, i)
c  GE separator with dryer isepst 5 => 2 stage; 6 => 3 stage
cc           elseif (isepst(n) .eq. 5 .or. isepst(n) .eq. 6) then
cc             if( icheck.ne.1 ) call gedry(i1, n, i)
             endif
           endif
         enddo
       endif
c
       if (lvaccm(lpdat(issys)%llvect) .ne. 0) then
         i1 = lvaccm(lpdat(issys)%llvect)
         do m = 1,lvptr(i1)
           i1 = i1 + 1
           n = lvptr(i1)
           j = njco(n) + filndx(5)
           k = ij1nx(j)
c  Check for inactive accumulator and return if active volume.
           if (iand(cmpopt(n),16) .eq. 0) then
c  Perform accumulator donor cell.
             voidfj(j) = 1.0
             voidgj(j) = 0.0
             qualaj(j) = 0.0
             rhofj(j) = rhof(k)
             rhogj(j) = rhog(k)
             ufj(j) = uf(k)
             ugj(j) = ug(k)
             if(voidg(k).gt.0.0 .and. voidg(k).lt.1.0) then
               vodfjr(j) = voidfj(j)/(1.0 - voidg(k))
               vodgjr(j) = voidgj(j)/voidg(k)
             endif
           endif
         enddo
       endif
       j = lpdat(issys)%lij
       do m = 1,lpdat(issys)%lijn
         if (voidfj(j) + voidgj(j) .le. 1.0e-15) then
           k = ij1nx(j)
           l = ij2nx(j)
           voidfj(j) = max(min((1.0 - voidg(k)),
     &     (1.0 - voidg(l))),1.0e-15)
           voidgj(j) = max(min(voidg(k),voidg(l)),1.0e-15)
         endif
         j = j + ijskp
       enddo
c Junction wall friction coefficient (non-dimension by junction velocity
       if (icheck .eq. 0) then
         j = lpdat(issys)%lij
         do m = 1,lpdat(issys)%lijn
           fwalfj(j) = 2.0*fwalfj(j)/(abs(velfj(j)) + 1.0e-7)
           fwalgj(j) = 2.0*fwalgj(j)/(abs(velgj(j)) + 1.0e-7)
           j = j + ijskp
       enddo
       endif
c
c  Debug printout.
 2001  if (help .ne. 0) then
$if def,dbgprnt
       if( iand(ihlppr(1),ishft(1,17)).ne.0 ) then
         call helphd ('jprop',15)
         if( icheck.eq.0 ) then
           write (output,2002) icheck
 2002      format('0Junction donored properties, icheck =',i3/1x,
     &     132('=')/7x,'junno(i)',3x,'velfj(i)',5x,'voidfj(i)',4x,
     &     'rhofj(i)',5x,'qualaj(i)',4x,'ufj(i)',7x,'jc(i)',22x,
     &     'volno(k)',4x,'voidg(k)'/18x,'velgj(i)',5x,'voidgj(i)',4x,
     &     'rhogj(i)',5x,'voids',8x,'ugj(i)',7x,'jcex(i)',20x,
     &     'volno(l)',4x,'voidg(l)'/1x,132('='))
         else
           write(output,2004) icheck
 2004      format('0Junction donored properties, icheck =',i3/1x,
     &     132('=')/7x,'junno(i)',3x,'velfj(i)',5x,'voidfj(i)',4x,
     &     'rhofj(i)',5x,'qualaj(i)',4x,'ufj(i)',7x,'jc(i)',22x,
     &     'volno(k)',3x,'voidgo(k)'/18x,'velgj(i)',5x,'voidgj(i)',4x,
     &     'rhogj(i)',5x,'voids',8x,'ugj(i)',7x,'jcex(i)',20x,
     &     'volno(l)',3x,'voidgo(l)'/1x,132('='))
         endif
         i = lpdat(issys)%lij
         do m = 1,lpdat(issys)%lijn
           if (iand(jcex(i),ishft(1,20)).ne.0) then
           k = ij1nx(i)
           l = ij2nx(i)
           izz = iand(jc(i),not(128))
           voids = voidfj(i) + voidgj(i)
           if (icheck.eq.0) then
             write (output,2003) junno(i),velfj(i),voidfj(i),rhofj(i),
     &       qualaj(i),ufj(i),izz,volno(k),voidg(k),velgj(i),
     &       voidgj(i),rhogj(i),voids,ugj(i),jcex(i),volno(l),voidg(l)
           else
             write (output,2003) junno(i),velfj(i),voidfj(i),rhofj(i),
     &       qualaj(i),ufj(i),izz,volno(k),voidgo(k),velgj(i),
     &       voidgj(i),rhogj(i),voids,ugj(i),jcex(i),volno(l),voidgo(l)
           endif
           endif
 2003  format(6x,i10.9,1p,5g13.5,i22,6x,i10.9,g13.5/
     & 16x,5g13.5,i22,6x,i10.9,g13.5)
           i = i + ijskp
         enddo
       endif
$endif
       endif
c
c  Look for modifications to the junction donoring such as horizontal
c  stratification effects.
       if( icheck.lt.2 ) then
         if (chngno(77)) then
           call hseflw (icheck)
         else
           call hzflow (icheck)
         endif
       endif
       return
       end
