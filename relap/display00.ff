       subroutine display00
$if def,gui
!  Puts up display of hydrodynamic mesh and associated data.
$if -def,ifortc,3
       use opengl_gl
       use opengl_glu
       use opengl_glut
$if def,ifortc,1
       use ifopngl
       use hynmod
       use lpdatc
       implicit none
       include 'contrl.h'
       include 'comctl.h'
       include 'fast.h'
       include 'jundat.h'
       include 'voldat.h'
!
       real maxa,maxb,maxs,mina,mins
       real ft,vald,xyz(3)
       real hh,minss,maxss,obj(3),valy,ww
       integer i,in,it,lgl,np,vjno
       logical lproj,pprnt,red
       character vjtype(0:1)*8,mft(2)*5
       character pbufh*94
$if -def,ifortc,3
c  The following logical statement should be removed when glu wrapper
c  for fgluProject is fixed.
       logical fgluProject
!
       data ft/0.3048/
       data vjtype/'  Volume','Junction'/
       data mft/' (m)',' (ft)'/
!
       if (intyp .ne. 2) then
!  Initialize for start of a system.
         mins = hyn(isq)%mins
         maxs = hyn(isq)%maxs
         sinc(0) = 0.05*maxs
         maxss = 0.05*(maxs + mins)
         maxb = maxs + maxss
         maxss = 0.5*maxss
         mina = mins - maxss
         maxa = maxs + maxss
!  Set projection.
         call fglMatrixMode (GL_PROJECTION)
         call fglLoadIdentity
         call fglOrtho (-maxb,maxb,-maxb,maxb,-maxb,maxb)
!  Set model mode.
         call fglMatrixMode (GL_MODELVIEW)
         call fglLoadIdentity
!
         call fglRotated (-90.0,1.0,0.0,0.0)
!
         call fglRotated (viewt(0),0.0,1.0,0.0)
         call fglRotated (viewe(0),1.0,0.0,0.0)
         call fglRotated (viewa(0),0.0,0.0,1.0)
!
         call fglTranslated (tx(0),ty(0),tz(0))
!
!  Draw coordinate axes.
         call fglLineWidth (1.0_4)
         call fglColor3f (1.0_4,0.0_4,0.0_4)
         call fglBegin(GL_LINES)
         call fglVertex3d (mina,0.0,0.0)
         call fglVertex3d (maxa,0.0,0.0)
         call fglEnd
         call fglColor3f (0.0_4,1.0_4,0.0_4)
         call fglBegin(GL_LINES)
         call fglVertex3d (0.0,mina,0.0)
         call fglVertex3d (0.0,maxa,0.0)
         call fglEnd
         call fglColor3f (0.0_4,0.0_4,1.0_4)
         call fglBegin(GL_LINES)
         call fglVertex3d (0.0,0.0,mina)
         call fglVertex3d (0.0,0.0,maxa)
         call fglEnd
!
         call fglColor3f (0.0_4,0.0_4,0.0_4)
         call fglLineWidth (2.0_4)
         call fglPointSize (6.0_4)
!
         call fglScaled (size(0),size(0),size(0))
         call fglGetIntegerv (GL_VIEWPORT,viewport)
         call fglGetDoublev (GL_MODELVIEW_MATRIX,mvmatrix)
         call fglGetDoublev (GL_PROJECTION_MATRIX,projmatrix)
!  Draw volume point.
         red = .false.
         i = 1
         do
           if (iand(hyn(isq)%glr(i)%opt,1) .ne. 0) then
             write (6,"('******** Volume data expected on line',i4,z10,
     &       ' but was not found.')") i,hyn(isq)%glr(i)%opt
             stop 'display00-1'
           else
             lproj = iand(vctrl(2,hyn(isq)%glr(i)%indx),1) .ne. 0
             if (lproj) call fglColor3f (0.0_4,0.0_4,1.0_4)
             if (i .eq. isvv) call fglPointSize (12.0_4)
             call fglBegin (GL_POINTS)
             call fglVertex3d (hyn(isq)%glr(i)%cxr(1),
     &       hyn(isq)%glr(i)%cxr(2),hyn(isq)%glr(i)%cxr(3))
             call fglEnd
             if (lproj .or. red) call fglColor3f (0.0_4,0.0_4,0.0_4)
             red = .false.
             if (i .eq. isvv) call fglPointSize (6.0_4)
           endif
           if (i .ge. hyn(isq)%ntries) exit
!  Draw volume coordinate lines.
           i = i + 1
           if (iand(hyn(isq)%glr(i)%opt,1) .eq. 0) cycle
           if (i + 1 .gt. hyn(isq)%ntries) then
             write (6,"('******** Line following line',i4,
     &       ' was not found.')") i
             stop 'display00-2'
           else
             if (iand(hyn(isq)%glr(i+1)%opt,4) .ne. 0) then
               red = .true.
               call fglColor3f (1.0_4,0.0_4,0.0_4)
             endif
             call fglBegin (GL_LINES)
             call fglVertex3d (hyn(isq)%glr(i-1)%cxr(1),
     &       hyn(isq)%glr(i-1)%cxr(2),hyn(isq)%glr(i-1)%cxr(3))
             call fglVertex3d (hyn(isq)%glr(i)%cxr(1),
     &       hyn(isq)%glr(i)%cxr(2),hyn(isq)%glr(i)%cxr(3))
             call fglEnd
             call fglBegin (GL_LINES)
             call fglVertex3d (hyn(isq)%glr(i)%cxr(1),
     &       hyn(isq)%glr(i)%cxr(2),hyn(isq)%glr(i)%cxr(3))
             call fglVertex3d (hyn(isq)%glr(i+1)%cxr(1),
     &       hyn(isq)%glr(i+1)%cxr(2),hyn(isq)%glr(i+1)%cxr(3))
             call fglEnd
!  Draw junction point.
             call fglColor3f (0.0_4,1.0_4,0.0_4)
             if (i .eq. isvv) call fglPointSize (12.0_4)
             call fglBegin (GL_POINTS)
             call fglVertex3d (hyn(isq)%glr(i)%cxr(1),
     &       hyn(isq)%glr(i)%cxr(2),hyn(isq)%glr(i)%cxr(3))
             call fglEnd
             if (i .eq. isvv) call fglPointSize (6.0_4)
             if (.not.red) then
               call fglColor3f (0.0_4,0.0_4,0.0_4)
             else
               call fglColor3f (1.0_4,0.0_4,0.0_4)
             endif
             i = i + 1
           endif
         enddo
!  Set screen coordinates for mouse hits and adding values to screen.
         do i = 1,hyn(isq)%ntries
$if -def,ifortc,3
           lproj = fgluProject(hyn(isq)%glr(i)%cxr(1),
     &     hyn(isq)%glr(i)%cxr(2),hyn(isq)%glr(i)%cxr(3),
     &     mvmatrix,projmatrix,viewport,obj(1),obj(2),obj(3))
$if def,ifortc,3
           lgl = fgluProject(hyn(isq)%glr(i)%cxr(1),
     &     hyn(isq)%glr(i)%cxr(2),hyn(isq)%glr(i)%cxr(3),
     &     mvmatrix,projmatrix,viewport,obj(1),obj(2),obj(3))
           hyn(isq)%glr(i)%wxr = obj
$if -def,ifortc,1
           if (lproj) then
$if def,ifortc,1
           if (lgl .eq. GL_TRUE) then
             hyn(isq)%glr(i)%opt = ior(hyn(isq)%glr(i)%opt,8)
           else
             hyn(isq)%glr(i)%opt = iand(hyn(isq)%glr(i)%opt,not(8))
             hyn(isq)%glr(i)%wxr = -1
           endif
         enddo
       endif
!
       call displaytp
!  Print variable names being displayed.
       if (intyp .ne. 2) then
         pbufh = ' '
         if (iand(vjflag,6) .ne. 0) then
           if (iand(vjflag,4) .ne. 0) then
             write (pbufh,"('Variable shown is: ',a10,a)")
     &       vala(0),vjlabl(33:64)
           else
             write (pbufh,"('Variable shown is: ',a10)") vala(0)
           endif
           valy = hx - 40.0
           call prints (5.0,valy,pbufh,1)
         endif
!  Print highlighted point.
         if (isvv .ne. 0) then
           it = iand(hyn(isq)%glr(isvv)%opt,1)
           in = hyn(isq)%glr(isvv)%indx
           if (it == 0) then
             vjno = volno(2,in)
           else
             vjno = junno(2,in)
           endif
           pbufh(1:62) = ' '
           if (.not.valuep(0) .or. it.ne.iand(vjflag,1) .or.
     &     iand(vjflag,4).eq.0 .or. iand(vjflag,8).ne.0) then
             xyz = hyn(isq)%glr(isvv)%cxr
             if (unito) then
               in = 1
             else
               in = 2
               xyz = xyz/ft
             endif
             write (pbufh(1:62),"(a8,i10.9,3es13.5,a)")
     &       vjtype(it),vjno,xyz,mft(in)
           else
             vald = fa(vjdatax+in)
             if (.not.unito) then
               if (vjconv .ge. 0.0) then
                 vald = vald*vjconv
               else
                 vald = (vald + vjconv)*1.8
               endif
             endif
             write (pbufh(1:62),"(a8,i10.9,es12.4)")
     &       vjtype(it),vjno,vald
           endif
           call prints (5.0,10.0,pbufh(1:62),1)
         elseif (iand(vjflag,32) .ne. 0) then
           if (fnum .ge. 0) then
             write (pbufh(1:19),"(a9,a10)") vjtype(fnum),chfld2(2:10)
             call prints (5.0,10.0,pbufh(1:19),1)
           endif
         endif
!  Print watch value.
         if (iand(vjflag,128) .ne. 0) then
           pbufh = ' '
           write (pbufh(1:27),"('watch: ',a20)") wchfld
           if (iand(vjflag,256) .ne. 0) then
             vald = fa(wptr)
             if (.not.unito) then
               if (wconv .ge. 0.0) then
                 vald = vald*wconv
               else
                 vald = (vald + wconv)*1.8
               endif
             endif
             write (pbufh(28:94),"(es12.4,1x,a)") vald,wlabl(33:64)
           endif
           call prints (2.0,30.0,pbufh,1)
         endif
!  Print values.
!  524 is 512 + 8 + 4.
         if (valuep(0) .and. iand(vjflag,524).ne.0) then
           pbufh(1:11) = ' '
           pprnt = .true.
           lproj = .false.
           it = iand(vjflag,1)
           if (it .ne. 0) call fglColor3f (0.0_4,1.0_4,0.0_4)
           do i = 1,hyn(isq)%ntries
             if (iand(hyn(isq)%glr(i)%opt,1) .eq. it) then
               if (hyn(isq)%glr(i)%wxr(1).ge.0 .and.
     &         hyn(isq)%glr(i)%wxr(1).lt.iwx .and. 
     &         hyn(isq)%glr(i)%wxr(2).ge.0 .and.
     &         hyn(isq)%glr(i)%wxr(2).lt.ihx .and.
     &         hyn(isq)%glr(i)%wxr(3).ge.0 .and.
     &         hyn(isq)%glr(i)%wxr(3).lt.1) then
                 ww = hyn(isq)%glr(i)%wxr(1)
                 hh = hyn(isq)%glr(i)%wxr(2)
                 if (iand(vjflag,512) .ne. 0) then
                   vjno = iand(ishft(vctrl(2,hyn(isq)%glr(i)%indx),-19),
     &             z'7ff')
                   pprnt = vjno .ne. 0
                   if (pprnt) write (pbufh(1:11),"(o4.4,7x)") vjno
                 elseif (iand(vjflag,8) .ne. 0) then
                   if (it .eq. 0) then
                     vjno = volno(2,hyn(isq)%glr(i)%indx)
                     lproj = iand(ishft(vctrl(2,hyn(isq)%glr(i)%indx),
     &               -19),z'7ef') .ne. 0
                     if (lproj) call fglColor3f (1.0_4,0.0_4,0.0_4)
                   else
                     vjno = junno(2,hyn(isq)%glr(i)%indx)
                   endif
                   write (pbufh(1:11),"(i9.9,2x)") vjno
                 else
                   vald = fa(hyn(isq)%glr(i)%indx+vjdatax)
                   if (.not.unito) then
                     if (vjconv .ge. 0.0) then
                       vald =  vald*vjconv
                     else
                       vald = (vald + vjconv)*1.8
                     endif
                   endif
                   write (pbufh(1:11),"(es11.3)") vald
                   if (pbufh(8:8) .eq. 'E') then
                     pbufh(8:10) = pbufh(9:11)
                     pbufh(11:11) = ' '
                   endif
                 endif
                 if (pprnt) call prints (ww,hh,pbufh(1:11),1)
                 if (lproj) call fglColor3f (0.0,0.0,0.0)
               endif
             endif
           enddo
           if (it .ne. 0) call fglColor3f (0.0_4,0.0_4,0.0_4)
         endif
       endif
$endif
       return
       end subroutine display00
