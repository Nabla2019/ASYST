       subroutine display04
$if def,gui
!  Puts up display of couple mesh and associated data.
$if -def,ifortc,2
       use opengl_gl
       use opengl_glu
$if def,ifortc,1
       use ifopngl
       use hynmod
       implicit none
       include 'contrl.h'
       include 'comctl.h'
       include 'fast.h'
!
       real maxa,maxb,maxs,mina,mins
       real ft,vald,xyz(3)
       real hh,minss,maxss,obj(3),valy,ww
       real(4) col,col2
       integer i,in,it,j,lgl,np,vjno
$if -def,ifortc,1
       logical lproj
       logical pprnt,red
       character vjtype(0:1)*8,mft(2)*5
       character pbufh*94
$if -def,ifortc,3
c  The following logical statement should be removed when glu wrapper
c  for fgluProject is fixed.
       logical fgluProject
!
       data ft/0.3048/
       data vjtype/'  Volume','Junction'/
       data mft/' (m)',' (ft)'/
!
       if (intyp .ne. 2) then
!  Set scaling for finite element mesh.
         sinc(1) = 0.05*(cplmaxs - cplmins)
         mina = cplmins - sinc(1)
         maxa = cplmaxs + sinc(1)
!  Set projection.
         call fglMatrixMode (GL_PROJECTION)
         call fglLoadIdentity
         call fglOrtho (mina,maxa,mina,maxa,mina,maxa)
!  Set model mode.
         call fglMatrixMode (GL_MODELVIEW)
         call fglLoadIdentity
!
         call fglRotated (viewt(1),0.0,1.0,0.0)
         call fglRotated (viewe(1),1.0,0.0,0.0)
         call fglRotated (viewa(1),0.0,0.0,1.0)
!
         call fglTranslated (tx(1),ty(1),tz(1))
!
         call fglScaled (size(1),size(1),size(1))
         call fglGetIntegerv (GL_VIEWPORT,viewport)
         call fglGetDoublev (GL_MODELVIEW_MATRIX,mvmatrix)
         call fglGetDoublev (GL_PROJECTION_MATRIX,projmatrix)
!  Draw couple region with color algorithm showing temperature.
         call fglCullFace (GL_BACK)
         call fglShadeModel (GL_SMOOTH)
         call fglBegin (GL_QUADS)
         do j = 1,cplmaxj-1
           do i = cplimin(j),cplimax(j)-1
c            col = fa(cplindx2+cplnod(i,j)-1)/4800.0 + 0.2
c            call fglColor3f (col,0.0_4,0.0_4)
             col = fa(cplindx2+cplnod(i,j)-1)/5000.0
             col2 = 1.0_4 - col
             call fglColor3f (col,0.0_4,col2)
             call fglVertex2d (cplr(cplnod(i,j)),cplz(cplnod(i,j)))
c            col = fa(cplindx2+cplnod(i,j+1)-1)/4800.0 + 0.2
c            call fglColor3f (col,0.0_4,0.0_4)
             col = fa(cplindx2+cplnod(i,j+1)-1)/5000.0
             col2 = 1.0_4 - col
             call fglColor3f (col,0.0_4,col2)
             call fglVertex2d (cplr(cplnod(i,j+1)),
     &       cplz(cplnod(i,j+1)))
c            col = fa(cplindx2+cplnod(i+1,j+1)-1)/4800.0 + 0.2
c            call fglColor3f (col,0.0_4,0.0_4)
             col = fa(cplindx2+cplnod(i+1,j+1)-1)/5000.0
             col2 = 1.0_4 - col
             call fglColor3f (col,0.0_4,col2)
             call fglVertex2d (cplr(cplnod(i+1,j+1)),
     &       cplz(cplnod(i+1,j+1)))
c            col = fa(cplindx2+cplnod(i+1,j)-1)/4800.0 + 0.2
c            call fglColor3f (col,0.0_4,0.0_4)
             col = fa(cplindx2+cplnod(i+1,j)-1)/5000.0
             col2 = 1.0_4 - col
             call fglColor3f (col,0.0_4,col2)
             call fglVertex2d (cplr(cplnod(i+1,j)),
     &       cplz(cplnod(i+1,j)))
           enddo
         enddo
         call fglEnd
!  Draw node points.
         call fglColor3f (1.0_4,1.0_4,0.0_4)
         call fglLineWidth (1.0_4)
         call fglPointSize (5.0_4)
         call fglBegin (GL_POINTS)
         do i = 1,cplmaxnp
           call fglVertex2d (cplr(i),cplz(i))
         enddo
         call fglEnd
!  Draw finite element lines.
         do j = 1,cplmaxj
           call fglBegin (GL_LINE_STRIP)
           do i = cplimin(j),cplimax(j)
             call fglVertex2d (cplr(cplnod(i,j)),cplz(cplnod(i,j)))
           enddo
           call fglEnd
         enddo
         do i = 1,cplmaxi
           call fglBegin (GL_LINE_STRIP)
           do j = 1,cplmaxj
             call fglVertex2d (cplr(cplnod(i,j)),cplz(cplnod(i,j)))
           enddo
           call fglEnd
         enddo
!  Draw point at center of finite element.
         call fglColor3f (0.0_4,1.0_4,1.0_4)
         call fglPointSize (3.0_4)
         call fglBegin (GL_POINTS)
         do j = 1,cplmaxj-1
           do i = 1,cplmaxi-1
             call fglVertex2d (cpler(i,j),cplez(i,j))
           enddo
         enddo
         call fglEnd
         call fglColor3f (0.0_4,0.0_4,0.0_4)
!  Set screen coordinates for mouse hits and adding values to screen.
         do i = 1,cplmaxnp
$if -def,ifortc,2
           lproj = fgluProject(cplr(i),cplz(i),0.0,
     &     mvmatrix,projmatrix,viewport,obj(1),obj(2),obj(3))
$if def,ifortc,2
           lgl = fgluProject(cplr(i),cplz(i),0.0,
     &     mvmatrix,projmatrix,viewport,obj(1),obj(2),obj(3))
           cplww(:,i) = obj(1:2)
$if -def,ifortc,1
             if (.not.lproj) then
$if def,ifortc,1
             if (lgl .eq. GL_FALSE) then
               cplww(:,i) = -1
           endif
         enddo
         do j = 1,cplmaxj-1
           do i = 1,cplmaxi-1
$if -def,ifortc,3
             lproj = fgluProject(cpler(i,j),cplez(i,j),0.0,
     &       mvmatrix,projmatrix,viewport,obj(1),obj(2),obj(3))
             if (lproj) then
$if def,ifortc,3
             lgl = fgluProject(cpler(i,j),cplez(i,j),0.0,
     &       mvmatrix,projmatrix,viewport,obj(1),obj(2),obj(3))
             if (lgl .eq. GL_TRUE) then
               cpleww(:,i,j) = obj(1:2)
             else
               cpleww(:,i,j) = -1
             endif
           enddo
         enddo
       endif
!
       call displaytp
!  Print variable names being displayed.
       if (intyp .ne. 2) then
         pbufh = ' '
         if (cplvalt .ne. 0) then
           if (cplvalt .eq. 4) then
             write (pbufh(1:61),"('Variable shown is: ',a10,a)")
     &       vala(1),cpllabl(33:64)
           else
             write (pbufh(1:61),"('Variable shown is: ',a10)") vala(1)
           endif
           valy = hx - 40.0
           call prints (5.0,valy,pbufh(1:61),1)
         endif
$if def,rjw
!  Print highlighted point.
         if (isvv .ne. 0) then
           it = iand(hyn(isq)%glr(isvv)%opt,1)
           in = hyn(isq)%glr(isvv)%indx
           if (it == 0) then
             vjno = volno(in)
           else
             vjno = junno(in)
           endif
           pbufh(1:62) = ' '
           if (.not.valuep(1) .or. it.ne.iand(vjflag,1) .or.
     &     iand(vjflag,4).eq.0 .or. iand(vjflag,8).ne.0) then
             xyz = hyn(isq)%glr(isvv)%cxr
             if (unito) then
               in = 1
             else
               in = 2
               xyz = xyz/ft
             endif
             write (pbufh(1:62),"(a8,i10.9,3es13.5,a)")
     &       vjtype(it),vjno,xyz,mft(in)
           else
             vald = fa(vjdatax+in)
             if (.not.unito) then
               if (vjconv .ge. 0.0) then
                 vald = vald*vjconv
               else
                 vald = (vald + vjconv)*1.8
               endif
             endif
             write (pbufh(1:62),"(a8,i10.9,es12.4)")
     &       vjtype(it),vjno,vald
           endif
           call prints (5.0,10.0,pbufh(1:62),1)
         elseif (iand(vjflag,32) .ne. 0) then
           if (fnum .ge. 0) then
             write (pbufh(1:19),"(a9,a10)") vjtype(fnum),chfld2(2:10)
             call prints (5.0,10.0,pbufh(1:19),1)
           endif
         endif
$endif
!  Print watch value.
         if (iand(vjflag,128) .ne. 0) then
           pbufh = ' '
           write (pbufh(1:27),"('watch: ',a20)") wchfld
           if (iand(vjflag,256) .ne. 0) then
             vald = fa(wptr)
             if (.not.unito) then
               if (wconv .ge. 0.0) then
                 vald = vald*wconv
               else
                 vald = (vald + wconv)*1.8
               endif
             endif
             write (pbufh(28:94),"(es12.4,1x,a)") vald,wlabl(33:64)
           endif
           call prints (2.0,30.0,pbufh(1:94),1)
         endif
!  Print values.
         call fglColor3f (0.0_4,0.0_4,0.0_4)
         if (valuep(1) .and. cplvalt.gt.0) then
           select case (cplvalt)
           case (1,2,4)
             do j = 1,cplmaxj
               do i = cplimin(j),cplimax(j)
                 if (cplww(1,cplnod(i,j)).ge.0 .and.
     &           cplww(1,cplnod(i,j)).lt.iwx .and. 
     &           cplww(2,cplnod(i,j)).ge.0 .and.
     &           cplww(2,cplnod(i,j)).lt.ihx) then
                   ww = cplww(1,cplnod(i,j))
                   hh = cplww(2,cplnod(i,j))
                   select case (cplvalt)
                   case (1)
                     write (pbufh(1:5),"(i2,','i2)") i,j
                     in = 5
                     if (pbufh(4:4) .eq. ' ') then
                       in = 4
                       pbufh(4:4) = pbufh(5:5)
                     endif
                     if (pbufh(1:1) .eq. ' ') then
                       in = in - 1
                       pbufh(1:in) = pbufh(2:in+1)
                     endif
                     call prints (ww,hh,pbufh(1:in),1)
                   case (2)
                     write (pbufh(1:3),"(i3)") cplnod(i,j)
                     in = 3
                     if (pbufh(3:3) .eq. ' ') then
                       in = 2
                       pbufh(2:2) = pbufh(3:3)
                     endif
                     if (pbufh(1:1) .eq. ' ') then
                       in = in - 1
                       pbufh(1:in) = pbufh(2:in+1)
                     endif
                     call prints (ww,hh,pbufh(1:in),1)
                   case (4)
                     vald = fa(cplindx+cplnod(i,j)-1)
                     if (.not.unito) then
                       if (cpluconv .ge. 0.0) then
                         vald = vald*cpluconv
                       else
                         vald = (vald + cpluconv)*1.8
                       endif
                     endif
                     write (pbufh(1:5),"(f5.0)") vald
                     call prints (ww,hh,pbufh(1:5),1)
                   end select
                 endif
               enddo
             enddo
           case (3,5:10)
             call fglColor3f (0.0_4,1.0_4,1.0_4)
             it = 0
             do j = 1,cplmaxj-1
               do i = 1,cplmaxi-1
                 it = it + 1
                 if (cpleww(1,i,j).ge.0 .and.
     &           cpleww(1,i,j).lt.iwx .and. 
     &           cpleww(2,i,j).ge.0 .and.
     &           cpleww(2,i,j).lt.ihx) then
                   ww = cpleww(1,i,j)
                   hh = cpleww(2,i,j)
                   select case (cplvalt)
                   case (3)
                     write (pbufh(1:3),"(i3)") it
                     in = 3
                     if (pbufh(3:3) .eq. ' ') then
                       in = 2
                       pbufh(2:2) = pbufh(3:3)
                     endif
                     if (pbufh(1:1) .eq. ' ') then
                       in = in - 1
                       pbufh(1:in) = pbufh(2:in+1)
                     endif
                     call prints (ww,hh,pbufh(1:in),1)
                   case (5:10)
                     vald = fa(cplindx+it-1)
                     if (.not.unito) then
                       if (cpluconv .ge. 0.0) then
                         vald = vald*cpluconv
                       else
                         vald = (vald + cpluconv)*1.8
                       endif
                     endif
                     if (cplvalt .eq. 10) then
                       in = 5
                       write (pbufh(1:5),"(f5.0)") vald
                     else
                       write (pbufh(1:11),"(es11.3)") vald
                       in = 11
                       if (pbufh(8:8) .eq. 'E') then
                         in = 10
                         pbufh(8:10) = pbufh(9:11)
                       endif
                       if (pbufh(1:1) .eq. ' ') then
                         in = in - 1
                         pbufh(1:in) = pbufh(2:in+1)
                       endif
                     endif
                     call prints (ww,hh,pbufh(1:in),1)
                   end select
                 endif
               enddo
             enddo
             call fglColor3f (0.0_4,0.0_4,0.0_4)
           end select
         endif
       endif
$endif
       return
       end subroutine display04
