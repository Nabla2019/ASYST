*mlist
       subroutine display05
$if def,gui
!  Puts up SCDAP component information.
$if -def,ifortc,2
       use opengl_gl
       use opengl_glut
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod, only: intyp,itemnum,itemindx,hx,shroud,scdcmpno, 
     & cpllabl,cpluconv,winno
!
       use scdmod, only: scd21s, scd21
       use vreqsd
!
       use plottools
!
       implicit none
       include 'fast.h'
       include 'contrl.h'
       include 'scddat.h'
       include 'scdcom.h'
       include 'cpmdat.h'
       include 'ndxara.h'
       include 'debout.h'
       include 'hardpn.h'
       include 'intcom.h'
       include 'miscon.h'
       include 'nrcom.h'
       include 'scdout.h'
       include 'tblsp.h'
       include 'alcm.h'
       include 'iparm.h'
       include 'coupl.h'
       include 'slumpv.h'
       include 'uoxcom.h'
       include 'buntim.h'
       include 'plndat.h'
!
       real*8 cadct
       real*8, parameter :: eng=4.2992261e-4
       real*8, parameter :: ft3=35.314662
       real*8, parameter :: cnhtr=4.891949546e-5
       real*8, parameter :: psia=1.4503774e-4
       real*8, parameter :: xlb=2.204622622
       real valy
!  Counters
       integer ip,i,j,k 
!  Component number
       integer cmpnum

       real*8, pointer :: varbuf2(:,:),varbuf3(:,:,:)
!  Define generic variables for assigning variables with equivalence
       real*8, target, allocatable :: eqvar(:,:)
       character ilabl*9
       character :: pbuf0*14='(Enter number)'
       character :: pbuf1*100='Information for SCDAP component'
       character :: pbuf2*87
       character :: pbuf3*40='SCDAP COMPONENTS INFORMATION'
!  Vector for axial dependent variables
       character :: pbuf4*(22+26*ncomp)
!  Vector for nodal dependent variables
       character :: pbuf5*(22+26*naz)
       character :: lablb(2)*1,lablh(2)*9,lablm(2)*3,
     & lablp(2)*7,lablr(2)*7,lablt(2)*4,lablu(2)*3,lablum(2)*7,
     & lablus(2)*5,labld(2)*2,lablms(2)*5,lablht(2)*9,
     & labllh(2)*6
!
       data lablb/' ',' '/
       data lablh/'W/m3-K','Btu/ft3-F'/
       data lablm/'kg','lbm'/
       data lablms/'kg/s','lbm/s'/
       data lablp/'Pa','lbf/in2'/
       data lablr/'kg/m3','lbm/ft3'/
       data lablt/'K','degF'/
       data lablu/'J','Btu'/
       data lablum/'J/kg','Btu/lbm'/
       data lablus/'W','Btu/s'/
       data labld/'m','ft'/
       data lablht/'W/m2-K','Btu/ft2-F'/
       data labllh/'W/m','Btu/ft'/
!
       character*4   fpidx(17)
!
       data fpidx / 'I2  ', 'CsI ', 'CsOH', 'Te  ', 'HI  ', 'HTe ',
     *       'Cd  ', 'Ag  ', 'UO2 ', 'Sn  ', 'Fe  ', 'Ru  ', 'Ba  ',
     *       'Sb  ', 'Zn  ', 'Xe  ', 'Kr  '/
!
!  Test with scnreq
       real*8, pointer :: pckcodp,pckcodv(:)
       integer pckcod(2),vchng,subwin(2)
       logical tfail
!
!  Component type data
       character ::  cmptype(0:8)*16
       data cmptype(0)/'fuel rod'/ 
       data cmptype(1)/'control rod'/ 
       data cmptype(2)/'shroud'/ 
       data cmptype(3)/'bwr control rod'/ 
       data cmptype(4)/'fuel element'/ 
       data cmptype(5)/''/ 
       data cmptype(6)/'Simulator (cora)'/ 
       data cmptype(7)/''/ 
       data cmptype(8)/'bwr blade/box'/ 
!
       call fglMatrixMode (GL_MODELVIEW)
       call fglLoadIdentity
       call fglClear(GL_COLOR_BUFFER_BIT)
!
       call displaytp
!
       valy = hx - 40
!  Main messaje of SCDAP window
       call prints (4.0,valy,pbuf3(1:40),1)        
       valy = valy - 30
!
!  Select system units (SI or bt)
       if (unito) then
         ip = 1
       else
         ip = 2
       endif
!
       if (intyp .eq. 5) then
!
!  Obtain the real component number from itemnum
         cmpnum = itemnum / 10000 - 4000 
!
         if (itemnum .eq. 0) then
           pbuf1(35:48) = pbuf0
           call prints (2.0,valy,pbuf1(1:48),1)
         else
           write (pbuf1(33:100),"(i10.8,2x,'(',a,')',5x,'dt =',
     &     3es13.5,' s')") itemnum,cmptype(idcomp(cmpnum)),dt
           call prints (2.0,valy,pbuf1(1:100),1)
         endif
!
         if (itemindx .ne. 0) then
!
!  Call the subroutine for drawing SCDAP components
           call drawcomp(cmpnum)
!
           valy = valy - 20
!  Write the component info
           write (pbuf2,"('ACHDPN = ',f13.5,x,a)") achdpn(cmpnum),
     & lablt(ip)
           call prints (2.0,valy,pbuf2(1:87),1)
           valy = valy - 20
!
           write (pbuf2,"('PGAS   = ',f16.5,x,a)") pgas(cmpnum),
     & lablp(ip)
           call prints (2.0,valy,pbuf2(1:87),1)
           valy = valy - 20
!
           write (pbuf2,"('WDTQLP = ',f16.5,x,a)") wdtqlp(cmpnum),
     & lablu(ip)
           call prints (2.0,valy,pbuf2(1:87),1)
           valy = valy - 20
!
           write (pbuf2,"('ZBTCOH = ',f13.5,x,a)") zbtcoh(cmpnum),
     & labld(ip)
           call prints (2.0,valy,pbuf2(1:87),1)
           valy = valy - 20
!
           write (pbuf2,"('ZBTRUB = ',f13.5,x,a)") zbtrub(cmpnum),
     & labld(ip)
           call prints (2.0,valy,pbuf2(1:87),1)
           valy = valy - 20
!
           write (pbuf2,"('ZTPRUB = ',f13.5,x,a)") ztprub(cmpnum),
     & labld(ip)
           call prints (2.0,valy,pbuf2(1:87),1)
           valy = valy - 20
!
!  Fission products data by specie
           write (pbuf2,"('CGGIVY = ' )")
           call prints (2.0,valy,pbuf2(1:87),1)
           valy = valy - 20
           do i=1,17  ! FP species
             write (pbuf2,"(10x,a,5x,f13.5,x,a)") fpidx(i),
     & ggivy(i,cmpnum),lablm(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 15
           enddo
!  Close item index
         endif
!
!  Display tables with SCDAP core data
       elseif (intyp .eq. 6) then
         if (itemnum .eq. 0) then
           write (pbuf1(1:30),"('Select variable')")
           call prints (2.0,valy,pbuf1(1:30),1)
         else
           write (pbuf1(1:100),"('SCDAP core variables',10x,'dt =',
     & 3es13.5,' s.')") dt
           call prints (2.0,valy,pbuf1(1:60),1)
           valy = valy - 20
!  Display all the SCDAP core variables (itemindx = -1)
!  Select for the core variables
         i = 1 
         do 
           if (itemindx .ne. -1) i = itemindx
           select case (i)
           case(1)
             write (pbuf2,"(5x,'BGTH  = ',f13.5,x,a)")bgth,lablms(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(2)
             write (pbuf2,"(5x,'BGNHG = ',f16.5,x,a)")bgnhg,
     & lablus(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(3)
             write (pbuf2,"(5x,'BGMCT = ',f13.5,x,a)")bgmct,lablt(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(4)
             write (pbuf2,"(5x,'BGTFPRS = ',f13.5,x,a)")bgtfrs,lablm(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(5)
             write (pbuf2,"(5x,'BGTFPRN = ',f13.5,x,a)")bgtfrn,lablm(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(6)
             write (pbuf2,"(5x,'BGTHQ   = ',f16.5,x,a)")bgthq,
     & lablus(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(7)
             write (pbuf2,"(5x,'BGTHU = ',f13.5,x,a)")bgthu,lablms(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(8)
             write (pbuf2,"(5x,'BGTHQU = ',f13.5,x,a)")bgthqu,lablus(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(9)
             if (crucb .eq. 0.0) then
               write (pbuf2,"(5x,'CRUCB  =  no ')")
             elseif (crucb .eq. 1.0) then
               write (pbuf2,"(5x,'CRUCB  =  yes ')")
             endif
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(10)
             write (pbuf2,"(5x,'REPOOL = ',f13.5,x,a)")repool,labld(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(11)
             write (pbuf2,"(5x,'BGMAT = ',f13.5,x,a)")bgmat,lablt(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(12)
             write (pbuf2,"(5x,'TCORAV = ',f13.5,x,a)")tcorav,lablt(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(13)
             write (pbuf2,"(5x,'SHQIN = ',f13.5,x,a)")shqin,lablus(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case(14)
             write (pbuf2,"(5x,'SHQOUT = ',f13.5,x,a)")shqout,lablus(ip)
             call prints (2.0,valy,pbuf2(1:87),1)
             valy = valy - 20
           case default
           end select
!
           if (.not. shroud) then
             if (i.eq. 12 .or. itemindx .ne. -1) exit
           else
             if (i.eq. 14 .or. itemindx .ne. -1) exit
           endif
           i = i + 1
         enddo
!  Close itemnum !=0
         endif
!
!  Display tables with SCDAP axially dependent data
       elseif (intyp .eq. 7) then
         if (itemnum .eq. 0) then
           write (pbuf1(1:30),"('Select variable')")
           call prints (2.0,valy,pbuf1(1:30),1)
         else
           write (pbuf1(1:100),"('SCDAP axially dependent variables',
     & 10x,'dt =',3es13.5,' s.')") dt
           call prints (2.0,valy,pbuf1(1:60),1)
           valy = valy - 20
!  Table for axially dependent variables
!  First entry (first row): selected variable
!  Second entry (second row): component number: list of components (numbers)
!  Third - end (third-end rows) : axial nodes and quantities 
!
           write (pbuf1(1:100),"(2x,'Axially dependent variable',5x,a)")
     & t9c(itemindx)
           call prints (4.0,valy,pbuf1(1:100),1)
           valy = valy - 20
!  Set the dimension of pbuf4 depending on the number of components 
           write (pbuf4(1:22),"(x,'Component number',5x)")
           do i=1,ncomp
             write (pbuf4(22+(i-1)*26:22+i*26),"(9x,i8,9x)") scdcmpno(i)
           enddo
           call prints (2.0,valy,pbuf4(:),1)
           valy = valy - 20
!  Select the case
           select case (itemindx)
           case(1)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(ndax,ndcomp)) 
             eqvar = brchv
             ilabl = lablb(ip)
             varbuf2 => eqvar
           case(2)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(17,ndcomp)) 
             eqvar = ggivy 
             ilabl = lablb(ip)
             varbuf2 => eqvar
           case(3)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(ndax,ndcomp)) 
             eqvar = damlev 
             ilabl = labld(ip)
             varbuf2 => eqvar
           case(4)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(ndax,ndcomp)) 
             eqvar = dzfrcq 
             ilabl = labld(ip)
             varbuf2 => eqvar
           case(5)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(ndcomp,ndax)) 
             eqvar = effoxd 
             ilabl = lablms(ip)
             varbuf2 => eqvar
           case(6)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             eqvar = h2oxd2 
             ilabl = lablms(ip)
             varbuf2 => eqvar
           case(7)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             eqvar = hoop2 
             ilabl = lablb(ip)
             varbuf2 => eqvar
           case(8)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             eqvar = oxd2d 
             ilabl = labld(ip)
             varbuf2 => eqvar
           case(9)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             eqvar = rci2 
             ilabl = labld(ip)
             varbuf2 => eqvar
           case(10)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             eqvar = rco2 
             ilabl = labld(ip)
             varbuf2 => eqvar
           case(11)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             eqvar = rnalfo 
             ilabl = labld(ip)
             varbuf2 => eqvar
           case(12)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             eqvar = rnoxdo 
             ilabl = labld(ip)
             varbuf2 => eqvar
           case(13)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             eqvar = rcrst2 
             ilabl = labld(ip)
             varbuf2 => eqvar
           case(14)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             eqvar = rpel2
             ilabl = labld(ip)
             varbuf2 => eqvar
           case(15)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = ruliq((i-1)*naz+1:i*naz)
             enddo
             ilabl = labld(ip)
             varbuf2 => eqvar
           case(16)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = wfrosr((i-1)*naz+1:i*naz)
             enddo
             ilabl = lablm(ip)
             varbuf2 => eqvar
           case(17)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = wfrouo((i-1)*naz+1:i*naz)
             enddo
             ilabl = lablm(ip)
             varbuf2 => eqvar
           case(18)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = wfrozr((i-1)*naz+1:i*naz)
             enddo
             ilabl = lablm(ip)
             varbuf2 => eqvar
           case(19)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = wremsr((i-1)*naz+1:i*naz)
             enddo
             ilabl = lablm(ip)
             varbuf2 => eqvar
           case(20)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = wremuo((i-1)*naz+1:i*naz)
             enddo
             ilabl = lablm(ip)
             varbuf2 => eqvar
           case(21)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = wremzr((i-1)*naz+1:i*naz)
             enddo
             ilabl = lablm(ip)
             varbuf2 => eqvar
           case(22)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               do j=1,naz
                 eqvar(j,i) = scd21(j,i,1)%qscd
               enddo
             enddo
             ilabl = lablh(ip)
             varbuf2 => eqvar
           case(23)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               do j=1,naz
                 eqvar(j,i) = scd21(j,i,1)%qwgscd
               enddo
             enddo
             ilabl = lablh(ip)
             varbuf2 => eqvar
           case(24)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = qflux0((i-1)*ndax+1:(i-1)*ndax+naz)
             enddo
             ilabl = lablh(ip)
             varbuf2 => eqvar
           case(25)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = qfg0((i-1)*ndax+1:(i-1)*ndax+naz)
             enddo
             ilabl = lablht(ip)
             varbuf2 => eqvar
           case(26)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = hfixf((i-1)*ndax+1:(i-1)*ndax+naz)
             enddo
             ilabl = lablht(ip)
             varbuf2 => eqvar
           case(27)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             do i=1,ncomp
               eqvar(:,i) = hfixg((i-1)*ndax+1:(i-1)*ndax+naz)
             enddo
             ilabl = lablht(ip)
             varbuf2 => eqvar
           case(28)
             if (allocated(eqvar)) deallocate(eqvar)
             allocate(eqvar(naz,ncomp)) 
             eqvar = unuca 
             ilabl = labllh(ip)
             varbuf2 => eqvar
           end select 
!  Axial node loop
           do j=1,naz
!  Print axial quantities
             write (pbuf4(1:22),"(5x,'Axial node',x,i4,2x)") j
!  Component loop
             do i=1,ncomp
!  Special case for 'brchv', case(1). The value of varbuf2 have to be converted
!  in logical value (brchv = 0.0 -> no; brchv = 1.0 -> yes.
               if (itemindx .eq. 1) then
                 if(varbuf2(j,i) .eq. 0.0) then
                   write (pbuf4(22+(i-1)*26:22+i*26),"(12x,'no',12x)") 
                 else
                   write (pbuf4(22+(i-1)*26:22+i*26),"(12x,'yes',11x)") 
                 endif
               else
                 write (pbuf4(22+(i-1)*26:22+i*26),"(2x,f12.4,x,a,2x)")
     & varbuf2(j,i), ilabl
               endif 
             enddo
             call prints (2.0,valy,pbuf4(:),1)
             valy = valy - 20
           enddo
!
!  Deallocate eqvar (if allocated)
           if (allocated(eqvar)) deallocate(eqvar)
!  Close itemnum != 0
         endif
!
!  Display tables with SCDAP nodal dependent data
       elseif (intyp .eq. 8) then
         if (itemnum .eq. 0) then
           write (pbuf1(1:30),"('Select variable and component')")
           call prints (2.0,valy,pbuf1(1:30),1)
         else
           write (pbuf1(1:100),"('SCDAP nodal dependent variables',
     & 10x,'dt =',3es13.5,' s.')") dt
           call prints (2.0,valy,pbuf1(1:60),1)
           valy = valy - 20
!  Table for nodal dependent variables
!  First entry : selected variable and component
!  First row   : axial node numbers
!  Second - end   axial nodes (row) vs radial nodes (column)
!
           write (pbuf1(1:100),"(2x,'Nodal variable',5x,a,5x,
     & 'Component number',2x,i8)") t9d,scdcmpno(itemnum)
           call prints (4.0,valy,pbuf1(1:100),1)
           valy = valy - 20
           write (pbuf5(1:22),"(4x,'Node (ax/rad)',4x)")
!  Print the fist row
           do i=1,naz
             write (pbuf5(22+(i-1)*26:22+i*26),"(5x,'Axial node',2x,
     & i4,5x)") i
           enddo
           call prints (2.0,valy,pbuf5(:),1)
           valy = valy - 20
!  Radial nodes loop 
           do j=1,nrods2(1,itemnum)
             write (pbuf5(1:22),"(4x,'Radial node',x,i4,2x)") j
!  Axial nodes loop
             do i=1,naz
               write (pbuf5(22+(i-1)*26:22+i*26),"(2x,f10.2,x,a,2x)")
     & tcond3(j,i,itemnum), lablt(ip)
             enddo
             call prints (2.0,valy,pbuf5(:),1)
             valy = valy - 20
           enddo
!   
!  Close itemnum != 0
         endif
!
       endif
!
$endif
       return
       end subroutine display05
