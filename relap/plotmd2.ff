       module SciGraphDemo
!
$if def,plots
$if def,msnt
$if -def,ifortc,1
       use dflib
$if def,ifortc,1
       use ifqwin
$endif
       use scigraph
$endif
$if -def,plots,1
       integer junkjunk
!
$if def,plots
       contains
!
       subroutine plotmd2 (i,np,pdata,ml,nml,iopt,lablt,lablx,lably,
     & lablz)
!  Writes one time history plot of Relap data.
!
       implicit none
       integer i,iopt(2),ml,nml,np
       real*4 pdata(:,:,:)
       character lablt*10,lablx*25,lably*25(2),lablz*20(10)
!  i      Plot request number.
!  np     Number of x,y points for each quantity. 
!  pdata  Array containing data to be plotted, pdata(:,:,1:nml)
!         corresponding to left axis, pdata(:,:,nml+1,ml) corresponding
!         to right axis. pdata(1:2,:,:) contains x,y pairs;
!         pdata(:,1:np,:) contains points for each quantity.
!  ml     Number of quantities plotted on graph.
!  nml    Number of quantities using left axis, remaining quantities use
!         right axis.
!  iopt   Switch for linear or log axis for y axes.
!  lablt  Title of graph (conains plot request number).
!  lablx  Label for x axis.
!  lably  Labels for y axes.
!  lablz  Labels to idendify quantities.
!
       include 'genrl.h'
       record /GraphSettings/ simplegraph
       record /DataSettings/ simpledsets(10)    ! 10 data sets (ranges)
       record /AxisSettings/ simpleaxes(3)      !  3 axes
       integer isw,ix,nr,retcode
       record /windowconfig/ wc
       integer, parameter :: lcolors(10)=(/$CILIGHTMAGENTA,$CILIGHTCYAN,
     & $CILIGHTGREEN,$CILIGHTRED,$CILIGHTBLUE,$CIBROWN,$CIMAGENTA,
     & $CICYAN,$CIGREEN,$CIRED/)
       integer, parameter :: dlines(10)=(/$LTSOLID,$LTDASH,$LTDASHDOT,
     & $LTDASHDOTDOT,$LTDOT,$LTTHICKSOLID,$LTTHICKDASH,$LTTHICKDASHDOT,
     & $LTTHICKDASHDOTDOT,$LTTHICKDOT/)
       character labscr*6
!
       nr = ml - nml
       write (labscr,"('Gr.',i3)") i
       open(100+i,file='user',title=labscr)
!
       if (.not.GetWindowConfig(wc)) stop 'plotmd2-1, Window Not Open'
!
       retcode = GetGraphDefaults($GTXY,simplegraph)
       simplegraph.titleColor = $CIBLACK
       simplegraph.title2Color = $CIBLACK
       simplegraph.graphColor = $CIBLACK
       simplegraph.graphBgColor = $CIBRIGHTWHITE
       simplegraph.title = ctitle
       simplegraph.title2 = ptitle(1:38) // ctitle(82:102) // '     ' //
     & trim(lablt)
       simplegraph.setGraphMode = .FALSE.
       simplegraph.x2 = wc.numxpixels-1
       simplegraph.y2 = wc.numypixels-1
!
       if (nml .ne. 0) 
     & retcode = GetMultiDataDefaults(simplegraph,np,
     & pdata(:,:,1:nml),nml,simpledsets(1:nml))
       if (nr .ne. 0) 
     & retcode = GetMultiDataDefaults(simplegraph,np,
     & pdata(:,:,nml+1:ml),nr,simpledsets(nml+1:ml))
       simpledsets(1:ml).title = lablz(1:ml)
       simpledsets(1:ml).titleColor = $CIBLACK
       simpledsets(1:ml).markerType=$MKNONE
c      simpledsets(1:ml).markerColor=$CIYELLOW
       simpledsets(1:ml).lineType=dlines(1:ml)
       simpledsets(1:ml).lineColor=lcolors(1:ml)
!
       retcode = GetAxisMultiDefaults(simplegraph,ml,simpledsets,
     & $ATX,$AFLINEAR,simpleaxes(1))
       simpleaxes(1).title = lablx
       simpleaxes(1).titleColor=$CIBLACK
       simpleaxes(1).axisColor=$CIBLACK
       simpleaxes(1).tickColor=$CIBLACK
       simpleaxes(1).minorTickColor=$CIGREEN
       simpleaxes(1).tickType=$TTOUTSIDE
       simpleaxes(1).gridStyle=$GSMAJOR
       simpleaxes(1).gridLineType=$LTSOLID
       simpleaxes(1).gridColor=$CIBLACK
       call plotformt (simpleaxes(1))
!
       if (nml .ne. 0) then
         if (iopt(1) .eq. 0) then
           isw = $AFLINEAR
         else
           isw = $AFLOG10
         endif
         retcode = GetAxisMultiDefaults(simplegraph,nml,
     &   simpledsets(1:nml),$ATY,isw,simpleaxes(2))
         simpleaxes(2).title = lably(1)
         simpleaxes(2).titleColor=$CIBLACK
         simpleaxes(2).axisColor=$CIBLACK
         simpleaxes(2).tickColor=$CIBLACK
         simpleaxes(2).minorTickColor=$CIMAGENTA
         simpleaxes(2).tickType=$TTOUTSIDE
         simpleaxes(2).gridStyle=$GSMAJOR
         simpleaxes(2).gridLineType=$LTSOLID
         simpleaxes(2).gridColor=$CIBLACK
         call plotformt (simpleaxes(2))
       endif
!
       if (nr .ne. 0) then
         if (iopt(2) .eq. 0) then
           isw = $AFLINEAR
         else
           isw = $AFLOG10
         endif
         retcode = GetAxisMultiDefaults(simplegraph,nr,
     &   simpledsets(nml+1:ml),$ATY,isw,simpleaxes(3))
         simpleaxes(3).title = lably(2)
         simpleaxes(3).titleColor=$CIBLACK
         simpleaxes(3).axisColor=$CIBLACK
         simpleaxes(3).tickColor=$CIBLACK
         simpleaxes(3).minorTickColor=$CIMAGENTA
         simpleaxes(3).tickType=$TTOUTSIDE
         simpleaxes(3).gridStyle=$GSNONE
         simpleaxes(3).gridLineType=$LTSOLID
         simpleaxes(3).gridColor=$CIBLACK
         call plotformt (simpleaxes(3))
       endif
!
       if (nml .eq. ml) then
         ix = 2
       else
         ix = 3
       endif
       retcode = PlotGraph(simplegraph,ix,simpleaxes,ml)
       if (nml .ne. 0)
     & retcode = PlotMultiData(simplegraph,pdata(:,:,1:nml),nml,
     & simpledsets(1:nml),simpleaxes(1),simpleaxes(2))
       if (nr .ne. 0)
     & retcode = PlotMultiData(simplegraph,pdata(:,:,nml+1:ml),nr,
     & simpledsets(nml+1:ml),simpleaxes(1),simpleaxes(3))
       return
       end subroutine plotmd2
!
       subroutine plotformt (simpleaxes)
!  Determines number of digits in axis numbering.
!
       record /AxisSettings/ simpleaxes
!
       real(8) ymnmx
       integer ii1,ii2,ii3,ii4,ii5
       character hold*12,hold2*12
!
       write (hold2,"(f12.5)") simpleaxes.increment
       ii1 = verify(hold2,'0',.true.) - 7
       ymnmx = max(abs(simpleaxes.lowVal),abs(simpleaxes.highVal))
       write (hold,"(f12.5)") ymnmx
       ii2 = verify(hold,'0',.true.) - 7
       ii3 = max(ii1,ii2)
       ii4 = min(6,verify(hold,' ') - 1)
       simpleaxes.numDigits = max(min(ii3,ii4),0)
       return
       end subroutine plotformt
!
       subroutine plotquit
       implicit none
       integer i
!
       i = setexitqq(QWIN$EXITPERSIST)
       return
       end subroutine plotquit
!
$endif
       end module SciGraphDemo
