*mlist
       subroutine hynoded (gtypea)
!  Sets up main window and establishes permanent menus.
!
$if def,gui
$if -def,ifortc,2
       use opengl_gl
       use opengl_glut
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
$if def,rk3d,1
       use rkinc
       use scdmod 
       use vreqsd
       use voldat
       implicit none
!
!DEC$ ATTRIBUTES VALUE :: gtypea
$if -def,ifortc,1
       logical gtypea
$if def,ifortc,1
       integer gtypea
!
       integer, parameter :: kr=selected_real_kind(12,200)
       include 'fast.h'
       include 'comctl.h'
       include 'scntl.h'
       include 'scddat.h'
       include 'scdcom.h'
       include 'ndxara.h'
       include 'iparm.h'
!
       interface
!
       include 'display.h'
       include 'handlemenu.h'
       include 'key.h'
       include 'keysp.h'
       include 'mousehit.h'
       include 'reshape.h'
!
       end interface
!
       integer i,i1,j,jx,n
       external guinstruct
       character :: ntitle*18='Volume numbers-   '
       character :: scdtitle*21='Component numbers-   '
       character*10 vno
!
c      gtype = gtypea
       gtype = gtypea .ne. 0
       call glutInitWindowPosition (0,0)
       call glutInitWindowSize (700,700)
       call glutInitDisplayMode (ior(GLUT_DOUBLE,GLUT_RGB))
       call glutInit
       winno(1) = glutCreateWindow ('RELAP5-SCDAP'C)
       call init
       call glutReshapeFunc (reshape)
       call glutKeyboardFunc (key)
       call glutSpecialFunc (keysp)
       call glutMouseFunc (mousehit)
       if (infoonce) then
         infoonce = .false.
         call glutIdleFunc (guinstruct)
         infoonce = .false.
       else
         call glutIdleFunc (glutNullFunc)
       endif
       call glutDisplayFunc (display)
!
       smenu(1) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('Increase x          (X)',1)
       call glutAddMenuEntry ('Decrease x          (x)',2)
       call glutAddMenuEntry ('Increase y          (Y)',3)
       call glutAddMenuEntry ('Decrease y          (y)',4)
       call glutAddMenuEntry ('Increase z          (Z)',5)
       call glutAddMenuEntry ('Decrease z          (z)',6)
!
       smenu(2) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('Increase elevation  (UP)   ',7)
       call glutAddMenuEntry ('Decrease elevation  (DOWN) ',8)
       call glutAddMenuEntry ('Increase azimuthal  (LEFT) ',9)
       call glutAddMenuEntry ('Decrease azimuthal  (RIGHT)',10)
       call glutAddMenuEntry ('Increase twist      (T)    ',11)
       call glutAddMenuEntry ('Decrease twist      (t)    ',12)
!
       smenu(3) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('Increase        (S)    ',13)
       call glutAddMenuEntry ('Decrease        (s)    ',14)
!
       smenu(4) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('Toggle go/pause    (g)    ',15)
       call glutAddMenuEntry ('Toggle onestep     (o)    ',16)
       call glutAddMenuEntry ('Quit advancements  (Q)    ',17)
!
       smenu(5) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('Hydro. noding            (dhn)    ',19)
       call glutAddMenuEntry ('Vol.-vol. connections    (dvv)    ',20)
       call glutAddMenuEntry ('Vol.-htstr. connections  (dvh)    ',21)
       call glutAddMenuEntry ('Vol.information          (dvi)    ',22)
       if (scntrl(1))then 
         call glutAddMenuEntry ('SCDAP components data    (dsc)    ',33)
       endif  
       if (cplmaxnp .ne. 0) 
     & call glutAddMenuEntry ('Couple Noding            (dcn)    ',23)
!  Add display for tables
       call glutAddMenuEntry ('Interactive graphs       (dgr)    ',85)
!
       smenu(7) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('volno  ',100)
       call glutAddMenuEntry ('volerr ',101)
       do i = 1,35
         call glutAddMenuEntry (t2(i),i+101)
       enddo
       smenu(8) = glutCreateMenu (handlemenu)
       do i = 36,71
         call glutAddMenuEntry (t2(i),i+101)
       enddo
!
       smenu(9) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('junno  ',200)
       do i = 1,26
         call glutAddMenuEntry (t3(i),i+200)
       enddo
!
       smenu(6) = glutCreateMenu (handlemenu)
       call glutAddSubMenu ('Volumes-1  ',smenu(7))
       call glutAddSubMenu ('Volumes-2  ',smenu(8))
       call glutAddSubMenu ('Junctions  ',smenu(9))
!
       smenu(10) = glutCreateMenu (handlemenu)
       do i = 1,10
         call glutAddMenuEntry (cpltblv(i),84+i)
       enddo
!
       smenu(11) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('Increment   ',27)
       call glutAddMenuEntry ('Decrement   ',28)
!
       smenu(12) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('Volume    (fv{number})  ',29)
       call glutAddMenuEntry ('Junction  (fj{number})  ',30)
       smenu(13) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('Volume    (hv)  ',31)
       call glutAddMenuEntry ('Junction  (hj)  ',32)
!
!  SCDAP core variables
       smenu(14) = glutCreateMenu (handlemenu)
       do i = 1,numt9a
         call glutAddMenuEntry (t9a(i),34+i)
       enddo
!  Check for shroud components
       shroud = .false.
       do i=1,ncomp
         if (idcomp(i) .eq. 2) shroud = .true.
         if (shroud) exit
       enddo
       if (shroud) then
         call glutAddMenuEntry ('shqin',34+numt9a+1)
         call glutAddMenuEntry ('shqout',34+numt9a+2)
       endif
       call glutAddMenuEntry ('all : Plot all the variables. '
     & ,49) ! 
!
!  SCDAP axially dependent variables
       smenu(15) = glutCreateMenu (handlemenu)
       do i = 1,numt9c
         call glutAddMenuEntry (t9c(i),55+i)
       enddo
!
!  Build submenus for SCDAP component field for nodal variables
       if (allocated(scdcmpno)) deallocate(scdcmpno)
       allocate(scdcmpno(ncomp))
       n = (ncomp + 36)/37
       if (allocated(scdmenu)) deallocate (scdmenu)
       allocate (scdmenu(0:n))
       j = 1
       lp3: do i = 1,n
         scdmenu(i) = glutCreateMenu (handlemenu)
         do i1 = 1,37
           scdcmpno(j) = 4e+7 + 1e+4 * scd1(j)%cmpno
           write (vno,"(i8)") scdcmpno(j)
           call glutAddMenuEntry (vno,j+4100)
           if (j .ge. ncomp) exit lp3
           j = j + 1
         enddo
       enddo lp3
       scdmenu(0) = glutCreateMenu (handlemenu)
       do i = 1,n
         call glutAddSubMenu ('Components',scdmenu(i))
       enddo
!
!  SCDAP nodal variables
       smenu(16) = glutCreateMenu (handlemenu)
       call glutAddSubMenu (t9d,scdmenu(0))
!
!  Build submenus for SCDAP component number field
       if (allocated(scdcmpno)) deallocate(scdcmpno)
       allocate(scdcmpno(ncomp))
       n = (ncomp + 36)/37
       if (allocated(scdmenu)) deallocate (scdmenu)
       allocate (scdmenu(0:n))
       j = 1
       lp2: do i = 1,n
         scdmenu(i) = glutCreateMenu (handlemenu)
         do i1 = 1,37
           scdcmpno(j) = 4e+7 + 1e+4 * scd1(j)%cmpno
           write (vno,"(i10.8)") scdcmpno(j)
           call glutAddMenuEntry (vno,j+4000)
           if (j .ge. ncomp) exit lp2
           j = j + 1
         enddo
       enddo lp2
       scdmenu(0) = glutCreateMenu (handlemenu)
       do i = 1,n
         write (scdtitle(19:21),"(i3)") i
         call glutAddSubMenu (scdtitle,scdmenu(i))
       enddo
!
!  Build submenus for volume number field needed for volume connections
!  and information displays.
       n = (nvolsv + 36)/37
       if (allocated(snmenu)) deallocate (snmenu)
       allocate (snmenu(0:n))
       j = 1
       lp1: do i = 1,n
         snmenu(i) = glutCreateMenu (handlemenu)
         do i1 = 1,37
           write (vno,"(i10.9)") vol(j)%volno
           call glutAddMenuEntry (vno,j+1000)
           if (j .ge. nvolsv) exit lp1
           j = j + 1
         enddo
       enddo lp1
       snmenu(0) = glutCreateMenu (handlemenu)
       do i = 1,n
         write (ntitle(16:18),"(i3)") i
         call glutAddSubMenu (ntitle,snmenu(i))
       enddo
!  Prepare submenus for watch command.
!  Get general quantities.
       swmenu(1) = glutCreateMenu (handlemenu)
       j = 1
       do i = 1,10
         if (i .ne. 6)
     &   call glutAddMenuEntry (t1(i),250 + j)
         j = j + 1
       enddo
       do i = 1,2
         call glutAddMenuEntry (t11(i),250 + j)
         j = j + 1
       enddo
!  Get component quantities.
       swmenu(9) = glutCreateMenu (handlemenu)
       do i = 1,36
         call glutAddMenuEntry (t5(i),600 + i)
       enddo
!  Get volume quantities.
         swmenu(4) = glutCreateMenu (handlemenu)
         do i = 1,35
           call glutAddMenuEntry (t2(i),i+400)
         enddo
         swmenu(5) = glutCreateMenu (handlemenu)
         do i = 36,71
           call glutAddMenuEntry (t2(i),i+400)
         enddo
!  Get junction quantities.
         swmenu(6) = glutCreateMenu (handlemenu)
         do i = 1,26
           call glutAddMenuEntry (t3(i),i+500)
         enddo
!  Get reactor kinetic quantities.
       if (filid(21) .ne. 0.0_kr) then
$if def,rk3d,1
       if(.not. pt3dflag) then
         swmenu(2) = glutCreateMenu (handlemenu)
         do i = 1,7
           call glutAddMenuEntry (t6(i),270 + i)
         enddo
$if def,rk3d,1
       endif
       endif
!  Get heat structure quantities.
       if (filid(8) .ne. 0.0_kr) then
         swmenu(7) = glutCreateMenu (handlemenu)
         do i = 1,numt4
           call glutAddMenuEntry (t4(i),550 + i)
         enddo
       endif
!  Get reflood related quantities.
       if (filid(32) .ne. 0.0_kr) then
         swmenu(8) = glutCreateMenu (handlemenu)
         do i = 1,5
           call glutAddMenuEntry (t8(i),570 + i)
         enddo
       endif
!  Get Scdap general quantities.
       if (scntrl(1)) then
         swmenu(3) = glutCreateMenu (handlemenu)
         do i = 1,numt9a
           call glutAddMenuEntry (t9a(i),300 + i)
         enddo
!  Get Scdap component quantities.
         swmenu(10) = glutCreateMenu (handlemenu)
         j = 1
         do i = 1,7
           call glutAddMenuEntry (t9b(i),700 + j)
           j = j + 1
         enddo
         do i = 1,27
           call glutAddMenuEntry (t9c(i),700 + j)
           j = j + 1
         enddo
         call glutAddMenuEntry (t9d,700 + j)
         j = j + 1
         do i = 1,2
           call glutAddMenuEntry (t9e(i),700 + j)
           j = j + 1
         enddo
       endif
!  Get Couple quantities.
       if (cplmaxnp .ne. 0) then
         swmenu(11) = glutCreateMenu (handlemenu)
         j = 1
         do i = 1,28
           call glutAddMenuEntry (t10a(i),800 + j)
           j = j + 1
         enddo
!  Last variable of t10b block not included because logic in subroutine
!  scnreq does not impose limits on parameter. More work is needed to
!  fix that before finishing the menu entries for that last variable.
         do i = 1,10
           if (i.ne.2 .or. nspdeb.ne.0)
     &     call glutAddMenuEntry (t10b(i),800 + j)
           j = j + 1
         enddo
       endif
!  Prepare list of groupings of variable names.
       swmenu(0) = glutCreateMenu (handlemenu)
       call glutAddSubMenu ('General quantities',swmenu(1))
       call glutAddSubMenu ('Component quantities',swmenu(9))
       call glutAddSubMenu ('Volume-1 quantities',swmenu(4))
       call glutAddSubMenu ('Volume-2 quantities',swmenu(5))
       call glutAddSubMenu ('Junction quantities',swmenu(6))
       if (filid(8) .ne. 0.0_kr)
     & call glutAddSubMenu ('Heat structure quantities',swmenu(7))
       if (filid(32) .ne. 0.0_kr)
     & call glutAddSubMenu ('Reflood related quantities',swmenu(8))
$if -def,rk3d,2
       if (filid(21) .ne. 0.0_kr)
     & call glutAddSubMenu ('Reactor kinetics quantities',swmenu(2))
$if def,rk3d
       if (filid(21) .ne. 0.0_kr) then
         if(.not. pt3dflag) then
         call glutAddSubMenu ('Reactor kinetics quantities',swmenu(2))
         endif
       endif
$endif
       if (filid(27) .ne. 0.0_kr)
     & call glutAddMenuEntry ('Control system quantities',10000)
       if (scntrl(1)) then
         call glutAddSubMenu ('Scdap bundle quantities',swmenu(3))
         call glutAddSubMenu ('Scdap component quantities',swmenu(10))
       endif
       if (cplmaxnp .ne. 0) 
     & call glutAddSubMenu ('Lower plenum quantities',swmenu(11))
!  Submenu for graph window
!  Submenu grmenu(1) to manage the 2d graph window
!       grmenu(1) = glutCreateMenu (handlemenu)
!
!  Top menu for hydrodynamic node display.
       mmenu(1) = glutCreateMenu (handlemenu)
       call glutAddSubMenu ('Displacement  ',smenu(1))
       call glutAddSubMenu ('Rotation      ',smenu(2))
       call glutAddSubMenu ('Size          ',smenu(3))
       call glutAddMenuEntry ('Original view   (r)',26)
       call glutAddSubMenu ('Change system ',smenu(11))
       call glutAddSubMenu ('Find          ',smenu(12))
       call glutAddSubMenu ('Highlight     ',smenu(13))
       call glutAddSubMenu ('Display windows      ',smenu(5))
       call glutAddSubMenu ('Display values  (v{name}) ',smenu(6))
       call glutAddMenuEntry ('Toggle values display  (v) ',18)
       call glutAddSubMenu ('Watch  (w{name},[parameter]) ',swmenu(0))
       if (gtype) call glutAddSubMenu ('Advancement   ',smenu(4))
       call glutAddMenuEntry ('Pause/trip command     (p) ',50)
       call glutAddMenuEntry ('Escape command    (escape) ',25)
       call glutAddMenuEntry ('Exit window            (E) ',24)
       mmenu(0) = mmenu(1)
       call glutAttachMenu (GLUT_RIGHT_BUTTON)
!  Top menu for volume connections and information displays.
       mmenu(2) = glutCreateMenu (handlemenu)
       call glutAddSubMenu ('Volume number    (n{volno})',snmenu(0))
       call glutAddSubMenu ('Display windows      ',smenu(5))
       if (gtype) call glutAddSubMenu ('Advancement   ',smenu(4))
       call glutAddMenuEntry ('Pause/trip command     (p) ',50)
       call glutAddMenuEntry ('Escape command    (escape) ',25)
       call glutAddMenuEntry ('Exit window            (E) ',24)
!  Top menu for Couple mesh display.
       mmenu(3) = glutCreateMenu (handlemenu)
       call glutAddSubMenu ('Displacement  ',smenu(1))
       call glutAddSubMenu ('Rotation      ',smenu(2))
       call glutAddSubMenu ('Size          ',smenu(3))
       call glutAddMenuEntry ('Original view   (r)',26)
       call glutAddSubMenu ('Display windows     ',smenu(5))
       call glutAddSubMenu ('Display values  (v{name}) ',smenu(10))
       call glutAddMenuEntry ('Toggle values display  (v) ',18)
       call glutAddSubMenu ('Watch  (w{name},[parameter]) ',swmenu(0))
       if (gtype) call glutAddSubMenu ('Advancement   ',smenu(4))
       call glutAddMenuEntry ('Pause/trip command     (p) ',50)
       call glutAddMenuEntry ('Escape command    (escape) ',25)
       call glutAddMenuEntry ('Exit window            (E) ',24)
!  Top menu for pause\trip display.
       mmenu(4) = glutCreateMenu (handlemenu)
       call glutAddMenuEntry ('Delete all trips',51)
       call glutAddMenuEntry ('Delete trip               (-nnn)',52)
       call glutAddMenuEntry ('Add/modify trip',53)
       call glutAddMenuEntry ('Delete keyed input        (escape)',54)
       call glutAddMenuEntry ('Leave pause\trip display  (escape)',55)
!  Top menu for SCDAP information display.
       mmenu(5) = glutCreateMenu (handlemenu)
       call glutAddSubMenu ('SCDAP general data            (D{name}) '
     & ,smenu(14))
       call glutAddSubMenu ('SCDAP component information   (n{compno})'
     & ,scdmenu(0))
       call glutAddSubMenu ('SCDAP axially dependent data  (C{name})'
     & ,smenu(15))
       call glutAddSubMenu ('SCDAP nodal data            (N{name}{compno
     & })',smenu(16))
       call glutAddSubMenu ('Display windows    ',smenu(5))
       call glutAddSubMenu ('Advancement   ',smenu(4))
       call glutAddMenuEntry ('Pause/trip command     (p) ',50)
       call glutAddMenuEntry ('Escape command    (escape) ',25)
       call glutAddMenuEntry ('Exit window            (E) ',24)
!
!  Main loop of opengl
       call glutMainLoop
!
       return
       end subroutine hynoded
!
       subroutine hynodq
$if -def,ifortc,2
       use opengl_gl
       use opengl_glut
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
       implicit none
!
       runflg = 2
       call glutIdleFunc (glutNullFunc)
       call glutPostRedisplay
       return
       end subroutine hynodq
!
       subroutine init
!  Draws a sketch of the hydrodynamic noding.
$if -def,ifortc,1
       use opengl_gl
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
       use ufilef
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
       include 'fast.h'
!
       interface
!
       include 'scnreq.h'
!
       end interface
!
       real(kr), pointer :: pckcodp,pckcodv(:)
       integer i,is,pckcod(2),vchng
       logical tfail
!
       ncounto = 0
       displno = 0
       isq = 1
       runflg = 0
       isvv = 0
       vjflag = 0
       chindx = 0
       cplvalt = 0
       onestep = .false.
       gstop = .false.
       size = 1.0
       viewa = 0.0
       viewe = 0.0
       viewt = 0.0
       tx = 0.0
       ty = 0.0
       tz = 0.0
!  Get index for couple temperatures.
       if (cplmaxnp .ne. 0) then
         call scnreq (0,'tmpcou  ',101,1,pckcod,pckcodp,pckcodv,
     &   cpluconv,cpllabl,tfail)
         cplindx2 = pckcod(2)
       endif
!  Background to be cleared to white.
       call fglClearColor (1.0_4, 1.0_4, 1.0_4, 0.0_4)
       call fglShadeModel (GL_FLAT)
       call fglPixelStorei (GL_UNPACK_ALIGNMENT,1)
       return
       end subroutine init
!
       recursive subroutine guirun
!  Idle loop that advances simulation.
$if -def,ifortc,2
       use opengl_gl
       use opengl_glut
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
       implicit none
!
       include 'contrl.h'
!
       common /dgstepg/ mitime
       logical mitime
!  Counter for the number of windows
       integer i, winid
!
       call tran
       if (ngtrips .ne. 0) then
         call gevaltr
         if (gstop) onestep = .true.
       endif
       if (runflg .ne. 2) then
         if (gtype .and. onestep) then
           runflg = 0
           call glutIdleFunc (glutNullFunc)
         endif
         if (runflg.eq.0 .or. mitime .or. ncount.gt.ncounto + 5) then
!  Store the id of the current window
           winid = glutGetWindow()
!  Redisplay all the active windows
           do i = 1, nag + 1
             if (i == 1) then
               call glutSetWindow(winno(i))
             else
               call glutSetWindow(grwin(nag))
             endif
             call glutPostRedisplay
           enddo
!  Reset the active window
           call glutSetWindow(winid)
         endif
       endif
       return
       end subroutine guirun
!
       subroutine display
!  Calls appropriate display subroutine.
$if -def,ifortc,3
       use opengl_gl
       use opengl_glut
       use dfmt
$if def,ifortc,3
       use ifopngl
       use opengl_glut
       use ifmt
!
       use hynmod
       implicit none
!
       include 'contrl.h'
       external displaygr
!
       integer(int_ptr_kind()) thhndl,thrid
!
       ncounto = ncount
       call fglClear (GL_COLOR_BUFFER_BIT)
       select case (displno)
!  Hydrodynamic mesh display.
       case (0)
         call display00
!  Volume connections to volume display.
       case (1)
         call display01
!  Heat structure connections to volume display.
       case (2)
         call display02
!  Volume information display.
       case (3)
         call display03
!  Couple Mesh display.
       case (4)
         call display04
!  SCDAP component information display
       case (5)
         call display05
!!!  Volumetric plotting window
!!       case (6)
!!          call display06
       end select
!
       call fglFlush
       call glutSwapBuffers
!
       return
       end subroutine display
!
       subroutine reshape (w,h)
$if -def,ifortc,2
       use opengl_gl
       use opengl_glut
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
       implicit none
!
       integer w,h
!
       iwx = w
       wx = w
       ihx = h
       hx = h
!  Set current window
       call glutSetWindow(winno(1))
!
       call fglViewport (0,0,w,h)
       call glutPostRedisplay
       return
       end subroutine reshape
!
       subroutine mousehit (button,state,x,y)
!  Display volume/junction number if mouse is depressed on a volume or
!  a junction.
!
$if -def,ifortc,2
       use opengl_gl
       use opengl_glut
$if def,ifortc,2
       use ifopngl
       use opengl_glut
       use hynmod
       implicit none
       integer button,state,x,y
!
       include 'fast.h'
!
       integer hits,i,in,isv,it,ix,iy,mask
       logical mousedis
!
       ix = x
       iy = viewport(4) - y - 1
!
       hits = 0
       do i = 1,hyn(isq)%ntries
         if (iand(hyn(isq)%glr(i)%opt,2).eq.0 .or.
     &   iand(hyn(isq)%glr(i)%opt,4).ne.0) then
           if (iand(hyn(isq)%glr(i)%opt,8) .ne. 0) then
             if ((hyn(isq)%glr(i)%wxr(1) - ix)**2 +
     &       (hyn(isq)%glr(i)%wxr(2) - iy)**2 .lt. 49) then
               isv = i
               hits = hits + 1
             endif
           endif
         endif
       enddo
!
       mousedis = .false.
       if (hits == 1) then
         if (isv .ne. isvv) then
           isvv = isv
           mousedis = .true.
         endif
       else
         if (isvv .ne. 0) then
           mousedis = .true.
           isvv = 0
         endif
       endif
       if (mousedis) call glutPostRedisplay
       return
       end subroutine mousehit
*endif
*if -def,gui
       return
       end subroutine hynoded
       subroutine hynodq
       return
       end subroutine hynodq
*endif
