*mlist
       function simul(n,a,x,eps,indic,nrc)
c
c
c  Taken from the text by Carnahan, Luther, and Wilkes.
c
c  Cognizant engineer: rjw.
c
c      n      = order of the matrix a
c      a      = matrix
c      eps    = limit on maximum pivot (singular if max pivot < eps)
c      indic  = solution type
c             < 0, inverts matrix a in place
c             = 0  computes the n solutions x(1)...x(n)
c                    corresponding to the set of linear
c                    equations with augmented matrix of
c                    coefficients in the n by n+1 array a
c                    also computes the inverse as for indic < 0
c             > 0 the set of linear equations is
c                    solved but the inverse is not computed
c  The gauss-jordan complete elimination method is employed with the
c  maximum pivot strategy. Row and column subscripts of successive
c  pivot elements are saved in order in the irow and jcol arrays
c  respectively.
c      k     = the pivot counter
c      pivot = the algebraic value of the pivot element
c      max   = the number of columns in a
c      deter = the determinant of the coefficient matrix
c
c  The solutions are computed in the (n+1)th column of a and then
c  unscrambled and put in proper order in x(1)...x(n) using the pivot
c  subscript information available in the irow and jcol arrays. The
c  sign of the determinant is adjusted by determining if an odd or even
c  number of pairwise interchanges is required to put the elements of
c  the jord array in ascending sequence where jord(irow(i)) = jcol(i).
c  If the inverse is required, it is unscrambled in place using
c  y(1)...y(n) as temporary storage. The value of the determinant is
c  returned as the value of the function. Should the potential pivot of
c  largest magnitude be smaller in magnitude than eps, the matrix is
c  considered to be and a true zero is returned as the value of the
c  function.
c
       implicit none
       integer n,indic,nrc
       real simul,a(nrc,nrc),x(1),eps
c
       include 'ufiles.h'
c
       integer i,intch,ip1,irow(100),irowi,irowj,irowk,iscan,j,
     & jcol(100),jcoli,jcolj,jcolk,jord(100),jscan,jtemp,k,km1,max,nm1
       real aijck,deter,pivot,y(100)
c
       max    = n
       if (indic .ge. 0) max = n + 1
c                            is n larger than 100?
       if (n .gt. 100) then
         write (output, 800) n
  800  format ('0********error - matrix size in simul is greater than 10
     *0, it is ',i10)
         simul  = 0.0
         return
       endif
c  Begin elimination procedure.
       deter  = 1.0
       do k = 1, n
         km1    = k - 1
c  Search for the pivot element.
         pivot  = 0.0
         do i = 1, n
           loop1: do j = 1, n
c  Scan irow and jcol arrays for invalid pivot subscripts.
             if (k .ne. 1) then
               do iscan = 1, km1
                 do jscan = 1, km1
                   if (i.eq.irow(iscan) .or. j.eq.jcol(jscan))
     &             cycle loop1
                 enddo
               enddo
             endif
             if (abs(a(i,j)) .le. abs(pivot)) cycle loop1
             pivot   = a(i,j)
             irow(k) = i
             jcol(k) = j
           enddo loop1
         enddo
c  That selected pivot is larger than eps.
         if (abs(pivot) .le. eps) then
           simul  = 0.0
           return
         endif
c  Update the determinant value.
         irowk  = irow(k)
         jcolk  = jcol(k)
         deter  = deter * pivot
c  Normalize pivot row elements.
         do j = 1, max
           a(irowk,j) = a(irowk,j)/pivot
         enddo
c  Carry out elimination and develop inverse.
         a(irowk,jcolk) =1./pivot
         do i = 1, n
           aijck  = a(i,jcolk)
           if (i .ne. irowk) then
             a(i,jcolk) = -aijck / pivot
             do j = 1, max
               if (j .ne. jcolk) a(i,j) = a(i,j) - aijck * a(irowk,j)
             enddo
           endif
         enddo
       enddo
c  Order solution values (if any) and create jord array.
       do i=1,n
         irowi       = irow(i)
         jcoli       = jcol(i)
         jord(irowi) = jcoli
         if(indic .ge. 0) x(jcoli) = a(irowi,max)
       enddo
c  Adjust sign of determinant.
       intch  = 0
       nm1    = n - 1
       do i = 1, nm1
         ip1     = i + 1
         do j = ip1, n
           if (jord(j) .ge. jord(i)) cycle
           jtemp   = jord(j)
           jord(j) = jord(i)
           jord(i) = jtemp
           intch   = intch + 1
         enddo
       enddo
       if (((intch / 2) * 2) .ne. intch) deter = -deter
c  If indic is positive return with results.
   24  if (indic .le. 0) go to 26
         simul  = deter
         return
c  If indic is negative or zero, unscramble the inverse first by rows.
   26  do j = 1, n
         do i = 1, n
           irowi    = irow(i)
           jcoli    = jcol(i)
           y(jcoli) = a(irowi,j)
         enddo
         do i = 1, n
           a(i,j)  = y(i)
         enddo
       enddo
c  Then by columns.
       do i = 1, n
         do j = 1, n
           irowj    = irow(j)
           jcolj    = jcol(j)
           y(irowj) = a(i,jcolj)
         enddo
         do j = 1, n
           a(i,j) = y(j)
         enddo
       enddo
c  Return for indic negative or zero.
       simul  = deter
       return
       end
