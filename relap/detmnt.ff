*mlist
      subroutine detmnt(lj, a, result)
c
c
c  detmnt, a determinant solution...an optomized, double pivotal,
c  gaussian reduction from which the diagonal is the determinant
c  solution.
c
c  Cognizant engineer: dmk.
c
       implicit none
c
c *** arguments
c     lj         = size of the matrix
c     a          = matrix array elements
c     result     = log(answer)
       real a(4,4),result
       integer lj
c
c *** declarations
c
       real fu,gu,hu,jsign,kcycle,ksign,lsign,msign,nsign,resp,uct,
     & xct,yct
       integer i,icol,idg,irow,j,ja,jequal,kcol,kdg,kond,krow
c
      j          = lj
      ja         = j - 1
      lsign      = 1
      ksign      = 1
      resp       = 0.0
      if (j .le. 1) go to 22
      do 1 idg = 1, ja
        kdg        = idg + 1
   24   gu         = a(idg, idg)
        if (gu .eq. 0.0) go to 16
        if(abs(gu) .le. 99999999999999.) go to 18
        kcycle     = 2
        go to 21
   16   kcycle     = 1
   21   do 2 icol = idg, j
          kcol       = icol
          do 3 irow = idg, j
            krow       = irow
            if (kcycle .eq. 2) go to 9
            if (a(irow, icol) .ne. 0.0) go to 28
            go to 3
    9       xct        = abs(a(irow, icol))
            if ((xct .le. 99999999999999.) .and. (xct.ne.0.0)) go to 28
    3     continue
    2   continue
        if (kcycle .eq. 2) go to 18
        go to 19
   28   do 5 kond = 1, 2
          if ((kcol .eq. idg) .and. (kond.eq.1)) go to 5
          if ((krow .eq. idg) .and. (kond.eq.2)) go to 5
          do 6 i= idg, j
            if (kond .eq. 2) go to 8
            hu         = a(i, kcol)
            a(i, kcol) = a(i, idg)
            a(i, idg)  = hu
            go to 6
    8       hu         = a(krow, i)
            a(krow, i) = a(idg, i)
            a(idg, i)  = hu
    6     continue
          lsign      = -lsign
    5   continue
        go to 24
   18   uct = log(abs(gu))
        jsign      = sign(1.0, gu)
        do 10 irow = kdg, j
          hu         = a(irow, idg)
          if (hu .eq. 0.0) go to 10
          xct = log(abs(hu))
          msign      = sign(1.0, hu)
          if (abs(hu) .eq. abs(gu)) go to 25
          xct        = xct - uct
          jequal     = 1
          go to 26
   25     xct        = 0.0
          jequal     = 2
   26     msign      = jsign * msign
          a(irow, idg) = 0.0
          do 12 icol = kdg, j
            fu         = a(idg, icol)
            if (fu .eq. 0.0) go to 12
            if (jequal .eq. 2) go to 17
            yct = log(abs(fu))
            nsign      = sign(1.0, fu)
            yct        = xct + yct
            fu         = sign(exp(max(-675.84, min(yct, 741.67)))
     *                 ,      (msign * nsign))
            if (fu .eq. 0.0) go to 12
            go to 14
   17       fu         = fu * sign(1.0, msign)
   14       a(irow, icol) = a(irow, icol) - fu
   12     continue
   10   continue
        a(idg, 1)  = gu
        ksign      = sign(1.0, ksign * sign(1.0, jsign))
        resp       = resp + uct
    1 continue
   22 gu         = a(j, j)
      a(j, 1)    = gu
      if (gu .eq. 0.0) go to 19
      xct = log(abs(gu))
      nsign      = sign(1.0, gu)
      result     = resp + xct
      ksign      = sign(1.0, ksign*sign(1.0, lsign*sign(1.0, nsign)))
      go to 20
   19 a(1, 1)    = 0.0
      result     = -99999999999999.
      ksign      = 1
   20 return
      end
