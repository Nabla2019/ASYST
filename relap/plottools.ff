       module plottools
$if def,gui
!  Contains functions for plotting images in the display 3d 
!
       contains
!
       subroutine rotate (angle,iaxis,rmatrix)
!  Calculate the 3x3 rotation matrix generated by a rotation of
!  a specified angle about a specified axis. This rotation is 
!  thought of as rotating the coordinate system.
       real*8 angle, rmatrix(3,3)
       integer iaxis
!  angle -> angle of rotation (radians)
!  iaxis -> axis of rotation (X=1, Y=2, Z=3)
!  rmatrix -> resulting rotation matrix
!
!  Initialize rmatrix to zero
       rmatrix = 0
       select case(iaxis)
       case(1)
         rmatrix(1,1) = 1
         rmatrix(2,2) = cos(angle)
         rmatrix(2,3) = sin(angle)
         rmatrix(3,2) = -sin(angle)
         rmatrix(3,3) = cos(angle) 
       case(2)
         rmatrix(1,1) = cos(angle)
         rmatrix(1,3) = -sin(angle)
         rmatrix(2,2) = 1
         rmatrix(3,1) = sin(angle)
         rmatrix(3,3) = cos(angle) 
       case(3)
         rmatrix(1,1) = cos(angle)
         rmatrix(1,2) = sin(angle)
         rmatrix(2,1) = -sin(angle)
         rmatrix(2,2) = cos(angle)
         rmatrix(3,3) = 1 
       case default
       end select
!         
       return
       end subroutine rotate  
!
       subroutine polyvert(vert,c,r,n)
!  Set de vertex for a polygon of 'n' sides, centered in 'c' and
!  inscribed in a circumference of radius 'r'.     
         implicit none
!
         integer n,f
         real*8 r,vert(n,3),c(3)
         real, parameter :: pi = 4.d0*DATAN(1.d0)
!
         integer i
         real ang
!
         ang = 0.0 
!  Set the vertex coordinates in local coord. system and then
!  rotate the face of the polygon to the global coord. system.
!  Local coord. system: axe of cylinder z direction, horizontal
!  faces x direction, and vertical faces y direction.
!  Global coord. system: created by opengl orto function.
!
         do i=1,n
           if (i .gt. 1) ang = ang + 2*pi/n
           vert(i,1) = c(1) + r* cos(ang)  ! x
           vert(i,2) = c(2) + r* sin(ang)  ! y
           vert(i,3) = c(3)  ! z
         enddo        
!
       return
       end subroutine polyvert
!
       subroutine vectors(c1,c2,theta)
!  Calculate the angle between the vector formed by the centers
!  and the axis
         implicit none
!
         real*8 c1(3),c2(3),theta(3)
!  c1, c2 -> centers
!  theta  -> angles with coordinate axis
         integer i
         real*8 modu,su2,x(3),y(3),z(3),u(3)
!  mod -> module of the vector       
! 
         x = (/1,0,0/)
         y = (/0,1,0/)
         z = (/0,0,1/)
!
         su2 = 0.0
         do i=1,3
           u(i) = c2(i) - c1(i)
           su2 = su2 + u(i)**2
         enddo
         modu = sqrt(su2)       
!
         theta(1) = acos(dot_product(u,x)/modu)
         theta(2) = acos(dot_product(u,y)/modu)
         theta(3) = acos(dot_product(u,z)/modu)
!       
       return
       end subroutine vectors
!
       subroutine glcylinder(c,r,opt)
!  Creates a opengl cylinder
$if -def,ifortc,1
         use opengl_gl
$if def,ifortc,1
         use ifopngl
! 
         implicit none
!
         real*8 r(2),c(2,3)
         integer opt               
!  r -> vector with the radius of the two sides of cylinder.
!  c -> vector with the coordinates (x,y,z) of the two centers of the
!       inscribed circumferences.
!  opt -> option for draw exterior lines in the polygon (1) or not (0)
!       
         integer, parameter :: n = 20
         real*8, allocatable :: vertx(:,:,:)
         integer i,j 
!  n -> number of sides of polygon
!  vertx -> vertex of the polygon
!
!  Allocate vertex variable
         if (allocated(vertx)) deallocate(vertx)
         allocate(vertx(n,3,2))
!  Call polyvert for vertex
         call polyvert(vertx,c,r(1),n)
         call polyvert(vertx,c,r(2),n)
         call fglBegin(GL_QUAD_STRIP)
         do i=1,n
           do j=1,2
             if (i .ne. n) then
               call fglVertex3d(vertx(i,1,j),vertx(i,2,j),
     & vertx(i,3,j))  
               call fglVertex3d(vertx(i+1,1,j),vertx(i+1,2,j),
     & vertx(i+1,3,j))  
             else
               call fglVertex3d(vertx(i,1,j),vertx(i,2,j),
     & vertx(i,3,j))  
               call fglVertex3d(vertx(1,1,j),vertx(1,2,j),
     & vertx(1,3,j))  
             endif
           enddo
         enddo
         call fglEnd
!
       return
       end subroutine glcylinder
!
       subroutine drawcomp(cmpnum)
!  Display the scheme of SCDAP component
$if -def,ifortc,1
         use opengl_gl
$if def,ifortc,1
         use ifopngl
!
         use hynmod, only: iwx,ihx,maxv,minv,mloc
!!
         implicit none
!
!  Include header files with tcond3 variable of SCDAP
         include 'scddat.h'
         include 'scdcom.h'
         include 'cpmdat.h'
         include 'ndxara.h'
         include 'scdout.h'
!  Include for blade/box
         include 'cboilx.h'
         include 'blageo.h'
         include 'blinit.h'
         include 'axtrns.h'
         include 'cr2.h'
!  Arguments
         integer, intent (in) :: cmpnum
!
!  Local variables
!  Variables for scale the figures
         real scalew, scaleh, scaleh2
!  Axial and radial lenght 
         real, allocatable :: dz(:), dr(:), dr1(:)
         real :: rnodes(3)
!  rnodes -> number of nodes of each region
         integer irad, inode, jnode
         integer i, j, nn
!  Component type data
         character ::  cmptype(0:8)*16
         data cmptype(0)/'fuel rod'/ 
         data cmptype(1)/'control rod'/ 
         data cmptype(2)/'shroud'/ 
         data cmptype(3)/'bwr control rod'/ 
         data cmptype(4)/'fuel element'/ 
         data cmptype(5)/''/ 
         data cmptype(6)/'Simulator (cora)'/ 
         data cmptype(7)/''/ 
         data cmptype(8)/'bwr blade/box'/ 
!  Number of sides of circle and matrix for the vertex
         integer, parameter :: n=25
         real*8 vert(n,3), c(3), r
!  Max and min of plotted variable (change to global var)
!         real :: maxv, minv
!         integer :: mloc
!  Variable for store the color values (RGB)
         real :: red, green
!  Variable to store the values of color scale (real and char)
         real :: colval(5) 
         character :: coltxt*6
!  Variable to store text
         character :: txt*20
!  Width of the blade/box
         real :: dblade(2)
! 
! --------------------------------------------------------
!
!  Box for the color bar
         call fglShadeModel(GL_SMOOTH)
         call fglBegin (GL_POLYGON)
           call fglColor3f(1.0,1.0,0.0)
           call fglVertex3d(5/8.*iwx,1/10.*ihx,0.0)
           call fglVertex3d(5/8.*iwx,1.5/10.*ihx,0.0)
           call fglColor3f(1.0,0.0,0.0)
           call fglVertex3d(7/8.*iwx,1.5/10.*ihx,0.0)
           call fglVertex3d(7/8.*iwx,1/10.*ihx,0.0)
         call fglEnd
!  Line and line width
         call fglLineWidth(1.0)
         call fglColor3f(0.0,0.0,0.0)
         call fglBegin (GL_LINE_LOOP)
           call fglVertex3d(5/8.*iwx,1/10.*ihx,0.0)
           call fglVertex3d(5/8.*iwx,1.5/10.*ihx,0.0)
           call fglVertex3d(7/8.*iwx,1.5/10.*ihx,0.0)
           call fglVertex3d(7/8.*iwx,1/10.*ihx,0.0)
         call fglEnd
!  Legend with the variable plotted
         call prints(5/8.*iwx,1.75/10.*ihx,"Temperature (K)",1) 
!  Max and min of the variable plotted (temperature)
         j = iblabx(cmpnum)  ! control blade identifier
         if(TRIM(cmptype(idcomp(cmpnum))) .eq. 'bwr blade/box')then
           maxv = max(maxval(tbox(1:naz,1,iblabx(cmpnum))),
     & maxval(tcb3(1:naz,iblabx(cmpnum))),
     & maxval(tcb2(1:naz,iblabx(cmpnum))),
     & maxval(tcb1(1:naz,iblabx(cmpnum))))
           minv = min(minval(tbox(1:naz,1,iblabx(cmpnum))),
     & minval(tcb3(1:naz,iblabx(cmpnum))),
     & minval(tcb2(1:naz,iblabx(cmpnum))),
     & minval(tcb1(1:naz,iblabx(cmpnum))))
         else
           maxv = maxval(tcond3(1:nrods2(1,cmpnum),1:naz,cmpnum))
           minv = minval(tcond3(1:nrods2(1,cmpnum),1:naz,cmpnum))
         endif
!  Find the radial node with the max temperature (if repeated the less numbered)
         do inode=1,nrods2(1,cmpnum)
           do jnode=1,naz
             if(tcond3(inode,jnode,cmpnum) .ge. maxv) mloc=jnode
           enddo
         enddo
!  Scale the plotted variable
         do i=1,5
           colval(i) = minv + (i - 1)* (maxv - minv)/ 4.
         enddo
!  Looking for a better algorithm
         do i=1,5
           call fglBegin (GL_LINE_LOOP)
             call fglVertex3d(5/8.*iwx + (i - 1)* 1/16.*iwx,
     & 1/10.*ihx - 8,0.0)
             call fglVertex3d(5/8.*iwx + (i - 1)* 1/16.*iwx,
     & 1/10.*ihx,0.0)
           call fglEnd
!  Legend with the values of variables of the box
           write(coltxt(:),"(f6.1)") colval(i) 
           call prints(5/8.*iwx + (i - 1)* 1/16.*iwx,1/10.*ihx 
     & - 20,coltxt,1)
         enddo  
!  End of box
!
         select case(TRIM(cmptype(idcomp(cmpnum))))
!
         case('fuel rod', 'control rod', 'Simulator (cora)')
!  Scaling factors for fuel rods
           scalew = 1/4.* 1/ (1 - (iwx - 5*rco2(1,cmpnum))/ iwx)
           scaleh = 5/8.* 1/ ( 1 - (ihx - sum(dzcond(1:naz)))/ ihx)
!  Section floor (circles)
!  Call polyvert to obtain the vertex of circle
!  Center of the circles
           c(:) = (/ 5/8.*iwx+rco2(1,cmpnum)*scalew,
     & 7/8.*ihx-rco2(1,cmpnum)*scalew,0.0 /) 
!
!  Number of nodes of each region
!  Region 1 -> cladding
           rnodes(1) = nrods2(1,cmpnum) - nrcldi2(1,cmpnum)
!  Region 2 -> gap
           rnodes(2) = nrcldi2(1,cmpnum) - nrcond2(1,cmpnum)
!  Region 3 -> pellet
           rnodes(3) = nrcond2(1,cmpnum)
!           
!  Set the radial dimensions
           allocate(dr(nrods2(1,cmpnum)-1))
!  Pellet slices
           i = 1
           do nn=1,rnodes(3)-1
             if(i .eq. 1) then
               dr(i) = rpel2(1,cmpnum)/rnodes(3)
             else
               dr(i) = dr(i-1) + rpel2(1,cmpnum)/(rnodes(3)-1)
             endif
             i = i + 1
           enddo
!  Gap slices
           do nn=1,rnodes(2)
             dr(i) = dr(i-1) + (rci2(1,cmpnum) - rpel2(1,cmpnum))/
     & rnodes(2)
             i = i + 1
           enddo
!  Cladding slices
           do nn=1,rnodes(1)
             dr(i) = dr(i-1) + (rco2(1,cmpnum) - rci2(1,cmpnum))/
     & rnodes(1) 
             i = i + 1
           enddo
!
!  Draw the polygons and the lines
           do inode=1,nrods2(1,cmpnum)-1
!  Number of nodes of cladding
             r = dr(nrods2(1,cmpnum) - inode)* scalew
             call polyvert(vert,c,r,n)
!  Set the color of the radial region (cladding)
             green = (maxv - tcond3(nrods2(1,cmpnum)-inode,mloc,
     & cmpnum))/ (maxv - minv) 
             call fglColor3f(1.0,green,0.0)
!  Draw the polygon
             call fglBegin (GL_POLYGON)
             do i=1,n
               call fglVertex3d(vert(i,1),vert(i,2),vert(i,3))
             enddo
             call fglEnd
!  Draw the lines 
             if (inode .eq. nrcond2(1,cmpnum) .or.
     & inode .eq. nrcldi2(1,cmpnum) .or.
     & inode .eq. nrods2(1,cmpnum)-1) then
               call fglColor3f(1.0,1.0,1.0)
             else
               call fglColor3f(0.0,0.0,0.0)
             endif
             call fglBegin (GL_LINE_LOOP)
             do i=1,n
               call fglVertex3d(vert(i,1),vert(i,2),vert(i,3))
             enddo
             call fglEnd
           enddo
!
!  Section front (tetrahedrons)
!  Radial nodes
           allocate(dr1(2*nrods2(1,cmpnum)-2))
           dr1 = 0.
!  dr1(1) = 0.0 (orig.)
           i = 2
!  Cladding slices
           do nn=1,rnodes(1)
             dr1(i) = dr1(i-1) + (rco2(1,cmpnum) - rci2(1,cmpnum))/
     & rnodes(1) 
             i = i + 1
           enddo
!  Gap slices
           do nn=1,rnodes(2)
             dr1(i) = dr1(i-1) + (rci2(1,cmpnum) - rpel2(1,cmpnum))/
     & rnodes(2)
             i = i + 1
           enddo
!  Pellet slices
           do nn=1,rnodes(3)-1
             dr1(i) = dr1(i-1) + rpel2(1,cmpnum)/(rnodes(3)-1)
             i = i + 1
           enddo
!  Set the simetric lines
!  Pellet slices
           do nn=1,rnodes(3)-1
             if(nn .eq. 1) then
               i = i - 1
               dr1(i) = dr1(i) + rpel2(1,cmpnum)/(rnodes(3)-1)
             else
               dr1(i) = dr1(i-1) + rpel2(1,cmpnum)/(rnodes(3)-1)
             endif
             i = i + 1
           enddo
!  Gap slices
           do nn=1,rnodes(2)
             dr1(i) = dr1(i-1) + (rci2(1,cmpnum) - rpel2(1,cmpnum))/
     & rnodes(2)
             i = i + 1
           enddo
!  Cladding slices
           do nn=1,rnodes(1)
             dr1(i) = dr1(i-1) + (rco2(1,cmpnum) - rci2(1,cmpnum))/
     & rnodes(1) 
             i = i + 1
           enddo
!
!  Axial elevation
           allocate(dz(naz+1))
           dz = 0.
!  Loop over axial nodes
           do jnode=1,naz
             dz(jnode+1) = dz(jnode) + dzcond(jnode)
!  Loop over radial nodes 
             do inode=1,2*nrods2(1,cmpnum)-3
!  Set the color for the last line of the node
               if(inode .lt. nrods2(1,cmpnum)) then
                 green = (maxv - tcond3(nrods2(1,cmpnum)-inode, 
     & jnode,cmpnum))/ (maxv - minv)
               else
                 green = (maxv - tcond3(inode-nrods2(1,cmpnum)+2,
     & jnode,cmpnum))/ (maxv - minv)
               endif
               call fglColor3f(1.0,green,0.0)
               call fglBegin (GL_POLYGON)
                 call fglVertex3d(5/8.*iwx + (dr1(inode)+3*rco2(1,
     & cmpnum))* scalew, 1/4.*ihx + dz(jnode)*scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+(dr1(inode)+3*rco2(1,
     & cmpnum))* scalew, 1/4.*ihx + dz(jnode+1)*scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+(dr1(inode+1)+3*rco2(1,
     & cmpnum))* scalew, 1/4.*ihx + dz(jnode+1)*scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+(dr1(inode+1)+3*rco2(1,
     & cmpnum))* scalew, 1/4.*ihx + dz(jnode)*scaleh,0.0)
               call fglEnd
             enddo
           enddo
!
!  Black lines
           call fglColor3f(0.0,0.0,0.0)
!  Horizontal lines
           do jnode = 1, naz + 1
             call fglBegin (GL_LINE_LOOP)
               call fglVertex3d(5/8.*iwx+(dr1(1)+3*rco2(1,cmpnum))*
     & scalew, 1/4.*ihx + dz(jnode)*scaleh,0.0)
               call fglVertex3d(5/8.*iwx+(dr1(2*nrods2(1,cmpnum)-2)+3*
     & rco2(1,cmpnum))* scalew, 1/4.*ihx + dz(jnode)*scaleh,0.0)
             call fglEnd
           enddo
!  Vertical lines
           do inode = 1, 2*nrods2(1,cmpnum)-2
!  Black or white lines
             if (inode .eq. 1 .or. inode .eq. 2*nrods2(1,cmpnum)-2
     & .or. inode .eq. (1+rnodes(1)) .or. inode .eq. 
     & (1+rnodes(1)+rnodes(2)) .or. inode .eq. (2*nrods2(1,cmpnum)-3
     & -rnodes(1)) .or. inode .eq. (2*nrods2(1,cmpnum)-3-rnodes(1)-
     & -rnodes(2))) then
               call fglColor3f(0.0,0.0,0.0)
             else
               call fglColor3f(1.0,1.0,1.0)
             endif
             call fglBegin (GL_LINE_LOOP)
               call fglVertex3d(5/8.*iwx+(dr1(inode)+3*rco2(1,
     & cmpnum))* scalew, 1/4.*ihx + dz(1)*scaleh,0.0)
               call fglVertex3d(5/8.*iwx+(dr1(inode)+3*rco2(1,
     & cmpnum))* scalew, 1/4.*ihx + dz(naz+1)*scaleh,0.0)
             call fglEnd
           enddo
!  Black lines
           call fglColor3f(0.0,0.0,0.0)
!
!  Print the number of axial node represented by the radial section
         write(txt(:),"(a,3x,i2)") 'Axial node:', mloc  
         call prints(5/8.*iwx, 7/8.*ihx - 3*rco2(1,cmpnum)*scalew, 
     & TRIM(txt), 1) 
!
         case('shroud')
!  Scaling factors for fuel rods
           scalew = 1/4.* 1/ (1 - (iwx - (xcond3(nrods2(1,cmpnum),
     & 1,cmpnum) - xcond3(1,1,cmpnum)))/ iwx) 
           scaleh = 5/8.* 1/ ( 1 - (ihx - sum(dzcond(1:naz)))/ ihx)
!
!  Axial elevation
           allocate(dz(naz+1))
           dz = 0.
!  Loop over axial nodes
           do jnode = 1, naz
!  Loop over radial nodes
             dz(jnode+1) = dz(jnode) + dzcond(jnode)
             do inode = 1,nrods2(1,cmpnum) - 1
               call fglBegin (GL_POLYGON)
!  Set color for init segment
                 green = (tcond3(inode,jnode,cmpnum) - minv) 
     & / (maxv - minv)
                 call fglColor3f(1.0,green,0.0)
                 call fglVertex3d(5/8.*iwx+xcond3(inode,jnode,cmpnum)*
     & scalew,1/4.*ihx+dz(jnode)*scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+xcond3(inode,jnode,cmpnum)*
     & scalew,1/4.*ihx+dz(jnode+1)*scaleh,0.0)
!  Set color for final segment
                 green = (tcond3(inode,jnode,cmpnum) - minv) 
     & / (maxv - minv)
                 call fglColor3f(1.0,green,0.0)
                 call fglVertex3d(5/8.*iwx+xcond3(inode+1,jnode,cmpnum)*
     & scalew,1/4.*ihx+dz(jnode+1)*scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+xcond3(inode+1,jnode,cmpnum)*
     & scalew,1/4.*ihx+dz(jnode)*scaleh,0.0)
               call fglEnd 
             enddo
           enddo
!
!  Border lines
!  Set color to black
           call fglColor3f(0.0,0.0,0.0)
!  Horizontal lines
           do jnode = 1,naz + 1
             call fglBegin (GL_LINE_LOOP)
               call fglVertex3d(5/8.*iwx+xcond3(1,1,cmpnum)*
     & scalew,1/4.*ihx+dz(jnode)*scaleh,0.0)
               call fglVertex3d(5/8.*iwx+xcond3(nrods2(1,cmpnum),
     & 1,cmpnum)* scalew,1/4.*ihx+dz(jnode)*scaleh,0.0)
             call fglEnd
           enddo
!
!  Vertical lines
           do irad = 1,nrods2(1,cmpnum)
             call fglBegin (GL_LINE_LOOP)
               call fglVertex3d(5/8.*iwx+xcond3(irad,1,cmpnum)*
     & scalew,1/4.*ihx+dz(1)*scaleh,0.0)
               call fglVertex3d(5/8.*iwx+xcond3(irad,1,cmpnum)*
     & scalew,1/4.*ihx+dz(naz+1)*scaleh,0.0)
             call fglEnd
           enddo
!
         case('bwr control rod')
!
         case('fuel element')
!
         case('bwr blade/box')
!
!  Sumatory of distances of control blade
           j = iblabx(cmpnum)  ! control blade identifier
           dblade(1) = diab4c(j) + 2* thkssi(j) + 2* thkgap(j) +
     & 2* thksso(j) + xboxcb(j)/30.48 + xbox(j)/30.48
           dblade(2) = thkgap(j) + 2.* thksso(j) + nabrod(j)* 
     & (diab4c(j)+2*thkssi(j))
!
!  Set the radial dimensions of the bwr control blade
           if (allocated(dr)) deallocate(dr)
           allocate(dr(10))
           dr = 0.
           do i=2,10
             if(i .eq. 2)  dr(i) = dr(i-1) + xbox(j)/30.48
             if(i .eq. 3)  dr(i) = dr(i-1) + xboxcb(j)/30.48
             if(i .eq. 4)  dr(i) = dr(i-1) + thksso(j)
             if(i .eq. 5)  dr(i) = dr(i-1) + thkgap(j)
             if(i .eq. 6)  dr(i) = dr(i-1) + thkssi(j)
             if(i .eq. 7)  dr(i) = dr(i-1) + diab4c(j)
             if(i .eq. 8)  dr(i) = dr(i-1) + thkssi(j)
             if(i .eq. 9)  dr(i) = dr(i-1) + thkgap(j)
             if(i .eq. 10)  dr(i) = dr(i-1) + thksso(j)
           enddo
!  Scaling factors for fuel rods
           scalew = 1/4.* 1/ (1 - (iwx - 3*dblade(1))/ iwx)
           scaleh = 5/8.* 1/ ( 1 - (ihx - sum(dzcond(1:naz)))/ ihx)
           scaleh2 = 5/8.* 1/ ( 1 - (ihx - dblade(2) )/ ihx)
!
!  Draw the radial section
!  Print a general box for the control blade
           do i=1,2
             if(i .eq. 1) then
!  Set color to blue
               call fglColor3f(0.0,0.0,1.0)
               call fglBegin (GL_POLYGON)
             else
!  Set color to black
               call fglColor3f(0.0,0.0,0.0)
               call fglBegin (GL_LINE_LOOP)
             endif
               call fglVertex3d(5/8.*iwx,1/4.*ihx,0.0)
               call fglVertex3d(5/8.*iwx+dblade(1)*scalew,1/4.*ihx,0.0)
               call fglVertex3d(5/8.*iwx+dblade(1)*scalew,1/4.*ihx +
     & dblade(2)*scaleh2,0.0)
               call fglVertex3d(5/8.*iwx,1/4.*ihx+dblade(2)*scaleh2,0.0)
             call fglEnd
           enddo
!
!  Box wall
           green = (tbox(jnode,1,j) - minv)/ (maxv - minv) 
           do i=1,2
             if(i .eq. 1) then
               call fglColor3f(1.0,green,0.0)
               call fglBegin (GL_POLYGON)
             else
!  Set color to black for the lines
               call fglColor3f(0.0,0.0,0.0)
               call fglBegin (GL_LINE_LOOP)
             endif
               call fglVertex3d(5/8.*iwx,1/4.*ihx,0.0)
               call fglVertex3d(5/8.*iwx+xbox(j)/30.48*scalew,1/4.*ihx
     & ,0.0)
               call fglVertex3d(5/8.*iwx+xbox(j)/30.48*scalew,1/4.*ihx +
     & dblade(2)*scaleh2,0.0)
               call fglVertex3d(5/8.*iwx,1/4.*ihx+dblade(2)*scaleh2,0.0)
             call fglEnd
           enddo
!  Blade sheath
           green = (tcb3(jnode,j) - minv)/ (maxv - minv) 
           do i=1,6
             if(i .eq. 1 .or. i .eq. 3 .or. i .eq. 5) then
               call fglColor3f(1.0,green,0.0)
               call fglBegin (GL_POLYGON)
             else
!  Set color to black for the lines
               call fglColor3f(0.0,0.0,0.0)
!               if(i .ne. 6) then
                 call fglBegin (GL_LINE_LOOP)
!               else
!                 call fglBegin (GL_LINE)
!               endif
             endif
             if(i .le. 2) then 
!  First lateral face of sheath
               call fglVertex3d(5/8.*iwx + (xbox(j) + xboxcb(j))/30.48*
     & scalew,1/4.*ihx,0.0)
               call fglVertex3d(5/8.*iwx + ((xbox(j) + xboxcb(j))/30.48 
     & + thksso(j))* scalew,1/4.*ihx,0.0)
               call fglVertex3d(5/8.*iwx + ((xbox(j) + xboxcb(j))/30.48
     & + thksso(j))* scalew,1/4.*ihx+dblade(2)*scaleh2,0.0)
               call fglVertex3d(5/8.*iwx + (xbox(j) + xboxcb(j))/30.48*
     & scalew,1/4.*ihx+dblade(2)*scaleh2,0.0)
               call fglEnd
             elseif(i .le. 4)then
!  Second lateral face of sheath
               call fglVertex3d(5/8.*iwx + (dblade(1) - thksso(j))*
     & scalew,1/4.*ihx,0.0)
               call fglVertex3d(5/8.*iwx + dblade(1)* scalew,
     & 1/4.*ihx,0.0)
               call fglVertex3d(5/8.*iwx + dblade(1)* scalew,
     & 1/4.*ihx+dblade(2)*scaleh2,0.0)
               call fglVertex3d(5/8.*iwx + (dblade(1) - thksso(j))*
     & scalew,1/4.*ihx+dblade(2)*scaleh2,0.0)
               call fglEnd
             else
!  Upper face of sheath
               call fglVertex3d(5/8.*iwx + ((xbox(j) + xboxcb(j))/30.48 
     & + thksso(j))* scalew,1/4.*ihx+dblade(2)*scaleh2,0.0)
               call fglVertex3d(5/8.*iwx + ((xbox(j) + xboxcb(j))/30.48 
     & + thksso(j))*scalew,1/4.*ihx+(dblade(2)-thksso(j))*scaleh2,0.0)
               call fglVertex3d(5/8.*iwx + (dblade(1) - thksso(j))* 
     & scalew,1/4.*ihx+(dblade(2) - thksso(j))*scaleh2,0.0)
               call fglVertex3d(5/8.*iwx + (dblade(1) - thksso(j))* 
     & scalew,1/4.*ihx+dblade(2)*scaleh2,0.0)
               call fglEnd
             endif 
           enddo
!
!  Absorber tubes (polygons)
           do nn=1,nabrod(j)
!  Cladding
             green = (tcb2(jnode,j) - minv)/ (maxv - minv) 
             call fglColor3f(1.0,green,0.0)
             c(:) = (/ 5/8.* iwx + (dblade(1) - thksso(j) - thkgap(j) -
     & thkssi(j) - diab4c(j)/ 2.)* scalew, 1/4.* ihx + ((nn-1)*
     & (diab4c(j) + 2* thkssi(j)) + diab4c(j)/2. + thkssi(j))* scaleh2,
     & 0.0 /)
!  Number of nodes of cladding
             r = (diab4c(j)/ 2. + thkssi(j))* scaleh2
             call polyvert(vert,c,r,n)
!  Draw the polygon
             call fglBegin (GL_POLYGON)
             do i=1,n
               call fglVertex3d(vert(i,1),vert(i,2),vert(i,3))
             enddo
             call fglEnd
!  Draw the lines
!  Set color to black for the lines
             call fglColor3f(0.0,0.0,0.0)
             call fglBegin (GL_LINE_LOOP)
             do i=1,n
               call fglVertex3d(vert(i,1),vert(i,2),vert(i,3))
             enddo
             call fglEnd
!  Absorber material
             green = (tcb1(jnode,j) - minv)/ (maxv - minv) 
             call fglColor3f(1.0,green,0.0)
!  Number of nodes of cladding
             r = diab4c(j)/ 2.* scaleh2
             call polyvert(vert,c,r,n)
!  Draw the polygon
             call fglBegin (GL_POLYGON)
             do i=1,n
               call fglVertex3d(vert(i,1),vert(i,2),vert(i,3))
             enddo
             call fglEnd
!  Draw the lines
!  Set color to black for the lines
             call fglColor3f(0.0,0.0,0.0)
             call fglBegin (GL_LINE_LOOP)
             do i=1,n
               call fglVertex3d(vert(i,1),vert(i,2),vert(i,3))
             enddo
             call fglEnd
           enddo
!
!  Draw the axial section
!  Set the axial lenght vector
           if(allocated(dz)) deallocate(dz)
           allocate(dz(naz+1))
           dz = 0.
           do i=1,naz
             dz(i+1) = dz(i) + dzcond(i)
           enddo
!  Draw the polygons
           do jnode = 1,naz
             do inode = 1,10-1
!  Set the color
!  BC4 Absorber 
               if(inode .eq. 6) then 
                 green = (tcb1(jnode,j) - minv)/ (maxv - minv) 
                 call fglColor3f(1.0,green,0.0)
!  Absorber rods
               elseif (inode .eq. 5 .or. inode .eq. 7) then
                 green = (tcb2(jnode,j) - minv)/ (maxv - minv) 
                 call fglColor3f(1.0,green,0.0)
!  Blade sheath
               elseif (inode .eq. 3 .or. inode .eq. 9) then
                 green = (tcb3(jnode,j) - minv)/ (maxv - minv) 
                 call fglColor3f(1.0,green,0.0)
!  Channel box
               elseif (inode .eq. 1) then
                 green = (tbox(jnode,1,j) - minv)/ (maxv - minv) 
                 call fglColor3f(1.0,green,0.0)
!  Other nodes
               else
                 call fglColor3f(0.0,0.0,1.0)
               endif
               call fglBegin (GL_POLYGON)
                 call fglVertex3d(5/8.*iwx+(2*dblade(1)+dr(inode))
     & * scalew,1/4.*ihx + dz(jnode)* scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+(2*dblade(1)+dr(inode+1))
     & * scalew,1/4.*ihx + dz(jnode)* scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+(2*dblade(1)+dr(inode+1))
     & * scalew,1/4.*ihx + dz(jnode+1)* scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+(2*dblade(1)+dr(inode))
     & * scalew,1/4.*ihx + dz(jnode+1)* scaleh,0.0)
               call fglEnd
             enddo
           enddo
!  Draw the lines
           do jnode = 1,naz
             do inode = 1,10-1
!  Set the color to black
               call fglColor3f(0.0,0.0,0.0)
               call fglBegin (GL_LINE_LOOP)
                 call fglVertex3d(5/8.*iwx+(2*dblade(1)+dr(inode))
     & * scalew,1/4.*ihx + dz(jnode)* scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+(2*dblade(1)+dr(inode+1))
     & * scalew,1/4.*ihx + dz(jnode)* scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+(2*dblade(1)+dr(inode+1))
     & * scalew,1/4.*ihx + dz(jnode+1)* scaleh,0.0)
                 call fglVertex3d(5/8.*iwx+(2*dblade(1)+dr(inode))
     & * scalew,1/4.*ihx + dz(jnode+1)* scaleh,0.0)
               call fglEnd
             enddo
           enddo
         case default
         end select        
!
!  Deallocations  
         if(allocated(dz)) deallocate(dz)
         if(allocated(dr)) deallocate(dr)
         if(allocated(dr1)) deallocate(dr1)
!  Set color to black
         call fglColor3f(0.0,0.0,0.0)
!
         return
         end subroutine drawcomp
!
$endif
       end module plottools
