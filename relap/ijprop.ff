*mlist
       subroutine ijprop
c  Computes junction properties as part of input initialization.
c
c  Coginznant engineer: rjw.
c
c  Modified for new hse model by W.M.Bryce, AEEW. April 1989.
c
       use tstpctc
       implicit none
       include 'fast.h'
       include 'cmpdat.h'
       include 'comctl.h'
       include 'contrl.h'
       include 'jundat.h'
       include 'separ.h'
       include 'statec.h'
       include 'ufiles.h'
       include 'voldat.h'
c
c  Local variables.
       integer i,i1,ii,ik,il,j,jx,k,kc,kc2,kf,kg,l,lc,lc2,n,nj,nx,
     & m,iter
       integer ivbot,ivtop,jupdw,ilvtp,ilvbt
       real avev,dzzzz,rrho,tvar1,tvar2,vel,voidfl,voidgl
       real velfln,velgln,vodglo,vodflo,test
       real fctr
       logical wflow
c
       i = filndx(5)
       n = filndx(3)
c  Outer component loop.
       do 2000 nx=1,ncmps(n)
         if (cmptyp(n) .ne. 0) then
           nj = njc(n)
           if (nj .ne. 0) then
             wflow = iand(cmpopt(n),1) .ne. 0
c  Loop over junctions.
             do 1000 jx=1,nj
               if (iand(jc(i),128) .ne. 0) then
c  Get cell index of volumes connected to junction.
                 k = max(ij1vn(i)-1,0)*ivskp + filndx(4)
                 kc = iand(ishft(jcex(i),-12),7)
                 kc2 = k + kc
                 kc = k + ishft(kc,-1)
                 l = max(ij2vn(i)-1,0)*ivskp + filndx(4)
                 lc = iand(ishft(jcex(i),-9),7)
                 lc2 = l + lc
                 lc = l + ishft(lc,-1)
c  Calculation of junction values of cell quantities.
c  Donor cell values are used.
c  Liquid.
                 vodfjr(i) = 1.0
                 vodgjr(i) = 1.0
                 if (velfj(i) .gt. 0.0 .or.
     &           (velfj(i).eq.0.0 .and. p(k).gt.p(l))) then
                   rhofj(i) = rhof(k)
                   voidfj(i) = voidf(k)
                   ufj(i) = uf(k)
                   kf = k
                 elseif (velfj(i) .lt. 0.0 .or.
     &           (velfj(i).eq.0.0 .and. p(k).lt.p(l))) then
                   rhofj(i) = rhof(l)
                   voidfj(i) = voidf(l)
                   ufj(i) = uf(l)
                   kf = l
                 else
                   rhofj(i) = 0.5*(rhof(k) + rhof(l))
                   rrho = 0.5/rhofj(i)
                   voidfj(i) = rrho*(voidf(k)*rhof(k) + voidf(l)*
     &             rhof(l))
                   ufj(i) = rrho*(rhof(k)*uf(k) + rhof(l)*uf(l))
                   kf = l
                 endif
                 if ((chngno(13) .or. chngno(66)) .and.
     &               floreg(k).eq.13.0) then
                   voidfj(i) = voidf(l)
                   if (voidf(kf).gt.0.0 .and. voidf(kf).lt.1.0)
     &             vodfjr(i) = voidfj(i)/voidf(kf)
                 endif
                 if ((chngno(13) .or. chngno(66)) .and.
     &                floreg(l).eq.13.0) then
                   voidfj(i) = voidf(k)
                   if (voidf(kf).gt.0.0 .and. voidf(kf).lt.1.0)
     &             vodfjr(i) = voidfj(i)/voidf(kf)
                 endif
c  Vapor.
                 if (velgj(i) .gt. 0.0 .or.
     &           (velgj(i).eq.0.0 .and. p(k).gt.p(l))) then
                   rhogj(i) = rhog(k)
                   voidgj(i) = voidg(k)
                   ugj(i) = ug(k)
                   qualaj(i) = quala(k)
                   if (noncn .ne. 0) then
                     do i1 = 1,noncn
                       ii = i + i1
                       ik = k + i1
                       qualnj(ii-1) = qualan(ik-1)
                     enddo
                   endif
                   kg = k
                 elseif (velgj(i) .lt. 0.0 .or.
     &           (velgj(i).eq.0.0 .and. p(k).lt.p(l))) then
                   rhogj(i) = rhog(l)
                   voidgj(i)  = voidg(l)
                   ugj(i)  = ug(l)
                   qualaj(i) = quala(l)
                   if (noncn .ne. 0) then
                     do i1 = 1,noncn
                       ii = i + i1
                       il = l + i1
                       qualnj(ii-1) = qualan(il-1)
                     enddo
                   endif
                   kg = l
                 else
                   rhogj(i) = 0.5*(rhog(k) + rhog(l))
                   rrho = 0.5/rhogj(i)
                   voidgj(i) = rrho*(voidg(k)*rhog(k) + voidg(l)*
     &             rhog(l))
                   ugj(i) = rrho*(rhog(k)*ug(k) + rhog(l)*ug(l))
                   qualaj(i) = rrho*(rhog(k)*quala(k) + rhog(l)*
     &             quala(l))
                   if (noncn .ne. 0) then
                     do i1 = 1,noncn
                       ii = i + i1
                       ik = k + i1
                       il = l + i1
                       qualnj(ii-1) = rrho*(rhog(k)*qualan(ik-1) +
     &                 rhog(l)*qualan(il-1))
                     enddo
                   endif
                   kg = l
                 endif
                 if ((chngno(13) .or. chngno(66)) .and.
     &                floreg(k).eq.13.0) then
                   voidgj(i) = voidg(l)
                   if (voidg(kg).gt.0.0 .and. voidg(kg).lt.1.0)
     &             vodgjr(i) = voidgj(i)/voidg(kg)
                 endif
                 if ((chngno(13) .or. chngno(66)) .and.
     &                floreg(l).eq.13.0) then
                   voidgj(i) = voidg(k)
                   if (voidg(kg).gt.0.0 .and. voidg(kg).lt.1.0)
     &             vodgjr(i) = voidgj(i)/voidg(kg)
                 endif
c  Modify junction void for level tracking model.
           if (iand(ishft(jc(i),-26),1) .ne. 0) then
             jupdw = iand(ishft(jc(i),-27),1)
             if (jupdw .eq. 0) then
               ivbot = k
               ivtop = l
               fctr = 1.0
             else
               ivbot = l
               ivtop = k
               fctr = -1.0
             endif
             ilvtp = iand(ishft(vctrlx(ivtop),-7),1)
             ilvbt = iand(ishft(vctrlx(ivbot),-7),1)
             if (ilvtp.eq.1 .or. ilvbt.eq.1) then
               if (ilvbt.eq.1) then
                 if (fctr*velfj(i).gt.0.0 ) then
                   if( dlev(ivbot).lt. dl(ivbot) ) then
                     voidfj(i) = 1.0 - voidla(ivbot)
                   else
                     voidfj(i) = 1.0 - voidg(ivbot)
                   endif
                 else
                   voidfj(i) = 1.0 - voidg(ivtop)
                 endif
                 if(voidg(kf).gt.0.0 .and. voidg(kf).lt.1.0)
     &           vodfjr(i) = voidfj(i)/(1.0-voidg(kf))
                 if (fctr*velgj(i).gt.0.0 ) then
                   if( dlev(ivbot).lt.dl(ivbot) ) then
                     voidgj(i) = voidla(ivbot)
                   else
                     voidgj(i) = voidg(ivbot)
                   endif
                 else
                   voidgj(i) = voidg(ivtop)
                 endif
                 if(voidg(kg).gt.0.0 .and. voidg(kg).lt.1.0)
     &           vodgjr(i) = voidgj(i)/voidg(kg)
               endif
c
               if (ilvtp.eq.1) then
                 if (fctr*velfj(i).lt.0.0 ) then
                   if( dlev(ivtop).gt.0.0 ) then
                     voidfj(i) = 1.0 - voidlb(ivtop)
                   else
                     voidfj(i) = 1.0 - voidg(ivtop)
                   endif
                 else
                   voidfj(i) = 1.0 - voidg(ivbot)
                 endif
                 if(voidg(kf).gt.0.0 .and. voidg(kf).lt.1.0)
     &            vodfjr(i) = voidfj(i)/(1.0-voidg(kf))
                 if (fctr*velgj(i).lt.0.0) then
                   if( dlev(ivtop).gt.0.0 ) then
                     voidgj(i) = voidlb(ivtop)
                   else
                     voidgj(i) = voidg(ivtop)
                   endif
                 else
                   voidgj(i) = voidg(ivbot)
                 endif
                 if(voidg(kg).gt.0.0 .and. voidg(kg).lt.1.0)
     &           vodgjr(i) = voidgj(i)/voidg(kg)
               endif
             endif
             if (dfront(ivtop).gt.0.0 .or. dfront(ivbot).gt.0.0) then
               if (dfront(ivbot).gt.0.0) then
                 ufj(i) = uf(ivtop)
               endif
               if (dfront(ivtop).gt.0.0) then
                 ufj(i) = uf(ivbot)
               endif
             endif
           endif
c  Others.
                 vodfjo(i) = voidfj(i)
                 vdfjoo(i) = voidfj(i)
                 vodgjo(i) = voidgj(i)
                 vdgjoo(i) = voidgj(i)
$if def,mmfld
                 if (nonmf .ne. 0) then
                   if (velmj(i) .lt. 0.0) then
                     rhomj(i) = rhomt(l)
                     voidmj(i) = voidm(l)
                     umj(i) = um(l)
                     do i1 = 1,nonmf
                       ii = i + i1 - 1
                       il = l + i1 - 1
                       qualmj(ii) = qualm(il)
                     enddo
                   else
                     rhomj(i) = rhomt(k)
                     voidmj(i) = voidm(k)
                     umj(i) = um(k)
                     do i1 = 1,nonmf
                       ii = i + i1 - 1
                       ik = k + i1 - 1
                       qualmj(ii) = qualm(ik)
                     enddo
                   endif
                 endif
$endif
                 if (iand(jc(i),12288) .ne. 0) jc(i) = ior(jc(i),16384)
c  Donor cell accumulator variables.
                 if ( cmptyp(n) .eq. 13 ) then
                   voidfj(i) = 1.0
                   if (voidf(kf).gt.0.0 .and. voidf(kf).lt.1.0)
     &             vodfjr(i) = voidfj(i)/voidf(kf)
                   voidgj(i) = 0.0
                   vodgjr(i) = 0.0
                 endif
                 if (cmptyp(n) .ne. 8) then
                   if (cmptyp(n) .eq. 6) then
                     jc(i) = ior(iand(jc(i),not(ishft(7,19))),
     &               ishft(jx,19))
                   elseif (cmptyp(n) .eq. 4) then
                     jc(i) = ior(jc(i),ishft(3,22))
                   elseif (cmptyp(n) .eq. 15) then
                     jcex(i) = ior(iand(jcex(i),not(ishft(3,18))),
     &               ishft(jx,18))
                   endif
                   avev = hydzc(kc2)
                   if (iand(jc(i),4) .ne. 0) avev = -avev
                   dzzzz = hydzc(lc2)
                   if (iand(jc(i),8) .ne. 0) dzzzz = -dzzzz
                   avev = avev + dzzzz
                   jc(i) = iand(jc(i),not(ishft(3,26)))
                   if (avev .ne. 0.0) then
                     if (avev .lt. 0.0) then
                       jc(i) = ior(jc(i),ishft(1,27))
c  0.353553391 is 0.5*sin(45 deg).
                       if (-avev .gt. 0.353553391*(dl(kc) + dl(lc)))
     &                 then
                           jc(i) = ior(jc(i),ishft(1,26))
                       endif
                     else
c  0.353553391 is 0.5*sin(45 deg).
                       if (avev .gt. 0.353553391*(dl(kc) + dl(lc)))
     &                 then
                           jc(i) = ior(jc(i),ishft(1,26))
                       endif
                     endif
                   endif
                 else
c  Separator model, special vapor and liquid junctions.
                   jc(i) = ior(iand(jc(i),not(ishft(3,22))),
     &             ishft(jx,22))
                   if (jx .ne. 3 .and. (voidg(k).gt.0.0 .and.
     &               voidg(k).lt.1.0)) then
                     if (jx .ne. 2) then
                       voidgl = 1.0
                       if (vover(n) .eq. 0.0) then
                         if (voidg(k) .le. 0.0) voidgl = 0.0
                       else
                         if (voidg(k) .le. vover(n)) voidgl = voidg(k)/
     &                   vover(n)
                       endif
                       voidfl = 1.0 - voidgl
                       if (curclm .gt. 0) then
                         if (dt .eq. 0.0) then
                           dt = tstpct(curctl)%dtmax
                         endif
                       else
                         dt = 0.01
                       endif
                       if (.not. wflow) then
                         vel = max(abs(velgj(i)),1.0e-20)
                         voidgl = min(voidgl, 0.9*voidg(k)*v(k)/
     &                   (ajun(i)*vel*dt))
                       else
                         do iter = 1,20
                           velgln = velgjo(i)/(voidgl*rhogj(i)*ajun(i))
                           vel = max(abs(velgln),1.0e-20)
                           vodglo = voidgl
                           voidgl = min(voidgl, 0.9*voidg(k)*v(k)/
     &                     (ajun(i)*vel*dt))
                           if (voidgl .gt. 1.0e-10)
     &                     test = abs((vodglo-voidgl)/voidgl)
                           if (test .le. 1.0e-8) exit
                         enddo
                         velgj(i) = velgln
                         velgjo(i) = velgj(i)
                         if (test .gt. 1.0e-8) then
                           fail = .true.
                           velgj(i) = 0.0
                           velgjo(i) = 0.0
                           write(output, 1001) junno(i)
 1001 format('0******** ',i8,' The junction of separator component ',
     & 'uses mass flow in initial junction condition.',/,
     & ' The initialization can not satisfy the 90% limit placed',
     & ' on the vapor void fraction of the out flow.',/,
     & ' The junction vapor velocity is reset to 0.0.')
                         endif
                       endif
                     else
                       voidfl = 1.0
                       if (vunder(n) .eq. 0.0) then
                         if (voidf(k) .le. 0.0) voidfl = 0.0
                       else
                         if (voidf(k) .le. vunder(n)) voidfl = voidf(k)/
     &                   vunder(n)
                       endif
                       voidgl = 1.0 - voidfl
                       if (dt .eq. 0) then
                         dt = tstpct(curctl)%dtmax
                       endif
                       if (.not. wflow) then
                         vel = max(abs(velfj(i)),1.0e-20)
                         voidfl = min(voidfl, 0.9*voidf(k)*v(k)/
     &                   (ajun(i)*vel*dt))
                       else
                         do iter = 1,20
                           velfln = velfjo(i)/(voidfl*rhofj(i)*ajun(i))
                           vel = max(abs(velfln),1.0e-20)
                           vodflo = voidfl
                           voidfl = min(voidfl, 0.9*voidf(k)*v(k)/
     &                     (ajun(i)*vel*dt))
                            if (voidfl .gt. 1.0e-10)
     &                     test = abs((vodflo-voidfl)/voidfl)
                           if (test .le. 1.0e-8) exit
                         enddo
                         velfj(i) = velfln
                         velfjo(i) = velfj(i)
                         if (test .gt. 1.0e-8) then
                           fail = .true.
                           velfj(i) = 0.0
                           velfjo(i) = 0.0
                           write(output, 1002) junno(i)
 1002 format('0******** ',i12,' The junction of separator component ',
     & 'uses mass flow in initial junction condition.',/,
     & ' The initialization can not satisfy the 90% extraction limit'
     & ' placed on the liquid drain of the out flow.'
     & ' The junction liquid velocity is reset to 0.0.')
                         endif
                       endif
                     endif
                     if (kg .eq. k) then
                       voidgj(i) = voidgl
                       vodgjr(i) = voidgj(i)/voidg(kg)
                     endif
                     if (kf .eq. k) then
                       voidfj(i) = voidfl
                       vodfjr(i) = voidfj(i)/voidf(kf)
                     endif
                     vodfjo(i) = voidfj(i)
                     vdfjoo(i) = voidfj(i)
                     vodgjo(i) = voidgj(i)
                     vdgjoo(i) = voidgj(i)
                   endif
                 endif
                 tvar1 = voidfj(i)*rhofj(i)
                 tvar2 = voidgj(i)*rhogj(i)
                 mflowj(i) = (tvar1*velfj(i) + tvar2*velgj(i))*ajun(i)
                 flenth(i) = ((tvar1*ufj(i) + voidfj(i)*p(kf))*velfj(i)
     &           + (tvar2*ugj(i) + voidgj(i)*p(kg))*velgj(i))*ajun(i)
                 mflowfj(i) = voidfj(i)*rhofj(i)*velfj(i)*ajun(i)
                 mflowgj(i) = voidgj(i)*rhogj(i)*velgj(i)*ajun(i)
$if def,mmfld,2
                 if (nonmf .ne. 0) mmflwj(i) = voidmj(i)*rhomj(i)*
     &           velmj(i)*ajun(i)
               endif
               i = i + ijskp
 1000        continue
           endif
         endif
         n = n + cmplen(n)
 2000  continue
c
c  Look for modifications to the junction donoring such as horizontal
c  stratification effects.
c
c  Reset the donor void fraction for HSE model used in iteration
       i = filndx(5)
       do m = 1,njuns(i)
         if (iand(jc(i),128).ne.0 .and. iand(jc(i),65536).eq.0) then
           j = iand(ishft(jc(i),-17),3)
           if (j .eq. 1) then
             if (voidgj(i) .gt. 0.0) voidgj(i) = 1.0
             voidfj(i) = 1.0 - voidgj(i)
             vodgjo(i) = voidgj(i)
             vodfjo(i) = voidfj(i)
           elseif (j .eq. 2) then
             if (voidfj(i) .gt. 0.0) voidfj(i) = 1.0
             voidgj(i) = 1.0 - voidfj(i)
             vodfjo(i) = voidfj(i)
             vodgjo(i) = voidgj(i)
           endif
           mflowj(i) = (voidfj(i)*rhofj(i)*velfj(i) +
     &     voidgj(i)*rhogj(i)*velgj(i))*ajun(i)
         endif
         i = i + ijskp
       enddo
       return
       end
