      SUBROUTINE GEOMETRY(DX,DY,DZ,DDX,DDY,DDZ,
     &  DIST,LROD,NCOLXY,NCOLZ,NSPACX,NSPACY,NSPACZ,
     &  IBIYNDEL,IBIXWDEL,NBCYYEND,NBCYYSTART,NBCXXEND,NBCXXSTART,
     &  IBIXW,NXSTARTB,NXENDB,IBIYN,NBC,NXSTART,NXEND,NDNUM,NYSTART,
     &  NYEND,NCOL2D,NCOL2DT,NCOLZT,LSEXT2DT,
     &  LROD2DT,LROD2D,LSEXT2D,LSEXTZT,LSEXTZ,LSEXTR,
     &  ABCYDEL,NBCXEND,NYENDB,NBCYEND,IBIY,NBCYSTART,IBIX,NBCXSTART,
     &  ABCXDEL,
     &  NYSTARTB,FRACTB,IBPITCHXH,IBPITCHYH,NREF2D,NROT2D,NREF,NROT,
     &  NREF2DT,NROT2DT,NTOPZ,NTOPZT,IBIXX,IBIYY,NBCXRSTART,
     &  NBCYRSTART,NCOLOR,
     &  EXP3D,EXP3DT,EXPINIT,ANUMDEN3DT,ANUMDEN3D,ANUMDEN,
     $  BUSURF,BUSURF3D,BUSURF3DT)
C     
C     THIS SUBROUTINE SETS UP THE GEOMETRY INCLUDING B.C., MESH EXPANSION,
C     AND BUNDLE BOUNDARY IDENTIFICATION FOR OUTPUT CONTROL
C     
      include 'param.fcb'
      include 'nonfue.fcb'
      include 'geom.fcb'
      include 'bcs.fcb'
      include 'bcshex.fcb'
      include 'che.fcb'
      include 'cntl.fcb'
      include 'thermk.fcb'
      include 'thermo.fcb'
      include 'crod.fcb'
      include 'extsor.fcb'
      include 'bpitch.fcb'
      include 'bundle.fcb'
      include 'nline.fcb'
      include 'xsec1.fcb'

      DIMENSION  ABCYDEL(NX),ABCXDEL(NY)
      
      DIMENSION
     &  NBCXEND(*)                    ,NYENDB(*)          ,
     &  NBCYEND(*)                    ,IBIY(NX,*)         ,
     &  NBCYSTART(*)                  ,IBIX(NX+1,*)       ,
     &  NBCXSTART(*)                  ,NYSTARTB(*)        ,
     &  LSEXT2D(NX,*)                 ,
     &  LSEXTZT(*)                    ,LSEXTZ(*)          ,
     &  LSEXTR(NXYLMAX)               ,NCOL2D(NX,NY,*)    ,
     &  NCOL2DT(NXORIG,NYORIG,*)      ,NCOLZT(*)          ,
     &  LSEXT2DT(NXORIG,*)            ,LROD2DT(NXORIG,*)  ,
     &  LROD2D(NX,*)                  ,NXSTART(*)         ,
     &  NXEND(*)                      ,NBC(*)             ,
     &  NDNUM(-1:NX+2,0:NY+1)         ,NYSTART(*)         ,
     &  NYEND(*)                      ,IBIYNDEL(NX,*)     ,
     &  IBIXWDEL(NX,*)                ,NBCYYEND(*)        ,
     &  NBCYYSTART(*)                 ,NBCXXEND(*)        ,
     &  NBCXXSTART(*)                 ,IBIXW(NX,*)        ,
     &  NXSTARTB(*)                   ,NXENDB(*)          ,
     &  IBIYN(NX,*)                   ,NCOLXY(NXYLMAX,NFIGURE),
     &  NCOLZ(*)                      ,NSPACX(*)          ,
     &  NSPACY(*)                     ,NSPACZ(*)          ,
     &  DX(0:*)                       ,DY(0:*)            ,
     &  DZ(0:*)                       ,DDZ(*)             ,
     &  DDX(*)                        ,DDY(*)             ,
     &  DIST(0:*)                     ,LROD(NXYLMAX)      ,
     &  FRACTB(*)                     ,IBPITCHXH(*)       ,
     &  IBPITCHYH(*)                  ,NREF2D(NX,*)       ,
     &  NROT2D(NX,*)                  ,NREF(NXYLMAX)      ,
     &  NROT(NXYLMAX)                 ,NTOPZ(*)           ,
     &  NTOPZT(*)                     ,NREF2DT(NXORIG,*)  ,
     &  NROT2DT(NXORIG,*)             ,IBIXX(NX+1,*)      ,
     &  IBIYY(NX,*)                   ,NBCXRSTART(*)      ,
     &  NBCYRSTART(*)                 ,NCOLOR(*)
      
      DIMENSION EXP3DT(NXORIG,NYORIG,NZORIG),EXP3D(NX,NY,NZORIG),
     $  EXPINIT(NXYLMAX,NZ),ANUMDEN3DT(NXORIG,NYORIG,NZORIG,13),
     $  ANUMDEN3D(NX,NY,NZORIG,13),ANUMDEN(NXYLMAX,NZ,13)

      DIMENSION BUSURF(6,NXYLMAX,NZ),
     $ BUSURF3DT(6,NXORIG,NYORIG,NZORIG),
     $ BUSURF3D(6,NX,NY,NZORIG)
      
      CHARACTER*8 ABCXDEL,ABCYDEL
C     
C     COMPUTE GEOMETRY PARAMETERS
C     
C     
C---- EVALUATING FUEL ROD CIRCUMFERENCE RADIUS [INCHES]
C     
      SRFF = 2.0 * 3.141592654 * FUELRAD
C     
C     REFINE MESH OPTION ONLY APPLICABLE FOR CARTESIAN GEOMETRY IN RADIAL PL
C     
      IF(NSHAP.EQ.'CART') THEN
       DO 110 I=1,NSUBX
        NSPACX(I)=NMULXY*NSPACX(I)
        DDX(I)=DDX(I)/(1.*NMULXY)
 110   CONTINUE
       DO 120 J=1,NSUBY
        NSPACY(J)=NMULXY*NSPACY(J)
        DDY(J)=DDY(J)/(1.*NMULXY)
 120   CONTINUE
C     
C     
C...  ADJUSTING THE MESH SIZE FOR THE EXTERNAL SOURCE
C     
C     
C...  ADJUSTING THE MESH SIZE FOR THE CONTROL BANKS
C     
C     
C...  ADJUSTING THE MESH SIZE FOR THE FUEL COLORS
C     
       DO 151 J=1,NYORIG
        DO 150 I=NXSTART(J),NXEND(J),NXSKIP
         DO 141 IK=1,NMULXY
          IX=(I-1)*NMULXY+IK
          DO 140 IJ=1,NMULXY
           IY=(J-1)*NMULXY+IJ
           LSEXT2D(IX,IY)=LSEXT2DT(I,J)
           LROD2D(IX,IY)=LROD2DT(I,J)
           NREF2D(IX,IY)=NREF2DT(I,J)
           NROT2D(IX,IY)=NROT2DT(I,J)
           DO 135 IB=1,NFIGURE
            NCOL2D(IX,IY,IB)=NCOL2DT(I,J,IB)
 135       CONTINUE
C
           DO 139 IZ=1,NZORIG
            EXP3D(IX,IY,IZ)=EXP3DT(I,J,IZ)
            IF(NSHAP.EQ.'HEXA')THEN
             DO ISUR=1,6
              BUSURF3D(ISUR,IX,IY,IZ)=BUSURF3DT(ISUR,I,J,IZ)
             ENDDO
            ENDIF
            IF(IMICRO.EQ.'Y')THEN
             DO ISOT=1,13
              ANUMDEN3D(IX,IY,IZ,ISOT)=ANUMDEN3DT(I,J,IZ,ISOT)   
             ENDDO
            ENDIF
 139       CONTINUE
 140      CONTINUE
 141     CONTINUE
 150    CONTINUE
 151   CONTINUE
       
       DO 2160 J=1,NYORIG
        DO 2155 IJ=1,NMULXY
         IY=(J-1)*NMULXY+IJ
         NXSTART(IY)=1
         NXEND(IY)=NXORIG*NMULXY
 2155   CONTINUE
 2160  CONTINUE
      ENDIF
      
      IF(NSHAP.EQ.'HEXA') THEN
       DO 3161 J=1,NY
        DO 3160 I=1,NX
         DO 3155 IB=1,NFIGURE
          NCOL2D(I,J,IB)=0.0
 3155    CONTINUE
 3160   CONTINUE
 3161  CONTINUE
       DO 161 J=1,NY
        DO 160 I=NXSTART(J),NXEND(J),NXSKIP
         LSEXT2D(I,J)=LSEXT2DT(I,J)
         LROD2D(I,J)=LROD2DT(I,J)
         NREF2D(I,J)=NREF2DT(I,J)
         NROT2D(I,J)=NROT2DT(I,J)
         DO 155 IB=1,NFIGURE
          NCOL2D(I,J,IB)=NCOL2DT(I,J,IB)
 155     CONTINUE
         DO 156 IZ=1,NZORIG
          EXP3D(I,J,IZ)=EXP3DT(I,J,IZ)
          DO ISUR=1,6
           BUSURF3D(ISUR,I,J,IZ)=BUSURF3DT(ISUR,I,J,IZ)
          ENDDO
          IF(IMICRO.EQ.'Y')THEN
           DO ISOT=1,13
            ANUMDEN3D(I,J,IZ,ISOT)=ANUMDEN3DT(I,J,IZ,ISOT)
           ENDDO
          ENDIF
 156     CONTINUE
 160    CONTINUE
 161   CONTINUE
      ENDIF
C     
C     DEFINE THE EDGES OF THE SPATIAL DOMAIN TO BE ANALYZED ALONG THE X AXIS
C     
      IB=1
      DO 40 IY=1,NY
       DO 35 IX=NXSTART(IY),NXEND(IY),NXSKIP
        IF(NCOL2D(IX,IY,IB).GT.0) THEN
         NXSTART(IY)=IX
         GOTO 36
        ENDIF
 35    CONTINUE
 36    CONTINUE
       DO 38 IX=NXEND(IY),NXSTART(IY),-NXSKIP
        IF(NCOL2D(IX,IY,IB).GT.0) THEN
         NXEND(IY)=IX
         GOTO 39
        ENDIF
 38    CONTINUE
 39    CONTINUE
 40   CONTINUE
C     DEFINE THE EDGES OF THE SPATIAL DOMAIN TO BE ANALYZED ALONG THE Y AXIS
C     
      DO 340 IX=1,NX
       NYSTART(IX)=0
       NYEND(IX)=0
       DO 335 IY=1,NY
        IF(NCOL2D(IX,IY,IB).GT.0) THEN
         NYSTART(IX)=IY
         GOTO 336
        ENDIF
 335   CONTINUE
 336   CONTINUE
       DO 338 IY=NY,1,-1
        IF(NCOL2D(IX,IY,IB).GT.0) THEN
         NYEND(IX)=IY
         GOTO 339
        ENDIF
 338   CONTINUE
 339   CONTINUE
 340  CONTINUE
      
      MINNY = 10000
      MAXNY = 0
      DO 1335 IX=1,NX
       IF(NYEND(IX).EQ.0)GOTO 1335
       MINNY = MIN(MINNY,NYSTART(IX))
       MAXNY = MAX(MAXNY,NYEND(IX))
 1335 CONTINUE
      
      MINNX = 10000
      MAXNX = 0
      DO 1336 IY=1,NY
       IF(NXEND(IY).EQ.0)GOTO 1336
       MINNX = MIN(MINNX,NXSTART(IY))
       MAXNX = MAX(MAXNX,NXEND(IY))
 1336 CONTINUE

C     
C     ASSIGN PLANAR NODE NUMBER
C     
      IXY=0
      DO 1401 IY=1,NY
       DO 1400 IX=NXSTART(IY),NXEND(IY),NXSKIP
        IXY=IXY+1
        NDNUM(IX,IY)=IXY
        NXYL=IXY
 1400  CONTINUE
 1401 CONTINUE
C     
C     MAP FROM THE (IX,IY) ARRAY TO (IXY) ARRAY.
C     
      DO 2001 IY=MINNY,MAXNY
       DO 2000 IX=NXSTART(IY),NXEND(IY),NXSKIP
        IXY=NDNUM(IX,IY)
        LSEXTR(IXY)=LSEXT2D(IX,IY)
        LROD(IXY)=LROD2D(IX,IY)
        NREF(IXY)=NREF2D(IX,IY)
        NROT(IXY)=NROT2D(IX,IY)
        DO 1990 IB=1,NFIGURE
         ICLOAD=NCOL2D(IX,IY,IB)
         DO 1985 IC=1,ICOLXY
          IF(NCOLOR(IC).EQ.ICLOAD) THEN
           ICSTORE=IC
           GOTO 1988
          ENDIF
 1985    CONTINUE
         WRITE(6,*) 'FUEL COLOR: ',ICLOAD
         WRITE(6,*) 'AVAILABLE FUEL COLOR IN THE XS LIBRARY: '
         WRITE(6,*)(NCOLOR(IC),IC=1,ICOLXY)
         WRITE(6,*) 'FATAL ERROR: FUEL COLOR NOT REPRESENTED',
     &     ' IN THE CROSS-SECTION LIBRARY'
         WRITE(6,*) 'IX,IY,IB',IX,IY,IB
         STOP 'GEOMETRY.F'
 1988    CONTINUE
         NCOLXY(IXY,IB)=ICSTORE
 1990   CONTINUE
C     
C     MAP EXPOSURE MAP AND ADJUSTING THE AXIAL MESH SIZE
C     
        DO 1199 K=1,NZORIG
         DO 199 IK=1,NMULZ
          IZ=(K-1)*NMULZ+IK 
          EXPINIT(IXY,IZ)=EXP3D(IX,IY,K)
          IF(IMICRO.EQ.'Y')THEN
           DO ISOT=1,13
            ANUMDEN(IXY,IZ,ISOT)=ANUMDEN3D(IX,IY,K,ISOT)
           ENDDO
          ENDIF
 199     CONTINUE
 1199   CONTINUE
        IF(NSHAP.EQ.'HEXA')THEN
         DO K=1,NZORIG
          DO IK=1,NMULZ
           IZ=(K-1)*NMULZ+IK 
           DO ISUR=1,6
            BUSURF(ISUR,IXY,IZ)=BUSURF3D(ISUR,IX,IY,K)
           ENDDO
          ENDDO
         ENDDO
        ENDIF
 2000  CONTINUE
 2001 CONTINUE
C     
C     SURFACE BURNUP AT BOC
C     
      IF(NSHAP.EQ.'HEXA'.AND.IEXP.NE.'Y')THEN
C     
C     SURFACE BURNUP NOT AVAILABLE, SET TO NODE BURNUP
C     
        DO 554 IZ=1,NZ
         DO IY=1,NY
          DO IX=NXSTART(IY),NXEND(IY),NXSKIP
           IXY=NDNUM(IX,IY)
           DO ISUR=1,6
            BUSURF(ISUR,IXY,IZ)=EXPINIT(IXY,IZ)
           ENDDO
          ENDDO
         ENDDO
 554    CONTINUE
      ENDIF
C     
      IF(NSHAP.EQ.'CART') THEN
       NRUN=0
       DO 30 II=1,NSUBX
        NRUNO=NRUN+1
        NRUN=NRUN+NSPACX(II)
        DO 20 I=NRUNO,NRUN
         DX(I)=DDX(II)
 20     CONTINUE
 30    CONTINUE
       NRUN=0
       DO 50 JJ=1,NSUBY
        NRUNO=NRUN+1
        NRUN=NRUN+NSPACY(JJ)
        DO 43 J=NRUNO,NRUN
         DY(J)=DDY(JJ)
 43     CONTINUE
 50    CONTINUE
      ENDIF  
C     
      DO 127 K=1,NSUBZ
       NSPACZ(K)=NMULZ*NSPACZ(K)
       DDZ(K)=DDZ(K)/(1.*NMULZ)
 127  CONTINUE
      IZCOLS=(IZCOLS-1)*NMULZ+1
      IZCOLE=IZCOLE*NMULZ
      DO 158 K=1,NZORIG
       DO 157 IK=1,NMULZ
        IZ=(K-1)*NMULZ+IK
        NCOLZ(IZ)=NCOLZT(K)
        LSEXTZ(IZ)=LSEXTZT(K)
        NTOPZ(IZ)=NTOPZT(K)
 157   CONTINUE
 158  CONTINUE
      NRUN=0
      DO 37 KK=1,NSUBZ
       NRUNO=NRUN+1
       NRUN=NRUN+NSPACZ(KK)
       DO 27 K=NRUNO,NRUN
        DZ(K)=DDZ(KK)
 27    CONTINUE
 37   CONTINUE
C     
C     LAY IN EXTRA NODES SURROUNDING SOLUTION DOMAIN TO SPECIFY B.C.
C     NOTICE EXTENDED DIMENSIONS:
C     NDNUM(0:NX+1,0:NY+1) FOR CART
C     NDNUM(-1:NX+1,0:NY+1) FOR HEX
C     
      IF(NSHAP.EQ.'CART') THEN
       IXYS=0
       IY=1
       DO 52 IX=NXSTART(IY),NXEND(IY)
        IXYS=IXYS+1
        NDNUM(IX,IY-1)=IXYS+NXYL
        NBC(IXYS)=LIYN
 52    CONTINUE
       IY=NY
       DO 53 IX=NXSTART(IY),NXEND(IY)
        IXYS=IXYS+1
        NDNUM(IX,IY+1)=IXYS+NXYL
        NBC(IXYS)=LIYS
 53    CONTINUE
       DO 58 IY=1,NY
        IXYS=IXYS+1
        NDNUM(NXSTART(IY)-1,IY)=IXYS+NXYL
        NBC(IXYS)=LIXW
        IXYS=IXYS+1
        NDNUM(NXEND(IY)+1,IY)=IXYS+NXYL
        NBC(IXYS)=LIXE
        IF(IY.EQ.1.OR.IY.EQ.NY) GO TO 58
        IF(NXSTART(IY).LT.NXSTART(IY-1)) THEN
         DO 54 IX=NXSTART(IY),NXSTART(IY-1)-2
          IXYS=IXYS+1
          NDNUM(IX,IY-1)=IXYS+NXYL
          NBC(IXYS)=LIYN
 54      CONTINUE
        ENDIF
        IF(NXSTART(IY).LT.NXSTART(IY+1)) THEN
         DO 55 IX=NXSTART(IY),NXSTART(IY+1)-2
          IXYS=IXYS+1
          NDNUM(IX,IY+1)=IXYS+NXYL
          NBC(IXYS)=LIYS
 55      CONTINUE
        ENDIF
        IF(NXEND(IY).GT.NXEND(IY-1)) THEN
         DO 56 IX=NXEND(IY-1)+2,NXEND(IY)
          IXYS=IXYS+1
          NDNUM(IX,IY-1)=IXYS+NXYL
          NBC(IXYS)=LIYN
 56      CONTINUE
        ENDIF
        IF(NXEND(IY).GT.NXEND(IY+1)) THEN
         DO 57 IX=NXEND(IY+1)+2,NXEND(IY)
          IXYS=IXYS+1
          NDNUM(IX,IY+1)=IXYS+NXYL
          NBC(IXYS)=LIYS
 57      CONTINUE
        ENDIF
 58    CONTINUE
       
       NXYT=IXYS+NXYL
       
       IF(IDRUN.EQ.'HCORE'.OR.IDRUN.EQ.'QCORE') THEN
        IF(LIYN.EQ.3) THEN
         IY=1
         DO 59 IX=NXSTART(IY),NXEND(IY),NXSKIP
          IXYSS=NDNUM(IX,IY-1)-NXYL
          IF(IDRUN.EQ.'HCORE') THEN
           IXWEST=IX-NXSTART(IY)
           IXEAST=NXEND(IY)-IX
           IF(IXWEST.LE.IXEAST) THEN
            IXYM=NDNUM(NXEND(IY)-IXWEST,IY)
           ELSE
            IXYM=NDNUM(NXSTART(IY)+IXEAST,IY)
           ENDIF
          ELSEIF(IDRUN.EQ.'QCORE') THEN
           IXYM=NDNUM(IY,IX)
          ENDIF
          IF(IXYM.GT.NXYL) THEN
           NBC(IXYSS)=LIYN
          ELSE
           NBC(IXYSS)=-1*IXYM
          ENDIF
 59      CONTINUE
        ENDIF
        
        IF(IDRUN.EQ.'QCORE') THEN
         IF(LIXW.EQ.3) THEN
          IX=1
          DO 60 IY=NYSTART(IX),NYEND(IX)
           IXYSS=NDNUM(IX-1,IY)-NXYL
           IXYM=NDNUM(IY,IX)
           IF(IXYM.GT.NXYL) THEN
            NBC(IXYSS)=LIXW
           ELSE
            NBC(IXYSS)=-1*IXYM
           ENDIF
 60       CONTINUE
         ENDIF
        ENDIF
        
       ENDIF
      ENDIF
      
      IF(NSHAP.EQ.'HEXA') THEN
       IXYS=0
       IY=1
       DO 62 IX=NXSTART(IY)-1,NXEND(IY)+1,NXSKIP
        IXYS=IXYS+1
        NDNUM(IX,IY-1)=IXYS+NXYL
        NBC(IXYS)=LIHO
 62    CONTINUE
       IY=NY
       DO 63 IX=NXSTART(IY)-1,NXEND(IY)+1,NXSKIP
        IXYS=IXYS+1
        NDNUM(IX,IY+1)=IXYS+NXYL
        NBC(IXYS)=LIHO
 63    CONTINUE
       DO 70 IY=MINNY,MAXNY
        IXYS=IXYS+1
        NDNUM(NXSTART(IY)-2,IY)=IXYS+NXYL
        NBC(IXYS)=LIHO
        IXYS=IXYS+1
        NDNUM(NXEND(IY)+2,IY)=IXYS+NXYL
        NBC(IXYS)=LIHO
        IF(IY.EQ.1.OR.IY.EQ.NY) GO TO 70
        IF((NXSTART(IY-1)-NXSTART(IY)).GT.1) THEN
         DO 64 IX=NXSTART(IY)-1,NXSTART(IY-1)-4,NXSKIP
          IXYS=IXYS+1
          NDNUM(IX,IY-1)=IXYS+NXYL
          NBC(IXYS)=LIHO
 64      CONTINUE
        ENDIF
        IF((NXSTART(IY+1)-NXSTART(IY)).GT.1) THEN
         DO 65 IX=NXSTART(IY)-1,NXSTART(IY+1)-4,NXSKIP
          IXYS=IXYS+1
          NDNUM(IX,IY+1)=IXYS+NXYL
          NBC(IXYS)=LIHO
 65      CONTINUE
        ENDIF
        IF((NXEND(IY)-NXEND(IY-1)).GT.1) THEN
         DO 66 IX=NXEND(IY-1)+4,NXEND(IY)+1,NXSKIP
          IXYS=IXYS+1
          NDNUM(IX,IY-1)=IXYS+NXYL
          NBC(IXYS)=LIHO
 66      CONTINUE
        ENDIF
        IF((NXEND(IY)-NXEND(IY+1)).GT.1) THEN
         DO 67 IX=NXEND(IY+1)+4,NXEND(IY)+1,NXSKIP
          IXYS=IXYS+1
          NDNUM(IX,IY+1)=IXYS+NXYL
          NBC(IXYS)=LIHO
 67      CONTINUE
        ENDIF
 70    CONTINUE
       
       NXYT=IXYS+NXYL

       IF(IDRUN.EQ.'TCORE'.OR.IDRUN.EQ.'SCORE') THEN
        IY=1
        DO 72 IX=NXSTART(IY),NXEND(IY)+2,NXSKIP
         IXYSS=NDNUM(IX-1,IY-1)-NXYL
         IF(LIPS.EQ.0) THEN
          IXM=IX-1
          IYM=IY+1
         ELSEIF(LIPS.EQ.3) THEN
          NRAD=(NXEND(IY)-IX)/2
          IF(NRAD.LT.0) NRAD=0
          IXM=NXEND(IY)+NRAD-1
          IYM=IY+NRAD+1
         ENDIF
         IXYM=NDNUM(IXM,IYM)
         IF(IXYM.GT.NXYL) THEN
          NBC(IXYSS)=LIHO
         ELSE
          NBC(IXYSS)=-1*IXYM
         ENDIF
 72     CONTINUE
        
        DO 80 IY=2,NY,1
         IX=NXEND(IY)
         IXSYME=NXEND(1)+(IY-1)
         
         IF(IX.EQ.IXSYME) THEN
          IXYSS=NDNUM(IX+1,IY-1)-NXYL
          IF(LIPS.EQ.0) THEN
           IXM=IX-2
           IYM=IY
          ELSEIF(LIPS.EQ.3) THEN
           IF(IDRUN.EQ.'TCORE') THEN
            NRAD=IX-NXEND(1)
            IXM=NXEND(1)-2*NRAD+1
            IYM=2
           ELSEIF(IDRUN.EQ.'SCORE') THEN
            IXM=NXSTART(IY)+2
            
            IYM=IY
           ENDIF
          ENDIF

          IXYM=NDNUM(IXM,IYM)
          IF(IXYM.GT.NXYL) THEN
           NBC(IXYSS)=LIHO
          ELSE
           NBC(IXYSS)=-1*IXYM
          ENDIF
         ENDIF
c     f
         IF(NXEND(IY)-1.EQ.NXEND(IY+1))THEN
          IF(LIPS.EQ.3)THEN
           IXYSS=NDNUM(IX+2,IY)-NXYL
           NBC(IXYSS)=-NDNUM(NXSTART(IY+1),IY+1)
          ELSEIF(LIPS.EQ.0)THEN
           IXYSS=NDNUM(IX+2,IY)-NXYL
           NBC(IXYSS)=-NDNUM(NXEND(IY+1),IY+1)
          ENDIF
         ENDIF

 80     CONTINUE
        
        IF(IDRUN.EQ.'SCORE') THEN
         DO 90 IY=2,NY,1
          IX=NXSTART(IY)
          IXSYMW=NXEND(1)-(IY-1)

          IF(IX.EQ.IXSYMW) THEN
           IXYSS=NDNUM(IX-1,IY-1)-NXYL
           IF(LIPS.EQ.0) THEN
            IXM=IX+2
            IYM=IY
           ELSEIF(LIPS.EQ.3) THEN
            IXM=NXEND(IY)-2
            IYM=IY
           ENDIF
           IXYM=NDNUM(IXM,IYM)
           IF(IXYM.GT.NXYL) THEN
            NBC(IXYSS)=LIHO
           ELSE
            NBC(IXYSS)=-1*IXYM
           ENDIF
          ENDIF
c     f          
          IF(NXSTART(IY).EQ.NXSTART(IY+1)-1)THEN
           IF(LIPS.EQ.3)THEN
            IXYSS=NDNUM(IX-2,IY)-NXYL
            NBC(IXYSS)=-NDNUM(NXEND(IY+1),IY+1)
           ELSEIF(LIPS.EQ.0)THEN
            IXYSS=NDNUM(IX-2,IY)-NXYL
            NBC(IXYSS)=-NDNUM(NXSTART(IY+1),IY+1)
           ENDIF
          ENDIF

 90      CONTINUE
        ENDIF
       ENDIF
      ENDIF
C     
C     FOLLOWING CODE FRAGMENT DETERMINES VARIABLES VALUES TO CONTROL
C     THE OUTPUT EDITTING FOR HEX AND CART GEOMETRIES
C     
C     FOR CART GEOMETRY, NONUNIFORM MESH, RECTANGULAR AND OFFSET
C     BUNDLES CAN BE TREATED
C     
C     ALL THAT NEEDS TO BE KNOWN VIA INPUT IS THE BUNDLE PITCH IN THE
C     X AND Y DIRECTIONS
C     
C     IT IS ASSUMED THAT BUNDLE BOUNDARIES ARE UNIFORM IN THE Z DIRECTION
C     OVER THE ACTIVE FUEL LENGTH, WHICH IS ASSUMED TO BE RADIAL
C     INDEPENDENT AS IN OTHER SEGMENTS OF THE CODE
C     
C     IT IS ALSO ASSUMED THAT IF BUNDLES IN CART GEOMETRY ARE OFFSET, THE
C     OFFSET IS HALF A BUNDLE PITCH
C     
      
C     
C     DETERMINE STARTING AND ENDING MESH FOR BUNDLE IN X DIRECTION
C     FOR EACH IY COLUMN
C     
      
C     
C     IXCOLS-MINIMUM IX VALUE WHERE BUNDLE BEGINS
C     IXCOLE-MAXIMUM IX VALUE WHERE BUNDLE ENDS
C     NXSTARTB(IY)-MINIMUM IX VALUE WHERE BUNDLE BEGINS FOR COLUMN IY
C     NXENDB(IY)-MAXIMUM IX VALUE WHERE BUNDLE ENDS FOR COLUMN IY
C     
      IF(NZ.GT.IZCOLE)THEN
       IZ=IZCOLS+1
      ELSE
       IZ=IZCOLS
      ENDIF

      IXCOLS=1000
      IXCOLE=0
      DO 4050 IY=MINNY,MAXNY
       NXSTARTB(IY)=0
       NXENDB(IY)=0
       DO 4010 IX=NXSTART(IY),NXEND(IY),NXSKIP
        IXY=NDNUM(IX,IY)
        IF(NCOLXY(IXY,NCOLZ(IZ)).LE.NFUEXY) GOTO 4010
        NXSTARTB(IY)=IX
        IF(IX.LT.IXCOLS) THEN
         IXCOLS=IX
         IYMIN=IY
        ENDIF
        GOTO 4020
 4010  CONTINUE
 4020  CONTINUE
       DO 4030 IX=NXEND(IY),NXSTART(IY),-NXSKIP
        IXY=NDNUM(IX,IY)
        IF(NCOLXY(IXY,NCOLZ(IZ)).LE.NFUEXY) GOTO 4030
        NXENDB(IY)=IX
        IF(IX.GT.IXCOLE) IXCOLE=IX
        GOTO 4040
 4030  CONTINUE
 4040  CONTINUE
 4050 CONTINUE
      
C     
C     DETERMINE STARTING AND ENDING MESH FOR BUNDLE IN Y DIRECTION
C     FOR EACH IX ROW
C     
      
C     
C     IYCOLS,IYCOLE,NYSTARTB(IX),NYENDB(IX)-SAME AS ABOVE WITH X & Y REVERSE
C     
      
      IYCOLS=1000
      IYCOLE=0
      DO 4150 IX=MINNX,MAXNX
       NYSTARTB(IX)=0
       NYENDB(IX)=0
       DO 4110 IY=NYSTART(IX),NYEND(IX),NXSKIP
        IXY=NDNUM(IX,IY)
        IF(NCOLXY(IXY,NCOLZ(IZ)).LE.NFUEXY) GOTO 4110
        NYSTARTB(IX)=IY
        IF(IY.LT.IYCOLS) THEN
         IYCOLS=IY
         IXMIN=IX
        ENDIF
        GOTO 4120
 4110  CONTINUE
 4120  CONTINUE
       DO 4130 IY=NYEND(IX),NYSTART(IX),-NXSKIP
        IXY=NDNUM(IX,IY)
        IF(NCOLXY(IXY,NCOLZ(IZ)).LE.NFUEXY) GOTO 4130
        NYENDB(IX)=IY
        IF(IY.GT.IYCOLE) IYCOLE=IY
        GOTO 4140
 4130  CONTINUE
 4140  CONTINUE
 4150 CONTINUE
C     
C     DETERMINE THE BUNDLE BOUNDARIES USING THE FOLLOWING
C     CONVENTION: WEST AND NORTH NODES FOR X & Y LINES, RESPECTIVELY
C     
C     FOLLOWING FRAGMENT ONLY APPLIES TO CART
C     
      
      IF(IDRUN.NE.'AXIAL') THEN
       
       IF(NSHAP.EQ.'CART') THEN
C     
C     BPITCHX-BUNDLE PITCH IN X DIRECTION
C     IBIXX(IBCXX)-WEST MOST IX MESH FOR BUNDLE PITCH INDEX IBCXX
C     NBCXX-NUMBER OF BUNDLE PITCH INDICIES (NOTE ONE BEYOND BUNDLES
C     TO HELP SPECIFY EAST MOST IX MESH OF EAST MOST NODE
C     
C     DETERMINE THE STARTING AND ENDING BUNDLE INDICIES IN THE
C     X DIRECTION OVER THE ENTIRE CORE
C     
C     NBCXRSTART(IY)-STARTING BUNDLE PITCH
C     INDICIES (IBCXX,IY) IN X DIRECTION FOR MESH COLUMN IY
C     
C     DETERMNE WHETHER ODD OR EVEN NUMBER OF BUNDLES ACROSS THE CORE
C     IN X DIRECTION ON IY COLUMN
C     
C     ABCXDEL(IY)-ALPHANUMERIC INDICATING WHETHER HAVE ODD OR EVEN NUMBER
C     OF BUNDLES ACROSS FULL CORE IN X DIRECTION FOR IY COLUMN
C     
        XSUM=0.0
        DO 4200 IX=IXCOLS,IXCOLE
         XSUM=XSUM+DX(IX)
 4200   CONTINUE
        IF(IDRUN.EQ.'QCORE') THEN
         NBCXXF=(1.001*2*XSUM)/BPITCHX+1
         NBCXXH=(1.001*XSUM)/BPITCHX
         NBCXX=NBCXXF-NBCXXH
        ELSE
         NBCXX=(1.001*XSUM)/BPITCHX+1
        ENDIF
        DO 4220 IY=IYCOLS,IYCOLE
         IF(NXENDB(IY).LT.IXCOLE) THEN
          XSUM=0.0
          DO 4205 IX=IXCOLE,NXENDB(IY)+1,-1
           XSUM=XSUM+DX(IX)
 4205     CONTINUE
          IBPITCHXH(IY)=(2*1.001*XSUM)/BPITCHX
         ELSE
          IBPITCHXH(IY)=0
         ENDIF
         XSUM=0.0
         DXSUM=0.0
         IBCXX=NBCXX
         IBIXX(IBCXX,IY)=NXENDB(IY)+1
         DO 4210 IX=NXENDB(IY),NXSTARTB(IY)+1,-1
          XSUM=XSUM+DX(IX)
          DXSUM=DXSUM+DX(IX)
          IF((.999*BPITCHX).LE.DXSUM.AND.(1.001*BPITCHX).GE.DXSUM)
     $      THEN
           IBCXX=IBCXX-1
           IBIXX(IBCXX,IY)=IX
           DXSUM=0.0
          ENDIF
 4210    CONTINUE
         IX=NXSTARTB(IY)
         XSUM=XSUM+DX(IX)
         IBCXX=IBCXX-1
         IBIXX(IBCXX,IY)=IX
         NBCXRSTART(IY)=IBCXX
         IF(IDRUN.EQ.'QCORE') XSUM=2*XSUM
         NBCXDEL=(1.001*XSUM)/BPITCHX
         NBCXDELR=NBCXDEL/2
         IF((2*NBCXDELR).EQ.NBCXDEL) THEN
          ABCXDEL(IY)='EVEN'
         ELSE
          ABCXDEL(IY)='ODD'
         ENDIF
 4220   CONTINUE
        
C     
C     BPITCY, IBIYY(IX,IBCYY),NBCYY-SAME AS ABOVE FOR Y DIRECTION
C     
C     DETERMINE THE STARTING AND ENDING BUNDLE INDICIES IN THE
C     Y DIRECTION OVER THE ENTIRE CORE
C     
C     NBCYRSTART(IX)-SAME AS ABOVE REVERSING X AND Y DIRECTIONS
C     
C     DETERMNE WHETHER ODD OR EVEN NUMBER OF BUNDLES ACROSS THE CORE
C     IN Y DIRECTION FOR IX ROWS
C     
C     ABCYDEL(IX)-SAME AS ABOVE REVERSING X & Y DIRECTIONS
C     
        
        YSUM=0.0
        DO 4250 IY=IYCOLS,IYCOLE
         YSUM=YSUM+DY(IY)
 4250   CONTINUE
        IF(IDRUN.EQ.'QCORE'.OR.IDRUN.EQ.'HCORE') THEN
         NBCYYF=(1.001*2*YSUM)/BPITCHY+1
         NBCYYH=(1.001*YSUM)/BPITCHY
         NBCYY=NBCYYF-NBCYYH
        ELSE
         NBCYY=(1.001*YSUM)/BPITCHY+1
        ENDIF
        DO 4270 IX=IXCOLS,IXCOLE
         IF(NYENDB(IX).LT.IYCOLE) THEN
          YSUM=0.0
          DO 4255 IY=IYCOLE,NYENDB(IX)+1,-1
           YSUM=YSUM+DY(IY)
 4255     CONTINUE
          IBPITCHYH(IX)=(2*1.001*YSUM)/BPITCHY
         ELSE
          IBPITCHYH(IX)=0
         ENDIF
         DYSUM=0.0
         YSUM=0.0
         IBCYY=NBCYY
         IBIYY(IX,IBCYY)=NYENDB(IX)+1
         DO 4260 IY=NYENDB(IX),NYSTARTB(IX)+1,-1
          YSUM=YSUM+DY(IY)
          DYSUM=DYSUM+DY(IY)
          IF((.999*BPITCHY).LE.DYSUM.AND.(1.001*BPITCHY).GE.DYSUM)
     *      THEN
           IBCYY=IBCYY-1
           IBIYY(IX,IBCYY)=IY
           DYSUM=0.0
          ENDIF
 4260    CONTINUE
         IY=NYSTARTB(IX)
         YSUM=YSUM+DY(IY)
         IBCYY=IBCYY-1
         IBIYY(IX,IBCYY)=IY
         NBCYRSTART(IX)=IBCYY
         IF(IDRUN.EQ.'QCORE'.OR.IDRUN.EQ.'HCORE') YSUM=2*YSUM
         NBCYDEL=(1.001*YSUM)/BPITCHY
         NBCYDELR=NBCYDEL/2
         IF((2*NBCYDELR).EQ.NBCYDEL) THEN
          ABCYDEL(IX)='EVEN'
         ELSE
          ABCYDEL(IX)='ODD'
         ENDIF
 4270   CONTINUE
        
C     
C     DETERMINE WHETHER ALL X DIRECTIONS HAVE ODD OR EVEN
C     NUMBER OF BUNDLES
C     
C     IODDEVENX-BUNDLE INDICE (IBCX) STEP SIZE IN X DIRECTION
C     
        
        IODDEVENX=1
        DO 4400 IY=IYCOLS,IYCOLE
         IF(ABCXDEL(IYCOLS).NE.ABCXDEL(IY)) THEN
          IODDEVENX=2
          GOTO 4410
         ENDIF
 4400   CONTINUE
 4410   CONTINUE
        
C     
C     DETERMINE WHETHER ALL Y DIRECTIONS HAVE ODD OR EVEN
C     NUMBER OF BUNDLES
C     
C     IODDEVENY-SAME AS ABOVE FOR Y DIRECTION
C     
        
        IODDEVENY=1
        DO 4420 IX=IXCOLS,IXCOLE
         IF(ABCYDEL(IXCOLS).NE.ABCYDEL(IX)) THEN
          IODDEVENY=2
          GOTO 4430
         ENDIF
 4420   CONTINUE
 4430   CONTINUE
        
C     
C     DETERMINE THE WEST NODE OF THE BUNDLE
C     
C     IBIX(IBCX,IY)-WEST MOST IX MESH FOR BUNDLE PITCH INDEX IBCX
C     & IY COLUMN
C     
        
        IF(IODDEVENX.EQ.2) THEN
         IBCXMIN=2*NBCXRSTART(IYMIN)-IBPITCHXH(IYMIN)
        ELSE
         IBCXMIN=NBCXRSTART(IYMIN)-(IBPITCHXH(IYMIN)/2)
        ENDIF
        NBCX=0
        DO 4500 IY=IYCOLS,IYCOLE
         IF(IODDEVENX.EQ.2) THEN
          IBCX=2*NBCXRSTART(IY)-IBPITCHXH(IY)-IBCXMIN+1
         ELSE
          IBCX=(NBCXRSTART(IY)-(IBPITCHXH(IY)/2))-IBCXMIN+1
         ENDIF
         NBCXSTART(IY)=IBCX
         DO 4450 IBCXX=NBCXRSTART(IY),NBCXX
          IBIX(IBCX,IY)=IBIXX(IBCXX,IY)
          IBCX=IBCX+IODDEVENX
 4450    CONTINUE
         IBCX=IBCX-2*IODDEVENX
         NBCXEND(IY)=IBCX
         IF(IBCX.GT.NBCX) NBCX=IBCX
 4500   CONTINUE

C     
C     DETERMINE THE NORTH NODE OF THE BUNDLE
C     
C     IBIY(IX,IBCY)--SAME AS ABOVE REVERSING X & Y DIRECTIONS
C     
        
        IF(IODDEVENY.EQ.2) THEN
         IBCYMIN=2*NBCYRSTART(IXMIN)-IBPITCHYH(IXMIN)
        ELSE
         IBCYMIN=NBCYRSTART(IXMIN)-(IBPITCHYH(IXMIN)/2)
        ENDIF
        NBCY=0
        DO 4600 IX=IXCOLS,IXCOLE
         IF(IODDEVENY.EQ.2) THEN
          IBCY=2*NBCYRSTART(IX)-IBPITCHYH(IX)-IBCYMIN+1
         ELSE
          IBCY=(NBCYRSTART(IX)-(IBPITCHYH(IX)/2))-IBCYMIN+1
         ENDIF
         NBCYSTART(IX)=IBCY
         DO 4550 IBCYY=NBCYRSTART(IX),NBCYY
          IBIY(IX,IBCY)=IBIYY(IX,IBCYY)
          IBCY=IBCY+IODDEVENY
 4550    CONTINUE
         IBCY=IBCY-2*IODDEVENY
         NBCYEND(IX)=IBCY
         IF(IBCY.GT.NBCY) NBCY=IBCY
 4600   CONTINUE
        
C     
C     DETERMINE THE WEST AND NORTH NODES OF BUNDLES (IBCX,IBCY)
C     DETERMINE THE NUMBER OF MESH MINUS ONE IN X & Y DIRECTIONS
C     FOR EACH BUNDLE TO REACH EAST AND SOUTH BOUNDARIES
C     DETERMINE THE STARTING AND ENDING BUNDLE VALUES FOR EACH
C     X AND Y LINE
C     
C     IBIXW(IBCX,IBCY)-WEST MOST MESH NUMBER IX IN BUNDLE (IBCX,IBCY)
C     IBIXN(IBCX,IBCY)-NORTH MOST MESH NUMBER IX IN BUNDLE (IBCX,IBCY)
C     IBIXWDEL(IBCX,IBCY)-NUMER OF IX MESH MINUS ONE IN BUNDLE (IBCX,IBCY)
C     IBIYNDEL(IBCX,IBCY)-NUMER OF IY MESH MINUS ONE IN BUNDLE (IBCX,IBCY)
C     NBCXXSTART(IBCY) & NBCXXEND(IBCY)-STARTING & ENDING IBCX INDICIES
C     ALONG X BUNDLE DIRECTION FOR IBCY COLUMN
C     NBCYYSTART(IBCX) & NBCYYEND(IBCS)-SAME AS ABOVE REVERSING X & Y DIRECT
C     
        
        DO 4620 IBCY=1,NBCY
         DO 4610 IBCX=1,NBCX
          IBIXW(IBCX,IBCY)=0
          IBIYN(IBCX,IBCY)=0
 4610    CONTINUE
 4620   CONTINUE
        DO 4625 IBCY=1,NBCY
         NBCXXSTART(IBCY)=1000
         NBCXXEND(IBCY)=0
 4625   CONTINUE
        DO 4626 IBCX=1,NBCX
         NBCYYSTART(IBCX)=1000
         NBCYYEND(IBCX)=0
 4626   CONTINUE
        
        DO 4700 IY=IYCOLS,IYCOLE
         DO 4650 IBCX=NBCXSTART(IY),NBCXEND(IY),IODDEVENX
          IX=IBIX(IBCX,IY)
          IF(IX.EQ.0) GOTO 4650
          DO 4630 IBCY=NBCYSTART(IX),NBCYEND(IX),IODDEVENY
           IF(IBIY(IX,IBCY).EQ.IY) THEN
            IBIXW(IBCX,IBCY)=IX
            IBIYN(IBCX,IBCY)=IY
            IBIXWDEL(IBCX,IBCY)=IBIX(IBCX+IODDEVENX,IY)-IX
            IBIYNDEL(IBCX,IBCY)=IBIY(IX,IBCY+IODDEVENY)-IY
            IF(NBCXXSTART(IBCY).GT.IBCX) NBCXXSTART(IBCY)=IBCX
            IF(NBCXXEND(IBCY).LT.IBCX)   NBCXXEND(IBCY)=IBCX
            IF(NBCYYSTART(IBCX).GT.IBCY) NBCYYSTART(IBCX)=IBCY
            IF(NBCYYEND(IBCX).LT.IBCY)   NBCYYEND(IBCX)=IBCY
            GOTO 4650
           ENDIF
 4630     CONTINUE
 4650    CONTINUE
 4700   CONTINUE
       ENDIF
C     
C     FOLLOWING APPLIES TO HEX GEOMETRY
C     
       
C     
C     VARIABLES' DEFINITIONS THE SAME FOR HEX & CART GEOMETRIES,
C     ALLOWING A COMMON OUTPUT CONTROL LOGIC
C     
       
       IF(NSHAP.EQ.'HEXA') THEN
        
        IODDEVENX=2
        IODDEVENY=1
        
C     
C     DETERMINE THE STARTING AND ENDING BUNDLE VALUES FOR EACH
C     X AND Y LINE
C     
        IBCY=0
        DO 4710 IY=IYCOLS,IYCOLE
         IBCY=IBCY+1
         NBCXXSTART(IBCY)=NXSTARTB(IY)-IXCOLS+1
         NBCXXEND(IBCY)=NXENDB(IY)-IXCOLS+1
         IF(NBCXXSTART(IBCY).lt.0)THEN
          NBCXXSTART(IBCY)=0
          NBCXXEND(IBCY)=-1
         ENDIF
 4710   CONTINUE
        
        IBCX=0
        DO 4720 IX=IXCOLS,IXCOLE
         IBCX=IBCX+1
         NBCYYSTART(IBCX)=NYSTARTB(IX)-IYCOLS+1
         NBCYYEND(IBCX)=NYENDB(IX)-IYCOLS+1
         IF(NBCYYSTART(IBCY).lt.0)then
           NBCYYSTART(IBCY)=0
           NBCYYEND(IBCY)=-1
         ENDIF
 4720   CONTINUE
C     
C     DETERMINE THE EAST AND NORTH NODES OF BUNDLES (IBCX,IBCY)
C     
        
        IBCY=0
        DO 4800 IY=IYCOLS,IYCOLE
         IBCY=IBCY+1
         IBCX=NBCXXSTART(IBCY)-IODDEVENX
         DO 4750 IX=NXSTARTB(IY),NXENDB(IY),NXSKIP
          IBCX=IBCX+IODDEVENX
          IBIXW(IBCX,IBCY)=IX
          IBIYN(IBCX,IBCY)=IY
          IBIXWDEL(IBCX,IBCY)=1
          IBIYNDEL(IBCX,IBCY)=1
 4750    CONTINUE
 4800   CONTINUE
        
        NBCX=IXCOLE-IXCOLS+1
        NBCY=IYCOLE-IYCOLS+1
        
       ENDIF
       
      ELSEIF(IDRUN.EQ.'AXIAL') THEN
       NBCX=1
       NBCY=1
       IODDEVENX=1
       IODDEVENY=1
       IBIXW(1,1)=1
       IBIYN(1,1)=1
       IBIXWDEL(1,1)=1
       IBIYNDEL(1,1)=1
       NBCXXSTART(1)=1
       NBCYYSTART(1)=1
       NBCXXEND(1)=1
       NBCYYEND(1)=1
      ENDIF

      DX(0)=0.0
      DX(NX+1)=0.0
      DY(0)=0.0
      DY(NY+1)=0.0
      DZ(0)=0.0
      DZ(NZ+1)=0.0
C     
C------CALCULATING TOTAL AXIAL LENGTH OF THE CONTROL BANKS [ INCHES ]
C     
      ZFUEL=.0
      DO 202 IZ=IZCOLS,IZCOLE
       ZFUEL=ZFUEL+DZ(IZ)
 202  CONTINUE
      RODLNGTH=ZFUEL-RODOFFSET
C     
C-----CALCULATE THE REFERENCE AXIAL NODE EDGES
C     ( USED TO IDENTIFY AXIAL NODES THAT HAD CONTROL BANKS )
C     
      DO 192 IZ=0,NZ
       DIST(IZ) = 0.00
 192  CONTINUE
      
      DO 92 IZ=IZCOLS,NZ
       DIST(IZ)=DIST(IZ-1)+DZ(IZ)
 92   CONTINUE
      
      IZ=IZCOLS
      DO 5011 IY=1,NY
       DO 5010 IX=NXSTART(IY),NXEND(IY),NXSKIP
        IXY=NDNUM(IX,IY)
        FRACTB(IXY)=1.0
        IF(NSHAP.EQ.'HEXA'.AND.(IDRUN.EQ.'TCORE'
     &    .OR.IDRUN.EQ.'SCORE')) THEN
         IF(IDRUN.EQ.'TCORE') THEN
          IF(IY.NE.1) THEN
           IF(IX.EQ.(NXEND(1)+(IY-1))) FRACTB(IXY)=1./2.
          ELSE
           IF(IX.NE.NXEND(1)) THEN
            FRACTB(IXY)=1./2.
           ELSE
            FRACTB(IXY)=1./3.
           ENDIF
          ENDIF
         ELSEIF(IDRUN.EQ.'SCORE') THEN
          IF(IY.NE.1) THEN
           IF(IX.EQ.(NXEND(1)-(IY-1)).OR.
     *       IX.EQ.(NXEND(1)+(IY-1))) FRACTB(IXY)=1./2.
          ELSE
           FRACTB(IXY)=1./6.
          ENDIF
         ENDIF
        ENDIF
 5010  CONTINUE
 5011 CONTINUE

      RETURN
      END
