      SUBROUTINE FILE_CNT
     &  ( IOERROR,AVBU,DELBU,ZB,BUPM,PPM,ISAVE,OUT)
C     
C     THIS SUBROUTINE READS THE GENERAL CONTROL INPUT PARAMETERS.
C     
      include 'param.fcb'
      include 'dataf.fcb'
      include 'buckl.fcb'
      include 'crit.fcb'
      include 'crod.fcb'
      include 'cntl.fcb'
      include 'bcs.fcb'
      include 'xeopt.fcb'
      include 'burn.fcb'
      include 'nonfue.fcb'
      include 'start.fcb'
      include 'perttr.fcb'
      include 'multit.fcb'
      include 'opti.fcb'
      include 'xsec1.fcb'
      include 'outlong.fcb'
      include 'adj.fcb'

      DIMENSION
     &  AVBU(*)                              ,DELBU(*)           ,
     &  OUT(*)                               ,ZB(*)              ,
     &  BUPM(*)                              ,PPM(*)             ,
     &  ISAVE(*)
      
      CHARACTER*40  OUT
      CHARACTER*8 ABUCKL,ISAVE

 14   FORMAT(A8)
      
      READ (1,12) GEOM
      READ (1,12) XSECT
      READ (1,12) KINET
      READ (1,12) PERFM
      READ (1,12) RESTRT
      READ (1,12) OUTPUTNES !vmq
      READ (1,12) OUTADJ
 12   FORMAT (A40)
C     
C---- READ ADJOINT CASE OPTION :
C     
C---------IADJ = 'Y'  : ADJOINT ON
      
      READ (1,10) IADJ
      CALL INPUTCK('IADJ',IADJ,'Y','N',' ',IOERROR)
C     
C---- READ IF WISH TO SAVE ADJOINT FLUX TO FILE
C     
C---------ISAVE = 'Y'   : SAVE ADJOINT FLUX
      
      READ (1,10) ISAVEADJ
      CALL INPUTCK('ISAVEADJ',ISAVEADJ,'Y','N',' ',IOERROR)
C     
C---- READ TRANSIENT CASE OPTION :
C     
C---------ITRAN = 'Y'  : TRANSIENT ON
      
      READ (1,10) ITRAN
      CALL INPUTCK('ITRAN',ITRAN,'Y','N',' ',IOERROR)
C     
C     
C---- READ RESTART CASE OPTION :
C     
C---------IRSTRT = 'Y'  : RESTART ON
C     
      READ (1,10) IRSTRT
      CALL INPUTCK('IRSTRT',IRSTRT,'Y','N',' ',IOERROR)
C     
C---- OPEN HARDCOPY OUTPUTNES FILE (UNIT=55) :  ! vmq
C     
      OPEN(UNIT=55,FILE=OUTPUTNES,STATUS='UNKNOWN')  !vmq
      WRITE(55,*) '3DKIN 3DKIN 3DKIN 3DKIN 3DKIN 3DKIN 3DKIN ',
     &  '3DKIN 3DKIN 3DKIN'
      WRITE(55,*) '3DKIN 3DKIN 3DKIN 3DKIN 3DKIN 3DKIN 3DKIN ',
     &  '3DKIN 3DKIN 3DKIN'
      WRITE(55,*) '3DKIN                                           ',
     &  '              3DKIN'
      WRITE(55,*) '3DKIN                                           ',
     &  '              3DKIN'
      WRITE(55,*) '3DKIN                      VERSION 5.2.1        ',
     &  '              3DKIN'
      WRITE(55,*) '3DKIN             ELECTRIC POWER RESEARCH CENTER',
     &  '              3DKIN'
      WRITE(55,*) '3DKIN            NORTH CAROLINA STATE UNIVERSITY',
     &  '              3DKIN'
      WRITE(55,*) '3DKIN           COPYRIGHT 1996, 2003 - BY NCSU  ',
     &  '              3DKIN'
      WRITE(55,*) '3DKIN                                           ',
     &  '              3DKIN'
      WRITE(55,*) '3DKIN                 3DKIN HARDCOPY OUTPUT    ',
     &  '               3DKIN'
      WRITE(55,*) '3DKIN                                           ',
     &  '              3DKIN'
      WRITE(55,*) '3DKIN                                           ',
     &  '              3DKIN'
      WRITE(55,*) '3DKIN 3DKIN 3DKIN 3DKIN 3DKIN 3DKIN 3DKIN ',
     &  '3DKIN 3DKIN 3DKIN'
      WRITE(55,*) '3DKIN 3DKIN 3DKIN 3DKIN 3DKIN 3DKIN 3DKIN ',
     &  '3DKIN 3DKIN 3DKIN'
      
      WRITE(55,80)TITLE
 80   FORMAT (//A80)
C     
C     READ CONTROL INPUTS FROM GENERAL CONTROL INPUT FILE :
C     
C---  READ PROBLEM TYPE
C     
C--------ITYPE = EVP : EIGEN-VALUE PROBLEM.
C---------ITYPE = FSP : FIXED-SOURCE PROBLEM.
C     
      READ (1,10) ITYPE
      CALL INPUTCK('ITYPE',ITYPE,'EVP','FSP',' ',IOERROR) 
C     
C     READ WHETHER X-SECTION OPTION :
C     
C------NXSEC = 'Y'   : OPTION ON
      
      READ (1,10) NXSEC
      CALL INPUTCK('NXSEC',NXSEC,'Y','N',' ',IOERROR)
C     
C------SKIP FOLLOWING INPUT IF X-SECTION CORRECTION OPTION IS OFF
C     
      IF(NXSEC.EQ.'Y') THEN
C     
C---- READ CRITICALITY/POWER LEVEL SEARCH OPTION :
C     
C---------ASRCH = 'Y'    : SEARCH ON (CRITICALITY OR POWER LEVEL)
C     
C     SEARCH DEPENDS ON PROBLEM TYPE, FOR :
C     FSP ==> POWER LEVEL
C     EVP ==> CRITICALITY
C     
       READ (1,10) ASRCH
       CALL INPUTCK('ASRCH',ASRCH,'Y','N',' ',IOERROR)
C     
C---- READ TYPE OF SEARCH [ IF (ASRCH .EQ. 'Y') ]:
C     
C......SEARCH OPTIONS :
C--------------IWHICH = 1 ...POWER LEVEL
C--------------IWHICH = 2 ...SOLUBLE POISON CONCENTRATION [ PPM ]
C--------------IWHICH = 3 ...INLET COOLANT TEMPERATURE [ F ]
C--------------IWHICH = 4 ...LEAD CONTROL BANK TIP AXIAL LOCATION [ CM ]
C     
       IF(ASRCH.EQ.'Y')THEN
        READ (1,*) IWHICH
        IF(IWHICH.LT.1.OR.IWHICH.GT.4)THEN
         WRITE(6,*)
     &     '####ERROR, INPUT THE RIGHT VALUE FOR THE SEARCH TYPE'
         IOERROR = 1
        ENDIF
        IF(ITYPE.EQ.'EVP')READ(1,*)CKE_TARGET
        IF(CKE_TARGET.LT.0.)THEN
         WRITE(6,*)
     &     '####ERROR, INPUT THE RIGHT VALUE FOR THE TARGET K_EFF'
         IOERROR = 1
        ENDIF
       ENDIF
C     
C     
C---- READ TEMPERATURE FEEDBACK OPTION :
C     
C---------ANFDBK = 'Y'   : TEMPERATURE FEEDBACK ON
C     
       READ (1,10) ANFDBK
 10    FORMAT (A5)
       CALL INPUTCK('ANFDBK',ANFDBK,'Y','N',' ',IOERROR)
       
      ELSE
C     
C---- SET CRITICALITY/POWER LEVEL SEARCH OPTION TO 'N'
C     
C---------ASRCH = 'N'    : SEARCH OFF (CRITICALITY OR POWER LEVEL)
C     
C     SEARCH DEPENDS ON PROBLEM TYPE, FOR :
C     FSP ==> POWER LEVEL
C     EVP ==> CRITICALITY
C     
       ASRCH = 'N'
C     
C     
C---- SET TEMPERATURE FEEDBACK OPTION TO 'N'
C     
C---------ANFDBK = 'N'   : TEMPERATURE FEEDBACK OFF
C     
       ANFDBK = 'N'
       
      ENDIF
C---------------------------END OF NXSEC IF STATEMENT
C     
C     
C---- SET BUCKLING OPTION OPTION :
C     
C---------ABUCKL = 'Y'     : BUCKLING IS ON
C     
      IXESM=0
      READ(1,10) ABUCKL
      CALL INPUTCK('ABUCKL',ABUCKL,'Y','N',' ',IOERROR)

!.....backward compatible with 3DKIN V5.0.2 input 
!.....note that input sequence for 3DKIN V5.0.2 is slightly different
      IF(IOERROR.EQ.0)GOTO 109
      WRITE(6,108)
 108  FORMAT(/,'ERROR is OK',/,
     $ '--- ASSUMED INPUT FOLLOWS OLDER 3DKIN (V5.0.2) FORMAT',/)
      IF(NXSEC.EQ.'Y')THEN
       DO I=1,5
        IF(ABUCKL(I:I).NE.' ')THEN
         IF(ICHAR(ABUCKL).LT.48.OR.ICHAR(ABUCKL).GT.54)THEN
          WRITE(6,*)'Fatal Error in Xe-Sm options '
          WRITE(6,*)'Data number ',i,' Input= ',IXE(I)
          WRITE(6,*)'Enter option 1 through 6 only'
          STOP 'FILE_CNT.F'          
         ELSE
          IXE(1)=ICHAR(ABUCKL)-48
          IXESM=1
          IOERROR=0
          READ(1,10)ABUCKL
          CALL INPUTCK('ABUCKL',ABUCKL,'Y','N',' ',IOERROR)
         ENDIF
        ENDIF
       ENDDO
      ENDIF

 109  IF(ABUCKL.EQ.'Y')THEN
       MBUCKL=1
      ELSE
       MBUCKL=0
      ENDIF
C     
C     
C---- READ CORE AVERAGE BURNUP AT 1ST BURNUP STEP :
C     
      READ (1,*) AVBU(1)
      IF(AVBU(1).LT.0.000)THEN
       WRITE(6,*)
     &   '####ERROR, INPUT THE RIGHT VALUE FOR 1ST BURNUP STEP'
       IOERROR = 1
      ENDIF
C     
C---- READ DEPLETION OPTION :
C     
C---------IBURN = 'Y'   : DEPLETION ON
C     
      READ (1,10) IBURN
      CALL INPUTCK('IBURN',IBURN,'Y','N',' ',IOERROR)
C     
      NBU   = 0
      NBUP1 = 1
      IF (IBURN.EQ.'Y') THEN
       READ (1,*) NBU
       NBUP1=NBU+1
       IF(NBUP1.GT.NBUSTEP) THEN
        WRITE(6,*)' FATAL ERROR: NOT ENOUGH SPACE SETUP FOR ',
     &    'BURNUP STEPS: SET NBUSTEP = ',NBUP1
        STOP 'FILE_CNT'
       ENDIF
       DELBU(1)= 0.0
       READ (1,*) (DELBU(I),I=2,NBUP1)
C     
C---- CALCULATE THE AVERAGE BURNUP
C     
       DO 100 I = 2,NBUP1
        AVBU(I) = AVBU(I-1)+DELBU(I)
 100   CONTINUE
      ENDIF
C
C     SET XE-SM OPTION TO NO XENON NO SAMARIUM
C
      IF(NBUP1.GT.NXESM)THEN
       WRITE(6,*)'Increase NXESM in xeopt.fcb to ',NBUP1
       STOP 'FILE_CNT.F'
      ENDIF
      
      IF(IXESM.EQ.0)THEN
       DO 112 I=1,NBUP1
        IXE(I)=1
 112   CONTINUE
      ELSE
       DO I=2,NBUP1
        IXE(I)=IXE(1)
       ENDDO
      ENDIF
C     
C-------READ LETDOWN SOLUBLE POISON
C           
C     
C---  SKIP FOLLOWING INPUT IF X-SECTION CORRECTION OPTION IS OFF
C     
      IF(NXSEC.EQ.'Y') THEN
C     
C     XENON-SAMARIUM OPTIONS
C       
C     IXE = 1       : NO XENON-SAMARIUM (CLEAN CORE)
C     IXE = 2       : FREEZE XENON-SAMARIUM
C     IXE = 3       : EQUILIBRIUM XENON-SAMARIUM
C     IXE = 4       : NO XENON-TRANSIENT SAMARIUM
C     IXE = 5       : TRANSIENT XENON-SAMARIUM
C     IXE = 6       : NO XENON - FREEZE SAMARIUM
C     
       IF(IXESM.EQ.0)THEN
        READ(1,*)(IXE(I),I=1,NBUP1)
        DO 111 i=1,NBUP1
         IF(IXE(I).LT.1.OR.IXE(I).GT.6)THEN
          WRITE(6,*)'Fatal Error in Xe-Sm options '
          WRITE(6,*)'Data number ',i,' Input= ',IXE(I)
          WRITE(6,*)'Enter option 1 through 6 only'
          STOP 'FILE_CNT.F'
         ENDIF
 111    CONTINUE
       ENDIF
       READ (1,*) NPPMX
       IF(NPPMX.GT.NBUSTEP) THEN
        WRITE(6,*)' FATAL ERROR: NOT ENOUGH SPACE SETUP FOR ',
     &    'SOLUBLE POISON BURNUP MASK: SET NBUSTEP = ',NPPMX
        STOP 'FILE_CNT'
       ENDIF 
       DO 425 IPM=1,NPPMX
        READ (1,*) BUPM(IPM),PPM(IPM)
 425   CONTINUE
C     
C------READ CONTROL BANKS AXIAL WITHDRAWAL POSITON
C     
       READ(1,*)(ZB(IBK),IBK=1,NBMAX)
C     
C---- READ STEADY-STATE EQUILIBRIUM POWER LEVEL :
C     
       READ (1,*) PRCNT
       PR = PRCNT/100.00
       IF(PR.LT.0.0.OR.PR.GT.1.50)THEN
        WRITE(6,*)'####ERROR, INPUT THE RIGHT VALUE FOR THE POWER LEVEL'
        IOERROR = 1
       ENDIF
       
      ELSE
       
       NPPMX=NBUSTEP
       DO 705 IPM=1,NPPMX
        BUPM(IPM)=(IPM-1)*99999./NPPMX
        PPM(IPM)=0.0
 705   CONTINUE
       
       PRCNT=100.
       PR=PRCNT/100.00
       
      ENDIF
C     
C---- READ I/O EDIT OPTIONS :
C     
C........INPUT LONG INPUT EDIT OPTION
      READ(1,10) AL3
      CALL INPUTCK('AL3',AL3,'Y','N','YS',IOERROR)
C     
C........INPUT LONG OUTPUT EDIT OPTION
      READ(1,10) NPC
      CALL INPUTCK('NPC',NPC,'Y','N',' ',IOERROR)
      
      IF(NPC.EQ.'Y') THEN
C     
C........INPUT QUANTITIES TO BE OUTPUT USING LOG OUTPUT EDIT
       READ(1,*) NOUTLONG
       IF(NOUTLONG.GT.0) THEN
        IF(NOUTLONG.LE.10) THEN
         READ(1,75) (AOUTLONG(N),N=1,NOUTLONG)
 75      FORMAT(10(A5,1X))
        ELSE
         READ(1,75) (AOUTLONG(N),N=1,10)
         READ(1,75) (AOUTLONG(N),N=11,NOUTLONG)
        ENDIF
       ENDIF
      ENDIF
C     
C........INPUT OUTPUT TO THE SCREEN OPTION
      READ(1,10) CRTON
      CALL INPUTCK('CRTON',CRTON,'Y','N',' ',IOERROR)
C     
C-----RESTART FILE WRITE CONTROL :
C     
C----------ISAVE(IBU)= 'Y'   : WRITE RESTART FILE ( FOR BURNUP STEP IBU
C     
C     ***[ NEED TO SUPPLY OPTION & FILE NAME FOR EACH BURNUP STEP ]***
C     
      DO 77 IBU=1,NBU+1
       READ(1,10)ISAVE(IBU)
       CALL INPUTCK('ISAVE',ISAVE(IBU),'Y','N',' ',IOERROR)
       IF(ISAVE(IBU).EQ.'Y') READ(1,12) OUT(IBU)
 77   CONTINUE
      
      IF(ITRAN .EQ. 'Y' )THEN
C     
C-------SHOULD RESTART FILE BE WRITTEN ALSO AT OUTPUT TIMES?
C     
       READ(1,10) ISAVETR
       CALL INPUTCK('ISAVETR',ISAVETR,'Y','N',' ',IOERROR)
       IF(ISAVETR.EQ.'Y')READ(1,12)OUTTR
      ENDIF

      RETURN
      END
