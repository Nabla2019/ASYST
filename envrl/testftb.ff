*deck testftb
       program testftb
c
c  Small program to illustrate (and check) ftb usage.
c
       common /fast/ a(100000)
       integer t,output
c
       data output/12/
c
       call timset (dum)
       write (output,1000)
 1000  format ('1Program To Illustrate Ftb Usage')
       call ftbint (2)
c
c  Sequential processing of files is illustrated by writing,
c  read-writing, and reading nearly identical files on each of
c  the seven units. Wall clock and cpu times are printed.
c
c  Loop over units.
       do 10 l = 1,7
         if (l .eq. 2) go to 10
         fl = l
         call timel (tcpu)
         call clock (t)
         write (output,1001) l,t
 1001  format ('0Start time for file',i2,' is ',a10,'.')
c
c  Describe file.
         call ftbdsb (fl,99,100,1)
c
c  Open file in write mode, compute quantity and store in set,
c  and write set.
         call ftbopn (fl,2)
c
c  Loop over sets.
         do 11 j = 1,100
           call ftbpr1 (fl,ii)
c
c  Loop over items in a set.
           do 12 i = 1,99
             a(ii) = l*10000 + 100*j + i
             ii = ii + 1
   12      continue
   11    continue
c
c  Close file.
         call ftbcls (fl)
c
c  Open file in read-write mode, changing sign of quantities
c  in file.  Also check if quantities are correct.
c        call open (l,3)
         call ftbopn (fl,3)
         do 13 j = 1,100
c          call proc1 (l,ii)
           call ftbpr1 (fl,ii)
           do 14 i = 1,99
             a(ii) = -a(ii)
             if (a(ii) + l*10000 + 100*j + i .ne. 0.0) go to 100
             ii = ii + 1
   14      continue
   13    continue
c
c  Close the file.
         call ftbcls (fl)
c
c  Open file in read mode and process file checking quantities.
         call ftbopn (fl,1)
         do 15 j = 1,100
           call ftbpr1(fl,ii)
           do 16 i = 1,99
             if (a(ii) .ne. -(l*10000 + 100*j + i)) go to 100
             ii = ii + 1
   16      continue
   15    continue
c
c  Seventh file not closed so that dmplst can show assignment
c  of buffers.
         if (l .ne. 7) call ftbcls (fl)
c
c  Write elapsed times.
         call clock (t)
         call timel (tcpu)
         write (output,1002) l,t,tcpu
 1002  format ('   end time for file',i2,' is ',a10,', cpu time is',
     * f7.4,' sec.')
   10  continue
c
c  Open bulk file, file 1, in random mode and move sets around.
       call ftbopn (1.0,4)
c
c  Get reserv file to hold set, using nextid to get file id.
       fr = ftbnid (0)
       i = fr
       call ftbrsv (fr,99,1,ifr)
c
c  Get fifth set, check that right set obtained, then write fifth
c  set over second set.
       call ftbget (1.0,5,a(ifr))
       if (a(ifr) .ne. (-10501.0)) go to 100
       call ftbput (1.0,2,a(ifr))
c
c  Get second set, checking first word.
       a(ifr) = 0.0
       call ftbget (1.0,2,a(ifr))
       if (a(ifr) .ne. (-10501.0)) go to 100
c
c  List links.
       call dmplst
c
c  Close files 1 and 7.
       call ftbcls (1.0)
       call ftbcls (7.0)
c
c  Delete all files, using nextid and isfdes to determine number
c  of files. (Not really necessary, but shows use of routines.)
       fr = ftbnid (0)
       i = fr
       do 17 l = 1,i
         if (l .eq. 2) go to 17
         fl = l
         ii = isfdes(fl)
         if (isfdes(fl) .ne. 0) call ftbdel (fl)
   17  continue
c
c  Test of the ftbtnc subroutine by a process similar to the first
c  test except that only units 1 and 3 are tested and another loop
c  is introduced to truncate the number of records starting at one
c  and going up to 2500.  Wall clock and cpu times are printed.
c
c  Loop over units.
c      do 60 l = 1,3,2
       l = 3
         fl = l
         call timel (tcpu)
         call clock (t)
         write (output,1001) l,t
c
c  Loop over number of records.
         do 80 m = 1,2500,50
c
c  Describe file.
           call ftbdsb (fl,1,2500,1)
c
c  Open file in write mode, compute quantity and store in set,
c  and write set.
           call ftbopn (fl,2)
c
c  Loop over sets.
           do 61 j = 1,m
             call ftbpr1 (fl,ii)
c
c  Loop over items in a set.
             a(ii) = l*1000000 + 100*j + i
   61      continue
c
c  Close file.
           call ftbtnc (fl)
c
c  Open file in read-write mode, changing sign of quantities
c  in file.  Also check if quantities are correct.
c          call open (l,3)
           call ftbopn (fl,3)
           do 63 j = 1,m
             call ftbpr1 (fl,ii)
             a(ii) = -a(ii)
             if (a(ii) + l*1000000 + 100*j + i .ne. 0.0) go to 100
   63      continue
c
c  Close the file.
           call ftbcls (fl)
c
c  Open file in read mode and process file checking quantities.
           call ftbopn (fl,1)
           do 65 j = 1,m
             call ftbpr1(fl,ii)
             if (a(ii) .ne. -(l*1000000 + 100*j + i)) go to 100
   65      continue
c
c  close file.
           call ftbcls (fl)
c
c  delete file.
           call ftbdel (fl)
   80    continue
c
c  Write elapsed times.
         call clock (t)
         call timel (tcpu)
         write (output,1004) l,t,tcpu
 1004  format ('   end time for file',i2,' is ',a10,', cpu time is',
     * f7.4,' sec.')
   60  continue
c
c  List files again.
       call dmplst
c
c  Get overall cpu time and get off machine.
       call timer (tcpu)
       write (output,1003) tcpu
 1003  format ('0overall cpu time is',f7.4,' sec.')
       stop
c
c  Dump if error.
  100  call fabend
       stop 'fabend'
       end
