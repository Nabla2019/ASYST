       subroutine ftbint (lowhi)
c
c  This subroutine initializes the ftb links
c  lowhi = 1 if links are at low end of memory
c  lowhi = 2 if links are at high end of memory
c
c  Cognizant engineer: rjw
c
*call ftbcom
c
*call efiless
*call efilesd
c
       data iftb/12345/
c
       call ftbftb
       first = iftb
       call ftbmem (szz(8),szz(2))
       szz(1) = szz(8) - locf(a(1))
       nolink = 1
       nofils = 1
       size(1) = szz(1) - 201
       if (size(1).gt.0) go to 30
       write (output,1001)
 1001  format ('0******** not sufficient fast core space for ftb routine
     *s')
   32  call fabend
   31  write (output,1002)
 1002  format ('0******** argument error to ftb initilization')
       go to 32
   30  if (lowhi.lt.1 .or. lowhi.gt.2) go to 31
       if (lowhi.eq.1) go to 13
       hilo = .false.
       maxz(1) = size(1) + 1
       minz(1) = 1
       link1 = maxz(1)
       go to 14
   13  hilo = .true.
       minz(1) = 201
       maxz(1) = size(1) + 201
       link1 = 1
$if -def,in32,5
   14  ia(link1) = 0
       ia(link1+1) = 0
       ia(link1+2) = 1
       ia(link1+3) = ishft(link1,30) .or. 200
       ia(link1+197) = 0
$if def,in32,9
   14  a(link1) = 0.0
       ia(1,link1+1) = 0
       ia(2,link1+1) = 0
       ia(1,link1+2) = 0
       ia(2,link1+2) = 1
       ia(1,link1+3) = link1
       ia(2,link1+3) = 200
       ia(1,link1+197) = 0
       ia(2,link1+197) = 0
       nexdes = link1+4
       lasdes = link1
       maxz(2) = 1
$if def,lcm,2
       if (szz(2) .ne. 0) maxz(2) = szz(2) - (.not.mask(1) .and.
     * locf(b(1)))
       minz(2) = 1
       size(2) = maxz(2) - 1
       do 15 i = 1,4
   15  dpn(i) = .false.
       do 23 i = 3,7
       minz(i) = 1
       size(i) = szz(i)
       maxz(i) = size(i) + 1
   23  ireclt(i-2) = 0
       dly = .false.
       dlt = .false.
       return
       end
