       subroutine ma30dd(a,icn,iptr,n,iactiv,itop,reals)
!  Subroutine performs garbage collection operations on the arrays a,
!  icn and irn.
!
       use ma28mod
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
       integer iactiv,itop,n
       logical reals
       real(kr) a(:)
       integer icn(:),iptr(:)
!
!  iactiv is the first position in arrays a/icn from which the compress
!  starts. On exit, iactiv equals the position of the first entry
!  in the compressed part of a/icn.
!
       integer j,jpos,k,kl,kn
!
       if (reals) then
         icncp = icncp + 1
       else
         irncp = irncp + 1
       endif
!  Set the first non-zero entry in each row to the negative of the
!  row/col number and hold this row/col index in the row/col
!  pointer. This is so that the beginning of each row/col can
!  be recognized in the subsequent scan.
       do j = 1,n
         k = iptr(j)
         if (k.lt.iactiv) cycle
         iptr(j) = icn(k)
         icn(k) = -j
       enddo
       kn = itop + 1
       kl = itop - iactiv + 1
!  Go through arrays in reverse order compressing to the back so
!  that there are no zeros held in positions iactiv to itop in icn.
!  Reset first entry of each row/col and pointer array iptr.
       do k = 1,kl
         jpos = itop - k + 1
         if (icn(jpos).eq.0) cycle
         kn = kn - 1
         if (reals) a(kn) = a(jpos)
         if (icn(jpos).lt.0) then
!  First non-zero of row/col has been located.
           j = -icn(jpos)
           icn(jpos) = iptr(j)
           iptr(j) = kn
         endif
         icn(kn) = icn(jpos)
       enddo
       iactiv = kn
       return
       end
