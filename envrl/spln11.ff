       subroutine spln11 (nx,x,f0,f1,ij,c)
c  Computes one dimensional spline values using first derivatives.
c
c  nx      Number of points in the interpolation.
c  x       Array containing nx independent variables supplied by user
c          on entry.
c  f0      Array containing nx dependent variables supplied by user
c          on entry.
c  f1      Array containing boundary first derivatives supplied by
c          user on entry and first derivatives for all points on return.
c  ij      Skip factor for f0 and f1 arrays.
c  c       Array of dimension nx used for temporary storage.
c
       implicit none
c
       integer ij,nx
       real c(nx),f0(*),f1(*),x(nx)
c
       integer i,j,k,m
       real dn,eln2,eln4,eln6,elnp2,elnp4,elnp6
c
       if (nx .lt. 2) then
         write (6,3001)
 3001  format (' Number of points input to spln11 is less than 2, no res
     *ults returned.')
         stop 'spln11'
       endif
       k = nx - 2
       if (k .eq. 0) return
       elnp6 = 1.0/(x(2) - x(1))
       elnp2 = 2.0*elnp6
       elnp4 = 2.0*elnp2
       elnp6 = 6.0*elnp6*elnp6
       c(1) = 0.0
       i = 1
       j = 1
       do 10 m = 1,k
         i = i + 1
         j = j + ij
         eln2 = elnp2
         eln4 = elnp4
         eln6 = elnp6
         elnp6 = 1.0/(x(i+1) - x(i))
         elnp2 = 2.0*elnp6
         elnp4 = 2.0*elnp2
         elnp6 = 6.0*elnp6*elnp6
         dn = 1.0/(eln4 + elnp4 - eln2*c(i-1))
         c(i) = elnp2*dn
         f1(j) = (f0(j)*(eln6 - elnp6) - f0(j-ij)*eln6 +
     *   f0(j+ij)*elnp6 - eln2*f1(j-ij))*dn
   10  continue
c
       do 11 m = 1,k
         f1(j) = f1(j) - c(i)*f1(j+ij)
         i = i - 1
         j = j - ij
   11  continue
       return
       end
