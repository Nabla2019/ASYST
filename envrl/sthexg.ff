*deck sthexg
       program sthexg (input,output,tape1,tape5=input,tape6=output,
     * debug=output)
c program to generate helium thermodynamic property tables.
       common /fast/ a(1)
       common/data/g(32),r,gamma,vp(9),dtp,pcc,ptp,tcc,ttp,tul,tll,
     1 pul,dcc
       common/cont/if
       common/crit/em,eok,rm,tc,dc,x(33),pc,sig,w
       common/sen/beta,xo,delta,e1,e2,agam
       common/cpid/gi(11)
       common/data1/gv(9),gt(9),fv(4),ft(4),ev(8),et(8)
       common/isp/n,nw,nww
       common/satc/aa(20),dppv
       common/para/percen
       common/1/b(33)
       common/check/deld,delt,dstar,tstar
       common/hjm/epsi,cpcv,rrr,akt
       common/idex/id
       common/han/ce,tci
       integer ia(1,1)
       integer isys1(6),isys2(6)
       integer l3a(8),l3b(9),l3c(9),ttl(10),hed(9)
       equivalence (a(1),ia(1,1))
       logical err
       tk = 5.2014
c...tk is the critical temperature in kelvin
       pk = 227450.
c...pk is the critical pressure in pascal
       dk = 69.641237
c...dk is the critical density in kg/cu-meter
c...
c...data statements
c...
       data l3a/1000,0,2,2,0,1,2*0/
       data l3b/1001,-1999,0,0,0,1,2,1,1/
       data l3c/2001,-2999,0,0,0,1,2,1,1/
       data ttl    /"(sthexg/00","1,04/06/82",",jkh)     ","          ",
     * "program to"," generate ","helium the","rmodynamic"," property ",
     * "tables"/
       data isys1/0,0,0,100,-1,-1/, isys2/0,0,0,5,-1,-1/
c...
       call header (1,95,ttl)
c...
c...the systems diagnostic error system is turned off
c...for overflow and underflow
c...
       call systemc (30,isys1)
       call systemc (115,isys2)
       call ftbint (2)
       i = lcontg(1)
       call ftbrsv (1.0,i,-1,l)
c...
c...setting the array to negative indefinite
c...the array is set to negative indefinite so that the
c...system is not relied upon to do it for us.
c...
       j = l + i - 1
       do 100 k = l,j
             ia(k) = 60000000000000000000b
  100  continue
       j = 0
       k = 0
       call inp (a(l),i,hed,j,k,isw)
       if (isw .eq. 3) stop 6
       if (isw .ne. 1) go to 10
       write (6,2001)
 2001  format ("1******** no input data supplied.")
       stop 16
   10  if (k .gt. 1) go to 11
       write (6,2002)
 2002  format ("0******** no data cards entered.")
       stop 16
   11  err = isw .eq. 2
       if (j .le. 0) go to 12
       write (6,2003)
 2003  format ("0program does not allow multiple cases, other cases igno
     *red.")
   12  call shift (1.0,k,2,l)
       i = lcontg(1)
       call ftbrsv (2.0,i,1,nsl)
       ln = nsl + i
       call inp2 (a(l),a(nsl),l3a)
       if (l3a(6) .gt. 0) go to 13
       write (6,2004)
 2004  format ("0******** error prevents further input checking.")
       stop 16
   13  nt = ia(1,nsl)
       np = ia(1,nsl+1)
       if (nt.gt.1 .and. np.gt.1) go to 14
       write (6,2005)
 2005  format ("0******** incorrect data on card 1000, no further checki
     *ng performed.")
       stop 16
   14  nl1 = nsl + nt
       nl2 = nl1 + np
       if (nl2 .le. ln) go to 15
   16  write (6,2006)
 2006  format ("0******** not sufficient region space furnished.")
       stop 16
   15  l3b(3) = nt
       l3b(4) = nt
       call inp2 (a(l),a(nsl),l3b)
       if (l3b(6) .lt. 0) go to 17
       j = nsl
       ns = 0
c....
c... 2.177 is the lower limit of temperature for helium 1
c...
       if (a(j) .lt. 2.177) go to 19
c...tk is the critical temperature in kelvin
       if (a(j) .le. tk) ns = 1
       do 18 i = 2,nt
       if (a(j+1) .le. tk) ns = ns + 1
       if (a(j+1) .le. a(j)) go to 19
   18  j = j + 1
c...
c... 1500.0 is the upper limit of temperature for helium 1
c...
       if (a(j) .gt. 1500.0) go to 19
       if (ns .ge. 2) go to 20
   19  write (6,2007)
 2007  format ("0******** temperatures not in increasing order or not in
     * range.")
   17  err = .true.
   20  l3c(3) = np
       l3c(4) = np
       call inp2 (a(l),a(nl1),l3c)
       if (l3c(6) .lt. 0) go to 21
       j = nl1
       ns2 = 0
       if (a(j) .le. 0.0) go to 23
c... pk is the critical pressure in pascals
       if (a(j) .le. pk)ns2 = 1
       do 22 i = 2,np
       if (a(j+1) .le. pk)ns2 = ns2 + 1
       if (a(j+1) .le. a(j)) go to 23
   22  j = j + 1
c...
c... 1.0e8 is the upper limit of pressure for helium 1 calculation
c...
       if (a(j) .le. 1.0e8) go to 24
   23  write (6,2008)
 2008  format ("0******** pressures not in increasing order or not bound
     *ed.")
   21  err = .true.
   24  i = inp8(1,a(l))
       if (err .or. i.ne.0) stop 16
       if (a(nsl) .ne. 2.177) go to 25
c...5.2014 is the critical temperature of helium 1
       if (a(nsl+ns-1) .ne. 5.2014) go to 25
c... .4e-29 is the lower limit for pressure of helium 1
       if (a(nl1) .gt. .4e-29) go to 25
       if (a(nl1+np-1) .eq. 1.0e8) go to 26
   25  write (6,2010)
 2010  format ("0temperatures equal to 2.177, and 1500.0, a pressure
     *less than or equal to .4e-29, and a pressure equal
     *1.0e8"/" should be entered for sthex use.")
c
   26  nl3 = nl2 + 13*ns
       nl4 = nl3 + 13*ns2
       nl5 = nl4 + 6*nt*np
       if (nl5 .gt. ln) go to 16
       ln = nl5 - nsl
       write (6,2009)nt,np,ns,ns2,ln
 2009  format ("0number of single phase temperatures ="i4/"0number of si
     *ngle phase pressures ="i4/"0number of saturated temperatures ="i4/
     *"0number of saturated pressures ="i4/"0number of words required ="
     * i6)
       write(6,2011)
 2011  format("1","pressure is input in pascals and output in pascals"/
     *"0temperature is input in kelvin and the output is in kelvin"/
     *"0specific volume is output in cubic-meter/kilogram"/
     *"0internal energy is output in joule/kilogram"/
     *"0thermal expansion is output in 1.0/kelvin"/
     *"0compressibilty is output in 1.0/pascals"/
     *"0heat capacity is output in joule/(kilogram-kelvin)"/
     *"0entropy is output in joule/(kilogram-kelvin)"/
     *"0if -i is printed in the table helium is in the solid
     *region and it@s value is not applicable")
       call sat1he (a(nsl),a(nl2),ns)
       call sat2he (a(nl1),a(nl3),ns2)
       call snphhe (a(nsl),a(nl1),a(nl4),nt,np)
       write (1) nt,np,ns,ns2
       nl5 = nl5 - 1
       write (1) (a(i),i=nsl,nl5)
       endfile 1
       stop
       end
      subroutine fluids
      dimension g(32),vp(9)
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul,dcc
      common /cont/if
      common/crit/em,eok,rm,tc,dc,x,pc,sig
  100 format(" hi, welcome to the world of fluid properties, if you are
     1not familiar with the program please enter a 0 ")
      write (6,100)
      read (5,101)i
      if(i.eq.0)call info
  101 format(i1)
   99 write (6,102)
      write (6,104)
  102 format("  select a fluid from the following list")
  104 format("    para hydrogen=1"/"    normal hydrogen=10"/"    ortho h
     1ydrogen=11"/"    helium=2"/"    neon=3"/"    nitrogen=4"/"    oxyg
     2en=5"/"    argon=6"/"    methane=7"/"
     4termination=8")
      read (5,*)if
      write (6,*)if
      go to(1,2,3,4,5,6,7,999,999,10,11),if
    1 call data ph2
      go to 13
    2 call data he
      go to 99
    3 call data ne
      go to 99
    4 call data n2
      go to 13
    5 call data o2
      go to13
    6 call data ar
      go to 13
    7 call data ch4
      go to 13
   10 call  nh2
      go to 13
   11 call  oh2
      go to 13
   13 write (6,105)
  105 format(" do you prefer engineering units or metric units ?"
     1/" enter a 0 for engineering units or a 1 for metric")
      read (5,101)iu
      write (6,106)
  106 format(" do you want saturation properties ?"
     1/" enter 0 for yes or 1 for no")
      read (5,101)ic
      write (6,107)
  107 format(" do you want a single point or a table of properties ?"
     1/* enter a 0 for a single point or a 1 for a table*)
      read (5,101)iv
   21 if(ic.eq.0)go to 30
      if(iv.eq.1)go to 40
   22 if(iu.eq.0)go to 19
      write (6,103)
      read (5,*)p,d,t
      p=p/1.01325
      go to 20
   19 write (6,108)
  108 format(" enter pressure in lb/sq in, density in lb/cu ft, and"
     1/" temperature in degrees f")
      read (5,*)p,d,t
      p=p/14.695949
      d=d*16.01846371/em
      if(t.eq.0.0)go to 20
      t=(t-32.)/1.8+273.15
   20 if(p.le.0.0)go to 14
  103 format(" enter pressure in bar, density in moles/liter, and temper
     1ature in kelvins")
      if(d.le.0.0)go to 17
      if(t.le.0.0)go to 12
      go to 22
   12 if(p.le.0.or.d.le.0.0)go to 99
      t=find t(p,d)
      call limits(p,t,il)
      if(il.le.0)go to 22
      go to 16
   17 if(t.le.0.or.p.le.0)go to 99
      call limits(p,t,il)
      if(il.le.0)go to 22
      d=find d(p,t)
      go to 16
   14 if(d.le.0.0.or.t.le.0)go to 99
      p=find p(d,t)
      call limits(p,t,il)
      if(il.le.0)go to 22
   16 call repro(p,d,t,iu,iv,ic,ip,tf,delt)
      go to 22
   30 write (6,109)
  109 format(" do you want saturated liquid or saturated vapor"
     1/" enter a 0 for liquid or 1 for vapor")
      read (5,101)ip
      if(iv.eq.1)go to 40
      write (6,111)
  111 format(" do you want to enter with temperature or pressure"
     1/" enter 0 for temperature or 1 for pressure")
      read (5,101)ii
      if(ii.eq.1)go to 35
  211 if(iu.eq.1)go to 31
  112 format(" enter a temperature in degrees f")
      write (6,112)
      read (5,*)ti
      t=(ti-32.)/1.8+273.15
      if(t.le.0.0)go to 99
      go to 33
   31 write (6,113)
  113 format(" enter a temperature in degrees k")
      read(5,*)t
   33 if(t.le.0.0)go to 99
      if(t.gt.tcc.or.t.lt.ttp)go to 34
      p=vpn(t)
      if(ip.eq.0)p=p+.00001
      d=find d(p,t)
      call re pro(p,d,t,iu,iv,ic,ip,tf,delt)
      go to 211
   34 write (6,114)tcc, ttp
  114 format(" your input temperature is outside the range of the"
     1/" saturation temperatures for this fluid."
     2/" tc=",f6.2," ttp=",f6.2," try again")
      go to 211
   35 if(iu.eq.1)go to 36
      write (6,115)
  115 format(" enter a pressure in lb/sq in")
      read(5,*)pi
      if(pi.le.0.0)go to 99
      p=pi/14.695949
      go to 37
   36 write (6,116)
  116 format(" enter a pressure in bar")
      read(5,*)pi
      if(pi.le.0.0)go to 99
      p=pi/1.01325
   37 if(p.gt.pcc.or.p.lt.ptp)go to 38
      t=find tv(p)
      p=vpn(t)
      if(ip.eq.0)p=p+.0001
      d=find d(p,t)
      call re pro(p,d,t,iu,iv,ic,ip,tf,delt)
      go to 35
   38 write (6,117)pcc,ptp
  117 format(" your input pressure is outside the range of saturation"
     1/" pressures for this fluid."
     2/" pc=",f6.3," ptp=",f8.5," try again")
      go to 35
   40 if(ic.eq.1)go to 50
      if(iu.eq.1)go to 41
      write (6,118)
  118 format("  enter a starting temperature, a final temperature"
     1/" and a temperature increment, in degrees f and in that order")
      read(5,*)ts,tf,delt
      if(delt.le.0.0)go to 99
      ts=(ts-32.)/1.8+273.15
      tf=(tf-32.)/1.8+273.15
      delt=delt/1.8
      if(ts.lt.ttp.or.ts.gt.tcc)go to 45
      if(tf.lt.ttp.or.tf.gt.tcc)go to 45
      go to 42
   41 write (6,119)
  119 format(" enter a starting temperature, a final temperature"
     1/" and a temperature increment in kelvins and in that order")
      read(5,*)ts,tf,delt
      if(delt.le.0.0)go to 99
      if(ts.lt.ttp.or.ts.gt.tcc)go to 45
      if(tf.lt.ttp.or.tf.gt.tcc)go to 45
   42 t=ts
      p=vpn(t)
      if(ip.eq.0.0)p=p+.0001
      d=find d(p,t)
      call re pro(p,d,t,iu,iv,ic,ip,tf,delt)
      go to 40
   45 write (6,120)tcc,ttp
  120 format(" either your starting or final temperature is outside"
     1/" the range of saturation temperatures."
     2/" tc=",f6.2," ttp=",f6.2," try again")
      go to 40
   50 if(iu.eq.1)go to 51
      write (6,121)
  121 format(" enter pressure, starting temperature, final temperature"
     1/" and a temperature increment, in lb/cu ft, degrees f, and in"
     2/" the above order")
      read(5,*)pi,ts,tf,delt
      if(delt.le.0.0)go to 99
      p=pi/14.695949
      t=(ts-32.)/1.8+273.15
      tf=(tf-32.)/1.8+273.15
      delt=delt/1.8
      call limits(p,t,il)
      if(il.le.0)go to 50
      call limits(p,tf,il)
      if(il.le.0)go to 50
      go to 52
   51 write (6,122)
  122 format(" enter a pressure, a starting temperature, a final"
     1/" temperature and a temperature increment, in bars, degrees"
     2/" k, and in that order")
      read(5,*)pi,ts,tf,delt
      if(delt.le.0.0)go to 99
      t=ts
      p=pi/1.01325
      call limits(p,t,il)
      if(il.le.0)go to 50
      call limits(p,tf,il)
      if(il.le.0)go to 50
   52 d=find d(p,t)
      call re pro(p,d,t,iu,iv,ic,ip,tf,delt)
      go to 50
  999 continue
      stop
      end
      subroutine data et
      write (6,100)
  100 format(" ethane is scheduled to be added to the fluids"
     1/" pack in the next fiscal year")
      return
      entry data pr
      write (6,101)
  101 format(" propane is scheduled to be added to the fluids"
     1/" pack after fy78")
      return
      entry data nh3
      write (6,102)
  102 format(" ammonia is scheduled to be added to the fluids"
     1/" pack during fy78")
      return
      entry data sh
      entry data so
      write (6,103)
  103 format(" the slush programs will be added to the fluids"
     1/" pack in fy78")
      return
      end
      subroutine re pro(p,d,t,iu,iv,iq,ip,tf,delt)
       dimension g(32),vp(9)
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul
      common/cont/ic
      common/crit/em,eok,rm,tc,dc,x,pc,sig
      n=500
      if(iv.eq.0)tf=t-1.
      write (6,100)
      if(iu.eq.0)go to 1
      write (6,102)
      go to 2
    1 write (6,103)
      write (6,104)
    2 continue
      do 10 i=1,n
      if(i.eq.1)go to 3
      d=find d(p,t)
    3 h=enthal(p,d,t)
      s=entrop(d,t)
      w=sound(d,t)
      cpp=cp(d,t)
      cvv=cv(d,t)
      q=p*1.01325
      if(iu.eq.0)go to 21
      if(ic.eq.1.or.ic.eq.10.or.ic.eq.11)go to 20
      if(ic.eq.9)go to 20
      th=therm(d,t)
      v=visc(d,t)
      write (6,101)q,d,t,h,s,cpp,cvv,w,th,v
      go to 9
   20 write (6,101)q,d,t,h,s,cpp,cvv,w
      go to 9
  101 format(f8.2,f8.4,f9.2,f9.2,f8.2,2f7.2,f8.2,f7.2,f7.1)
  100 format(" pressure  density   temp      h       s     cp    cv   s
     1 sound   cond   visc")
  102 format("   bar     mol/l      k      j/mol  j/mol-k    j/mol-k
     1m/s    mw/m-k mi g/cm-s")
  103 format("  lb/sq in lb/cu ft  deg f   btu/lb       btu/lb-f
     1 f/s     btu   lb/ft-s")
  104 format("
     1       ft-hr-f  e+7")
   21 h=h/(2.324445*em)
      s=s/(4.184001*em)
      cpp=cpp/(4.184001*em)
      cvv=cvv/(4.184001*em)
      w=w*3.280840
      po=p*14.695949
      do=d*em/16.01846371
      to=t*1.8-459.67
      if(ic.eq.1.or.ic.gt.8)go to 22
      th=therm(d,t)*.000578176
      v=visc(d,t)*.0067196897
      write (6,105)po,do,to,h,s,cpp,cvv,w,th,v
  105 format(f8.1,f8.3,2f9.2,f8.2,2f7.3,f8.0,f7.4,f7.3)
      go to 9
   22 write (6,101)po,do,to,h,s,cpp,cvv,w
    9 t=t+delt
      if(t.gt.tf+.01)go to 11
      if(iq.eq.0)p=vpn(t)
      if(ip.eq.0)p=p+.0001
   10 continue
   11 continue
      return
      end
      subroutine data ch4
      dimension g(32),vp(9),gi(11)
      dimension gv(9),gt(9),fv(4),ft(4),ev(8),et(8)
      dimension a(20)
      common/sen/beta,xo,delta,e1, e2, agam
      common/cpid/gi
      common/crit/ em, eok, rm, tc, dc, x , pc, sig
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul,dcc
      common/data1/gv,gt,fv,ft,ev,et
      common/isp/n,nw,nww
      common/satc/a,dtpv
      nww=0
      write (6,100)
  100 format(" the range of temperature for methane is 90.68 to 500 k"
     1/" with pressures to 350 bar")
      n=0
      nw = 0
      em=16.042
      eok = 168.
      rm = 4.101e-08
      tc = 190.555
      dc=0.1627
      x = 1.7124
      pc = 45.95
      sig = 3.68
      xo=0.164
      beta = 0.355
      delta = 4.352
      e1 = 2.03
      e2 = 0.287
      agam=1.190
c     parameters for transport
c     properties - hanley et. al. journal
c     of phy. chem. ref. data vol 6 no 2
c     1977
c data subroutine for methane
      gv(1)=-2.0909747942e+2
      gv(2)=2.6472692181e+2
      gv(3)=-1.4728175613e+2
      gv(4)=4.7167401921e+1
      gv(5)=-9.4918721789e+0
      gv(6)=1.2199792872e+0
      gv(7)=-9.62799355746e-2
      gv(8)=4.2741516570e-3
      gv(9)=-8.1415307247e-05
      gt(1)=-2.1476213125e+5
      gt(2)=2.1904610575e+5
      gt(3)=-8.6180973719e+4
      gt(4)=1.4960986936e+4
      gt(5)=-4.7306603177e+2
      gt(6)=-2.3311779643e+2
      gt(7)=3.7784390759e+1
      gt(8)=-2.3204806092e+0
      gt(9)=5.3117637687e-2
      ev(1)=-1.0350606586e+1
      ev(2)=4.2903609488e-2
      ev(3)=1.7571599671e+1
      ev(4)=6.1276818706e+3
      ev(5)=-3.0193918656e+3
      ev(6)=1.8873011594e+2
      ev(7)=1.4529023444e+2
      ev(8)=0.162
      fv(1)=1.6969859271
      fv(2)=-.13337234608
      fv(3)=1.4
      fv(4)=168.
      fv(4)=168.
      ft(1)=-.252762921
      ft(2)=.3343285931
      ft(3)=1.12
      ft(4)=168.
      et(1)=-7.0403639907
      et(2)=.74421462902
      et(3)=12.319512908
      et(4)=2.2209758501e+3
      et(5)=-8.8525979933e+2
      et(6)=72.835897919
      et(7)=-2.9706914540
      et(8)=0.1628
c     parameters for thermodynamic
c     properties - mccarty, cryogenics
c     vol 14 no 5 may 1974 and goodwin
c     nbs tech note 653 april 74
      r=.08205616
      gamma=-.0096
      gi(1)=-1.8044750507e+6
      a( 1)=   .183603246136e+02
      a( 2)=  -.182553840603e-01
      a( 3)=   .586623807178e+00
      a( 4)=  -.106005894683e+02
      a( 5)=   .167157622432e+03
      a( 6)=  -.155569173217e+03
      a( 7)=   .106609415022e+03
      a( 8)=  -.341087933790e+02
      a( 9)=   .973203073452e+01
      a(10)=  -.388410018388e+02
      a(11)=   .529573454771e+02
      a(12)=  -.291075304738e+02
      a(13)=   .585307647478e+01
      a(14)=  -.637276532186e+00
      a(15)=   .994444109622e-03
      a(16)=  -.392314821657e-01
      a(17)=   .728820880748e+00
      a(18)=  -.625821815315e+01
      a(19)=   .295561390641e+01
      a(20)=  -.763972649504e+00
      gi(2)=7.7426666393e+4
      gi(3)=-1.3241658754e+3
      gi(4)=1.5438149595e+1
      gi(5)=-5.1479005257e-2
      gi(6)=1.0809172196e-4
      gi(7)=-6.5501783437e-8
      gi(8)=-6.7490056171e+0
      gi(9)=.3e+4
      gi(10)=gi(11)=0
      to=298.15
      ho=19196.1
      gi(10)=ho-hi(to)
      to=300.
      so=186.4854941
      gi(11)=so-si(to)
      g( 1)= -.187027997685e-01
      g( 2)=  .103387108009e+01
      g( 3)= -.155387625619e+02
      g(4)=  .772311478564e+03
      g( 5)= -.377103300895e+05
      g( 6)=  .846818843475e-03
      g( 7)= -.496415884529e+00
      g( 8)=  .869909352414e+02
      g( 9)= -.322821592493e+05
      g(10)= -.395843026318e-04
      g(11)=  .266772318035e-01
      g(12)= -.304010057839e+01
      g(13)=  .191584507536e-03
      g(14)= -.195587933458e-03
      g(15)=  .607479967879e+01
      g(16)= -.529609525984e-03
      g(17)=  .152264286004e-04
      g(18)= -.109952182842e-01
      g(19)=  .191395549929e-03
      g(20)=  .386470003746e+05
      g(21)= -.157930582612e+07
      g(22)=  .195270144401e+03
      g(23)=  .165996081629e+07
      g(24)=  .603051146711e+00
      g(25)=  .376485162808e+02
      g(26)=  .125593680622e-02
      g(27)= -.343570032513e+02
      g(28)= -.540945094139e-05
      g(29)=  .185622284663e-02
      g(30)=  .770786979245e-08
      g(31)= -.286868318650e-05
      g(32)=  .372376961647e-04
      dtp=.2815114381423e+02
      dtpv=.1590041545160e-01
      vp(1)=4.77748580
      vp(2)=1.76065363
      vp(3)=-.56788894
      vp(4)=1.32786231
      vp(5)=1.5
      vp(6)=.1158993
      vp(7)=90.68
      vp(8)=190.555
      vp(9)=0.0
      tcc=vp(8)
       pcc=vpn(tcc)*1.01325
      ptp=vp(6)*1.01325
      ttp=vp(7)
      tul=500.
      tll=ttp
      pul=350.
      dcc=10.23
      return
      end
      subroutine data n2
      dimension g(32),vp(9),gi(11)
      dimension gv(9),gt(9),fv(4),ft(4),ev(8),et(8)
      dimension a(20)
      common/crit/ em, eok, rm, tc, dc, x , pc, sig
      common/satc/a,dtpv
      common/data1/gv,gt,fv,ft,ev,et
      common/sen/beta,xo,delta,e1, e2, agam
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul,dcc
      common/cpid/gi
      common/isp/n,nw,nww
      nww=0
      write (6,100)
  100 format(" the range of temperature for nitrogen is 63.15 to 1900k"
     1/" with pressures to 10000 bar")
      n=0
      nw = 1
      em=28.016
      eok = 118.
      rm = 3.933e-08
      tc = 126.24
      dc=.3139
      x = 1.67108
      pc = 33.98
      sig = 3.54
      xo=0.164
      beta = 0.355
      delta = 4.352
      e1 = 2.17
      e2 = 0.287
      agam=1.190
c     parameters for transport
c     properties from hanley et. al.
c     jour. phy. chem. ref data vol3, no 4
c     1974
      gv(1)=-1.8224240000e+2
      gv(2)= 1.9915327374e+2
      gv(3)=-9.1542324494e+1
      gv(4)= 2.3255484059e+1
      gv(5)=-3.6307214228
      gv(6)= 3.6457506811e-1
      gv(7)=-2.2261880817e-2
      gv(8)= 7.8053904895e-4
      gv(9)=-1.1894029104e-5
      gt(1)=-2.0029573972e+4
      gt(2)= 4.9765746684e+3
      gt(3)= 8.0188959378e+3
      gt(4)=-5.5022716888e+3
      gt(5)= 1.5363738965e+3
      gt(6)=-2.2974737257e+2
      gt(7)= 1.9360547346e+1
      gt(8)=-8.5677385768e-1
      gt(9)= 1.5564670935e-2
      ev(1)=-9.8255690362
      ev(2)= 5.7156092139e-001
      ev(3)= 1.6094611148e+001
      ev(4)= 3.6954086158e+003
      ev(5)=-8.0889801180e+002
      ev(6)= 6.8464435640e+001
      ev(7)=-2.1241135912
      ev(8)= 0.315
      fv(1)=-1.1217739623
      fv(2)= 0.32912317244
      fv(3)= 1.4
      fv(4)= 118.
      ft(1)= 0.53875666637
      ft(2)= 0.061027911104
      ft(3)= 1.2
      ft(4)= 118.
      et(1)=-2.9402951255e+1
      et(2)= 3.7201743333e+1
      et(3)=-3.9013509079e+1
      et(4)=-3.1826109485e+1
c     thermodynamic properties from
c     nbs tech note 648 - dec 77
c     jacobsen et. al.
      r=8.20539e-2
      gamma=-.0056
      gi(1)=   -0.735210401157e 03
      gi(2)=    0.342239980412e 02
      gi(3)=   -0.557648284568e 00
      gi(4)=    0.350404228309e 01
      gi(5)=   -0.173390185081e-04
      gi(6)=    0.174650849766e-07
      gi(7)=   -0.356892033544e-11
      gi(8)=    0.100538722809e 01
      gi(9)=    0.335340610000e 04
      to=298.15
      so=191.502
      ho=8669.0
      gi(10)=gi(11)=0
      gi(10)=ho-hi(to)
      gi(11)=so-si(to)
      g( 1)=    0.136224769273e-02
      g( 2)=    0.107032469909e 00
      g( 3)=   -0.243900721871e 01
      g( 4)=    0.341007449376e 02
      g( 5)=   -0.422374309466e 04
      g( 6)=    0.105098600246e-03
      g( 7)=   -0.112594826522e-01
      g( 8)=    0.142600789271e-03
      g( 9)=    0.184698501609e 05
      g(10)=    0.811140082589e-07
      g(11)=    0.233011645038e-02
      g(12)=   -0.507752586351e 00
      g(13)=    0.485027881931e-04
      g(14)=   -0.113656764115e-02
      g(15)=   -0.707430273541e 00
      g(16)=    0.751706648853e-04
      g(17)=   -0.111614119537e-05
      g(18)=    0.368796562233e-03
      g(19)=   -0.201317691348e-05
      g(20)=   -0.169717444756e 05
      g(21)=   -0.119719240044e 06
      g(22)=   -0.975218272038e 02
      g(23)=    0.554639713152e 05
      g(24)=   -0.179920450443e 00
      g(25)=   -0.256582926077e 01
      g(26)=   -0.413707715091e-03
      g(27)=   -0.256245415300e 00
      g(28)=   -0.124222373740e-06
      g(29)=    0.103556535840e-04
      g(30)=   -0.538699166558e-09
      g(31)=   -0.757415412840e-08
      a( 1)=  -.158453465507e+02
      a( 2)=   .419136911423e-01
      a( 3)=  -.101965371660e+01
      a( 4)=   .134763743799e+02
      a( 5)=  -.109930399087e+03
      a( 6)=   .925518835497e+02
      a( 7)=  -.956233831320e+02
      a( 8)=   .100104366710e+03
      a( 9)=  -.701857937398e+02
      a(10)=   .900076998647e+01
      a(11)=   .286981120347e+02
      a(12)=  -.216767601780e+02
      a(13)=   .496558226471e+01
      a(14)=   .218307928477e+02
      a(15)=  -.126493309807e+00
      a(16)=   .241544188633e+01
      a(17)=  -.245256871794e+02
      a(18)=   .935925207124e+02
      a(19)=  -.360938251632e+02
      a(20)=   .757453271989e+01
      g(32)=  0.585367172070e-07
      vp(1)= 5.1113192094
      vp(2)= 6.482667539e-1
      vp(3)=-1.5108730916e-1
      vp(4)= 7.4028493342e-1
      vp(5)=1.5
      vp(6)= 0.123
      vp(7)= 63.15
      vp(8)= 126.26
      vp(9)=0.0
      dtp=.3097717741477e+2
      dtpv=.242822085710e-1
      tcc=vp(8)
      pcc=vpn(tcc)*1.01325
      ptp=vp(6)*1.01325
      ttp=vp(7)
      tll=ttp
      tul=1900.
      pul=10000.
      dcc=11.21
      return
      end
      subroutine data ar
      dimension g(32),vp(9),gi(11)
      dimension gv(9),gt(9),fv(4),ft(4),ev(8),et(8)
      dimension a(20)
      common/sen/beta,xo,delta,e1, e2, agam
      common/satc/a,dtpv
      common/crit/ em, eok, rm, tc, dc, x , pc, sig
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul,dcc
      common/data1/gv,gt,fv,ft,ev,et
      common/cpid/gi
      common/isp/n,nw,nww
      nww=0
      n=0
      nw=1
      em=39.948
      eok=152.8
      rm=3.669e-08
      tc=150.725
      dc=0.533
      x=1.7124
      pc=47.983
      sig=3.297
      xo=0.183
      beta=0.355
      delta=4.352
      e1=2.27
      e2=0.287
      agam=1.190
c     transport properties
c     from hanley et. al.
c     j. phy. chem. ref data vol 3
c     no 4 1974
      gv(1)=6.1145472787e+1
      gv(2)=-1.0394390312e+2
      gv(3)=6.7594614619e+1
      gv(4)=-2.2536509380e+1
      gv(5)=4.2593950138
      gv(6)=-4.7252671093e-1
      gv(7)=3.1795275425e-2
      gv(8)=-1.1629083780e-3
      gv(9)=1.8043010592e-5
      gt(1)=6.2777703742e+3
      gt(2)=-9.6096376637e+3
      gt(3)= 5.8887549191e+3
      gt(4)=-1.8920926320e+3
      gt(5)= 3.4886571437e+2
      gt(6)=-3.8016786193e+1
      gt(7)= 2.5207283167
      gt(8)=-9.1098744478e-2
      gt(9)= 1.3990842942e-3
      ev(1)=-1.0010993993e+1
      ev(2)= 2.0694685712e-1
      ev(3)= 1.6029145122e+1
      ev(4)= 1.1717461351e+1
      ev(5)=-5.6995898780e+2
      ev(6)= 4.0136071933e+1
      ev(7)= 3.9870122403e+1
      ev(8)= 0.537
      fv(1)= 1.4653652433
      fv(2)=-0.77487424965
      fv(3)= 1.4
      fv(4)= 152.8
      ft(1)= .2414210327
      ft(2)= .075696234255
      ft(3)= 1.
      ft(4)= 152.8
      et(1)=-2.4116686960e+1
      et(2)=                     3.0694859971e+1
      et(3)=2.2956551674e+3
      et(4)=                    -3.5559415848e+2
c     transport properties from
c     hanley et. al. j. phy. chem. ref
c     data vol 3 no 4 1974 and
c     gosman et. al. nsrds mon 27 1964
      r=.08205616
      gamma=-.0055
      gi(1)=gi(2)=gi(3)=0
      gi(4)=gi(9)=2.5
      gi(5)=gi(6)=gi(7)=0
      gi(8)=0
      gi(10)=gi(11)=0
      to=87.28
      so=129.1786
      ho=9504.8916
      gi(10)=ho-hi(to)
      gi(11)=so-si(to)
      g(1)=3.4342657242351e-3
      g(2)=5.7857036681387e-2
      g(3)=-2.6982470812264e+0
      g(4)=1.6481655285291e+2
      g(5)=-1.2849472420416e+4
      g(6)=-3.2636490894686e-4
      g(7)=2.4629470190841e-1
      g(8)=-6.9585445697842e+1
      g(9)=1.9196156939788e+4
      g(10)=1.6603909805594e-5
      g(11)=-1.0860316345366e-2
      g(12)=3.3231759004885e+0
      g(13)=2.1776361947053e-5
      g(14)=5.1615085812771e-3
      g(15)=-1.1366705407293e+0
      g(16)=-2.9018517618859e-4
      g(17)=3.7898289698060e-6
      g(18)=1.1030489790987e-3
      g(19)=-1.4674092942955e-5
      g(20)=-1.1479610716179e+4
      g(21)=-3.9393312963830e+5
      g(22)=-9.9620084307336e+1
      g(23)=-1.8575347046011e+4
      g(24)=-2.9393483871136e-1
      g(25)=1.6408588086762e+1
      g(26)=-4.0447174229355e-4
      g(27)=-2.0820007165976e+0
      g(28)=-5.4969320649612e-7
      g(29)=7.5137405277667e-5
      g(30)=-2.8667425518207e-10
      g(31)=-6.3003722866834e-8
      g(32)=2.5287413440936e-6
      a( 1)=  -.270262923777e+02
      a( 2)=   .131040241866e+00
      a( 3)=  -.267486438128e+01
      a( 4)=   .300176804406e+02
      a( 5)=  -.875899149326e+02
      a( 6)=  -.408267436456e+02
      a( 7)=   .104268066451e+03
      a( 8)=  -.671278555379e+02
      a( 9)=   .151002935701e+02
      a(10)=  -.331243536637e+02
      a(11)=   .633146212581e+02
      a(12)=  -.427149706899e+02
      a(13)=   .100599900030e+02
      a(14)=   .137682084900e+02
      a(15)=  -.664630363191e-01
      a(16)=   .133368782730e+01
      a(17)=  -.144371463244e+02
      a(18)=   .601938472000e+02
      a(19)=  -.230888463887e+02
      a(20)=   .465318358887e+01
      vp(1)=3.4151115519
      vp(2)=1.1910812519
      vp(3)=-3.407632334e-1
      vp(4)= 8.9555855251e-1
      vp(5)=1.5
      vp(6)=0.68005
      vp(7)=83.80
      vp(8)=150.86
      vp(9)=0.0
      dtp=.3540027619188e+02
      dtpv=.1029227022329
      write (6,100)
  100 format(" the temperature range for argon is 83.8 to 400 k"
     1/" with pressures to 1000 bar")
      tcc=vp(8)
      pcc=vpn(tcc)*1.01325
      ptp=vp(6)*1.01325
      ttp=vp(7)
      tul=400.
      tll=ttp
      pul=1000.
      dcc=13.41
      return
      end
      subroutine data o2
      dimension g(32),vp(9),gi(11)
      dimension gv(9),gt(9),fv(4),ft(4),ev(8),et(8)
      dimension a(20)
      common/satc/a,dtpv
      common/data1/gv,gt,fv,ft,ev,et
      common/sen/beta,xo,delta,e1, e2, agam
      common/crit/ em, eok, rm, tc, dc, x , pc, sig
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul,dcc
      common/isp/n,nw,nww
      common/cpid/gi
      nww=0
      n=0
      nw=1
      xo=0.183
      beta=0.355
      delta=4.352
      e1=2.21
      e2=0.287
      em=31.9988
      eok=113.0
      rm=3.8896e-08
      tc=154.575
      dc=0.4362
      x=2.210636
      pc=49.770
      sig=3.437
      agam = 1.190
c     transport properties
c     from hanley et. al.
c     vol 3, no 4, 1974
      gv(1)=-9.7076378593e+1
      gv(2)= 8.2801254201e+1
      gv(3)=-2.4668758803e+1
      gv(4)= 2.1324360243
      gv(5)=3.7851049522e-1
      gv(6)=-1.0487216090e-1
      gv(7)=1.1134441304e-2
      gv(8)=-5.3676093757e-4
      gv(9)=1.0279379641e-5
      gt(1)=-2.0395052193e+5
      gt(2)= 2.4088141709e+5
      gt(3)=-1.2014175183e+5
      gt(4)= 3.295494919e+4
      gt(5)=-5.4244239598e+3
      gt(6)= 5.4734865540e+2
      gt(7)=-3.2854821539e+1
      gt(8)= 1.0753572103
      gt(9)=-1.4610986820e-2
      ev(1)=-1.2152387017e+1
      ev(2)=-3.142172899e-1
      ev(3)=1.8201161468e+1
      ev(4)=2.7390429525e+2
      ev(5)=-2.7498956948e+3
      ev(6)= 2.4340689667e+2
      ev(7)=1.1911504104e+2
      ev(8)= 0.435
      fv(1)=4.3526515153
      fv(2)=-2.0361263878
      fv(3)=1.4
      fv(4)= 100.
      ft(1)=.3060
      ft(2)= .2785
      ft(3)=1.12
      ft(4)=100.
      et(1)=-1.2310400765e+1
      et(2)=1.6799504261e+1
      et(3)=-2.9944878721e+3
      et(4)= 4.7350508788e+2
c     thermodynamic properties
c     from weber - to be published
      r=8.20539e-2
      gamma=-.0056
       gi(1)=   -0.498199853712e 04
       gi(2)=    0.230247779995e 03
       gi(3)=   -0.345565323511e 01
       gi(4)=    0.352187677367e 01
       gi(5)=   -0.435420216024e-04
       gi(6)=    0.134635345013e-07
       gi(7)=    0.162059825959e-10
       gi(8)=    0.103146851573e 01
       gi(9)=    0.223918105000e 04
      gi(10)=gi(11)=0
      to=298.15
      ho=8682.
      so=205.037
      gi(10)=ho-hi(to)
      g(1)=   -.4308768468e-03
      g(2)=    .1979591095e+00
      g(3)=   -.4143014968e+01
      g(4)=    .1853654396e+03
      g(5)=   -.1270637452e+05
      g(6)=    .1536388737e-04
      g(7)=    .1326068945e-02
      g(8)=   -.2199275123e+01
      g(9)=    .4705445127e+04
      g(10)=   .4728198017e-06
      g(11)=   .2430408198e-02
      g(12)=  -.1896759615e+00
      g(13)=  -.6887067207e-05
      g(14)=  -.6132885180e-03
      g(15)=  -.1836518694e+00
      g(16)=   .2575663871e-04
      g(17)=  -.2415604646e-06
      g(18)=   .1438680831e-03
      g(19)=  -.1703915986e-05
      g(20)=  -.2353705917e+04
      g(21)=  -.2271707669e+06
      g(22)=  -.2753815471e+02
      g(23)=   .9277648729e+05
      g(24)=  -.4114926856e-01
      g(25)=   .1982233262e+01
      g(26)=  -.1239651142e-03
      g(27)=  -.6322588664e+00
      g(28)=  -.2443207666e-07
      g(29)=   .1328704370e-04
      g(30)=  -.1146313812e-09
      g(31)=  -.1021169305e-07
      g(32)=   .2334998237e-06
      gi(11)=so-si(to)
      a( 1)=   .581394753076e+02
      a( 2)=  -.490241196133e-01
      a( 3)=   .168328893252e+01
      a( 4)=  -.325161223398e+02
      a( 5)=   .550300989872e+03
      a( 6)=  -.510968506115e+03
      a( 7)=   .315091559049e+03
      a( 8)=  -.232566659258e+02
      a( 9)=  -.488425479359e+02
      a(10)=  -.150624217523e+03
      a(11)=   .280441603851e+03
      a(12)=  -.176693896861e+03
      a(13)=   .403247747449e+02
      a(14)=   .252198688365e+01
      a(15)=  -.136098316472e-01
      a(16)=   .282316159403e+00
      a(17)=  -.286645905341e+01
      a(18)=   .617024212284e+01
      a(19)=  -.810220795462e+00
      a(20)=  -.279601068969e+00
      vp(1)=7.568956
      vp(2)=5.004836
      vp(3)=-2.137460
      vp(4)=3.454481
      vp(5)=1.514
      vp(6)=0.0014606
      vp(7)=54.359
      vp(8)=154.581
      vp(9)=0.0
      dtp=.4081997364372e+02
      dtpv=.3318894767078e-03
      write(6,100)
  100 format(" the temperature range for oxygen is 54.359 to 400k"
     1/" with pressures to 1200 bar")
      tcc=vp(8)
      pcc=vpn(tcc)*1.01325
      ptp=vp(6)*1.01325
      ttp=vp(7)
      tul=400.
      tll=ttp
      pul=1200.
      dcc=13.63
      return
      end
      subroutine data p h2
      dimension g(32),vp(9),gi(11)
      dimension gv(9),gt(9),fv(4),ft(4),ev(8),et(8)
      dimension a(20)
      common/satc/a,dtpv
      common/cpid/gi
      common/crit/ em, eok, rm, tc, dc, x , pc, sig
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul,dcc
      common/data1/gv,gt,fv,ft,ev,et
      common/para/percen
      common/isp/n
      n=1
      go to 1
      entry n h2
      n=2
      go to 1
      entry o h2
      n=3
      go to 1
      entry e h2
      n=4
      go to 1
      entry f h2
      n=5
    1 continue
c     no transport properties for hydrogen
c     thermodynamic properties from
c     roder and mccarty ir 75-814 and
c     ir 74-357
      r=.08205616
      gamma=-.0041
      g( 1)  = 4.614387755654e-4
      g( 2)  = 4.233184556086e-2
      g( 3)  =-5.096556226503e-1
      g( 4)  = 2.923059738269e+0
      g( 5)  =-2.987609147211e+1
      g( 6)  = 1.883148601410e-5
      g( 7)  =-1.322256954639e-3
      g( 8)  = 3.016504431701e-1
      g( 9)  = 5.093705560851e+1
      g(10)  = 1.973828324919e-7
      g(11)  = 2.858492039828e-4
      g(12)  =-2.228279239123e-2
      g(13)  =-2.257481136764e-6
      g(14)  = 2.414272369746e-5
      g(15)  =-1.695713398588e-3
      g(16)  =-5.393676391275e-7
      g(17)  = 3.998955244328e-9
      g(18)  = 1.142457561274e-6
      g(19)  =-1.252566225896e-8
      g(20)  =-4.917861934882e+1
      g(21)  =-1.585666017368e+2
      g(22)  =-1.901602946272e-1
      g(23)  = 9.198020862500e+0
      g(24)  =-3.180455518810e-4
      g(25)  = 1.191057791926e-3
      g(26)  =-3.791352773225e-7
      g(27)  =-3.983377699095e-5
      g(28)  =-1.234510854688e-10
      g(29)  = 1.950266293499e-9
      g(30)  =-2.380343917109e-13
      g(31)  =-4.073576608192e-13
      a( 1)=   .916617720187e+02
      a( 2)=  -.179492524446e+00
      a( 3)=   .454671158395e+01
      a( 4)=  -.658499589788e+02
      a( 5)=   .734466804535e+03
      a( 6)=  -.682501045175e+03
      a( 7)=   .631783674710e+03
      a( 8)=  -.539408873282e+03
      a( 9)=   .430923811783e+03
      a(10)=  -.300295738811e+03
      a(11)=   .156567165346e+03
      a(12)=  -.504103608225e+02
      a(13)=   .720706926514e+01
      a(14)=  -.123944440318e+03
      a(15)=   .140334800142e+01
      a(16)=  -.211023804313e+02
      a(17)=   .173254622817e+03
      a(18)=  -.444294580871e+03
      a(19)=   .138699365355e+03
      a(20)=  -.235774161015e+02
      g(32)  = 8.801354930777e-12
      vp(1)=3.05300134164
      vp(2)=2.80810925813
      vp(3)=-0.655461216567
      vp(4)=1.59514439374
      vp(5)=1.5814454428
      vp(7)=13.8
      vp(6)=0.0695
      vp(8)=32.938
      vp(9)=0
      dtp=.3821428945438e+02
      dtpv=.6322296353698e-01
      em=2.01594
      write(6,100)
  100 format(" the temperature range for hydrogen is 13.8 to 400k"
     1/" with pressures to 1200 bar")
      tcc=vp(8)
      pcc=vpn(tcc)*1.01325
      ptp=vp(6)*1.01325
      ttp=vp(7)
      tul=400.
      tll=ttp
      pul=1200.
      dcc=15.556
      return
      end
      subroutine props(pp,dd,tt)
c the 32 term equation of state, input is density(moles/l),
c temperature(k), output (pp) is pressure in atm,or dp/dd in
c liter-atm/mole or dp/dt atm/k or s,h,or cv at one limit of
c integration
      dimension x(33)
      dimension b(33),g(32)
      equivalence (b,x)
      common/data/g,r,gamma
      common/1/b
      data(id=1)
      data(iz=1)
    1 continue
      if(iz.le.0)go to 2
      iz=0
    2 continue
      d=dd
      p=pp
      t=tt
      gm=gamma
      d2=d*d
      d3=d2*d
      d4=d3*d
      d5=d4*d
      d6=d5*d
      d7=d6*d
      d8=d7*d
      d9=d8*d
      d10=d9*d
      d11=d10*d
      d12=d11*d
      d13=d12*d
      ts=sqrt (t)
      t2=t*t
      t3=t2*t
      t4=t3*t
      t5=t4*t
      f=exp (gm*d2)
      go to (100,200,300,400,500,600,700),k
      entry press
c     entry for pressure, input is density
c     and temp. in mol/l and k, output is in atm.
      k=1
      go to 1
  100 continue
      b( 1)=d2*t
      b( 2)=d2*ts
      b( 3)=d2
      b( 4)=d2/t
      b( 5)=d2/t2
      b( 6)=d3*t
      b( 7)=d3
      b( 8)=d3/t
      b( 9)=d3/t2
      b(10)=d4*t
      b(11)=d4
      b(12)=d4/t
      b(13)=d5
      b(14)=d6/t
      b(15)=d6/t2
      b(16)=d7/t
      b(17)=d8/t
      b(18)=d8/t2
      b(19)=d9/t2
      b(20)=d3*f/t2
      b(21)=d3*f/t3
      b(22)=d5*f/t2
      b(23)=d5*f/t4
      b(24)=d7*f/t2
      b(25)=d7*f/t3
      b(26)=d9*f/t2
      b(27)=d9*f/t4
      b(28)=d11*f/t2
      b(29)=d11*f/t3
      b(30)=d13*f/t2
      b(31)=d13*f/t3
      b(32)=d13*f/t4
      if(id.gt.0)go to 102
      b(33)=p-r*d*t
      return
  102 p=0
      m=32
      do 101 i=1,m
  101 p=p+b(i)*g(i)
      p=p+r*d*t
      pp=p
      return
      entry dpdd
c     partial of pressure with respect to
c     density - see pressure
c     entry for units
      k=2
      go to 1
  200 continue
      f1=2.00*f*gm*d
      f21=3.000*f*d2 +f1*d3
      f22=5.000*f*d4 +f1*d5
      f23=7.000*f*d6 +f1*d7
      f24=9.000*f*d8 +f1*d9
      f25=11.00*f*d10+f1*d11
      f26=13.00*f*d12+f1*d13
      b( 1)=2.00*d*t
      b( 2)=2.00*d*ts
      b( 3)=2.00*d
      b( 4)=2.00*d/t
      b( 5)=2.00*d/t2
      b( 6)=3.00*d2*t
      b( 7)=3.00*d2
      b( 8)=3.00*d2/t
      b( 9)=3.00*d2/t2
      b(10)=4.00*d3*t
      b(11)=4.00*d3
      b(12)=4.00*d3/t
      b(13)=5.00*d4
      b(14)=6.00*d5/t
      b(15)=6.00*d5/t2
      b(16)=7.00*d6/t
      b(17)=8.00*d7/t
      b(18)=8.00*d7/t2
      b(19)=9.00*d8/t2
      b(20)=f21/t2
      b(21)=f21/t3
      b(22)=f22/t2
      b(23)=f22/t4
      b(24)=f23/t2
      b(25)=f23/t3
      b(26)=f24/t2
      b(27)=f24/t4
      b(28)=f25/t2
      b(29)=f25/t3
      b(30)=f26/t2
      b(31)=f26/t3
      b(32)=f26/t4
      m=32
      if(id.gt.0)go to 202
      b(33)=p-r*t
      return
  202 p=0
      do 201 i=1,m
  201 p=p+b(i)*g(i)
      p=p+r*t
      pp=p
      return
      entry dpdt
c     partial of pressure with respect
c     to temperature - see pressure
c     entry for units
      k=3
      go to 1
  300 continue
      x( 1)=d2
      x( 2)=d2/(2.00*ts)
      x( 3)=0
      x( 4)=-d2/t2
      x( 5)=-2.00*d2/t3
      x( 6)=d3
      x( 7)=0
      x( 8)=-d3/t2
      x( 9)=-2.00*d3/t3
      x(10)=d4
      x(11)=0
      x(12)=-d4/t2
      x(13)=0
      x(14)=-d6/t2
      x(15)=-2.00*d6/t3
      x(16)=-d7/t2
      x(17)=-d8/t2
      x(18)=-2.00*d8/t3
      x(19)=-2.00*d9/t3
      x(20)=-2.00*d3*f/t3
      x(21)=-3.00*d3*f/t4
      x(22)=-2.00*d5*f/t3
      x(23)=-4.00*d5*f/t5
      x(24)=-2.00*d7*f/t3
      x(25)=-3.00*d7*f/t4
      x(26)=-2.00*d9*f/t3
      x(27)=-4.00*d9*f/t5
      x(28)=-2.00*d11*f/t3
      x(29)=-3.00*d11*f/t4
      x(30)=-2.00*d13*f/t3
      x(31)=-3.00*d13*f/t4
      x(32)=-4.00*d13*f/t5
      if(id.gt.0)go to 302
      x(33)=pp-r*d
      return
  302 p=0
      do 301 i=1,32
  301 p=p+g(i)*x(i)
      pp=p+r*d
      return
      entry dsdn
c     partial of entropy with
c     respect to the g coefficients
      k=4
      go to 1
  400 continue
c     s=s0-r*logf(d*r*t/p0)+(dsdn(d)-dsdn(0))*101.325 +cpos(t)
      g1=f/(2.00*gm)
      g2=(f*d2-2.00*g1)/(2.00*gm)
      g3=(f*d4-4.00*g2)/(2.00*gm)
      g4=(f*d6-6.00*g3)/(2.00*gm)
      g5=(f*d8-8.00*g4)/(2.00*gm)
      g6=(f*d10-10.00*g5)/(2.00*gm)
      x( 1)=-d
      x( 2)=-d/(2.00*ts)
      x( 3)=0.0
      x( 4)=+d/t2
      x( 5)=2.00*d/t3
      x( 6)=-d2/2.00
      x( 7)=0.0
      x( 8)=d2/(2.00*t2)
      x( 9)=d2/t3
      x(10)=-d3/3.00
      x(11)=0.0
      x(12)=d3/(3.00*t2)
      x(13)=0.0
      x(14)=d5/(5.00*t2)
      x(15)= 2.00*d5/(5.00*t3)
      x(16)=d6/(6.00*t2)
      x(17)=d7/(7.00*t2)
      x(18)=2.00*d7/(7.00*t3)
      x(19)=d8/(4.00*t3)
      x(20)=2.00*g1/t3
      x(21)=3.00*g1/t4
      x(22)=2.00*g2/t3
      x(23)=4.00*g2/t5
      x(24)=2.00*g3/t3
      x(25)=3.00*g3/t4
      x(26)=2.00*g4/t3
      x(27)=4.00*g4/t5
      x(28)=2.00*g5/t3
      x(29)=3.00*g5/t4
      x(30)=2.00*g6/t3
      x(31)=3.00*g6/t4
      x(32)=4.00*g6/t5
      if(id.gt.0)go to 402
      return
  402 p=0
      do 401 i=1,32
  401 p=p+g(i)*x(i)
      pp=p
      return
      entry dudn
c     terms needed for enthalpy calculation
      k=5
      go to 1
  500 continue
c     h=h0+(t*dsdn(d)-dsdn(0))*101.325+(dudn(d-dudn(0))*101.325+cpoh(t)
c     +(p/d-r*t)*101.325
      g1=f/(2.00*gm)
      g2=(f*d2-2.00*g1)/(2.00*gm)
      g3=(f*d4-4.00*g2)/(2.00*gm)
      g4=(f*d6-6.00*g3)/(2.00*gm)
      g5=(f*d8-8.00*g4)/(2.00*gm)
      g6=(f*d10-10.00*g5)/(2.00*gm)
      x( 1)=d*t
      x( 2)=d*ts
      x( 3)=d
      x( 4)=d/t
      x( 5)=d/t2
      x( 6)=d2*t/2.00
      x( 7)=d2/2.00
      x( 8)=d2/(2.00*t)
      x( 9)=d2/(2.00*t2)
      x(10)=d3*t/3.00
      x(11)=d3/3.00
      x(12)=d3/(3.00*t)
      x(13)=d4/4.00
      x(14)=d5/(5.00*t)
      x(15)=d5/(5.00*t2)
      x(16)=d6/(6.00*t)
      x(17)=d7/(7.00*t)
      x(18)=d7/(7.00*t2)
      x(19)=d8/(8.00*t2)
      x(20)=g1/t2
      x(21)=g1/t3
      x(22)=g2/t2
      x(23)=g2/t4
      x(24)=g3/t2
      x(25)=g3/t3
      x(26)=g4/t2
      x(27)=g4/t4
      x(28)=g5/t2
      x(29)=g5/t3
      x(30)=g6/t2
      x(31)=g6/t3
      x(32)=g6/t4
      if(id.gt.0)go to 502
      return
  502 p=0
      do 501 i=1,32
  501 p=p+g(i)*x(i)
      pp=p
      return
      entry tdsdt
c     temp. times the partial of
c     entropy with respect to temp.
      k=6
      go to 1
  600 continue
c     cv=cv0+(tdsdn(/)-tdsdn(d))*101.325
      g1=f/(2.00*gm)
      g2=(f*d2-2.00*g1)/(2.00*gm)
      g3=(f*d4-4.00*g2)/(2.00*gm)
      g4=(f*d6-6.00*g3)/(2.00*gm)
      g5=(f*d8-8.00*g4)/(2.00*gm)
      g6=(f*d10-10.00*g5)/(2.00*gm)
      x(1)=0
      x( 2)=-d/(4.00*ts)
      x(3)=0
      x( 4)=2.00*d/t2
      x( 5)=6.00*d/t3
      x(6)=0
      x(7)=0
      x( 8)=d2/t2
      x( 9)=3.00*d2/t3
      x(10)=0
      x(11)=0
      x(12)=(2.00*d3)/(3.00*t2)
      x(13)=0
      x(14)=(2.00*d5)/(5.00*t2)
      x(15)=(6.00*d5)/(5.00*t3)
      x(16)=d6/(3.00*t2)
      x(17)=(2.00*d7)/(7.00*t2)
      x(18)=(6.00*d7)/(7.00*t3)
      x(19)=(3.00*d8)/(4.00*t3)
      x(20)=6.000*g1/t3
      x(21)=12.00*g1/t4
      x(22)=6.000*g2/t3
      x(23)=20.00*g2/t5
      x(24)=6.000*g3/t3
      x(25)=12.00*g3/t4
      x(26)=6.000*g4/t3
      x(27)=20.00*g4/t5
      x(28)=6.000*g5/t3
      x(29)=12.00*g5/t4
      x(30)=6.000*g6/t3
      x(31)=12.00*g6/t4
      x(32)=20.00*g6/t5
      if(id.gt.0)go to 602
      return
  602 p=0
      do 601 i=1,32
  601 p=p+g(i)*x(i)
      pp=p
      return
      entry dp2d2
c     second partial of pressure with
c     respect to density squared
      k=7
      go to 1
  700 continue
      f1=2.*f*gm*d
      f12=2.*f1*gm*d+2.*f*gm
      f212=3.*f1*d2+3.*2.*d*f+f12*d3+f1*3.*d2
      f222=5.*f1*d4 +5.*4.*d3*f+5.*d4*f1+f12*d5
      f232=7.*f1*d6+7.*6.*d5*f+7.*d6*f1+f12*d7
      f242=9.*f1*d8+9.*8.*d7*f+9.*d8*f1+f12*d9
      f252=11.*f1*d10+10.*11.*d9*f+11.*d10*f1+f12*d11
      f262=13.*f1*d12+13.*12.*d11*f+13.*d12*f1+f12*d13
      b(1)=2.*t
      b(2)=2.*ts
      b(3)=2.
      b(4)=2./t
      b(5)=2./t2
      b(6)=6.*d*t
      b(7)=6.*d
      b(8)=6.*d/t
      b(9)=6.*d/t2
      b(10)=12.*d2*t
      b(11)=12.*d2
      b(12)=12.*d2/t2
      b(13)=20.*d3
      b(14)=30.*d4/t
      b(15)=30.*d4/t2
      b(16)=42.*d5/t
      b(17)=56.*d6/t
      b(18)=56.*d6/t2
      b(19)=72.*d7/t2
      b(20)=f212/t2
      b(21)=f212/t3
      b(22)=f222/t2
      b(23)=f222/t4
      b(24)=f232/t2
      b(25)=f232/t3
      b(26)=f242/t2
      b(27)=f242/t4
      b(27)=f252/t2
      b(29)=f252/t3
      b(30)=f262/t2
      b(31)=f262/t3
      b(32)=f262/t4
      m=32
      if(id.gt.0)go to 702
      b(33)=pp
      return
  702 p=0
      do 701 i=1,m
      p=p+b(i)*g(i)
  701 continue
      pp=p
      return
      end
      function vpn(tt)
c     calculates vapor pressure in atmospheres
c     for an input temperature in kelvin
      dimension g(32),vp(9)
      common/data/g,r,gamma,vp
      t=tt
      x=(1.-vp(7)/t)/(1.-vp(7)/vp(8))
      vpn=vp(6)*exp (vp(1)*x+vp(2)*x*x+vp(3)*x**3+vp(9)*x**4+vp(4)*x*
     1(1.-x)**vp(5))
      return
      end
      function findtv(pobs)
c     itterates the vapor pressure equation
c     for a temperature ( in kelvin)
c     given an input pressure in atmospheres
      common/data/g,r,gamma,vp,dtp
      dimension g(32),vp(9)
      t=vp(8)
      do 7 i=1,10
      p=vpn(t)
      if(abs (p-pobs)-.000001*pobs)8,8,6
    6 continue
      corr=(pobs-p)/dpdtvp(t)
    7 t=t+corr
    8 continue
      findtv=t
      return
      end
      function cv(d,t)
c     calculates specific heat capacity
c     at constant volume for an input
c     of density and temperature in mol/l and k
      data(r=8.31434)
      dd=d
      tt=t
      call tdsdt(cd,dd,tt)
      dd=0
      call tdsdt(c0,dd,tt)
      cv=cpi(tt)+(c0-cd)*101.325
      cv=cv-r
      return
      end
      function find d(p,t)
c     itterates equation of state
c     for density, given pressure
c     and temp. in atm. and kelvin.  if
c     itteration fails try using
c     function called find m
      dimension g(32),vp(9)
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,pul,dcc
      tt=t
      if(tt.gt.vp(8))go to 100
      if( p.gt.vpn(tt))go to 101
      dd=satv(tt)
      go to 102
  100 pc=pcc/1.01325
      x=(1.1/(9.*pc))*p+.7/9.
      dd=p/(r*t*x)
      if(p/pc.gt.20..and.t/vp(8).lt.2.5)dd=dtp
      go to 102
  101 dd=satl(tt)
  102 continue
      do 10 i=1,50
      if(dd.le.0.0.or.dd.gt.50.)go to 11
      call press(pp,dd,tt)
      if(pp.le.0.0)go to 11
      p2=pp
      if(abs (p-p2)-1.e-7*p)20,20,1
    1 call dpdd(pp,dd,tt)
      dp=pp
      corr=(p2-p)/dp
      if(abs (corr)-1.e-7*dd)20,20,9
    9 dd=dd-corr
   10 continue
   11 call regula(p,dd,t)
   20 find d=dd
      return
      end
      subroutine regula(pi,dd,tt)
c     itterates equation of state for density when find d fails
      dimension g(32),vp(9)
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul,dcc
      t=tt
      p=pi
      d2=0
      if(t.lt.tcc)go to 10
      d0=dcc*tcc/t
      go to 20
   10 pp=vpn(t)
      if(p.gt.pp)go to 15
      d0=satv(t)
      do 11 i=1,150
      call press(p0,d0,t)
      if(p0.ge.p)go to 12
   11 d0=d0+.0001*d0
      go to 42
   12 d1=d0
   13 call press(p1,d1,t)
      if(p1.lt.p)go to 14
      if(d1.le..1*ptp)go to 42
      d0=d1
      z=(p1-p)/p
      if(z.lt..1)z=.1
      if(z.gt..9)z=.9
      d1=d1-z*d1
      go to 13
   14 call press(p0,d0,t)
      do 140 i=1,50
      d=d1
      p3=p1
      if(abs(p-p1).lt..00001*p)go to 40
      p2=p-p1
      d1=d1+(d1-d0)*p2/(p1-p0)
      if(abs(d-d1).le..00001*d)go to 40
      if(abs(p-p1).lt..005*p)d2=find m(p,t,d1)
      if(d2.gt.0.0.and.d2.lt.50.)d1=d2
      d2=0
      call press(p1,d1,t)
      if(p0.gt.p.and.p1.gt.p)go to 120
      if(p0.lt.p.and.p1.lt.p)go to 120
      go to 140
  120 p0=p3
      d0=d
  140 continue
      go to 41
   15 d0=satl(t)
      do 16 i=1,10
      call press(p0,d0,t)
      if(p0.le.p)go to 17
   16 d0=d0-.0001*d0
      go to 42
   17 d1=d0
   18 call press(p1,d1,t)
      if(d1.ge.50.)go to 42
      if(p1.gt.p)go to 14
      d0=d1
      z=(p-p1)/p
      z=z*10
      if(t/tcc.lt..6)z=1.
      if(z.lt.1.)z=1.
      if(z.gt.9.)z=9.
      d1=d1+.01*d1*z
      go to 18
   20 call press(p0,d0,t)
      if(p.le.p0)go to 30
      d1=d0
   21 call press(p1,d1,t)
      if(p1.ge.p)go to 14
      if(d1.ge.50.)go to 42
      d0=d1
      z=(p-p1)/p
      z=z*10
      if(z.lt.1)z=1
      if(z.gt.9)z=9
      d1=d1+.1*d1*z
      go to 21
   30 d1=d0
   31 call press(p1,d1,t)
      if(p1.le.p)go to 14
      if(d1.le..1*ptp)go to 42
      d0=d1
      z=(p1-p)/p
      z=z*10
      if(z.lt.1)z=1
      if(z.gt.9)z=9
      d1=d1-.1*d1*z
      go to 31
   40 dd=d1
      return
   41 write(6,101)p,t,d
  102 format(" regula failed at p=",f7.2," and t=",f7.2)
  101 format(" density itteration failed at p=",f7.2," and t=",f7.2,
     1/" density returned is",e17.8)
      return
   42 write(6,102)p,t
      return
      end
      function cp(d,t)
c     calculates specific heat capacity
c     at constant pressure for input of
c     density and temperature in mol/l and k
c     cp is in joules/mol-k
      cvee=cv(d,t)
      call dpdt(dpt,d,t)
      call dpdd(dpd,d,t)
      cp=cvee+(t/(d**2)*(dpt**2)/dpd)*101.325
      return
      end
      function dpdtvp(tt)
c     calculates the derivative of pressure
c     with respect to temperature at
c     saturation.  input is temp. in k, output is atm/k.
      common/data/g,r,gamma,vp
      dimension g(32),vp(9)
      t=tt
      if(tt.gt.vp(8))go to 1
      x=(1.-vp(7)/t)/(1.-vp(7)/vp(8))
      dxdt=(vp(7)/t**2)/(1.-vp(7)/vp(8))
      dpdt=vp(1)*dxdt+2.*vp(2)*x*dxdt+vp(3)*3.*x**2*dxdt+vp(4)*
     1((1.-x)**vp(5))*dxdt+vp(4)*x*((1.-x)**(vp(5)-1.))*vp(5)*(-dxdt)
      dpdt=dpdt*vpn(t)
      dpdtvp=dpdt
      return
    1 dpdtvp=0
      return
      end
      function find m(p,t,dd)
c     alternative for find d, input is
c     pressure in atm., t in kelvin and
c     density in mol/l.  input density
c     is a starting value for itteration
c     of equation of state for solution for p and t
      tt=t
      do 10 i=1,50
      call press(pp,dd,tt)
      p2=pp
      if(abs (p-p2)-1.e-7*p)20,20,1
    1 call dpdd(pp,dd,tt)
      dp=pp
      corr=(p2-p)/dp
      d=dd
      if(abs (corr)-1.e-7*d)20,20,9
    9 dd=dd-corr
   10 continue
      find m=0
      return
   20 find m=dd
      return
      end
      function enthal(p,d,t)
c     calculates enthalpy for input of
c     pressure, density and temp. in
c     atm., mol/l and k.  output is in
c     joules/mol
      r=.08205616
      dd=d
      tt=t
      call dsdn(sd,dd,tt)
      call dudn(ud,dd,tt)
      dd=0
      call dsdn(s0,dd,tt)
      call dudn(u0,dd,tt)
      enthal=t*(sd-s0)*101.325+(ud-u0)*101.325+hi(t)+(p/d-r*t)*101.325
      return
      end
      function entrop(d,t)
c     calculates entropy
c     for an input of density and
c     temp. in mol/l and k.  output is in
c     joules/mol-k
      r=.08205616
      dd=d
      tt=t
      call dsdn(sd,dd,tt)
      dd=0
      call dsdn(s0,dd,tt)
      entrop=(sd-s0)*101.325-r*log(d*r*t)*101.325+si(t)
      return
      end
      function satl(tt)
c     calculates the density of the
c     saturated liquid at temp., t in kelvin.
c     output is in mol/l.
      dimension a(20)
      dimension g(32),vp(9)
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul,dcc
      common/satc/a,dtpv
      k=14
      kk=7
      go to 10
      entry satv
      k=1
      kk=13
   10 if(t.ge.tcc)go to 20
      t=tt
      itt=tcc
      if(itt+1-t.lt.1.)t=itt
      x=(t-tcc)/(ttp-tcc)
      d=a(k)*log(x)
      do 11 i=2,kk
      k=k+1
      mm=i
      if(mm.ge.5)mm=mm+1
   11 d=d+a(k)*(1.-x**((mm-5)/3.))
      if(k.lt.14)go to 12
      d=dcc+exp(d)*(dtp-dcc)
      go to 13
   12 d=dcc+exp(d)*(dtpv-dcc)
   13 satl=d
      if(itt+1-tt.lt.1.)satl=d-(d-dcc)*(tt-t)
      return
   20 satl=dcc
      return
      end
      function sound(d,t)
c     calculates the speed of sound
c     for an input of density and temp.
c     in mol/l and kelvin.  output is in
c     meters/second.
      common/crit/w
      call dpdd(dp,d,t)
      sound=((cp(d,t)/cv(d,t))*dp*101325./w)**.5
      return
      end
      function visc(dd,t)
c     returns viscosity in (g/cm-s)*e+6,
c     t in k, d in mol/l
      common/crit/em
      d=dd*em/1000.
      visc=dilv(t)+fdcv(d,t)+excesv(d,t)
      return
      end
      function therm(dd,t)
c     returns tc in mw/m-k, t in k, d in mol/l
      common/han/cr,tci
      common/isp/n,nw
      common/crit/em
      d=dd*em/1000.
      if(nw.eq.0 ) go to 3
      cr=critc(d,t)
      ther=dilt(t)+fdct(d,t)*100.+excest(d,t)+cr
      tci=ther-cr
       therm=ther
      return
    3 cr=critc(d,t)
      therm=dilt(t)+fdct(d,t)+excest(d,t)+cr
      tci=therm-cr
      return
      end
      function excesv(d,t)
c     calculates excess viscosity
      common/data1/gv,gt,fv,ft,ev,et
      common/isp/n,nw
      dimension gv(9),gt(9),fv(4),ft(4),ev(8),et(8)
      r2=d**(.5)*((d-ev(8))/ev(8))
      r=d**(.1)
      x=ev(1)+ev(2)*r2+ev(3)*r+ev(4)*r2/(t*t)+ev(5)*r/t**(1.5)+ev(6)/t
     1+ev(7)*r2/t
      x1=ev(1)+ev(6)/t
      excesv=exp (x)-exp (x1)
      return
      entry excest
c     calculates excess thermal conductivity
       if(nw.eq.0 ) go to 3
      r=d**(.1)
      x=et(1)+et(2)*r+et(3)*r/t**(1.5)+et(4)/t
      x1=et(1)+et(4)/t
      excesv=(exp (x)-exp (x1))/10.
      return
    3 r2=d**(.5)*((d-et(8))/et(8))
      r=d**(.1)
      x=et(1)+et(2)*r2+et(3)*r+et(4)*r2/(t*t)+et(5)*r/t**(1.5)+et(6)/t
     1+et(7)*r2/t
      x1=et(1)+et(6)/t
      excesv=exp (x)-exp (x1)
      return
      end
      function fdcv(d,t)
c     first density correction
c     for viscosity and thermal conductivity
      common/data1/gv,gt,fv,ft,ev,et
      dimension gv(9),gt(9),fv(4),ft(4),ev(8),et(8)
      fdcv=(fv(1)+fv(2)*(fv(3)-log(t/fv(4)))**2)*d
      return
      entry fdct
      fdcv=(ft(1)+ft(2)*(ft(3)-log(t/ft(4)))**2)*d
      return
      end
       function critc(d,t)
c     calculates critical enhancement
c     for thermal conductivity
      common/crit/ em, eok, rm, tc, dc, x , pc, sig
      common/check/deld,delt,dstar,tstar
      common/hjm/epsi,cpcv,rrr,akt
      common/isp/n,nw,nww
c d in g/cm3 , t in k
c  output units are mw/m.k
      av=6.0225e+23
      bk=1.38054e-16
       deld=abs (d-dc)/dc
       delt=abs (t-tc)/tc
c  calculate distance parameter
      r=(rm**2.5)*(d**0.5)*(av/em)**0.5
      r=r*(eok**0.5)*x/(t**0.5)
      rrr=r
c   general  equation
      dx=d*1000.0/em
      call dpdt(dpt,dx,t)
c  dpdt  in  ats per deg.
      dpt=dpt*1.01325e+6
c  dpdt now in dynes prr deg
      call dpdd(dpd,dx,t)
c  dpdd un ats, mol/l
      dpd=dpd*(1.01325e+6)*(1000.0/em)
cdpdd now in dynes, gm/cm3
      if( dpd.lt.0.0) dpd=1.0
   94 vis=visc(dx,t)*(1.0e-06)
c   viscosity in gm/cm.s
      if(deld.eq.0.25. or. deld.lt. 0.25) 8,10
    8 if(delt.eq.0.025. or. delt.lt.0.025 ) 9, 10
    9 compres=seng(d,t)
      go to 12
   10 compres=1.0/(d*dpd)**0.5
   12 ex=bk*t**2*(dpt**2)*compres
      exb=r*((bk*t)**0.5)*(d**0.5)*((av/em)**0.5)
      crit=ex/(exb*6.0*3.14159*vis)
c   put in damping factor
      bdd=((d-dc)/dc)**4
      btt=((t-tc)/tc)**2
      fact=exp (-18.66*btt - 4.25*bdd)
      delc=crit*fact/100.0
      critc=delc
       akt=compres*compres
      epsi=r*r*bk*t*(av*d/em)*akt
      epsi=epsi**0.5
c   calc  cp-cv
      cpcv=t*(dpt**2)*akt/d
      return
      end
      function seng(d,t)
c     scaled equation of state for critical region
      common/crit/ em, eok, rm, tc, dc, x , pc, sig
      common/sen/beta,xo,delta,e1, e2, agam
      common/check/deld,delt,dstar,tstar
      dstar= d/dc $ tstar=t/tc
      beto=1./beta
      xx=delt/deld**beto
      ag=agam-1.0
       bet2= 2.0*beta
      agb=ag/bet2
      del1=delta-1.0
       agbb=(ag-bet2)/bet2
      xxo=(xx+ xo)/xo
      xxb=xxo**bet2
      brak=1.0 + e2*xxb
       brak1=brak**agb
      h=e1*xxo*brak1
      hprim=(e1/xo)*brak1 + (ag/xo)*e1*e2*(xxb)*(brak**agbb)
      rcom=(deld**del1)*(delta*h - (xx/beta)*hprim  )
      rcomp=1.0/(rcom*dstar**2)
      rcm=rcomp/(pc*1.01325e+06)
c   rcm in dynes
      rcm=rcm**0.5
c
       seng=rcm
       return
      end
      function dilv(t)
c     gives dilute gas viscosity and thermal
c     conductivity for an input temp. in
c     kelvin.  output units are same as
c     those in visc and therm
      common/isp/n,nw,nww
      common/data1/gv,gt,fv,ft,ev,et
      dimension gv(9),gt(9),fv(4),ft(4),ev(8),et(8)
      sum=0
      tf=t**(1./3.)
      tff=t**(-4./3.)
      do 10 i=1,9
      tff=tff*tf
   10 sum=sum+gv(i)*tff
      if(nww.eq.7) go to 9
      dilv=sum*1000.
      go to 11
    9 dilv=sum
   11 return
      entry dilt
      tf=t**(1./3.)
      tff=t**(-4./3.)
      sum=0
      do 20 i=1,9
      tff=tff*tf
   20 sum=sum+gt(i)*tff
      dilv=sum
      return
      end
      function cpi(t)
c     calculates ideal gas thermo properties
c     for all fluids except h2.  input is in
c     kelvin, output is in joules, mol/l and k
      common/cpid/g(11)
      common/isp/n
      if(n.ne.0)go to 5
      k=1
    1 u=g(9)/t
      eu=exp (u)
      ts=1./t**4
      go to (2,3,4),k
    2 cpi=g(8)*u*u*eu/(eu-1.)**2
      do 10 i=1,7
      ts=ts*t
   10 cpi=cpi+g(i)*ts
      cpi=cpi*8.31434
      return
    5 cpi=cpo(t,n)
      return
      entry si
      if(n.ne.0)go to 6
      k=2
      go to 1
    3 cpi=g(8)*(u/(eu-1.)-log(1.-1./eu))
     1-g(1)*ts*t/3.-g(2)*ts*t*t/2.-g(3)/t+g(4)*log(t)+g(5)*t+g(6)*t*t/2
     2.+g(7)*t**3/3.
      cpi=cpi*8.31434+g (11)
      return
    6 cpi=cpos(t,n)
      return
      entry hi
      if(n.ne.0)go to 7
      k=3
      go to 1
    4 cpi=g(8)*u*t/(eu-1.)-g(1)/(2.*t*t)-g(2)/t+g(3)*log(t)+g(4)*t
     1+g(5)*t*t/2.+g(6)*t**3/3.+g(7)*t**4/4.
      cpi=cpi*8.31434+g(10)
      return
    7 cpi=cpoh(t,n)
      return
      end
      function cpo(ti,n)
      dimension t(58),cpp(58),cpn(58),cp0(58),cpe(58)
      common/para/percen
c     calculates idesl gas specific heat for h2 by interpolating
c     data taken from rp 1932, units of the tables are  cal/mol deg 5.
c     units of output are joules/mol deg k.  the index n determines the
c     species,for n=1,parahydrogen,n=2 normal, n=3 ortho, n=4 equilib
c     n=5,some ortho-para mixture specified by common /para/,percent
c     range of temp is from 10 to 5000k.
      data(t=
     1 10.0, 12.0, 14.0, 16.0, 18.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0,
     2 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0,100.0,
     3105.0,110.0,115.0,120.0,125.0,130.0,135.0,140.0,145.0,150.0,160.0,
     4170.0,180.0,190.0,200.0,210.0,220.0,230.0,240.0,250.0,260.0,270.0,
     5280.0,290.0,300.0,350.0,400.0,500.0,600.,700.,1000.,1500.,2000.,
     63000.,4000.,5000.)
      data((cpe(i),i=1,58)=4.968  ,4.96884,4.97647,5.01153,5.07451,5.208
     11,5.83508,6.81282,7.87989,8.60613,9.00231,9.08005,8.93278,8.65894,
     28.33603,8.01207,7.71009,7.4416,7.21109,7.01858,6.85857,6.72557,6.6
     32055,6.53555,6.46904,6.42003,6.38403,6.36151,6.34602,6.33753,6.340
     401,6.34577,6.37276,6.413,6.45925,6.50975,6.5605,6.6095,6.65724,
     7                                    6.692,6.734,6.771,6.804,6.832,
     56.856,6.877,6.895,6.950,6.974,6.993,7.009,7.036,7.219,7.720,8.195,
     68.859,9.342,9.748)
      data(cp0=
     14.968,4.968,4.968,4.968,4.968,4.968,4.968,4.968,4.968,4.968,4.968,
     24.968,4.968,4.968,4.969,4.972,4.975,4.981,4.990,5.002,5.018,5.039,
     35.064,5.094,5.129,5.169,5.213,5.261,5.313,5.369,5.427,5.487,5.612,
     45.741,5.868,5.992,6.109,6.219,6.320,6.411,6.493,6.566,6.629,6.684,
     56.732,6.773,6.808,6.917,6.962,6.993,7.009,7.036,7.219,7.720,8.195,
     68.859,9.342,9.748)
      data(cpp=
     14.968,4.968,4.968,4.968,4.968,4.968,4.968,4.968,4.969,4.972,4.983,
     25.006,5.048,5.114,5.207,5.328,5.475,5.646,5.835,6.036,6.245,6.454,
     36.659,6.854,7.037,7.203,7.351,7.480,7.590,7.681,7.753,7.807,7.870,
     47.883,7.858,7.808,7.742,7.667,7.591,7.516,7.445,7.380,7.322,7.270,
     57.225,7.186,7.152,7.050,7.010,6.998,7.010,7.037,7.219,7.720,8.159,
     68.859,9.342,9.748)
      data(cpn=
     14.968,4.968,4.968,4.968,4.968,4.968,4.968,4.968,4.968,4.969,4.972,
     24.977,4.988,5.005,5.029,5.061,5.100,5.147,5.201,5.261,5.325,5.393,
     35.463,5.534,5.606,5.677,5.748,5.816,5.882,5.947,6.008,6.067,6.177,
     46.276,6.366,6.446,6.517,6.581,6.638,6.687,6.731,6.769,6.802,6.831,
     56.855,6.876,6.894,6.950,6.974,6.993,7.009,7.036,7.219,7.720,8.195,
     68.859,9.342,9.748)
      go to(1,2,3,4,5),n
    1 cpo=atkint(ti,cpp,t,58, 6,nes,.01)*4.184
      return
    2 cpo=atkint(ti,cpn,t,58, 6,nes,.01)*4.184
      return
    3 cpo=atkint(ti,cp0,t,58, 6,nes,.01)*4.184
      return
    4 cpo=atkint(ti,cpe,t,58, 6,nes,.01)*4.184
      return
    5 tup=ti+.5
      tdn=ti-.5
      hup=cpoh(tup,5)
      hdn=cpoh(tdn,5)
      cpo=(hup-hdn)
      return
      end
      function cpoh(ti,n)
      dimension t(58),hp(58),hn(58),ho(58),he(58)
      common/para/percen
c     calculates the enthalpy of the ideal gas for h2 by interpolation
c     data taken from rp 1932, units of tables are cal/mol
c     units of output are joule/mol.  the index n determines the species
c     species,for n=1,parahydrogen,n=2 normal, n=3 ortho, n=4 equilib
c     n=5,some ortho-para mixture specified by common /para/,percent
c     range of temp is from 10 to 5000k.
      data(t=
     1 10.0, 12.0, 14.0, 16.0, 18.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0,
     2 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0,100.0,
     3105.0,110.0,115.0,120.0,125.0,130.0,135.0,140.0,145.0,150.0,160.0,
     4170.0,180.0,190.0,200.0,210.0,220.0,230.0,240.0,250.0,260.0,270.0,
     5280.0,290.0,300.0,350.0,400.0,500.0,600.,700.,1000.,1500.,2000.,
     63000.,4000.,5000.)
      data(hn=
     1 303.67, 313.60, 323.54, 333.48, 343.41, 353.35, 378.19, 403.03,
     1 427.86, 452.71, 477.56, 502.43, 527.34, 552.32, 577.40, 602.62,
     3 628.02, 653.64, 679.51, 705.66, 732.13, 758.92, 786.06, 813.55,
     4 841.40, 869.61, 898.17, 927.08, 956.33, 985.91,1015.80,1045.99,
     51107.22,1169.49,1232.71,1296.78,1361.60,1427.10,1493.20,1559.84,
     61626.93,1694.44,1762.30,1830.48,1898.91,1967.57,2036.43,2382.74,
     72730.94,3429.46,4129.51,4831.66,6966.23,10697.2,14679.2,
     823230.9,32345.,41895.)
      data(hp=
     1  49.68,  59.61,  69.55,  79.49,  89.42,  99.36, 124.20, 149.04,
     2 173.88, 198.73, 223.61, 248.58, 273.71, 299.11, 324.90, 351.22,
     3 378.22, 406.01, 434.71, 464.38, 495.09, 526.84, 559.62, 593.41,
     4 628.14, 663.75, 700.14, 737.23, 774.92, 813.10, 851.69, 890.60,
     5 969.04,1047.84,1126.58,1204.93,1282.69,1359.74,1436.03,1511.56,
     61586.36,1660.49,1733.99,1806.95,1879.42,1951.47,2023.15,2377.83,
     72729.17,3429.24,4129.48,4831.65,6966.23,10697.2,14679.2,
     823230.9,32345.,41895.)
      data(ho=
     1 388.33, 398.27, 408.20, 418.14, 428.07, 438.01, 462.85, 487.69,
     2 512.53, 537.37, 562.21, 587.05, 611.89, 636.73, 661.57, 686.42,
     3 711.29, 736.18, 761.11, 786.09, 811.14, 836.28, 861.54, 886.93,
     4 912.49, 938.23, 964.18, 990.37,1016.80,1043.51,1070.50,1097.78,
     51153.27,1210.04,1268.09,1327.39,1387.91,1449.56,1512.26,1575.93,
     61640.46,1705.76,1771.74,1838.32,1905.41,1972.94,2040.86,2384.38,
     72731.52,3429.53,4129.52,4831.66,6966.23,10697.2,14679.2,
     823230.9,32345.,41895.)
      data(he=
     1  49.68,  59.62,  69.57,  79.56,  89.66,  99.96, 127.50, 159.12,
     2 195.77, 236.90, 280.97, 326.24, 371.33, 415.35, 457.86, 498.74,
     3 538.05, 575.93, 612.56, 648.13, 682.82, 716.78, 750.14, 783.03,
     4 815.54, 847.76, 879.77, 911.63, 943.40, 975.11,1006.80,1038.52,
     51102.11,1166.03,1230.39,1295.23,1360.58,1426.43,1492.76,1559.55,
     61626.75,1694.32,1762.23,1830.43,1898.88,1967.55,2036.42,2382.74,
     72730.94,3429.46,4129.51,4831.66,6966.23,10697.2,14679.2,
     823230.9,32345.,41895.)
      go to(1,2,3,4,5),n
    1 cpoh=atkint(ti,hp,t,58, 6,nes,.01)*4.184
      return
    2 cpoh=atkint(ti,hn,t,58, 6,nes,.01)*4.184
      return
    3 cpoh=atkint(ti,ho,t,58, 6,nes,.01)*4.184
      return
    4 cpoh=atkint(ti,he,t,58,6 ,nes,.01)*4.184
      return
    5 perce  =percen /100.
      cpoh=(atkint(ti,ho,t,58,6,nes,.01)*(1.-perce  )+
     1atkint(ti,hp,t,58,6,nes,.01)*perce  )*4.184
      return
      end
      function cpos(ti,n)
      dimension t(60),sp(60),sn(60),so(60),se(60)
      common/para/percen
c     calculates  the entropy of the ideal gas for h2 by interpolating
c     daken from rp 1932, units of the tables are cal/mol deg k.  1
c     units of output are joules/mol deg k.  the index n determines the
c     species,for n=1,parahydrogen,n=2 normal, n=3 ortho, n=4 equilib
c     n=5,some ortho-para mixture specified by common /para/,percent
c     range of temp is from 10 to 5000k.
      data(t=
     1 10.0, 12.0, 14.0, 16.0, 18.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0,
     2 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0,100.0,
     3105.0,110.0,115.0,120.0,125.0,130.0,135.0,140.0,145.0,150.0,160.0,
     4170.0,180.0,190.0,200.0,210.0,220.0,230.0,240.0,250.0,260.0,270.0,
     5280.0,290.0,300.0,350.0,400.0,450.0,500.0,550.0,600.0,700.,1000.,
     61500.,2000.,3000.,4000.,5000.)
      data(sp=
     u11.214,12.120,12.886,13.549,14.135,14.658,15.766,16.672,17.438,
     i18.102,18.688,19.214,19.693,20.135,20.548,20.938,21.310,21.669,
     o22.017,22.356,22.688,23.014,23.334,23.648,23.957,24.260,24.557,
     424.848,25.132,25.410,25.681,25.945,26.451,26.929,27.379,27.802,
     528.201,28.577,28.932,29.268,29.586,29.889,30.177,30.452,30.716,
     630.969,31.212,32.305,33.244,34.069,34.806,35.473,36.082,37.165,
     739.701,42.720,45.007,51.221,53.839,55.969)
      data(so=
     115.581,16.486,17.252,17.916,18.501,19.024,20.133,21.038,21.804,
     222.468,23.053,23.576,24.050,24.482,24.880,25.248,25.591,25.912,
     326.215,26.500,26.771,27.029,27.275,27.512,27.739,27.958,28.170,
     428.375,28.575,28.769,28.958,29.143,29.502,29.846,30.177,30.498,
     530.808,31.109,31.401,31.684,31.958,32.225,32.484,32.735,32.979,
     633.216,33.446,34.505,35.432,36.253,36.989,37.656,38.265,39.348,
     741.884,44.903,47.190,51.221,53.839,55.969)
      data(sn=
     115.607,16.512,17.278,17.941,18.527,19.050,20.159,21.064,21.830,
     222.494,23.079,23.603,24.078,24.513,24.914,25.288,25.638,25.969,
     326.283,26.582,26.868,27.143,27.407,27.663,27.911,28.151,28.384,
     428.611,28.832,29.047,29.256,29.461,29.856,30.234,30.595,30.942,
     531.274,31.594,31.901,32.197,32.483,32.758,33.025,33.282,33.531,
     733.772,34.005,35.073,36.003,36.825,37.561,38.228,38.836,39.920,
     742.455,45.475,47.762,51.221,53.839,55.969)
      data(se=
     111.215,12.120,12.887,13.554,14.149,14.692,15.918,17.069,18.196,
     219.294,20.331,21.285,22.145,22.911,23.592,24.198,24.740,25.229,
     325.674,26.080,26.455,26.804,27.129,27.435,27.724,27.999,28.260,
     428.510,28.750,28.980,29.203,29.418,29.828,30.216,30.584,30.934,
     531.269,31.591,31.899,32.196,32.482,32.758,33.024,33.282,33.531,
     633.772,34.005,35.073,36.003,36.825,37.561,38.228,38.836,39.920,
     742.455,45.475,47.762,51.221,53.839,55.969)
      go to(1,2,3,4,5),n
    1 cpos=atkint(ti,sp,t,60, 6,nes,.01)*4.184
      return
    2 cpos=atkint(ti,sn,t,60, 6,nes,.01)*4.184
      return
    3 cpos=atkint(ti,so,t,60, 6,nes,.01)*4.184
      return
    4 cpos=atkint(ti,se,t,60, 6,nes,.01)*4.184
      return
    5 perce  =percen /100.
      cpos=(atkint(ti,so,t,60,6,nes,.01)*(1.-perce  )+
     1atkint(ti,sp,t,60,6,nes,.01)*perce  )*4.184
c     the expression for the entropy of equilibrium h2 is incorrect,
c     the entropy of mixing muxt be added to make it complete
      return
      end
      function atkint(x,ymat,xmat,nelmts,nmax,nessy,acrcy)
c     this program has been changed so that the oscillating nature of
c     the matrix to be interpolated exists only at the upper end of the
c     table
c     this routine will take input matrices of up to 999 elements each,
c     arranged so that the x matrix(xmat) is in either ascending or
c     descending order,select nmax of these points,chosen so that
c     sucessive x values oscilate about the value of the argument x
c     unless the ends of the xmatrix interfere (in this case the
c     oscilatory nature is lost but the program will still perform an
c     interpolation), interpolate on these nmax pairs of data by
c     an oscilating variable point aitken interpolation algorithm
c     either until the percentage change in the interpolant is less
c     than the acrcy argument(the argument nessy indicates the
c     number of the point just before the last one checked) or until
c     the nmax points are all used.  it is suggested that nmax
c     be less than 10, and of course less than nelmts.  nelmts
c     indicates the number of elements in xmat or ymat.
c     if nessy is zero it indicates that the interpolation requirement
c     has not been satisfied.  if nessy is 1 it means that the value of
c     x lies out side the range of xmat.
      dimension ymat(999), xmat(999),a(21,20)
  100 format(42hinterpolation requirement not satisfied(x=,e16.8,1h)/33h
     1last 2 approximations of y are(y=,e16.8,1h,,e16.8,1h))
  200 format(55hthis represents an extrapolation of the  xmat matrix(x=,
     1e16.8,1h)/33hno calculation has been performed)
  300 format(24hnelmts is less than nmax)
  400 format(22hnmax is larger than 20)
      if(nmax-20)71,71,69
   69 write(6,400)
      atkint=0.0
      return
   71 if(nmax-nelmts)75,75,73
   73 write(6,300)
      atkint=0.0
      return
   75 continue
c     first two successive values of the xmatrix that straddle the
c     value x will be sought
      jj1=nelmts-1
      do 20 i=1,jj1
      dif1=x-xmat(i)
      dif2=xmat(i+1)-x
      if(dif1)16,15,16
   15 atkint=ymat(i)
      nessy =nmax
      return
   16 if(dif2)18,17,18
   17 atkint=ymat(i+1)
      nessy =nmax
      return
   18 ratio=dif1/ dif2
      if(ratio)20,20,19
   19 imid=i
      go to 32
   20 continue
c     at this point one could print the following statement
c     write output tape 6,200,x
      write(6,200)x
      nessy=1
      atkint=0.0
      return
   32 continue
c     note that ratio is positive if the two points straddle x
c     regardless which is larger
      jjj=imid
      jup=imid
      jdn=imid
      if(jjj+nmax-nelmts+1)98,98,102
   98 do 201 j=1,nmax
      jjj=imid+j-1
      a(1,j)=xmat(jjj)
  201 a(2,j)=ymat(jjj)
      go to 203
  102 do 41 j=1,nmax
      jj=j/2
      joe=j-2*jj
c     joe is 0 if j is even and 1 if j is odd
      if(j-1)33,40,33
   33 if(jdn-1)34,36,34
   34 if(jup-nelmts)35,37,35
   35 if(joe)37,36,37
   36 jup=jup+1
      jjj=jup
      go to 40
   37 jdn=jdn-1
      jjj=jdn
      go to 40
   40 a(1,j)=xmat(jjj)
      a(2,j)=ymat(jjj)
   41 continue
  203 nnn=nmax+1
      do 6 j=3,nnn
      l=j-1
      do 5 k=l,nmax
c     j is the column number
c     k is the row number
      a(j,k)=(a(j-1,k)-a(j-1,j-2))*(x-a(1,j-2))/(a(1,k)-a(1,j-2))
     1     +a(j-1,j-2)
      if(k-l)3,2,3
    2 if(abs((a(j,l)-a(j-1,l-1))/a(j,l))-acrcy/100.0)7,7,3
    3 continue
    5 continue
    6 continue
      nessy=0
c     at this point one could print out the following statement.
c     write output tape 6,100,x,a(nnn,nmax),a(nnn-1,nmax-1)
      write (6,100)x,a(nnn,nmax),a(nnn-1,nmax-1)
      atkint=a(nnn,nmax)
      return
    7 nessy=j-1
      atkint=a(j,l)
      return
      end
      subroutine limits(p,t,il)
      dimension g(32),vp(9)
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pup
      if(p.gt.pup)go to 10
      if(t.gt.tul.or.t.lt.tll)go to 12
      il=1
      return
   10 write(6,11)pup
   11 format(" the input pressure is out of the range of this equation "
     1/" the range for this equations is from 0 to ",f6.0," bar")
      il=0
      return
   12 write(6,13)tll,tul
   13 format(* the input temperature is out of range*
     1/* the range for this equation is from *,f6.2,* to *,f6.0,* k*)
      il=0
      return
      end
      subroutine data ne
      write(6,105)
  105 format(" the temperature range of neon is 25 to 300 kelvin"
     1/" with pressures to 200 bar"
     2/" you may enter this routine with any two of the variables"
     3/" p,d or t, and 0 for the third , for saturation enter with"
     4/" either p or t, and 0 for the other two ,if you want "
     5/" to change fluids enter 0 for all three input variables")
      tc=44.4
      pc=26.54
      ttp=25.
      pul=200.
      tul=300.
      tll=25.
      em=20.183
      write(6,104)
  104 format(" do you want engineering units or metric units ?"
     1/" enter a 0 for engineering units or a 1 for metric")
      call data n
      read(5,102)iu
  102 format(i1)
   17 if(iu.eq.0)go to 18
      write(6,103)
  103 format(" enter pressure in bar, density in moles/liter, and temper
     1ature in kelvins")
   24 read (5,*)p,d,t
      p=p/1.01325
      go to 19
   18 write(6,106)
  106 format(" enter pressure in lb/sq in, density in lb/cu ft and"
     1/" temperature in degrees f")
      read(5,*)p,d,t
      p=p/14.695949
      d=d*16.01846371/em
      if(t.eq.0.0)go to 19
      t=(t-32.)/1.8+273.15
   19 continue
      if(p.le.0.0)go to 14
      if(d.le.0.0)go to 13
      if(t.le.0.0)go to 12
      go to 21
   12 if(p.le.0.0.or.d.le.0.0)go to 15
      t=fndtne(p,d)
      if(p.gt.pul.or.t.gt.tul.or.t.lt.tll)go to 25
      go to 16
   13 if(t.le.0.0.or.p.le.0.0)go to 15
      if(p.gt.pul.or.t.gt.tul.or.t.lt.tll)go to 25
  131 d=fnddne(p,t)
      go to 16
   14 if(d.le.0.0.or.t.le.0.0)go to 15
      p=fndpne(d,t)
      if(p.gt.pul.or.t.gt.tul.or.t.lt.tll)go to 25
   16 h=enthne(p,d,t)
      s=entrne(d,t)
      pp=p*1.01325
      if(iu.eq.o)go to 23
      write(6,100)pp,d,t,h,s
  100 format(" pressure=",f7.2," bar, density=",f7.4," moles/liter, te"
     1"mperature=",f6.2," kelvin"
     2/" enthalpy=",f9.2," joules/mol, entropy=",f6.2," joules/mol-k")
      go to 17
   23 po=p*14.695949
      to=t*1.8-459.67
      do=d*em/16.01846371
      ho=h/(2.324445*em)
      so=s/(4.184001*em)
      write(6,101)po,do,to,ho,so
  101 format(" pressure=",f10.3," lb/sq in, density=",f10.4," lb/cu ft"
     1/" temperature=",f8.2," f, enthalpy=",f9.2," btu/lb"
     2/" entropy=",f6.2," btu/lb-f")
      go to 18
   15 if(p.le.0.0.and.t.le.0.0)go to 21
      if(p.gt.0.0)go to 20
      if(t.gt.tc.or.t.lt.ttp)go to 22
      p=vpnne(t)
  109 format(" do you want saturated liquid or vapor"
     1/" enter a 1 for vapor or a 0 for liquid")
      write(6,109)
      read(5,*)ip
      if(ip.gt.0)p=p-.0001
      if(ip.eq.0)p=p+.00001
      go to 131
   20 if(p.gt.pc)go to 22
      t=vptene(p)
      write(6,109)
      read(5,*)ip
      if(ip.gt.0)p=p-.0001
      if(ip.eq.0)p=p+.00001
      go to 131
   22 write(6,107)
  107 format(" your input pressure or temperature is out of range"
     1/" of the saturation curve, tc=44.4, pc=26.89, t triple=25."
     2/* try again*)
      go to 17
   21 return
   25 write(6,108)
  108 format(" your input temperature or pressure is out of range"
     1/" temp must be between 25 and 300k and pressure between"
     2/" 0 and 200bar, try again")
      go to 17
      end
      subroutine datahe(t,d,p,u,b1,xka,cpp,s,iu,ip,iz)
c...
c... the temperature range of helium is 2.177 to 1500 kelvin
c... with pressures to 1000 bar (100e06 pascal)
c... you may enter this routine with any two of the variables
c... p,d or t, and 0 for the third, for saturation enter with
c... either p or t, and a 0 for the other two.
c...
      tc=5.201
c...tc is the critical temperature of heluim in kelvin
      pc=2.2746
c...pc is the critical pressure of heluim in bars
      ttp=2.17
c...ttp is a value for the lambda point of helium2 (triple point)
      pul=1000.
c...pul is the pressure upper limit in bars
      tul=1500.
c...tul is the upper limit of the temperature in kelvin
      tll=2.177
c...tll is the temperature lower limit for the calculation in kelvin
      em=4.0026
c...em is the molecular weight of helium
      d=0
      if(iz.eq.1)p=0
      if(iz.eq.2)t=0
c...
c...  to use engineering units enter the value of iu as a 0.
c...  to do the calucalations in si units enter the value of iu as 1
c...
c...pressure is enter in pascal, density is in moles/liter
c... and temperature is in kelvin.
      p=p/.101325e+6
c...pressure is converted from pascals to atm. for the calculations
c...done in the program from the national bureau of standards
   19 continue
      if(p.le.0.0)go to 14
      if(d.le.0.0)go to 13
      if(t.le.0.0)go to 12
      go to 21
   12 if(p.le.0.0.or.d.le.0.0)go to 15
      t=fndthe(p,d)
      if(p.gt.pul.or.t.gt.tul.or.t.lt.tll)go to 25
      go to 16
   13 if(t.le.0.0.or.p.le.0.0)go to 15
      if(p.gt.pul.or.t.gt.tul.or.t.lt.tll)go to 25
  131 d=fnddhe(p,t)
      if(d.eq.0.0) return
      go to 16
   14 if(d.le.0.0.or.t.le.0.0)go to 15
      p=fndphe(d,t)
      if(p.gt.pul.or.t.gt.tul.or.t.lt.tll)go to 25
   16 h=enthhe(d,t)
      h=h*249.8376
      s=entrhe(d,t)
      s=s*249.8376
      w=sounhe(d,t)
      cpp=cphe(d,t)
      cpp=cpp*249.8376
      cvv=cvhe(d,t)
      cvv=cvv*249.8376
      th=therhe(d,t)*100.
      th=th*1.0e06
      v=vische(d,t)
      v=v*1.0e-07
      p=p*0.101325e06
      call xkappa(t,d,xka)
      call xbeta(xka,t,d,b1)
      d=d*4.0026
      u = h-p/d
c...the values for the various thermodynamic properties are
c...are converted to standard si units before returning to
c...sat1he,sat2he and snphhe
      return
   15 if(p.le.0.0.and.t.le.0.0)go to 21
      if(p.gt.0.0)go to 20
      if(t.gt.tc.or.t.lt.ttp)go to 22
      p=vpnhe(t)
      if(ip.gt.0)p=p-.0001
      if (ip.ge.1)p=p+.00001
c...
c...if saturated liguid calculations are desired ip=0
c...if saturated vapor calcualtions are desired ip=1
c...
      go to 131
   20 if(p.gt.pc)go to 22
      t=vptehe(p)
      if(ip.gt.0)p=p-.0001
      if (ip.ge.1)p=p+.00001
      go to 131
   22 write(6,107)
  107 format(" your input pressure or temperature is out of range"
     1/" of the saturation curve, tc=5.201, pc=2.275, t triple=2.177"
     2/" try again")
   21 return
   25 write(6,108)
  108 format(" your input temperature or pressure is out of range"
     1/" temp must be between 2.177 and 1500k and pressure between"
     2/" 0 and 1000bar, try again")
      return
      end
      subroutine info
      write(6,2)
    2 format(" when the program asks for a fluid selection, enter the ap
     1propriate number"
     2/" an inappropriate number will terminate the program")
      write(6,1)
    1 format("  when the program asks for a pressure, density, and"/" t
     1emperature, enter any 2 of the three and a 0 for the third."/" the
     2e order must be p, d,t, and one of the three must be 0. "
     3/" if all three are 0 the program asks for a new fluid")
      write(6,110)
  110 format(" if you are interested in a definition of the various"
     1/" modifications of hydrogen enter a 1, if not enter a 0")
      read(5,*)ic
      if(ic.ne.1)go to 111
      call h2 info
  111 write(6,112)
  112 format(" if you are interested in the sources of these programs"
     1/" enter a 1 if not enter a 0")
      read(5,*)is
      if(is.eq.1)call source
      return
      end
      subroutine h2 info
      write(6,100)
  100 format(" the hydrogen molecule is made up of two hydrogen atoms"
     1/" there are two possible relative orientations of the nuclear"
     2/" spin of the atoms in a molecule of hydrogen. i.e. the spins"
     3/" may be in the same direction (ortho) or in opposite directions"
     4/" (para).  the relative amounts of ortho and para hydrogen in"
     5/" a sample of equilibrium hydrogen is temperature dependant")
      write(6,101)
  101 format(" at room temperature equilibrium hydrogen is 75 percent"
     1/" ortho and 25 percent para and is called normal hydrogen"
     2/" at 20 kelvin equilibrium hydrogen is 99.8 percent para.")
      return
      end
      subroutine source
      write(6,100)
  100 format(" this program was written by r.d. mccarty at the national"
     1/" bureau of standards in boulder colorado under a contract with"
     2/" the johnson space center in houston texas.  the nasa contract"
     3/" monitor at jsc is walter scott.  the documentation of the"
     4/" program is in preparation and is planned as a joint"
     5/" nasa-nbs publication")
      return
      end
      function fnddhe(pi,ti)
c solves the helium equation of state for density in mol/liter
c  given a pressure in atmospheres and a temperature in degrees k
      t=ti
      p=pi
      if(t.lt.5.2)go to 6
      pm=1001.
      if(t.lt.15.)pm=pmelt(t)
      if(pm.lt.p)go to 30
      if(t.gt.100.)go to 1
      pc=2.2449+(t-5.2014)*1.76
      if(p.lt.pc)go to 1
      pm=200.+(t-5.2)*12.31
      d=17.399+((pm-pc)/(pm-pc+1.))*2.33*17.399
      go to 7
    2 d=.0001
      if(t.lt.4.2)go to 7
    1 vb=virb(t)
      rt=0.0820558*t
      p1=rt/p
      d=1./(p1+vb)
      go to 7
    6 if(p.lt.vpnhe(t))go to 2
      ds=46.18+(t-2.)*4.02
      dl=dsatl(t)*1000./4.0026
      del=ds-dl
      pm=pmelt(t)
      if(p.gt.pm)go to 30
      d=dl+del*p/pm
    7 do 10 i=1,50
      p2=fndphe(d,t)
      if(abs(p-p2)-1.e-7*p)20,20,8
    8 dp=dpddhe(d,t)
      corr=(p2-p)/dp
      if(abs(corr)-1.e-7*d)20,20,10
   10 d=d-corr
      fnddhe=0
      return
   20 fnddhe=d
      return
   30 fnddhe=0
      return
      end
      function fndphe(dd,tt)
c the main equation of state routine for helium:
c the input is density in moles/liter and temperature
c in degrees k, the output is pressure,dp/dd,dp/dt,enthalpy,
c entropy and cv in atmospheres and joules
      dimension a(26),b(27,4)
      common/idex/id
      data(id=0)
      data((b(i),i=82,108)=
     1       5.988310109e-9,-4.9653052187e-7,-3.8116033499e-6,3.68116713
     13e-5,-1.4830691828e-4,3.0596174335e-4,-3.3908190224e-4,1.962408024
     22e-4,1.5527899712e-5,-3.6110403503e-5,-1.0839788073e-5,4.972810121
     37e-5,1.938145109e-5,-4.149640896e-4,-5.7465772899e-4,-4.3470945634
     4e-3,-6.8383888924e-2,-2.1382474225e-2,2.7106954908e-2,-1.262796778
     58e-2,2.587575338e-3,7.9041608815e-2,-1.4024724318e-4,-2.8278987249
     6e-7,1.7336410358e-6,-2.5454187855e-6,-0.0005)
      data((b(i),i=55,81)=-1.4802195348e-8,4.1721791119e-7,-2.3326553271
     1e-7,4.085511088e-7,1.0900567964e-5,-5.0060952775e-5,1.1312765043
     2e-4,-1.2539843287e-4,1.9661380688e-6,1.7122932666e-4,2.3051000563
     3e-4,-9.65647391e-4,-3.6027 735292e-5,1.6079946555e-3,-2.7441763615
     4e-2,.14739506957,-.43559344838,1.3447956078,-1.7040375125,.9026267
     54040,5.6875644111e-3,-1.4438146625e-1,3.3768874851e-3,1.0754201218
     6e-6,-4.5264622308e-5,3.8597388864e-5,-.0005)
      data((b(i),i=28,54)=-4.2287454626e-8,4.4529354413e-7,-1.0246150954
     1e-5,8.5254608956e-5,-2.5163069255e-4,3.2877709285e-4,-1.060195758
     2e-4,-1.0687738074e-4,-3.2120950632e-5,1.415901897e-4,1.4725630701
     4e-3,-2.618354941e-3,2.0461501117e-5,1.2746996288e-3,-2.0272929583
     5e-2,7.4648036615e-2,-.17217966521,.51053439738,-.40178202697,
     6.26829864632,7.906601204e-3,-8.9393485656e-2,-.15076580053,
     72.6882494327e-6,-3.3794316835e-5,-2.4495951195e-5, -.0005)
      data((b(i),i=1,27)=
     a       -1.5096862619e-7,6.4640898904e-7,4.1362357367e-5,
     1-3.7910190353e-4,1.3806454049e-3,-2.5085412058e-3,2.3697560398e-3
     2,-9.5726461066e-4,3.7405931828e-5,-6.4103220333e-4,
     31.8579366177e-3,7.4007986606e-4,1.4792568148e-4,-3.2531355477e-3,
     41.9518739286e-2,-.10571817135,.33164944449,-.51130022535,
     53.9940004906e-1,-.15555244471,4.906264031e-3,-2.6148004377e-2,
     63.4221685545e-2,5.4159662622e-6,-1.0687806777e-5,-8.9484651869e-6,
     7-.0025)
      kp=1
      go to 10
      entry dpdthe
      kp=2
      go to 10
      entry dpddhe
      kp=3
      go to 10
      entry entrhe
      kp=4
      go to 10
      entry enthhe
      kp=5
      go to 10
      entry cvhe
      kp=6
   10 k1=0
      kh=1
      k=1
      kk=1
      k4=1
      if(id.ne.0)go to 20
      if(tt.ge.15.)go to 20
      if(tt.gt.10)go to 30
      if(dd.gt.17.3987)go to 40
   11 i=1
      t=tt
      d=dd
    8 go to (9,100,200,300,400,500)kp
    9 d2=d*d
      d3=d2*d
      d4=d3*d
      d5=d4*d
      gamma=b(27,i)
      ex=exp(d2*gamma)
      exd3=ex*d3
      exd5=ex*d5
      m=i
      n=1
      a(n)=d5*d
      n=n+1
      a(n)=a(n-1)/t
      n=n+1
      do 2 i=1,6
      fi=i
      a(n)=d5*t**(.75-fi/4.)
      n=n+1
    2 continue
      do 3 i=1,4
      fi=i
      a(n)=d4*t**(1.5-fi)
      n=n+1
    3 continue
      do 1 i=1,8
      fi=i
      a(n)=d3*t**(1.5-fi/2.)
      n=n+1
    1 continue
      do 4 i=1,3
      fi=i
      a(n)=exd3*t**(1.-fi)
      n=n+1
    4 continue
      do 5 i=1,3
      fi=i
      a(n)=exd5*t**(1.-fi)
      n=n+1
    5 continue
      n=n-1
      i=m
    7 p=0
      do 15 j=1,n
      p=p+b(j,i)*a(j)
   15 continue
      p=p+.0820558*d*t*(1.+virb(t)*d)
      if(kh.lt.1)go to 413
      go to(50,50,30,40)k
  100 d2=d*d
      d3=d**3
      d4=d3*d
      d5=d4*d
      d6=d5*d
      t2=t*t
      t3=t2*t
      t4=t**4
      m=i
      gamma=b(27,m)
      ex=exp(d2*gamma)
      n=1
      r=.0820558
      a(n)=0.0
      n=n+1
      a(n)=(-1.)*d6/t2
      n=n+1
      do 102 i=1,6
      fi=i
      a(n)=d5*t**(.75-fi/4.-1.)*(.75-fi/4.)
      n=n+1
  102 continue
      do 103 i=1,4
      fi=i
      a(n)=d4*t**(1.5-fi/1.-1.)*(1.5-fi)
      n=n+1
  103 continue
      do 101 i=1,8
      fi=i
      a(n)=d3*t**(1.5-fi/2.-1.)*(1.5-fi/2.)
      n=n+1
  101 continue
      do 104 i=1,3
      fi=i
      a(n)=ex*d3*t**(1.-fi-1.)*(1.-fi)
      n=n+1
  104 continue
      do 105 i=1,3
      fi=i
      a(n)=ex*d5*t**(1.-fi-1.)*(1.-fi)
      n=n+1
  105 continue
      n=n-1
      p=0
      do 115 j=1,n
      p=p+a(j)*b(j,m)
  115 continue
      p=p+r*d*(1.+virb(t)*d)+r*d*t*dbdt(t)*d
      i=m
      go to(50,50,30,40)k
  200 d2=d*d
      d3=d2*d
      d4=d3*d
      d5=d4*d
      m=i
      gamma=b(27,m)
      ex=exp(d2*gamma)
      dex=gamma*2.*d*ex
      n=1
      r=0.0820558
      a(n)=6.*d5
      n=n+1
      a(n)=a(n-1)/t
      n=n+1
      do 202 i=1,6
      fi=i
      a(n)=5.*d4*t**(.75-fi/4.)
      n=n+1
  202 continue
      do 203 i=1,4
      fi=i
      a(n)=d3*4.*t**(1.5-fi)
      n=n+1
  203 continue
      do 201 i=1,8
      fi=i
      a(n)=d2*3.*t**(1.5-fi/2.)
      n=n+1
  201 continue
      do 204 i=1,3
      fi=i
      a(n)=(dex*d3+3.*d2*ex)*t**(1.-fi)
      n=n+1
  204 continue
      do 205 i=1,3
      fi=i
      a(n)=(dex*d5+5.*d4*ex)*t**(1.-fi)
      n=n+1
  205 continue
      n=n-1
      p=0
      do 215 j=1,n
      p=p+a(j)*b(j,m)
  215 continue
      i=m
      p=p+r*t*(1.+2.*d*virb(t))
      go to(50,50,30,40)k
  300 d2=d*d
      d3=d2*d
      d4=d3*d
      n=1
      r=.0820558
      m=i
      gamma=b(27,m)
      ex=exp(d2*gamma)
      a(n)=0.0
      n=n+1
      a(n)=(d4*d/5.)*t**(-2.)*(-1.)
      n=n+1
      do 302 i=1,6
      fi=i
      a(n)=(d4/4.)*t**(.75-fi/4.-1.)*(.75-fi/4.)
      n=n+1
  302 continue
      do 303 i=1,4
      fi=i
      a(n)=(d3/3.)* t**(1.5-fi-1.)*(1.5-fi)
      n=n+1
  303 continue
      do 301 i=1,8
      fi=i
      a(n)=(d2/2.)*t**(1.5-fi/2.-1.)*(1.5-fi/2.)
      n=n+1
  301 continue
      do 304 i=1,3
      fi=i
      a(n)=(ex/(2.*gamma))*t**(1.-fi-1.)*(1.-fi)
      n=n+1
  304 continue
      do 305 i=1,3
      fi=i
      a(n)=(d2*ex/(2.*gamma)-ex/(2.*gamma**2))*
     1t**(1.-fi-1.)*(1.-fi)
      n=n+1
  305 continue
      n=n-1
      sint=d*r*(virb(t)+t*dbdt(t))
      do 306 i=1,n
      sint=sint+b(i,m)*a(i)
  306 continue
      n=21
      ex=1.
      d2=0
      do 310 i=1,3
      fi=i
      a(n)=(ex/(2.*gamma))*t**(1.-fi-1.)*(1.-fi)
      n=n+1
  310 continue
      do 311 i=1,3
      fi=i
      a(n)=(d2*ex/(2.*gamma)-ex/(2.*gamma**2))*
     1t**(1.-fi-1.)*(1.-fi)
      n=n+1
  311 continue
      n=n-1
      do 312 i=21,n
      sint=sint-b(i,m)*a(i)
  312 continue
      p=(9.371658+5.193043*log(t/4.2144)-25.31469*(sint+r*log(r*t*d)))
      p=p*4.0026
      i=m
      go to(50,50,30,40)k
  400 kh=0
      go to 9
  413 pp=p
      kh=1
      d2=d*d
      d3=d*d2
      d4=d3*d
      n=1
      r=.0820558
      m=i
      gamma=b(27,m)
      ex=exp(d2*gamma)
      a(n)=(d4*d)/5.
      n=n+1
      a(n)=(d4*d/5.)*(2./t)
      n=n+1
      do 402 i=1,6
      fi=i
      a(n)=(d4/4.)*(t**(.75-fi/4.)-t**(.75-fi/4.)*(.75-fi/4.))
      n=n+1
  402 continue
      do 403 i=1,4
      fi=i
      a(n)=(d3/3.)*(t**(1.5-fi)-t**(1.5-fi)*(1.5-fi))
      n=n+1
  403 continue
      do 401 i=1,8
      fi=i
      a(n)=(d2/2.)*(t**(1.5-fi/2.)-t**(1.5-fi/2.)*(1.5-fi/2.))
      n=n+1
  401 continue
      do 404 i=1,3
      fi=i
      a(n)=(ex/(2.*gamma))*(t**(1.-fi)-t**(1.-fi)*(1.-fi))
      n=n+1
  404 continue
      do 405 i=1,3
      fi=i
      a(n)=(d2*ex/(2.*gamma)-ex/(2.*gamma**2))*(t**(1.-fi)-t**(1.-fi)
     1*(1.-fi))
      n=n+1
  405 continue
      n=n-1
      hint=r*t*t*d*dbdt(t)  *(-1.)
      do 406 i=1,n
      hint=hint+b(i,m)*a(i)
  406 continue
      n=21
      d2=0
      ex=1.
      do 410 i=1,3
      fi=i
      a(n)=(ex/(2.*gamma))*(t**(1.-fi)-t**(1.-fi)*(1.-fi))
      n=n+1
  410 continue
      do 411 i=1,3
      fi=i
      a(n)=(d2*ex/(2.*gamma)-ex/(2.*gamma**2))*(t**(1.-fi)-t**(1.-fi)
     1*(1.-fi))
      n=n+1
  411 continue
      n=n-1
      do 412 i=21,n
      hint=hint-b(i,m)*a(i)
  412 continue
      p=21.82282+5.193043*(t-4.2144)+25.31469*(hint+pp/d-r*t)
      p=p*4.0026
      i=m
      go to(50,50,30,40)k
  500 d2=d*d
      d3=d2*d
      d4=d3*d
      n=1
      r=.0820558
      m=i
      gamma=b(27,m)
      ex=exp(d2*gamma)
      sint=t*d*r*(2.*dbdt(t  )+d2dbdt2(t)*t)
      a(n)=0.0
      n=n+1
      a(n)=(d4*d/5.)*t**(-2.)*(-1.)*(-2.)
      n=n+1
      do 502 i=1,6
      fi=i
      a(n)=(d4/4.)*t**(.75-fi/4.-1.)*(.75-fi/4.)*(.75-fi/4.-1.)
      n=n+1
  502 continue
      do 503 i=1,4
      fi=i
      a(n)=(d3/3.)* t**(1.5-fi-1.)*(1.5-fi)*(1.5-fi-1.)
      n=n+1
  503 continue
      do 501 i=1,8
      fi=i
      a(n)=(d2/2.)*t**(1.5-fi/2.-1.)*(1.5-fi/2.)*(1.5-fi/2.-1.)
      n=n+1
  501 continue
      do 504 i=1,3
      fi=i
      a(n)=(ex/(2.*gamma))*t**(1.-fi-1.)*(1.-fi)*(1.-fi-1.)
      n=n+1
  504 continue
      do 505 i=1,3
      fi=i
      a(n)=(d2*ex/(2.*gamma)-ex/(2.*gamma**2))*
     1t**(1.-fi-1.)*(1.-fi)*(1.-fi-1.)
      n=n+1
  505 continue
      n=n-1
      do 506 i=1,n
      sint=sint+b(i,m)*a(i)
  506 continue
      p=sint
      ex=1.
      d2=0
      n=21
      do 510 i=1,3
      fi=i
      a(n)=(ex/(2.*gamma))*t**(1.-fi-1.)*(1.-fi)*(1.-fi-1.)
      n=n+1
  510 continue
      do 511 i=1,3
      fi=i
      a(n)=(d2*ex/(2.*gamma)-ex/(2.*gamma**2))*
     1t**(1.-fi-1.)*(1.-fi)*(1.-fi-1.)
      n=n+1
  511 continue
      n=n-1
      do 512 i=21,n
      p=p-b(i,m)*a(i)
  512 continue
      p=5.193043*(3./5.)*4.0026-p*101.3278
      i=m
      go to(50,50,30,40)k
   20 k=2
      i=3
      if(id.ne.0)i=4
      t=tt
      d=dd
      go to 8
   30 k=3
      go to(33,34,35)kk
   33 d=dd
      t=tt
      kk=2
      if(dd.gt.17.3987)go to 40
      i=1
      go to 8
   34 pti=p
      i=3
      kk=3
      t=tt
      d=dd
      go to 8
   35 ptiii=p
   38 f=(15.-t)/5.
            p=f*pti+(1.-f)*ptiii
      if(kh.lt.1)go to 413
      fndphe=p
      return
   40 if(k.eq.3)k1=3
      go to(41,42,43,44)k4
   41 k=4
      i=2
      k4=2
      d=dd
      if(k1.eq.0)t=tt
      go to 8
   42 piid=p
      d=17.3987
      if(t.lt.5.2014)d=dsatl(t)*1000./4.0026
      k4=3
      go to 8
   43 piidc=p
      i=1
      k4=4
      go to 8
   44 pidc=p
      p=pidc+(piid-piidc)
      k4=1
      if(k1.eq.3)go to 30
      fndphe=p
   50 fndphe=p
      return
      end
      function cphe(d,t)
c csinh(p)
c for helium, input is density (moles/liter) and temperature(k)
c output is  joules/mol-k
c(see also next page)
      p=cvhe(d,t)+(t*(dpdthe(d,t)**2)/((d**2)*dpddhe(d,t)))*101.325
      cphe=p
      end
      function sounhe(d,t)
c velocity of sound for helium, input is density (moles/liter)
c and temperature (kelvin),output is in metres/sec
      s=((cphe(d,t)/cvhe(d,t))*(dpddhe(d,t)*25311.))**.5
      sounhe=s
      end
      function virb(t)
      dimension a(9),v(45)
      data(a=-5.0815710041e-7,-1.1168680862e-4,1.1652480354e-2,
     1 7.4474587998e-2,-5.3143174768e-1,-9.5759219306e-1,
     2 3.9374414843,-5.1370239224,2.0804456338)
c     coefficients from program 5/28/70-1630
c     this sub program calculates the second virial coefficient for
c     helium.  the range is from 2 to 1500 deg k.  input is temperature
c     in degrees kelvin and iuse, if isue is 0 or negative the routine
c     calculates b for the equation pv=rt(1+bd+..., for other values of
c     iuse, the routine calculates the varianc of b at the input temp
c     units are atm, deg kelvin, and moles/liter,4/3/69-1253,r.d.mccarty
c     revised 2/12/70-925
    1 b=0
      do 5 i=1,9
      fi=i
    5 b=b+t**(1.5-fi/2.)*a(i)
      virb=b
      return
      end
      function dbdt (t)
      dimension a(9),v(45)
c     this sub program calculates the second virial coefficient for
c     helium.  the range is from 2 to 1500 deg k.  input is temperature
c     in degrees kelvin and iuse, if isue is 0 or negative the routine
c     calculates b for the equation pv=rt(1+bd+..., for other values of
c     iuse, the routine calculates the varianc of b at the input temp
      data(a=-5.0815710041e-7,-1.1168680862e-4,1.1652480354e-2,
     1 7.4474587998e-2,-5.3143174768e-1,-9.5759219306e-1,
     2 3.9374414843,-5.1370239224,2.0804456338)
c     units are atm, deg kelvin, and moles/liter,5/28/70-1630,r.d.mccart
    1 b=0
      do 5 i=1,9
      fi=i
    5 b=b+t**(.5-fi/2.)*a(i)*(1.5-fi/2.)
      dbdt=b
      return
      end
      function d2dbdt2(t)
      dimension a(9)
      data(a=-5.0815710041e-7,-1.1168680862e-4,1.1652480354e-2,
     1 7.4474587998e-2,-5.3143174768e-1,-9.5759219306e-1,
     2 3.9374414843,-5.1370239224,2.0804456338)
c     this sub program calculates the second virial coefficient for
c     helium.  the range is from 2 to 1500 deg k.  input is temperature
c     in degrees kelvin and iuse, if isue is 0 or negative the routine
c     calculates b for the equation pv=rt(1+bd+..., for other values of
c     iuse, the routine calculates the varianc of b at the input temp
c     units are atm, deg kelvin, and moles/liter,5/28/70-1630,r.d.mccart
    1 b=0
      do 5 i=1,9
      fi=i
    5 b=b+t**(.5-fi/2.-1.)*(1.5-fi/2.)*(.5-fi/2.)*a(i)
      d2dbdt2=b
      return
      end
      function vpnhe(tt)
c     gives a vapor pressure for helium in atmospheres given a
c     temperature in kelvin.  the function reproduces the 1968 helium
c     temperature scale to .0001 kelvin
      dimension c(10),d(14)
      data(c=-3.9394635287,141.27497598,-1640.7741565,11974.557102,
     1-55283.309818,166219.56504,-325212.82840,398843.22750,
     2-277718.06992,83395.204183)
      data(d=-49.510540356,651.9236417,-3707.5430856,12880.673491,
     1 -30048.545554,49532.267436,-59337.558548,52311.296025,
     2-33950.233134,16028.674003,-5354.1038967,1199.0301906,
     3 -161.46362959,9.8811553386)
      t=tt
      t=t-delt(t)
      p=0
      if(t-2.1720)10,10,1
    1 do 5 i=1,10
    5 p=p+c(i)*t**(2-i)
      vp =exp(p)/.76e+6
      vpnhe=vp
      return
   10 do 15 i=1,14
   15 p=p+d(i)*t**(2-i)
      vp =exp(p)/.76e+6
      vpnhe=vp
      return
      end
      function delt(tt)
c adjusts the temperature to a new scale
      t=tt
      delt=.001+.002*t
      return
      end
      function vptehe(pp)
c     solves the vapor pressure equation for temperature given a pressur
c     the fluid is helium and the units are atmospheres and kelvins
      p=pp
      if(p.lt..842105)go to 12
      t=5.0
      pcal=vpnhe(t)
      go to 13
   12 pcal=.049737
      if(abs(p-pcal)-.0000001*pp)11,11,1
    1 t=2.1720
   13 do 10 i=1,26
      dp=dvpnhe(t)
      del=(pcal-p)/dp
      t=t-del
      pcal=vpnhe(t)
      if(abs(p-pcal)-.0000001*p)11,11,2
    2 if(abs(del)-.0000001*t)11,11,10
   10 continue
      write(6,100)t
   11 vptehe=t
      return
  100 format(" temperature itteration failed at t=",e14.7)
      end
      function dvpnhe(tt)
c     gives the derivative of the vapor pressure for helium given a
c     temperature in kelvin9  pressure is in atmospheres
      dimension c(10),d(14)
      data(c=-3.9394635287,141.27497598,-1640.7741565,11974.557102,
     1-55283.309818,166219.56504,-325212.82840,398843.22750,
     2-277718.06992,83395.204183)
      data(d=-49.510540356,651.9236417,-3707.5430856,12880.673491,
     1 -30048.545554,49532.267436,-59337.558548,52311.296025,
     2-33950.233134,16028.674003,-5354.1038967,1199.0301906,
     3 -161.46362959,9.8811553386)
      p=0
      t=tt-delt(tt)
      if(t-2.1720)10,10,1
    1 do 5 i=1,10
    5 p=p+c(i)*t**(1-i)*(2-i)
      dvpnhe=p*vpnhe(t)
      return
   10 do 15 i=1,14
   15 p=p+d(i)*t**(1-i)*(2-i)
      dvpnhe=p*vpnhe(t)
      return
      end
      function  transp(dd,tt)
c      helium
c     this routine calcultates thermal conductivity and viscosity
c     for an input of degrees kelvin and density in moles per liter
c     the range of temperature is from 2 to 2000 k
c     for temperatures below 300 k formulas ofd vince arp and ge steward
c     are used, for temperatures above 300 the dilute gas of a critical
c     compilation from england is used for both viscosity and
c     thermal conductivity and the excess functions from the routines by
c     arp and stewart)   the excess functions are calculated for temps
c     above 300 k with the temperature dependence held at 300 k
c     for temps below 300 k to 100 k the viscosity excess is calc
c     from stewarts routine but the dilute gas values are taken from
c     the english correlation for temps between 100 and    110 t
c     dilute gas  calculation is averaged
      entry therhe
    1 d=dd
      t=tt
      rho=d*4.0026e-3
      if(t.lt.300.)go to 5
      tho30=viscx(300.)*.00781736
      tho300=conz(300.)
      del300=delc(300.,rho)
      tho=viscx(t)*.00781736+tho300-tho30
      the=tho300*del300-tho300
      transp=tho+the
      return
    5 transp=conz(t)*delc(t,rho)+critic(t,rho)
c     output in mw/cm.k
      return
      entry vische
      d=dd
      t=tt
      if(t.lt.100.)go to 10
      if(t.lt.300.)go to 8
      etao=viscx(t)
      eto30=viscx(300.)
      eto300=viscdt(0.0,300.)
      ete300=viscdt(d,300.)-eto300
      transp=etao+ete300
c  output units are micropoise
      return
    8 if(t.lt.110.)go to 9
      etao=viscx(t)
      eteb=viscdt(d,t)-viscdt(0.0,t)
      transp=etao+eteb
      return
    9 eta1=viscdt(0.0,100.)
      eta2=viscx(110.)
      etao=eta1+(eta2-eta1)*(t-100.)/10.
      transp=etao+viscdt(d,t)-viscdt(0.0,t)
      return
   10 transp=viscdt(d,t)
      return
      end
      function viscx( t )
c calculates the dilute gas viscosity for helium
c for temperatures from 110k to 300k
      viscx = 196. * t ** 0.71938 * exp( 12.451 / t - 295.67 / t / t -
     a    4.1249 )
      return
      end
      function delc(temp, rho)
c calculate the excess thermal conductivity for helium, input is
c  temperature(k) and density(moles/liter) of helium
c     k=kzero*expf(b(t)*rho + c(t)*rho**2)
c      this program returns expf(b(t)*rho + c(t)*rho**2)
      bb=log(temp)
      cc=1.0/temp
      betty = 4.7470660612 - 5.3641468153*bb + 3.4639703698*bb**2
     2 -1.0702455443*bb**3 + 0.1571349306*bb**4 -0.00892140047*bb**5
      b=exp(betty)
      c = 2.2109006708 + 187.74174808*cc - 1281.0947055*cc*cc
     3 +3645.2393216*cc**3 - 3986.6937948*cc**4
      delc=exp(b*rho+c*rho*rho)
      return
      end
      function conz(temp)
c     kzero in milliwatts/cm-k, t in kelvin9  22 june 71.
    1 anne=log(temp)
      pat = -4.3611622157 + 1.9250159286*anne - 0.52544120165*anne**2
     1+ 0.090045763885*anne**3  -  0.0054773874708*anne**4
      conz=exp(pat)
      return
      end
      function viscdt(dgc,t)
c     w.g.steward,s data   23 june 71
c  input units are kelvin and mol/liter
c  output units are micropoise
      tl=log(t)
      r=dgc*4.0026/1000.
      anne= -0.135311743/tl + 1.00347841  +  1.20654649*tl
     1 -0.149564551*tl*tl+0.0125208416*tl**3
      betty=r*(-47.5295259/tl + 87.6799309  -42.0741589*tl
     1+8.33128289*tl*tl -0.589252385*tl**3)
      carol = r*r*(547.309267/tl - 904.870586 + 431.404928*tl
     1-81.4504854*tl*tl + 5.37008433*tl**3)
      dagmar=r**3*(-1684.39324/tl  +  3331.08630  -  1632.19172*tl
     1+308.804413*tl*tl  -  20.2936367*tl**3)
      viscdt=exp(anne+ betty+ carol+ dagmar)
      return
      end
      function critic(temp,rho)
c     critical anomaly for he therm. con., scaled from h-2
c     t in kelvin, requires density in grams/cc and cp in joules/mole
c     this deck of 18 sept 70, i have used mccarty"s he decks of 7/18/70
    4 t=temp
    5 dml=rho/0.0040026
    6 if(t .ge. 11.83) go to 11
      if(rho.gt.0.12) go to 11
    7 cp1=cphe(dml,t)
    8 cp2=cphe(dml,11.83)
    9 critic=0.0026*(cp1-cp2)/4.0026
   10 if(critic)11,12,12
   11 critic=0.0
   12 return
      end
      function dsatv(tt)
c calculates the saturated liquid and vapor densities for helium,
c input is temperature(k) output is gm/cc (see next page)
      dimension gv(6),gl(6)
      data(gl=.12874326484,-.43128217346,1.7851911824,-3.3509624489,
     1  3.0344215824,-1.0981289602)
      data(gv=-.069267495322,-.1292532553,.29347470712,-.40806658212,
     1  .35809505624,-.11315580397)
      data(dc=.06964)
      data(tc=5.2014)
      t=tt
      dcal=dc
      r=(1.-t/tc)
      do 1 i=1,6
      fi=i
      dcal=dcal+gv(i)*r**(fi/3.)
    1 continue
      dsatv=dcal
      return
      entry dsatl
      t=tt
      dcal=dc
      r=(1.-t/tc)
      do 2 i=1,6
      fi=i
      dcal=dcal+gl(i)*r**(fi/3.)
    2 continue
      dsatv=dcal
      return
      end
      function p melt(tt)
c calculate the melting pressure for helium, input is temp k,
c output is pressure in atmospheres
      dimension a(5)
      data(a=33.28,-44.156,31.799 ,-4.8159,0.30313)
      t=tt
      if(t.le.5.2)go to 7
      pmelt=-17.80+17.31457*t**1.555414
      pmelt=pmelt*.98066/1.01325
      return
    7 p=0.0
      do 9 i=1,5
      p=p+a(i)*t**(i-1)
    9 continue
      pmelt=p*9.80665/10.1325
      return
      end
      function fndpne(d,t)
c  calculates the pressure in atmospheres for neon,
c uses density (mol/liter) and temperature of neon as input
    1 fndpne=pc(d,t)
      return
      end
      function entha(p,d,t)
      common a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17
     1,a18,a19
      d1=d
      d2=d**2
      d3=d2*d
      d4=d3*d
      d5=d4*d
      t1=t
      t2=t*t
      t3=t2*t
      t4=t3*t
      ex=exp(a19*d2)
      exi1=(ex-1.)/(2.*a19)
      exi3=ex*d*d/(2.*a19)-(ex-1.)/(2.*a19**2)
      entha =p/d-a1*t+a4*d3/3.+a5*d4/(t1*2.)
     1-a6*d2*t2/2.+a9*d2/t1+3.*a10*d2/(t2*2.)
     2+a12*d1+2.*a13*d1/t1+3.*a14*d1/t2
     3+3.*a15*exi1/t2+4.*a16*exi1/t3
     4+3.*a17*exi3/t2+4.*a18*exi3/t3
     6+a2*d5/5.+a8*d2/2.
c     calculates enthalpy change from 0 to finite densities along
c     isotherm according to dtri4
c for neon input is pressure in atmospheres,density in moles/liter
c and temperature in k,output is joules per mole.
      return
      end
      function dliqne(t)
c     for neon
      if(t-44.4)1,2,2
    1 a=-8.9200910
      b=35.44150349
      c=-64.720906
      d=57.745619
      e=-20.25961912
      r=(1.0-t/44.4)**(1.0/3.0)
      denr=1.0+a*r+b*r*r+c*r**3+d*r**4+e*r**5
      rsatd=10.**denr
      dliqne=rsatd*.484*1000.028/20.183
      return
    2 rsatd=1.
      dliqne=rsatd*.484*1000.028/20.183
      return
c     units are in gm-moles/liter
      end
      function dpddne(dd,tt)
      dimension g(18)
    3 common a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17
     1,a18,a19
      d1=dd
      t1=tt
      d2=d1**2
      d3=d2*d1
      d4=d3*d1
      d5=d4*d1
      t2=t1**2
      t3=t2*t1
      t4=t3*t1
      ex=exp(a19*d2)
      ex1=ex*d1*2.*a19
      ex3=3.*d2*ex+d3*ex1
      ex5=5.*d4*ex+d5*ex1
      g(1)=d5*6. *a2
      g(2)=t1*d3*4.    *a3
      g(3)=d3*4.*a4
      g(4)=d4*5.*a5/t1
      g(5)=3.*d2*t2*a6
      g(6)=3.*d2*t1*a7
      g(7)=3.*d2*a8
      g(8)=3.*d2*a9/t1
      g(9)=3.*d2*a10/t2
      g(10)=d1*2.*t1*a11
      g(11)=d1*2.*a12
      g(12)=d1*2.*a13/t1
      g(13)=d1*2.*a14/t2
      g(14)=ex3*a15/t2
      g(15)=ex3*a16/t3
      g(16)=ex5*a17/t2
      g(17)=ex5*a18/t3
      p2=a1*t1
      do 11 k=1,17
   11 p2=p2+g(k)
      dpddne=p2
c     calculates the first derivative of pressure with respect to
c     density according to dtri4
      return
      end
      function ent(d,t)
      common a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17
     1,a18,a19
      d1=d
      d2=d**2
      d3=d2*d
      d4=d3*d
      d5=d4*d
      t1=t
      t2=t*t
      t3=t2*t
      t4=t3*t
      ex=exp(a19*d2)
      exi1=ex/(a19*2.)
      exi3=ex*d*d/(2.*a19)-(ex)/(2.*a19**2)
      ent   =a5*d4/(t2*4.)-a3*d3/3.-a6*d2*t1
     1-a7*d2/2.+a9*d2/(t2*2.)+a10*d2/t3
     2-a11*d1+a13*d1/t2+a14*2.*d1/t3
     3+a15*2.*exi1/t3+a16*3.*exi1/t4
     4+a17*2.*exi3/t3+a18*3.*exi3/t4
     5-a1*log(a1*t*d)
c     calculates entropy at one limit of integration,isothermal,
c     according to dtri4
      return
      end
      function entr(d,t)
c for neon
      common a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17
     1,a18,a19
      d1=d
      d2=d**2
      d3=d2*d
      d4=d3*d
      d5=d4*d
      t1=t
      t2=t*t
      t3=t2*t
      t4=t3*t
      ex=exp(a19*d2)
      exi1=(ex-1.)/(2.*a19)
      exi3=ex*d*d/(2.*a19)-(ex-1.)/(2.*a19**2)
      entr  =a5*d4/(t2*4.)-a3*d3/3.-a6*d2*t1
     1-a7*d2/2.+a9*d2/(t2*2.)+a10*d2/t3
     2-a11*d1+a13*d1/t2+a14*2.*d1/t3
     3+a15*2.*exi1/t3+a16*3.*exi1/t4
     4+a17*2.*exi3/t3+a18*3.*exi3/t4
     5-a1*log(a1*t*d)
c     calculates entropy along an isotherm from 0 to a finite density
c     according to dtri4
      return
      end
c for neon
      subroutine data n
c sets the constants to the equation of state for neon
    3 common a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17
     1,a18,a19
      a1=.0820535
      a2=.28010178e-07
      a3=.14244722e-05
      a4=-.14175051e-03
      a5=-.28070869e-04
      a6=-.10185146e-06
      a7=.42496352e-05
      a8=.25826979e-02
      a9=.12417383
      a10=-.62382566e-01
      a11=.17237659e-02
      a12=-.16730352
      a13=-.61781598e+01
      a14=.87257402e+02
      a15=.19355993e+02
      a16=-.84739643e+03
      a17=-.65528926e-01
      a18=   .23453113e+01
      a19=-.53186241e-02
      return
      end
      function pc(dd,tt)
c for neon,p is in atmospheres,dd in moles per  liter
c and tt is in kelvin
      dimension g(18)
    3 common a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17
     1,a18,a19
c     calcualtes pressure according to dtri4
      d1=dd
      t1=tt
      d2=d1**2
      d3=d2*d1
      d4=d3*d1
      d5=d4*d1
      d6=d5*d1
      t2=t1**2
      t3=t2*t1
      t4=t3*t1
      ex=exp(a19*d2)
      z=d1*a1*t1
      g(1)=d6*a2
      g(2)=t1*d4*a3
      g(3)=d4*a4
      g(4)=d5*a5/t1
      g(5)=d3*t2*a6
      g(6)=d3*t1*a7
      g(7)=d3*a8
      g(8)=d3*a9/t1
      g(9)=d3*a10/t2
      g(10)=d2*t1*a11
      g(11)=d2*a12
      g(12)=d2*a13/t1
      g(13)=d2*a14/t2
      g(14)=d3*ex*a15/t2
      g(15)=d3*ex*a16/t3
      g(16)=d5*ex*a17/t2
      g(17)=d5*ex*a18/t3
      p2=z
      do 11 k=1,17
      p2=p2+g(k)
   11 continue
      pc=p2
      return
      end
      function fndtne(p,d)
c solves the neon equation of state for temperature in kelvin
c for a input of pressure in atmospheres and density in mol/l
      data(dtp=61.78),(dc=23.93)
      pp=p
      dd=d
      if(dd.gt.dc)go to 1
      tt=44.4
      go to 2
    1 tt=24.54+(19.86/(dtp-dc))*(dtp-dd)
    2 do 10 i=1,10
      p2=fndpne(dd,tt)
      if(abs(pp-p2)-1.e-7*pp)20,20,22
   22 dp=dpdtne(dd,tt)
      corr=(p2-pp)/dp
      if(abs(corr)-1.e-5)20,20,9
    9 tt=tt-corr
   10 continue
   20 fndtne=tt
      return
      end
      function find p(d,t)
      dimension g(32),vp(9)
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul,dcc
      dd=d
      tt=t
      if(tt.lt.tcc)go to 10
    1 call press(pp,dd,tt)
      find p=pp
      return
   10 p=vpn(tt)
      dv=find d(p-.0001,tt)
      dl=find d(p+.0001,tt)
      if(dd.le.dv.or.dd.ge.dl)go to 1
      write (6,100)dv,dl,dd
      call press(pp,dv,tt)
      find p=pp
      d=dv
      return
  100 format(" the state point you have specified corresponds to a "
     1/" density in the liquid vapor coexistence region"
     2/" the density of the saturated vapor is ",f6.4," moles/liter"
     3/" the density of the saturated liquid is ",f8.4," moles/liter"
     4/" and the input density is ",f8.4," moles/liter"
     5/" saturated vapor is assumed")
      end
      function dpdtne(d,t)
c gives the first derivative of pressure with respect to
c temperature for neon
c input parameters are density(moles/liter) and temperature(k)
      dimension g(18)
    3 common a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17
     1,a18,a19
      d1=d
      t1=t
      d2=d1**2
      d3=d2*d1
      d4=d3*d1
      d5=d4*d1
      d6=d5*d1
      t2=t1**2
      t3=t2*t1
      t4=t3*t1
      ex=exp(a19*d2)
      g(1)=0
      g(2)=d4*a3
      g(3)=0
      g(4)=-d5*a5/t2
      g(5)=2.*d3*t1*a6
      g(6)=d3*a7
      g(7)=0
      g(8)=-d3*a9/t2
      g(9)=-2.*d3*a10/t3
      g(10)=d2*a11
      g(11)=0
      g(12)=-d2*a13/t2
      g(13)=-2.*d2*a14/t3
      g(14)=-2.*d3*ex*a15/t3
      g(15)=-3.*d3*ex*a16/t3
      g(16)=-2.*d5*a17*ex/t3
      g(17)=-3.*d5*a18*ex/t4
      p2=d1*a1
      do 11 k=1,17
      p2=p2+g(k)
   11 continue
      dpdtne=p2
      return
      end
      function fndthe(p,d)
c solves the equation of state  for helium
c   for a temperature(in kelvin) given a pressure in atm
c and a density in moles/liter
      data(dtp=36.514),(dc=17.399)
      pp=p
      dd=d
      if(dd.gt.dc)go to 1
      tt=5.201
      go to 2
    1 tt=2.177+(3.024/(dtp-dc))*(dtp-dd)
    2 do 10 i=1,10
      p2=fndphe(dd,tt)
      if(abs(pp-p2)-1.e-7*pp)20,20,11
   11 dp=dpdthe(dd,tt)
      corr=(p2-pp)/dp
      if(abs(corr)-1.e-5)20,20,9
    9 tt=tt-corr
   10 continue
   20 fndthe=tt
      return
      end
      function findt(p,d)
c solve the thirty two term equation of state for temperature
c in kelvin given a pressure in atmospheres  and a density in
c moles/liter
      dimension g(32),vp(9)
      common/data/g,r,gamma,vp,dtp,pcc,ptp,tcc,ttp,tul,tll,pul,dcc
      pp=p
      dd=d
      if(p.ge.pcc/1.01325)go to 1
      tsat=findtv(pp)
      dv=find d(pp-.00001,tsat)
      dl=find d(pp+.0001,tsat)
      if(dd.gt.dv.and.dd.lt.dl)go to 30
      tt=tsat
      go to 2
    1 tt=tcc
    2 do 10 i=1,10
      call press(p2,dd,tt)
      if(abs(pp-p2)-1.e-7*pp)20,20,11
   11 call dpdt(dp,dd,tt)
      corr=(p2-pp)/dp
      if(abs(corr)-1.e-5)20,20,9
    9 tt=tt-corr
   10 continue
   20 findt=tt
      return
   30 findt=tsat
      d=dv
      write(6,100)dv,dl,dd
  100 format(" the state point you have specified corresponds to"
     1/" a density in the liquid vapor coexistence region"
     2/" density of the saturated vapor is",f8.4," moles/liter"
     3/" density of the saturated liquid is",f8.4," moles/liter"
     4/" input density is",f8.4," moles/liter"
     5/" saturated vapor conditions are assumed")
      return
      end
      function cposne(t)
c     calculates the integral of (cp/t)dt from ,to,to t for neon
c     to is 27.092 and cp is at zero pressure,5/2r
      cp  =8.31434*log(t/27.092)*2.5
      cposne=cp
      return
c     units are joules/mole-k
      end
      function cpohne(t)
c     calculates the integral of (cpt)dt from ,to,to t for neon,cp at
c     zero pressure, ,to, is 27.092
      cp  =8.31434*(t-27.092)*2.5
      cpohne=cp
      return
c     units are joules/mole-k
      end
      function fnddne(pp,tt)
c solves the equation of state for neon for density (moles/l)
c given a pressure in atm and a temperature in kelvin
      p=pp
      t=tt
      d=20.
      if(tt.gt.44.4)go to 2
      psat=vpnne(tt)
      d=.001
      if(psat.ge.pp)go to 2
      d=dliqne(t)+1.
    2 continue
      do 10 i=1,50
      p2=pc(d,t)
      if(abs(p-p2)-1.e-6*p)11,11,1
    1 dp=dpddne(d,t)
      if(abs((p-p2)/dp)-1.e-6*d)11,11,9
    9 d=d-(p2-p)/dp
   10 continue
      fnddne=0
      return
   11 fnddne=d
      return
      end
      function enth  (p,d,t)
      common a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17
     1,a18,a19
      d1=d
      d2=d**2
      d3=d2*d
      d4=d3*d
      d5=d4*d
      t1=t
      t2=t*t
      t3=t2*t
      t4=t3*t
      ex=exp(a19*d2)
      exi1=ex/(a19*2.)
      exi3=ex*d*d/(2.*a19)-(ex)/(2.*a19**2)
      enth  =p/d+a4*d3/3.+a5*d4/(t1*2.)
     1-a6*d2*t2/2.+a9*d2/t1+3.*a10*d2/(t2*2.)
     2+a12*d1+2.*a13*d1/t1+3.*a14*d1/t2
     3+3.*a15*exi1/t2+4.*a16*exi1/t3
     4+3.*a17*exi3/t2+4.*a18*exi3/t3
     6+a2*d5/5.+a8*d2/2.
c     calcualtes enthalpy at one limit of integration according
c     to dtri4,isothermal
      return
      end
      function vptene(pp)
c     solves the vapor pressure equation for temperature given a pressur
c     the fluid is neon  and the units are atmospheres and kelvins
      t=44.
      pcal=vpnne(t)
      p=pp
   13 do 10 i=1,50
      dp=dvpnne(t)
      del=(pcal-p)/dp
      t=t-del
      pcal=vpnne(t)
      if(abs(p-pcal)-.000001*p)11,11,2
    2 if(abs(del)-.000001*t)11,11,10
   10 continue
   11 vptene=t
      return
      end
      function enthne(p,d,t)
c     calculates the enthalpy for neon in joules/mole, given the pressur
c     in atmospheres,the density in moles/liter,and the temperature in
c     kelvins
      data(ho=.18638645e+4)
      if(t.lt.44.4)go to 52
    1 enthne=ho+cpohne(t)+entha(p,d,t)*101.325
      return
   52 psat=vpnne(t)
      psat=psat-.0001
      dvap=fnddne(psat,t)
      if(d.le.dvap)go to 1
      psat=psat+.0002
      dliq=fnddne(psat,t)
      h1=ho+cpohne(t)+entha(psat,dvap,t)*101.325
      h2=dvpnne(t)*(1./dvap-1./dliq)*t*101.325
      h3=(enth(p,d,t)-enth(psat,dliq,t))*101.325
      enthne=h1-h2+h3
      return
      end
      function entrne(d,t)
c     calculates the entropy for neon given density in moles per liter
c     and temperature in kelvins, output is in joules/mole-k
      data(so=68.52101455)
      if(t.lt.44.4)go to 52
    1 entrne=so+cposne(t)+entr(d,t)*101.325
      return
   52 psat=vpnne(t)
      psat=psat-.0001
      dvap=fnddne(psat,t)
      if(d.le.dvap)go to 1
      psat=psat+.0002
      dliq=fnddne(psat,t)
      s1=so+cposne(t)+entr(dvap,t)*101.325
      s2=dvpnne(t)*(1./dvap-1./dliq)*101.325
      s3=(ent(d,t)-ent(dliq,t))*101.325
      entrne=s1-s2+s3
      return
      end
      function vpnne(t)
c     gives a vapor pressure for neon in atmospheres given a temp in k
      q   =(7.46116 -106.090/t -.0356616*t + .000411092*t*t)
      bvap=(10.0**q/760.0)
      vpnne=bvap
      return
      end
      function dvpnne(t)
c     derivative of the vapor pressure curve for neon
      q=106.090/t**2-.0356616+2.*.000411092*t
      dvpne=vpnne(t)*q*2.302585093
      dvpnne=dvpne
      return
      end
      subroutine xkappa(t,d,xka)
c...subroutine to calculate the value for
c...the isothermal compressibility of helium
c...the density of the substance must be known
c...
      dpdro=dpddhe(d,t)
c...
c...dpdro is the value for dp/dro
c...
      xka = 1.0/(d*dpdro*101325.)
c...
c... xka is the value for kappa and is returned to datahe
c...
      return
      end
      subroutine xbeta(xka,d,t,b1)
c...
c...subroutine to calculate the value for the
c...coefficient of thermal expansion of helium
c...the density of the substance must be known
c...
      dpdt=dpdthe(d,t)
c...
c...dpdt is dp/dt
c...
      b1 = xka*dpdt*101325.
c...
c...calculation of beta, beta is returned to datahe
      return
      end
      subroutine sat1he(t,s,n)
      common/idex/id
      common/fast/a(1)
      real t(1),s(13,1)
c...
c... calculations of the thermodynamic properties of helium 1
c... are done in the subroutine datahe
c...
      iz=1
c...
c... if iz=1 a temperature is input and a saturation pressure is
c... calculated and is returned along with a density value.
c... if iz=2 a pressure is input and the saturated temperature
c... is calculated and returned to the main program along with
c... a density value
c...
      do 10 i = 1,n
          call datahe(t(i),rol,p,ul,b1l,xkal,csupl,sl,1,0,iz)
          call datahe(t(i),rog,p,ug,b1g,xkag,csupg,sg,1,1,iz)
c...
c... setting up the s array to be used in writing the tables
c...
          s(1,i) = p
          s(2,i) = 1.0/rol
          s(8,i) = 1.0/rog
          s(3,i) = ul
          s(9,i) = ug
          s(4,i) = b1l
          s(10,i) = b1g
          s(5,i) = xkal
          s(11,i) = xkag
          s(6,i) = csupl
          s(12,i) = csupg
          s(7,i) = sl
          s(13,i) = sg
   10 continue
   50 if(lines(0).lt.57)write(6,2000)
 2000 format("1")
      write(6,2002)
 2002 format("0"55x"saturation properties"/"0"5x"temperature"
     *8x"pressure"3x"liq.sp.volume"2x"liq.int.energy liq.therm.expsn"4x
     *"liq.compress"3x"liq.heat cap."5x"liq.entropy"/
     *36x"vap.sp.volume"2x"vap.int.energy vap therm.expsn"4x
     *"vap.compress"3x"vap.heat cap."5x"vap.entropy")
      do 12 i = 1,n
          if(lines(0).gt.3)go to 13
             write(6,2000)
             write(6,2002)
   13        write(6,2003)t(i),(s(j,i),j=1,13)
 2003 format("0",1p8e16.6/33x6e16.6)
   12 continue
      return
      end
      subroutine sat2he(p,s,n)
      common/idex/id
      common/fast/a(1)
      real s(13,1),p(1),pp(50)
c...
c... calculations of the thermodynamic properties of helium 1
c... are done in the subroutine datahe
c...
      iz=2
c...
c... if iz=1 a temperature is input and a saturation pressure is
c... calculated and is returned along with a density value.
c... if iz=2 a pressure is input and the saturated temperature
c... is calculated and returned to the main program along with
c... a density value
c...
      do 10 i = 1,n
          pp(i) = p(i)
          call datahe(t,rol,pp(i),ul,b1l,xkal,csupl,sl,1,0,iz)
          call datahe(t,rog,pp(i),ug,b1g,xkag,csupg,sg,1,1,iz)
c...
c... setting up the s array to be used in writing the tables
c...
          s(1,i) = t
          s(2,i) = 1.0/rol
          s(8,i) = 1.0/rog
          s(3,i) = ul
          s(9,i) = ug
          s(4,i) = b1l
          s(10,i) = b1g
          s(5,i) = xkal
          s(11,i) = xkag
          s(6,i) = csupl
          s(12,i) = csupg
          s(7,i) = sl
          s(13,i) = sg
   10 continue
   50 if(lines(0).lt.57)write(6,2000)
 2000 format("1")
      write(6,2002)
 2002 format("0"55x"saturation properties"/"0"8x"pressure"5x
     *"temperature"3x"liq.sp.volume"2x"liq.int.energy liq.therm.expsn"4x
     *"liq.compress"3x"liq.heat cap."5x"liq.entropy"/
     *36x"vap.sp.volume"2x"vap.int.energy vap therm.expsn"4x
     *"vap.compress"3x"vap.heat cap."5x"vap.entropy")
      do 12 i = 1,n
          if(lines(0).gt.3)go to 13
             write(6,2000)
             write(6,2002)
   13        write(6,2003)p(i),(s(j,i),j=1,13)
 2003 format("0",1p8e16.6/33x6e16.6)
   12 continue
      return
      end
      subroutine snphhe(t,p,s,nt,np)
      common/idex/id
      common/fast/a(1)
      integer ia(1,1)
      equivalence (a(1),ia(1,1))
      real t(1),p(1),s(6,nt,1),pp(50)
c...
c...this subroutine calculates the equation of state for
c...for helium when the single phase properties are desired.
c...pressure is in pascals
c...temperature is in kelvin
c...specific volume is output in cubic-meter/kilogram
c...internal energy is output in joule/kilogram
c...thermal expansion is output in 1.0/kelvin
c...compressibility is output in 1.0/pascal
c...heat capacity is output in joule/(kilogram-kelvin)
c...entropy is output in joule/(kilogram-kelvin)
c...
      do 10 i = 1, nt
           do 11 j = 1, np
c...
c...if iz equals three then temperature and pressure are input
c...into the subroutine datahe and used in the calculation
c...of the single phase properties of helium 1
c...
           iz=3
           pp(j)=p(j)
           call datahe(t(i),ro,pp(j),u,b1,xka,csup,se,1,2,iz)
c...
c...the pressure that is printed in the table is in pascals
c...
           if(ro.eq.0.0) go to 10
           s(1,i,j) = 1.0/ro
           s(2,i,j) = u
           s(3,i,j) = b1
           s(4,i,j) = xka
           s(5,i,j) = csup
           s(6,i,j) = se
   11 continue
   10 continue
      j1 = 1
   30 j2 = j1 + 5
      if(j2.gt.np)j2 = np
      write(6,2002)(p(j),j=j1,j2)
 2002 format("1",54x"single phase properties"/"0"5x"temperature"
     18x"pressure"1p6e16.6)
      do 31 i = 1, nt
      if(lines(0).lt.7)write(6,2002)(p(j),j = j1,j2)
      write(6,2003)(t(i),(s(1,i,j),j=j1,j2))
 2003 format("0",1pe16.6,7x,"sp.volume"6e16.6)
      write(6,2004)(s(2,i,j),j=j1,j2)
 2004 format(23x"int.energy"1p6e16.6)
      write(6,2005)(s(3,i,j),j=j1,j2)
 2005 format(22x"therm.expsn"1p6e16.6)
      write(6,2006)(s(4,i,j),j=j1,j2)
 2006 format(25x"compress"1p6e16.6)
      write(6,2007)(s(5,i,j),j=j1,j2)
 2007 format(24x"heat cap."1p6e16.6)
      write(6,2008)(s(6,i,j),j=j1,j2)
 2008 format(26x"entropy"1p6e16.6)
   31 continue
      j1 = j2 + 1
      if(j2.lt.np)go to 30
      return
      end
