       subroutine fourt (data,nn,ndim,isign,iform,work)
c
c     the cooley-tukey fast fourier transform in usasi basic fortran
c
c     transform(k1,k2,...) = sum(data(j1,j2,...)*exp(isign*2*pi*sqrt(-1)
c     *((j1-1)*(k1-1)/nn(1)+(j2-1)*(k2-1)/nn(2)+...))), summed for all
c     j1, k1 between 1 and nn(1), j2, k2 between 1 and nn(2), etc.
c     there is no limit to the number of subscripts.  data is a
c     multidimensional complex array whose real and imaginary
c     parts are adjacent in storage, such as fortran iv places them.
c     if all imaginary parts are zero (data are disguised real), set
c     iform to zero to cut the running time by up to forty percent.
c     otherwise, iform = +1.  the lengths of all dimensions are
c     stored in array nn, of length ndim.  they may be any positive
c     integers, tho the program runs faster on composite integers, and
c     especially fast on numbers rich in factors of two.  isign is +1
c     or -1.  if a -1 transform is followed by a +1 one (or a +1
c     by a -1) the original data reappear, multiplied by ntot (=nn(1)*
c     nn(2)*...).  transform values are always complex, and are returned
c     in array data, replacing the input.  in addition, if all
c     dimensions are not powers of two, array work must be supplied,
c     complex of length equal to the largest non 2**k dimension.
c     otherwise, replace work by zero in the calling sequence.
c     normal fortran data ordering is expected, first subscript varying
c     fastest.  all subscripts begin at one.
c
c     running time is much shorter than the naive ntot**2, being
c     given by the following formula.  decompose ntot into
c     2**k2 * 3**k3 * 5**k5 * ....  let sum2 = 2*k2, sumf = 3*k3 + 5*k5
c     + ... and nf = k3 + k5 + ....  the time taken by a multi-
c     dimensional transform on these ntot data is t = t0 + ntot*(t1+
c     t2*sum2+t3*sumf+t4*nf).  on the cdc 3300 (floating point add time
c     of six microseconds), t = 3000 + ntot*(500+43*sum2+68*sumf+
c     320*nf) microseconds on complex data.  in addition, the
c     accuracy is greatly improved, as the rms relative error is
c     bounded by 3*2**(-b)*sum(factor(j)**1.5), where b is the number
c     of bits in the floating point fraction and factor(j) are the
c     prime factors of ntot.
c
c     program by norman brenner from the basic program by charles
c     rader.  ralph alter suggested the idea for the digit reversal.
c     mit lincoln laboratory, august 1967.  this is the fastest and most
c     versatile version of the fft known to the author.  shorter pro-
c     grams four1 and four2 restrict dimension lengths to powers of two.
c     see-- ieee audio transactions (june 1967), special issue on fft.
c
c     the discrete fourier transform places three restrictions upon the
c     data.
c     1.  the number of input data and the number of transform values
c     must be the same.
c     2.  both the input data and the transform values must represent
c     equispaced points in their respective domains of time and
c     frequency.  calling these spacings deltat and deltaf, it must be
c     true that deltaf=2*pi/(nn(i)*deltat).  of course, deltat need not
c     be the same for every dimension.
c     3.  conceptually at least, the input data and the transform output
c     represent single cycles of periodic functions.
c
c     example 1.  three-dimensional forward fourier transform of a
c     complex array dimensioned 32 by 25 by 13 in fortran iv.
c     dimension data(32,25,13),work(50),nn(3)
c     complex data
c     data nn/32,25,13/
c     do 1 i=1,32
c     do 1 j=1,25
c     do 1 k=1,13
c  1  data(i,j,k)=complex value
c     call fourt(data,nn,3,-1,1,work)
c
c     example 2.  one-dimensional forward transform of a real array of
c     length 64 in fortran ii.
c     dimension data(2,64)
c     do 2 i=1,64
c     data(1,i)=real part
c  2  data(2,i)=0.
c     call fourt(data,64,1,-1,0,0)
c
      dimension data(2),nn(1),ifact(32),work(1)
       data twopi/6.2831853071796/
c
       wr = 0.0
       wi = 0.0
       wstpr = 0.0
       wstpi = 0.0
      if(ndim-1)920,1,1
1     ntot=2
      do 2 idim=1,ndim
      if(nn(idim))920,920,2
2     ntot=ntot*nn(idim)
c
c     main loop for each dimension
c
      np1=2
      do 910 idim=1,ndim
      n=nn(idim)
      np2=np1*n
      if(n-1)920,900,5
c
c     factor n
c
5     m=n
      ntwo=np1
      if=1
      idiv=2
10    iquot=m/idiv
      irem=m-idiv*iquot
      if(iquot-idiv)50,11,11
11    if(irem)20,12,20
12    ntwo=ntwo+ntwo
      m=iquot
      go to 10
20    idiv=3
30    iquot=m/idiv
      irem=m-idiv*iquot
      if(iquot-idiv)60,31,31
31    if(irem)40,32,40
32    ifact(if)=idiv
      if=if+1
      m=iquot
      go to 30
40    idiv=idiv+2
      go to 30
50    if(irem)60,51,60
51    ntwo=ntwo+ntwo
      go to 70
60    ifact(if)=m
c
c     separate four cases--
c        1. complex transform or real transform for the 4th, 5th,etc.
c           dimensions.
c        2. real transform for the 2nd or 3rd dimension.  method--
c           transform half the data, supplying the other half by con-
c           jugate symmetry.
c        3. real transform for the 1st dimension, n odd.  method--
c           transform half the data at each stage, supplying the other
c           half by conjugate symmetry.
c        4. real transform for the 1st dimension, n even.  method--
c           transform a complex array of length n/2 whose real parts
c           are the even numbered real values and whose imaginary parts
c           are the odd numbered real values.  separate and supply
c           the second half by conjugate symmetry.
c
70    non2=np1*(np2/ntwo)
      icase=1
      if(idim-4)71,90,90
71    if(iform)72,72,90
72    icase=2
      if(idim-1)73,73,90
73    icase=3
      if(ntwo-np1)90,90,74
74    icase=4
      ntwo=ntwo/2
      n=n/2
      np2=np2/2
      ntot=ntot/2
      i=3
      do 80 j=2,ntot
      data(j)=data(i)
80    i=i+2
90    i1rng=np1
      if(icase-2)100,95,100
95    i1rng=np0*(1+nprev/2)
c
c     shuffle on the factors of two in n.  as the shuffling
c     can be done by simple interchange, no working array is needed
c
100   if(ntwo-np1)600,600,110
110   np2hf=np2/2
      j=1
      do 150 i2=1,np2,non2
      if(j-i2)120,130,130
120   i1max=i2+non2-2
      do 125 i1=i2,i1max,2
      do 125 i3=i1,ntot,np2
      j3=j+i3-i2
      tempr=data(i3)
      tempi=data(i3+1)
      data(i3)=data(j3)
      data(i3+1)=data(j3+1)
      data(j3)=tempr
125   data(j3+1)=tempi
130   m=np2hf
140   if(j-m)150,150,145
145   j=j-m
      m=m/2
      if(m-non2)150,140,140
150   j=j+m
c
c     main loop for factors of two.  perform fourier transforms of
c     length four, with one of length two if needed.  the twiddle factor
c     w=exp(isign*2*pi*sqrt(-1)*m/(4*mmax)).  check for w=isign*sqrt(-1)
c     and repeat for w=isign*sqrt(-1)*conjugate(w).
c
      non2t=non2+non2
      ipar=ntwo/np1
310   if(ipar-2)350,330,320
320   ipar=ipar/4
      go to 310
330   do 340 i1=1,i1rng,2
      do 340 j3=i1,non2,np1
      do 340 k1=j3,ntot,non2t
      k2=k1+non2
      tempr=data(k2)
      tempi=data(k2+1)
      data(k2)=data(k1)-tempr
      data(k2+1)=data(k1+1)-tempi
      data(k1)=data(k1)+tempr
340   data(k1+1)=data(k1+1)+tempi
350   mmax=non2
360   if(mmax-np2hf)370,600,600
370   lmax=max(non2t,mmax/2)
      if(mmax-non2)405,405,380
380   theta=-twopi*float(non2)/float(4*mmax)
      if(isign)400,390,390
390   theta=-theta
400   wr=cos(theta)
      wi=sin(theta)
      wstpr=-2.*wi*wi
      wstpi=2.*wr*wi
405   do 570 l=non2,lmax,non2t
      m=l
      if(mmax-non2)420,420,410
410   w2r=wr*wr-wi*wi
      w2i=2.*wr*wi
      w3r=w2r*wr-w2i*wi
      w3i=w2r*wi+w2i*wr
420   do 530 i1=1,i1rng,2
      do 530 j3=i1,non2,np1
      kmin=j3+ipar*m
      if(mmax-non2)430,430,440
430   kmin=j3
440   kdif=ipar*mmax
450   kstep=4*kdif
      do 520 k1=kmin,ntot,kstep
      k2=k1+kdif
      k3=k2+kdif
      k4=k3+kdif
      if(mmax-non2)460,460,480
460   u1r=data(k1)+data(k2)
      u1i=data(k1+1)+data(k2+1)
      u2r=data(k3)+data(k4)
      u2i=data(k3+1)+data(k4+1)
      u3r=data(k1)-data(k2)
      u3i=data(k1+1)-data(k2+1)
      if(isign)470,475,475
470   u4r=data(k3+1)-data(k4+1)
      u4i=data(k4)-data(k3)
      go to 510
475   u4r=data(k4+1)-data(k3+1)
      u4i=data(k3)-data(k4)
      go to 510
480   t2r=w2r*data(k2)-w2i*data(k2+1)
      t2i=w2r*data(k2+1)+w2i*data(k2)
      t3r=wr*data(k3)-wi*data(k3+1)
      t3i=wr*data(k3+1)+wi*data(k3)
      t4r=w3r*data(k4)-w3i*data(k4+1)
      t4i=w3r*data(k4+1)+w3i*data(k4)
      u1r=data(k1)+t2r
      u1i=data(k1+1)+t2i
      u2r=t3r+t4r
      u2i=t3i+t4i
      u3r=data(k1)-t2r
      u3i=data(k1+1)-t2i
      if(isign)490,500,500
490   u4r=t3i-t4i
      u4i=t4r-t3r
      go to 510
500   u4r=t4i-t3i
      u4i=t3r-t4r
510   data(k1)=u1r+u2r
      data(k1+1)=u1i+u2i
      data(k2)=u3r+u4r
      data(k2+1)=u3i+u4i
      data(k3)=u1r-u2r
      data(k3+1)=u1i-u2i
      data(k4)=u3r-u4r
520   data(k4+1)=u3i-u4i
      kmin=4*(kmin-j3)+j3
      kdif=kstep
      if(kdif-np2)450,530,530
530   continue
      m=mmax-m
      if(isign)540,550,550
540   tempr=wr
      wr=-wi
      wi=-tempr
      go to 560
550   tempr=wr
      wr=wi
      wi=tempr
560   if(m-lmax)565,565,410
565   tempr=wr
      wr=wr*wstpr-wi*wstpi+wr
570   wi=wi*wstpr+tempr*wstpi+wi
      ipar=3-ipar
      mmax=mmax+mmax
      go to 360
c
c     main loop for factors not equal to two.  apply the twiddle factor
c     w=exp(isign*2*pi*sqrt(-1)*(j2-1)*(j1-j2)/(np2*ifp1)), then
c     perform a fourier transform of length ifact(if), making use of
c     conjugate symmetries.
c
600   if(ntwo-np2)605,700,700
605   ifp1=non2
      if=1
      np1hf=np1/2
610   ifp2=ifp1/ifact(if)
      j1rng=np2
      if(icase-3)612,611,612
611   j1rng=(np2+ifp1)/2
      j2stp=np2/ifact(if)
      j1rg2=(j2stp+ifp2)/2
612   j2min=1+ifp2
      if(ifp1-np2)615,640,640
615   do 635 j2=j2min,ifp1,ifp2
      theta=-twopi*float(j2-1)/float(np2)
      if(isign)625,620,620
620   theta=-theta
625   sinth=sin(theta/2.)
      wstpr=-2.*sinth*sinth
      wstpi=sin(theta)
      wr=wstpr+1.
      wi=wstpi
      j1min=j2+ifp1
      do 635 j1=j1min,j1rng,ifp1
      i1max=j1+i1rng-2
      do 630 i1=j1,i1max,2
      do 630 i3=i1,ntot,np2
      j3max=i3+ifp2-np1
      do 630 j3=i3,j3max,np1
      tempr=data(j3)
      data(j3)=data(j3)*wr-data(j3+1)*wi
630   data(j3+1)=tempr*wi+data(j3+1)*wr
      tempr=wr
      wr=wr*wstpr-wi*wstpi+wr
635   wi=tempr*wstpi+wi*wstpr+wi
640   theta=-twopi/float(ifact(if))
      if(isign)650,645,645
645   theta=-theta
650   sinth=sin(theta/2.)
      wstpr=-2.*sinth*sinth
      wstpi=sin(theta)
      kstep=2*n/ifact(if)
      krang=kstep*(ifact(if)/2)+1
      do 698 i1=1,i1rng,2
      do 698 i3=i1,ntot,np2
      do 690 kmin=1,krang,kstep
      j1max=i3+j1rng-ifp1
      do 680 j1=i3,j1max,ifp1
      j3max=j1+ifp2-np1
      do 680 j3=j1,j3max,np1
      j2max=j3+ifp1-ifp2
      k=kmin+(j3-j1+(j1-i3)/ifact(if))/np1hf
      if(kmin-1)655,655,665
655   sumr=0.
      sumi=0.
      do 660 j2=j3,j2max,ifp2
      sumr=sumr+data(j2)
660   sumi=sumi+data(j2+1)
      work(k)=sumr
      work(k+1)=sumi
      go to 680
665   kconj=k+2*(n-kmin+1)
      j2=j2max
      sumr=data(j2)
      sumi=data(j2+1)
      oldsr=0.
      oldsi=0.
      j2=j2-ifp2
670   tempr=sumr
      tempi=sumi
      sumr=twowr*sumr-oldsr+data(j2)
      sumi=twowr*sumi-oldsi+data(j2+1)
      oldsr=tempr
      oldsi=tempi
      j2=j2-ifp2
      if(j2-j3)675,675,670
675   tempr=wr*sumr-oldsr+data(j2)
      tempi=wi*sumi
      work(k)=tempr-tempi
      work(kconj)=tempr+tempi
      tempr=wr*sumi-oldsi+data(j2+1)
      tempi=wi*sumr
      work(k+1)=tempr+tempi
      work(kconj+1)=tempr-tempi
680   continue
      if(kmin-1)685,685,686
685   wr=wstpr+1.
      wi=wstpi
      go to 690
686   tempr=wr
      wr=wr*wstpr-wi*wstpi+wr
      wi=tempr*wstpi+wi*wstpr+wi
690   twowr=wr+wr
      if(icase-3)692,691,692
691   if(ifp1-np2)695,692,692
692   k=1
      i2max=i3+np2-np1
      do 693 i2=i3,i2max,np1
      data(i2)=work(k)
      data(i2+1)=work(k+1)
693   k=k+2
      go to 698
c
c     complete a real transform in the 1st dimension, n odd, by con-
c     jugate symmetries at each stage.
c
695   j3max=i3+ifp2-np1
      do 697 j3=i3,j3max,np1
      j2max=j3+np2-j2stp
      do 697 j2=j3,j2max,j2stp
      j1max=j2+j1rg2-ifp2
      j1cnj=j3+j2max+j2stp-j2
      do 697 j1=j2,j1max,ifp2
      k=1+j1-i3
      data(j1)=work(k)
      data(j1+1)=work(k+1)
      if(j1-j2)697,697,696
696   data(j1cnj)=work(k)
      data(j1cnj+1)=-work(k+1)
697   j1cnj=j1cnj-ifp2
698   continue
      if=if+1
      ifp1=ifp2
      if(ifp1-np1)700,700,610
c
c     complete a real transform in the 1st dimension, n even, by con-
c     jugate symmetries.
c
700   go to (900,800,900,701),icase
      call fabend
701   nhalf=n
      n=n+n
      theta=-twopi/float(n)
      if(isign)703,702,702
702   theta=-theta
703   sinth=sin(theta/2.)
      wstpr=-2.*sinth*sinth
      wstpi=sin(theta)
      wr=wstpr+1.
      wi=wstpi
      imin=3
      jmin=2*nhalf-1
      go to 725
710   j=jmin
      do 720 i=imin,ntot,np2
      sumr=(data(i)+data(j))/2.
      sumi=(data(i+1)+data(j+1))/2.
      difr=(data(i)-data(j))/2.
      difi=(data(i+1)-data(j+1))/2.
      tempr=wr*sumi+wi*difr
      tempi=wi*sumi-wr*difr
      data(i)=sumr+tempr
      data(i+1)=difi+tempi
      data(j)=sumr-tempr
      data(j+1)=-difi+tempi
720   j=j+np2
      imin=imin+2
      jmin=jmin-2
      tempr=wr
      wr=wr*wstpr-wi*wstpi+wr
      wi=tempr*wstpi+wi*wstpr+wi
725   if(imin-jmin)710,730,740
730   if(isign)731,740,740
731   do 735 i=imin,ntot,np2
735   data(i+1)=-data(i+1)
740   np2=np2+np2
      ntot=ntot+ntot
      j=ntot+1
      imax=ntot/2+1
745   imin=imax-2*nhalf
      i=imin
      go to 755
750   data(j)=data(i)
      data(j+1)=-data(i+1)
755   i=i+2
      j=j-2
      if(i-imax)750,760,760
760   data(j)=data(imin)-data(imin+1)
      data(j+1)=0.
      if(i-j)770,780,780
765   data(j)=data(i)
      data(j+1)=data(i+1)
770   i=i-2
      j=j-2
      if(i-imin)775,775,765
775   data(j)=data(imin)+data(imin+1)
      data(j+1)=0.
      imax=imin
      go to 745
780   data(1)=data(1)+data(2)
      data(2)=0.
      go to 900
c
c     complete a real transform for the 2nd or 3rd dimension by
c     conjugate symmetries.
c
800   if(i1rng-np1)805,900,900
805   do 860 i3=1,ntot,np2
      i2max=i3+np2-np1
      do 860 i2=i3,i2max,np1
      imin=i2+i1rng
      imax=i2+np1-2
      jmax=2*i3+np1-imin
      if(i2-i3)820,820,810
810   jmax=jmax+np2
820   if(idim-2)850,850,830
830   j=jmax+np0
      do 840 i=imin,imax,2
      data(i)=data(j)
      data(i+1)=-data(j+1)
840   j=j-2
850   j=jmax
      do 860 i=imin,imax,np0
      data(i)=data(j)
      data(i+1)=-data(j+1)
860   j=j-np0
c
c     end of loop on each dimension
c
900   np0=np1
      np1=np2
910   nprev=n
920   return
      end
