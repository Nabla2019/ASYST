       subroutine inp5(c1,c2,c3,in1,in2,in3,in4,in5,in6,in7,loc1,loc2,
     & loc5,loc6,in8)
c
c  This subroutine can process several sets of cards on a single call
c  and do a sequential or overaly expansion of the input data in either
c  a dense or scattered mode.
c
c  Cognizant engineer: rjw.
c
$if -def,in32,1
       integer loc1(1),loc2(1),loc6(1)
$if def,in32,1
       integer loc1(2,*),loc2(2,*),loc6(2,*)
       integer c1,c2,c3,ac1,ac2,lray(46),cn2,card,loc5(1)
*call efiless
*call efilesd
c
       if (in1)105,110,115
  110  call fabend
  105  ltpe=2
      n1=-in1
      if(in2)120,125,130
  120  n2=-in2
  140  limlow =1
      go to 135
  125  n2=0
       go to 140
  130  n2=in2
       limlow =2
       go to 135
  115  n1=in1
      ltpe=1
      limlow=1
      n2=in2
  135  if(in4)145,110,155
  145  n4=-in4
       mode=2
      go to 160
 155  n4=in4
       mode=1
  160  if (in3)165,170,175
  165  n3=-in3
  185  limup=1
       go to 180
  170  n3=32000-1
       go to 185
  175  n3=in3
       limup=2
  180  ac1=c1
       ac2=c2
       ls=in7
       lray(1) = ac1
       lray(2) = ac2
       nmove=0
       lray(3) = 1
       lray(4)=in8
       lray(5)=0
       lray(6)=1
       do la = 1,40
         lb = la + 6
         lray(lb) = loc5(la)
       enddo
       do 100 mad = 1,in5
       call inp2 (loc1,loc6,lray)
       nmov = lray(6)
       if(nmov) 205,500,210
  205   in7 = -1
       go to 500
  210  luplim = limup
       lowlim = limlow
       nmove = nmove + nmov
       k1 = n1 + ltpe
       k2 = nmov/k1
       last = n2
       if (nmov .eq. k1*k2) go to 220
       cn2 = abs(ac2)
       write (output,1) nmov,ac1,cn2,k1
    1  format ('0********',i5,' numbers on cards',i10,' through',i10,' a
     *re not a multiple of',i4)
      in7=-1
      go to 500
  220  if (mode .ne. 1) go to 230
       k4 = ls+n4*last
       k5=1
       k6=n4
       go to 235
  230  k4=ls+last
       k5=n4
       k6=1
  235  do k3 = 1,nmov,k1
         if (ltpe .ne. 1) go to 245
         nstart = last + 1
         k12=k3
         k13=k3+n1-1
         go to 250
$if -def,in32,1
  245    nstart = loc6(k3)
$if def,in32,1
  245    nstart = loc6(2,k3)
         k12 = k3 + 1
         k13 = k3 + n1
         if (nstart - n2) 255,260,265
  255    cn2 = abs(ac2)
         call inp6 (ac1,cn2,k3,card,item,loc1)
         write (output,2) item,card,n2
    2  format ('0******** Item',i3,' on card',i10,' is less than minimum
     & allowed of',i5,'.')
         in7=-1
         go to 500
  260    lowlim=1
  265    if (mode .ne. 1) go to 275
         k4 = ls + n4*(nstart-1)
         go to 250
  275    k4=ls+(nstart-1)
  250    if (k4 .le. 0) go to 110
         k11 = k3 + k1 - 1
$if -def,in32,1
         last = loc6(k11)
$if def,in32,1
         last = loc6(2,k11)
         if(last-n3)290,305,310
  310    cn2 = abs(ac2)
         call inp6 (ac1,cn2,k11,card,item,loc1)
         write (output,3) item,card,n3
    3  format ('0******** Item',i3,' on card',i10,' exceeds maximum allo
     *wed of',i5)
         in7=-1
         go to 500
  305    luplim=1
  290    if(nstart-last)315,315,320
  320    cn2 = abs(ac2)
         call inp6 (ac1,cn2,k3,card,item,loc1)
         write (output,4) item,card
    4  format ('0******** Error in limits of the set beginning at item',
     & i3,' on card',i10)
         in7=-1
         go to 500
  315    if(in7)500,325,325
  325    do k8 = nstart,last
           k9=k4
           do k10 = k12,k13
$if -def,in32,1
             loc2(k9) = loc6(k10)
$if def,in32,1
             loc2(:,k9) = loc6(:,k10)
             k9 = k9 + k5
           enddo
           k4=k4+k6
         enddo
       enddo
       if (lowlim .eq. 1) go to 330
       cn2 = abs(ac2)
       write (output,5) n2,ac1,cn2
    5  format ('0******** Lower limit of',i5,' not included on cards',i1
     *0, 'through',i10)
      in7=-1
      go to 500
  330  if (luplim .eq. 1) go to 500
       cn2 = abs(ac2)
       write (output,6) n3,ac1,cn2
    6  format ('0******** Upper limit of',i5,' not included on cards',i1
     *0, 'through',i10)
      in7=-1
 500  if(ac2)350,355,360
 350  ac2=ac2-c3
      go to 355
 360  ac2=ac2+c3
 355  ac1=ac1+c3
      ls=ls+in6
       lray(1) = ac1
       lray(2) = ac2
 602  lray(6)=1
 100  continue
       if (in7 .ge. 0) in7 = nmove
       return
      end
