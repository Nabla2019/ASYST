*if def,cdccra
       subroutine sqoz (a,as,num)
!  Squeeze two floating point numbers into one packed word with reduced
!  precision and range.
!  sqoz format is 1 sign bit, 10 exponent bits, and 21 fraction bits.
!
       implicit none
       integer num
       integer a(num),as(num)
!
       integer i,i1,n
!
       n = mask(63) .and. (num + 1)
       do i = 1,n
         a(i) = (mask(1).and.a(i)) .or. min(max(int(.not.mask(1).and.
     &   a(i)),int(370004000000000000000b)),int(407777777777777777777b))
         a(i) = (mask(1).and.a(i)) .or.
     &   shift((.not.mask(49).and.shift(a(i),16))-37000b,53) .or.
     &   shift(.not.mask(43).and.shift(a(i),37),32)
       enddo
       i1 = 1
       n = ishft(n,-1)
       do i = 1,n
         a(i) = a(i1) .or. shift(a(i1+1),32)
         i1 = i1 + 2
       enddo
       end
*endif
*if def,in32
       subroutine sqoz (a,as,num)
!  Squeeze two floating point numbers into one packed word with reduced
!  precision and range.
!  On 32 bit machines, simply convert real*8 words to real*4 words.
!
       implicit none
       integer num
       real*8 a(num+1)
       real*4 as(num+1)
       real*4 fa(2)
!
       integer i,i1,n
!
       i1 = 1
       n = ishft(num+1,-1)
       do i = 1,n
         if (a(i1) .ne. 0.0) then
           fa(1) = sign(min(max(abs(a(i1)),1.0e-38),1.0e38),a(i1))
         else
           fa(1) = 0.0
         endif
         if (a(i1+1) .ne. 0.0) then
           fa(2) = sign(min(max(abs(a(i1+1)),1.0e-38),1.0e38),a(i1+1))
         else
           fa(2) = 0.0
         endif
         as(i1) = fa(1)
         as(i1+1) = fa(2)
         i1 = i1 + 2
       enddo
       end
*endif
