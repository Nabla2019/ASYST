       subroutine ma28dd (n,a,licn,ivect,jvect,nz,icn,lenr,lenrl,
     & lenoff,ip,iq,iw1,iw,w1,iflag)
!  Sorts the user's matrix into the structure of the decomposed form
!  and checks for the presence of duplicate entries or non-zeros lying
!  outside the sparsity pattern of the decomposition.
!  It also calculates the largest element in the input matrix.
!
       use ma28mod
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
       integer iflag,licn,n,nz
       real(kr) a(:),w1
       integer icn(:),ip(:),iq(:),ivect(:),iw(:,:),iw1(:,:),
     & jvect(:),lenoff(:),lenr(:),lenrl(:)
!
!  iw1(i,3)  Set to the block in which row i lies and the inverse
!            permutations to ip and iq are set in iw1(.,1) and iw1(.,2)
!            respectively.
!
       real(kr) aa
       integer i,idisp2,ii,iblock,idummy,inew,iold,j1,j2,jcomp,
     & jdummy,jj,jnew,jold,midpt
       logical blockl
!
       blockl = lenoff(1).ge.0
!  Pointers to beginning of the part of row i in diagonal and
!  off-diagonal blocks are set in iw(i,2) and iw(i,1) respectively.
       iblock = 1
       iw(1,1) = 1
       iw(1,2) = idispc(1)
       do i = 1,n
         iw1(i,3) = iblock
         if (ip(i).lt.0) iblock = iblock + 1
         ii = abs(ip(i)+0)
         iw1(ii,1) = i
         jj = iq(i)
         jj = abs(jj)
         iw1(jj,2) = i
         if (i.eq.1) cycle
         if (blockl) iw(i,1) = iw(i-1,1) + lenoff(i-1)
         iw(i,2) = iw(i-1,2) + lenr(i-1)
       enddo
!  Place each non-zero in turn into its correct location in the a/icn
!  array.
       idisp2 = idispc(2)
       do i = 1,nz
!  Necessary to avoid reference to unassigned element of icn.
         if (i.le.idisp2) then
           if (icn(i).lt.0) cycle
         endif
         iold = ivect(i)
         jold = jvect(i)
         aa = a(i)
!  This is a dummy loop for following a chain of interchanges.
!  It will be executed nz times in total.
         do idummy = 1,nz
!  Perform some validity checks on iold and jold.
           if (iold.gt.n .or. iold.le.0 .or. jold.gt.n .or.
     &     jold.le.0) then
             if (lp.ne.0) write (lp,
     &       "(' element',i6,' with value',es22.14,' has indices',i8,
     & ' ,',i8/36x,'indices out of range')") i,a(i),iold,jold
             iflag = -12
             go to 180
           endif
           inew = iw1(iold,1)
           jnew = iw1(jold,2)
!  Are we in a valid block and is it diagonal or off-diagonal?
           if (iw1(inew,3) - iw1(jnew,3)) 40, 60, 50
   40      iflag = -13
           if (lp.ne.0) write (lp,
     &     "(36x,'non-zero',i7,' ,',i6,' in zero off-diagonal block')")
     &     iold,jold
           go to 180
   50      j1 = iw(inew,1)
           j2 = j1 + lenoff(inew) - 1
           go to 110
! element is in diagonal block.
   60      j1 = iw(inew,2)
           if (inew.le.jnew) then
             j2 = j1 + lenr(inew) - 1
             j1 = j1 + lenrl(inew)
             go to 110
           endif
           j2 = j1 + lenrl(inew)
!  Binary search of ordered list  .. element in l part of row.
           do jdummy = 1,n
             midpt = (j1+j2)/2
             jcomp = abs(icn(midpt)+0)
             if (jnew - jcomp) 80, 130, 90
   80        j2 = midpt
             cycle
   90        j1 = midpt
           enddo
           iflag = -13
           if (lp.ne.0) write (lp,
     &     "(36x,' Element',i6,' ,',i6,' was not in l/u pattern')")
     &     iold,jold
           go to 180
!  Linear search ... element in l part of row or off-diagonal blocks.
  110      do midpt = j1,j2
             if (abs(icn(midpt)+0).eq.jnew) go to 130
           enddo
           iflag = -13
           if (lp.ne.0) write (lp,
     &     "(36x,' Element',i6,' ,',i6,' was not in l/u pattern')")
     &     iold,jold
           go to 180
!  Equivalent element of icn is in position midpt.
  130      if (icn(midpt).lt.0) go to 160
           if (midpt.gt.nz .or. midpt.le.i) exit
           w1 = a(midpt)
           a(midpt) = aa
           aa = w1
           iold = ivect(midpt)
           jold = jvect(midpt)
           icn(midpt) = -icn(midpt)
         enddo
         a(midpt) = aa
         icn(midpt) = -icn(midpt)
         cycle
  160    a(midpt) = a(midpt) + aa
!  Set flag for duplicate elements.
         iflag = n + 1
       enddo
!  Reset icn array  and zero elements in l/u but not in a.
!  Also calculate maximum element of a.
  180  w1 = 0.0_kr
       do i = 1,idisp2
         if (icn(i).ge.0) then
           a(i) = 0.0_kr
         else
           icn(i) = -icn(i)
           w1 = dmax1(w1,dabs(a(i)))
         endif
       enddo
       return
       end
