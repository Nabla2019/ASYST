       subroutine spln22 (nx,x,ny,y,f00,f10,f01,f11,idm,xin,yin,ans)
c  Evaluates two dimensional spline function.
c
c  nx      Number of points in the x direction.
c  x       Array containing nx independent variables.
c  ny      Number of points in the y direction.
c  y       Array containing ny independent variables.
c  f00     Array containing nx*ny dependent variables.
c  f10     Array containing nx*ny first derivatives with respect to x.
c  f01     Array containing nx*ny first derivatives with respect to y.
c  f11     Array containing nx*ny mixed first derivatives with respect
c          to x and y.
c  xin     x value at which interpolation is desired.
c  yin     y value at which interpolation is desired.
c  ans     Array which contains function and up to the second mixed
c          derivatives.
c
       implicit none
c
       integer idm,nx,ny
       real ans(0:2,0:2),f00(idm,ny),f10(idm,ny),f01(idm,ny),
     * f11(idm,ny),x(nx),xin,y(ny),yin
c
       integer i,j,miss
       real dx1,dx12,dx13,dx2,dx22,dx23,fl,fl2,fl3,yf00(2),yf01(2),
     * yf02(2),yf10(2),yf11(2),yf12(2)
       external search
c
c  Locate the i,j rectangle.
       if (xin .le. x(1)) then
         i = 1
       elseif (xin .ge. x(nx)) then
         i = nx - 1
       else
         call search (xin,x,nx,i,miss)
       endif
       if (yin .le. y(1)) then
         j = 1
       elseif (yin .ge. y(ny)) then
         j = ny - 1
       else
         call search (yin,y,ny,j,miss)
       endif
c
       dx1 = yin - y(j)
       dx12 = dx1*dx1
       dx13 = dx12*dx1
       dx2 = y(j+1) - yin
       dx22 = dx2*dx2
       dx23 = dx22*dx2
       fl = 1.0/(y(j+1) - y(j))
       fl2 = fl*fl
       fl3 = fl2*fl
c
       yf00(1) = f00(i,j)*(3.0*dx22*fl2 - 2.0*dx23*fl3) +
     * f00(i,j+1)*(3.0*dx12*fl2 - 2.0*dx13*fl3) +
     * f01(i,j)*(dx22*fl - dx23*fl2) + f01(i,j+1)*(dx13*fl2 - dx12*fl)
c
       yf01(1) = 6.0*(f00(i,j)*(dx22*fl3 - dx2*fl2) +
     * f00(i,j+1)*(dx1*fl2 - dx12*fl3)) +
     * f01(i,j)*(3.0*dx22*fl2 - 2.0*dx2*fl) +
     * f01(i,j+1)*(3.0*dx12*fl2 - 2.0*dx1*fl)
c
       yf02(1) = f00(i,j)*(6.0*fl2 - 12.0*dx2*fl3) +
     * f00(i,j+1)*(6.0*fl2 - 12.0*dx1*fl3) +
     * f01(i,j)*(2.0*fl - 6.0*dx2*fl2) +
     * f01(i,j+1)*(6.0*dx1*fl2 - 2.0*fl)
c
       yf10(1) = f10(i,j)*(3.0*dx22*fl2 - 2.0*dx23*fl3) +
     * f10(i,j+1)*(3.0*dx12*fl2 - 2.0*dx13*fl3) +
     * f11(i,j)*(dx22*fl - dx23*fl2) + f11(i,j+1)*(dx13*fl2 - dx12*fl)
c
       yf11(1) = 6.0*(f10(i,j)*(dx22*fl3 - dx2*fl2) +
     * f10(i,j+1)*(dx1*fl2 - dx12*fl3)) +
     * f11(i,j)*(3.0*dx22*fl2 - 2.0*dx2*fl) +
     * f11(i,j+1)*(3.0*dx12*fl2 - 2.0*dx1*fl)
c
       yf12(1) = f10(i,j)*(6.0*fl2 - 12.0*dx2*fl3) +
     * f10(i,j+1)*(6.0*fl2 - 12.0*dx1*fl3) +
     * f11(i,j)*(2.0*fl - 6.0*dx2*fl2) +
     * f11(i,j+1)*(6.0*dx1*fl2 - 2.0*fl)
c
       yf00(2) = f00(i+1,j)*(3.0*dx22*fl2 - 2.0*dx23*fl3) +
     * f00(i+1,j+1)*(3.0*dx12*fl2 - 2.0*dx13*fl3) +
     * f01(i+1,j)*(dx22*fl - dx23*fl2) +
     * f01(i+1,j+1)*(dx13*fl2 - dx12*fl)
c
       yf01(2) = 6.0*(f00(i+1,j)*(dx22*fl3 - dx2*fl2) +
     * f00(i+1,j+1)*(dx1*fl2 - dx12*fl3)) +
     * f01(i+1,j)*(3.0*dx22*fl2 - 2.0*dx2*fl) +
     * f01(i+1,j+1)*(3.0*dx12*fl2 - 2.0*dx1*fl)
c
       yf02(2) = f00(i+1,j)*(6.0*fl2 - 12.0*dx2*fl3) +
     * f00(i+1,j+1)*(6.0*fl2 - 12.0*dx1*fl3) +
     * f01(i+1,j)*(2.0*fl - 6.0*dx2*fl2) +
     * f01(i+1,j+1)*(6.0*dx1*fl2 - 2.0*fl)
c
       yf10(2) = f10(i+1,j)*(3.0*dx22*fl2 - 2.0*dx23*fl3) +
     * f10(i+1,j+1)*(3.0*dx12*fl2 - 2.0*dx13*fl3) +
     * f11(i+1,j)*(dx22*fl - dx23*fl2) +
     * f11(i+1,j+1)*(dx13*fl2 - dx12*fl)
c
       yf11(2) = 6.0*(f10(i+1,j)*(dx22*fl3 - dx2*fl2) +
     * f10(i+1,j+1)*(dx1*fl2 - dx12*fl3)) +
     * f11(i+1,j)*(3.0*dx22*fl2 - 2.0*dx2*fl) +
     * f11(i+1,j+1)*(3.0*dx12*fl2 - 2.0*dx1*fl)
c
       yf12(2) = f10(i+1,j)*(6.0*fl2 - 12.0*dx2*fl3) +
     * f10(i+1,j+1)*(6.0*fl2 - 12.0*dx1*fl3) +
     * f11(i+1,j)*(2.0*fl - 6.0*dx2*fl2) +
     * f11(i+1,j+1)*(6.0*dx1*fl2 - 2.0*fl)
c
       dx1 = xin - x(i)
       dx12 = dx1*dx1
       dx13 = dx12*dx1
       dx2 = x(i+1) - xin
       dx22 = dx2*dx2
       dx23 = dx22*dx2
       fl = 1.0/(x(i+1) - x(i))
       fl2 = fl*fl
       fl3 = fl2*fl
c
       ans(0,0) = yf00(1)*(3.0*dx22*fl2 - 2.0*dx23*fl3) +
     * yf00(2)*(3.0*dx12*fl2 - 2.0*dx13*fl3) +
     * yf10(1)*(dx22*fl - dx23*fl2) + yf10(2)*(dx13*fl2 - dx12*fl)
c
       ans(1,0) = 6.0*(yf00(1)*(dx22*fl3 - dx2*fl2) +
     * yf00(2)*(dx1*fl2 - dx12*fl3)) +
     * yf10(1)*(3.0*dx22*fl2 - 2.0*dx2*fl) +
     * yf10(2)*(3.0*dx12*fl2 - 2.0*dx1*fl)
c
       ans(2,0) = yf00(1)*(6.0*fl2 - 12.0*dx2*fl3) +
     * yf00(2)*(6.0*fl2 - 12.0*dx1*fl3) +
     * yf10(1)*(2.0*fl - 6.0*dx2*fl2) + yf10(2)*(6.0*dx1*fl2 - 2.0*fl)
c
       ans(0,1) = yf01(1)*(3.0*dx22*fl2 - 2.0*dx23*fl3) +
     * yf01(2)*(3.0*dx12*fl2 - 2.0*dx13*fl3) +
     * yf11(1)*(dx22*fl - dx23*fl2) + yf11(2)*(dx13*fl2 - dx12*fl)
c
       ans(1,1) = 6.0*(yf01(1)*(dx22*fl3 - dx2*fl2) +
     * yf01(2)*(dx1*fl2 - dx12*fl3)) +
     * yf11(1)*(3.0*dx22*fl2 - 2.0*dx2*fl) +
     * yf11(2)*(3.0*dx12*fl2 - 2.0*dx1*fl)
c
       ans(2,1) = yf01(1)*(6.0*fl2 - 12.0*dx2*fl3) +
     * yf01(2)*(6.0*fl2 - 12.0*dx1*fl3) +
     * yf11(1)*(2.0*fl - 6.0*dx2*fl2) + yf11(2)*(6.0*dx1*fl2 - 2.0*fl)
c
       ans(0,2) = yf02(1)*(3.0*dx22*fl2 - 2.0*dx23*fl3) +
     * yf02(2)*(3.0*dx12*fl2 - 2.0*dx13*fl3) +
     * yf12(1)*(dx22*fl - dx23*fl2) + yf12(2)*(dx13*fl2 - dx12*fl)
c
       ans(1,2) = 6.0*(yf02(1)*(dx22*fl3 - dx2*fl2) +
     * yf02(2)*(dx1*fl2 - dx12*fl3)) +
     * yf12(1)*(3.0*dx22*fl2 - 2.0*dx2*fl) +
     * yf12(2)*(3.0*dx12*fl2 - 2.0*dx1*fl)
c
       ans(2,2) = yf02(1)*(6.0*fl2 - 12.0*dx2*fl3) +
     * yf02(2)*(6.0*fl2 - 12.0*dx1*fl3) +
     * yf12(1)*(2.0*fl - 6.0*dx2*fl2) + yf12(2)*(6.0*dx1*fl2 - 2.0*fl)
       return
       end
