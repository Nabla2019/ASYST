       subroutine mc20ad (nc,maxa,a,inum,jptr,jnum,jdisp)
!  Alias mc20ad mc20bd
!  Date   01 Jan 1984     Copyright UKAEA, Harwell.
!
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
       integer jdisp,maxa,nc
       real(kr) a(:)
       integer inum(:),jnum(:),jptr(:)
!
       real(kr) ace,acep
       integer i,ice,icep,j,ja,jb,jce,jcep,k,krx,loc,null
!
       null = -jdisp
!  Clear jptr.
       jptr(1:nc) = 0
!  Count the number of elements in each column.
       do k = 1,maxa
         j = jnum(k) + jdisp
         jptr(j) = jptr(j) + 1
       enddo
!  Set the jptr array.
       k = 1
       do j = 1,nc
         krx = k + jptr(j)
         jptr(j) = k
         k = krx
       enddo
!
!  Reorder the elements into column order. The algorithm is an
!  in-place sort and is of order maxa.
       lp1: do i = 1,maxa
!  Establish the current entry.
         jce = jnum(i) + jdisp
         if (jce.eq.0) cycle lp1
         ace = a(i)
         ice = inum(i)
!  Clear the location vacated.
         jnum(i) = null
!  Chain from current entry to store items.
         do j = 1,maxa
!  Current entry not in correct position. Determine correct position to
!  store entry.
           loc = jptr(jce)
           jptr(jce) = jptr(jce) + 1
!  Save contents of that location.
           acep = a(loc)
           icep = inum(loc)
           jcep = jnum(loc)
!  Store current entry.
           a(loc) = ace
           inum(loc) = ice
           jnum(loc) = null
!  Check if next current entry needs to be processed.
           if (jcep.eq.null) cycle lp1
!  It does. Copy into current entry.
           ace = acep
           ice = icep
           jce = jcep + jdisp
         enddo
       enddo lp1
!  Reset jptr vector.
       ja = 1
       do j = 1,nc
         jb = jptr(j)
         jptr(j) = ja
         ja = jb
       enddo
       return
       end
