       subroutine spln12 (nx,x,f0,f1,ij,xin,ans)
c  Evaluates one dimensional spline function.
c
c  nx      Number of points in the interpolation.
c  x       Array containing nx independent variables.
c  f0      Array containing nx dependent variables.
c  f1      Array containing nx first derivatives.
c  ij      Skip factor for f0 and f1 arrays.
c  xin     Value at which interpolation is desired.
c  ans     Array which contains the function value, first derivative,
c          and second derivative at xin on return.
c
       implicit none
c
       integer ij,nx
       real ans(0:2),f0(*),f1(*),x(nx),xin
c
       integer i,k1,mi,mflag
       real dx1,dx12,dx13,dx2,dx22,dx23,fl,fl2,fl3
       external search
c
c  Locate xin in the x array.
       if (xin .le. x(1)) then
         i = 1
       else
         if (xin .ge. x(nx)) then
           i = nx - 1
         else
           call search (xin,x,nx,i,mflag)
         endif
       endif
       mi = (i - 1)*ij + 1
       k1 = mi + ij
       dx1 = xin - x(i)
       dx12 = dx1*dx1
       dx13 = dx12*dx1
       dx2 = x(i+1) - xin
       dx22 = dx2*dx2
       dx23 = dx22*dx2
       fl = 1.0/(x(i+1) - x(i))
       fl2 = fl*fl
       fl3 = fl2*fl
c  Calculate function value at xin.
       ans(0) = f0(mi)*(3.0*dx22*fl2 - 2.0*dx23*fl3) +
     * f0(k1)*(3.0*dx12*fl2 - 2.0*dx13*fl3) +
     * f1(mi)*(dx22*fl - dx23*fl2) + f1(k1)*(dx13*fl2 - dx12*fl)
c  Calculate the first derivative at xin.
       ans(1) = 6.0*(f0(mi)*(dx22*fl3 - dx2*fl2) +
     * f0(k1)*(dx1*fl2 - dx12*fl3)) +
     * f1(mi)*(3.0*dx22*fl2 - 2.0*dx2*fl) +
     * f1(k1)*(3.0*dx12*fl2 - 2.0*dx1*fl)
c  Calculate the second derivative at xin.
       ans(2) = f0(mi)*(6.0*fl2 - 12.0*dx2*fl3) +
     * f0(k1)*(6.0*fl2 - 12.0*dx1*fl3) +
     * f1(mi)*(2.0*fl - 6.0*dx2*fl2) + f1(k1)*(6.0*dx1*fl2 - 2.0*fl)
       return
       end
