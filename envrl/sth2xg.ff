       program sth2xg
c  Program to generate water thermodynamic property tables.
c  Uses astem routines -- ANCR-1026.
*in32 ia
*in32end
       implicit none
       common /fast/ a(20000)
       real a
       integer ia(1)
       equivalence (a(1),ia(1))
*call efiless
       integer sth2xt
c
       common /sth2xc/ nt,np,ns,ns2
       integer nt,np,ns,ns2
c
       integer l3a(8),l3b(9),l3c(9)
       integer i,inp8,isw,j,k,l,lcontg,ln,nl1,nl2,nl3,nl4,nl5,nsl
       real betacr,cpcr,kapacr,hold,tol,tol2
       real ttrip,tcrit,ptrip,pcrit
       character hed*104
       logical err
       external ftbint,ftbrsv,ftbsft,iasme,inp,inp2,inp8,lcontg,
     * sat1,sat2,snph
$if def,ibm,1
       external xuflow
       integer is
c
       data sth2xt/10/
       data l3a/1000,0,2,2,0,1,2*0/
       data l3b/1001,-1999,0,0,0,1,2,1,1/
       data l3c/2001,-2999,0,0,0,1,2,1,1/
       data ttrip/273.16/,tcrit/647.3/,ptrip/611.2445/,pcrit/2.212e7/,
     * tol/0.00001/,tol2/0.1/
*call efilesd
c
       is = 0
       open (unit=output,file='outdta',status='new',form='formatted',
     * iostat=is)
       if (is .ne. 0) then
         write (tty,3001) is
 3001  format ('Open error number',i8,' on file outdta, perhaps file alr
     *eady exists.')
         stop 'output'
       endif
       open (unit=input,file='indta',status='old',form='formatted',
     * iostat=is)
       if (is .ne. 0) then
         write (tty,3002) is
 3002  format ('Open error number',i8,' on file indta, perhaps file is n
     *ot available.')
         stop 'input'
       endif
       open (unit=sth2xt,file='sth2xt',status='new',form='unformatted')
$if def,ibm,1
       call xuflow (0)
       write (output,2000)
 2000  format ('1STH2XG, Program to generate water thermodynamic propert
     *y tables')
       call ftbint (2)
       i = lcontg(1)
       j = 0
       k = 0
       call ftbrsv (1.0,i,-1,l)
       call inp (a(l),i,hed,j,k,isw)
       if (isw .eq. 3) stop 6
       if (isw .eq. 1) then
         write (output,2001)
 2001  format ('1******** No input data supplied.')
         stop 16
       endif
       if (k .le. 1) then
         write (output,2002)
 2002  format ('0******** No data cards entered.')
         stop 16
       endif
       err = isw .eq. 2
       if (j .gt. 0) then
         write (output,2003)
 2003  format ('0Program does not allow multiple cases, other cases igno
     *red.')
       endif
       write (output,'(a)') hed
       call ftbsft (1.0,k,2,l)
       i = lcontg(1)
       call ftbrsv (2.0,i,1,nsl)
       ln = nsl + i
       call inp2 (a(l),a(nsl),l3a)
       if (l3a(6) .le. 0) then
         write (output,2004)
 2004  format ('0******** Error prevents further input checking.')
         stop 16
       endif
       nt = ia(nsl)
       np = ia(nsl+1)
       if (nt.le.1 .or. np.le.1) then
         write (output,2005)
 2005  format ('0******** Incorrect data on card 1000, no further checki
     *ng performed.')
         stop 16
       endif
       nl1 = nsl + nt
       nl2 = nl1 + np
       if (nl2 .gt. ln) then
         write (output,2006)
 2006  format ('0******** Insufficient region space furnished.')
         stop 16
       endif
       l3b(3) = nt
       l3b(4) = nt
       call inp2 (a(l),a(nsl),l3b)
       if (l3b(6) .lt. 0) go to 17
       j = nsl
       ns = 0
       if (a(j) .lt. ttrip - tol) go to 19
       hold = tcrit + tol
       if (a(j) .le. hold) ns = 1
       do 18 i = 2,nt
       if (a(j+1) .le. hold) ns = ns + 1
       if (a(j+1) .le. a(j)) go to 19
   18  j = j + 1
c  Set upper limit on tables to 6000.0 k.
       if (a(j) .gt. 6000.0 + tol) go to 19
       if (ns .ge. 2) go to 20
   19  write (output,2007)
 2007  format ('0******** Temperatures not in increasing order or not in
     * range.')
   17  err = .true.
   20  l3c(3) = np
       l3c(4) = np
       call inp2 (a(l),a(nl1),l3c)
       if (l3c(6) .lt. 0) go to 21
       j = nl1
       ns2 = 0
       if (a(j) .lt. ptrip - tol) go to 23
       hold = pcrit + tol2
       if (a(j) .le. hold) ns2 = 1
       do 22 i = 2,np
       if (a(j+1) .le. hold) ns2 = ns2 + 1
       if (a(j+1) .le. a(j)) go to 23
   22  j = j + 1
       if (a(j) .le. 10000e4 + tol2) go to 24
   23  write (output,2008)
 2008  format ('0******** Pressures not in increasing order or not bound
     *ed.')
   21  err = .true.
   24  i = inp8(1,a(l))
       if (err .or. i.ne.0) stop 16
       if (abs(a(nsl) - ttrip).gt.tol .or.
     * abs(a(nsl+ns-1) - tcrit).gt.tol .or.
     * abs(a(nl1) - ptrip).gt.tol .or.
     * abs(a(nl1+ns2-1) - pcrit).gt.tol2) then
         write (output,2010)
 2010  format ('0Temperatures equal to 273.16 and 647.3 and pressures eq
     *ual to 611.2445 and 2.212e7 must be entered for sth2xg use.')
         stop 16
       endif
       nl3 = nl2 + 13*ns
       nl4 = nl3 + 13*ns2
       nl5 = nl4 + 6*nt*np
       if (nl5 .gt. ln) then
         write (output,2006)
         stop 16
       endif
       ln = nl5 - nsl
       write (output,2009) nt,np,ns,ns2,ln
 2009  format ('0Number of single phase temperatures =',i4,/,'0Number of
     * single phase pressures =',i4,/,'0Number of saturated temperatures
     * =',i4,/,'0Number of saturated pressures =',i4,/,'0Number of words
     * required =',i6)
       call iasme (2)
       call sat1 (a(nsl),a(nl2),ns)
       call sat2 (a(nl1),a(nl3),ns2)
       call snph (a(nsl),a(nl1),a(nl4),nt,np)
c  Overwrite beta, kappa, and cp at critical point.
       isw = 6*nt
       i = nl4 + (ns - 1)*6 + (ns2 - 1)*isw
       cpcr = a(nsl+ns) - a(nsl+ns-2)
       kapacr = a(i+6) - a(i-6)
       betacr = kapacr/(cpcr*a(i))
       cpcr = (a(i+7) - a(i-5) + a(nl1+ns2-1)*kapacr)/cpcr
       kapacr = (a(i-isw) - a(i+isw))/((a(nl1+ns2) - a(nl1+ns2-2))*
     * a(i))
       a(i+2) = betacr
       a(i+3) = kapacr
       a(i+4) = cpcr
       a(nl3-10) = betacr
       a(nl3-9) = kapacr
       a(nl3-8) = cpcr
       a(nl3-4) = betacr
       a(nl3-3) = kapacr
       a(nl3-2) = cpcr
       a(nl4-10) = betacr
       a(nl4-9) = kapacr
       a(nl4-8) = cpcr
       a(nl4-4) = betacr
       a(nl4-3) = kapacr
       a(nl4-2) = cpcr
       write (output,2012) betacr,kapacr,cpcr
 2012  format ('0Critical point derivitives overwritten'/
     * 'beta = ',1p,e15.6,'  kapa =',e15.6,'  cp =',e15.6)
       write (sth2xt) nt,np,ns,ns2
       write (sth2xt) (a(i),i=nsl,nl5-1)
       endfile sth2xt
       stop
       end
       subroutine sat1 (t,s,n)
c
c  This routine finds the saturation pressure given the
c  temperature and then calculates the other needed properties.
c
c      s(1,i)  - p
c      s(2,i)  - v liq.
c      s(3,i)  - u liq.
c      s(4,i)  - beta liq.,(thermal expansion)
c      s(5,i)  - kappa liq.,(compressibility)
c      s(6,i)  - c sub p liq.,(heat capacity)
c      s(7,i)  - s,(entropy)
c      s(8,i)  - v vap.
c      s(9,i)  - u vap.
c      s(10,i) - beta vap.
c      s(11,i) - kappa vap.
c      s(12,i) - c sub p vap.
c      s(13,i) - s,(entropy)
c
$if def,in32,1
       implicit real*8(a-h,o-z)
*call efiless
       common /munits/ crpm,crtm,crvm,crhm,crsm,tom,jcm,gcm,sqjcm,sonicm
       real jcm
       real t(1),s(13,1)
       real af(6),ag(6),f(6),g(6)
       logical nogo
*call efilesd
       data i3/3/,i4/4/
c
       t1 = 62315.0/64730.0
       do 10 i = 1,n
       ta = t(i)/crtm
       call psatk (p,ta,0)
       s(1,i) = p*crpm
       if (ta .gt. t1) go to 11
       call gibbab (af,p,ta,2,1)
       call gibbab (ag,p,ta,2,2)
       call cona (af,2,f,0,0,crhm,crpm,crtm)
       call cona (ag,2,g,0,0,crhm,crpm,crtm)
       vf=af(2)
       vg=ag(2)
       s(2,i) = f(2)
       s(8,i) = g(2)
       s(3,i) = f(1) - t(i)*f(4) - s(1,i)*f(2)
       s(9,i) = g(1) - t(i)*g(4) - s(1,i)*g(2)
       s(4,i) = f(5)/f(2)
       s(10,i) = g(5)/g(2)
       s(5,i) = -f(3)/f(2)
       s(11,i) = -g(3)/g(2)
       s(6,i) = -t(i)*f(6)
       s(12,i) = -t(i)*g(6)
       s(7,i) = -f(4)
       s(13,i) = -g(4)
       go to 10
   11  call root (vf,p,ta,uf,d1,i4,nogo)
       if (nogo) write (output,2001) s(1,i),t(i),i4
 2001  format ('0******** Root failure, p =',1p,e14.6,', t =',e14.6,
     * ', i =',i2)
       call helmcd (af,vf,ta,2,i4)
       call root (vg,p,ta,ug,d1,i3,nogo)
       if (nogo) write (output,2001) s(1,i),t(i),i3
       call helmcd (ag,vg,ta,2,i3)
       call cona (af,2,f,0,0,crhm,crvm,crtm)
       call cona (ag,2,g,0,0,crhm,crvm,crtm)
       s(2,i) = vf*crvm
       s(8,i) = vg*crvm
       s(3,i) = uf*crhm
       s(9,i) = ug*crhm
       d1 = s(2,i)*f(3)
       d2 = s(8,i)*g(3)
       s(4,i) = -f(5)/d1
       s(10,i) = -g(5)/d2
       s(5,i) = 1.0/d1
       s(11,i) = 1.0/d2
       s(6,i) = t(i)*(f(5)*f(5)/f(3) - f(6))
       s(12,i) = t(i)*(g(5)*g(5)/g(3) - g(6))
       s(7,i) = -f(4)
       s(13,i) = -g(4)
   10  continue
       write (output,2002)
 2002  format ('0',55x,'Saturation properties'/'0',5x,'temperature',8x,'
     *pressure',3x,'liq.sp.volume',2x,'liq.int.energy liq.therm.expsn',4
     *x,'liq.compress',3x,'liq.heat cap.',5x,'liq.entropy',/,36x,'vap.sp
     *.volume',2x,'vap.int.energy vap.therm.expsn',4x,'vap.compress',3x,
     *'vap.heat cap.',5x,'vap.entropy')
       do 12 i = 1,n
         write (output,2003) t(i),(s(j,i),j=1,13)
 2003  format ('0',1p,8e16.6,/,33x,6e16.6)
   12  continue
       return
       end
       subroutine sat2 (t,s,n)
c
c  This routine finds the saturation temperature given the
c  pressure and then calculates the other needed properties.
c
c      s(1,i)  - t
c      s(2,i)  - v liq.
c      s(3,i)  - u liq.
c      s(4,i)  - beta liq.,(thermal expansion)
c      s(5,i)  - kappa liq.,(compressibility)
c      s(6,i)  - c sub p liq.,(heat capacity)
c      s(7,i)  - s,(entropy)
c      s(8,i)  - v vap.
c      s(9,i)  - u vap.
c      s(10,i) - beta vap.
c      s(11,i) - kappa vap.
c      s(12,i) - c sub p vap.
c      s(13,i) - s,(entropy)
c
$if def,in32,1
       implicit real*8(a-h,o-z)
*call efiless
       common /munits/ crpm,crtm,crvm,crhm,crsm,tom,jcm,gcm,sqjcm,sonicm
       real jcm
       real t(1),s(13,1)
       real af(6),ag(6),f(6),g(6)
       logical nogo
*call efilesd
       data ta/273.15/
       data i3/3/,i4/4/
c
       t1 = 62315.0/64730.0
       do 10 i = 1,n
       p = t(i)/crpm
       call root (ta,p,d1,d2,d3,-5,nogo)
       if (nogo) write (output,2004) t(i)
 2004  format ('0****** Root failure, p =',1p,e14.6,', i = -5')
       s(1,i) = ta*crtm
       if (ta .gt. t1) go to 11
       call gibbab (af,p,ta,2,1)
       call gibbab (ag,p,ta,2,2)
       call cona (af,2,f,0,0,crhm,crpm,crtm)
       call cona (ag,2,g,0,0,crhm,crpm,crtm)
       vf=af(2)
       vg=ag(2)
       s(2,i) = f(2)
       s(8,i) = g(2)
       s(3,i) = f(1) - s(1,i)*f(4) - t(i)*f(2)
       s(9,i) = g(1) - s(1,i)*g(4) - t(i)*g(2)
       s(4,i) = f(5)/f(2)
       s(10,i) = g(5)/g(2)
       s(5,i) = -f(3)/f(2)
       s(11,i) = -g(3)/g(2)
       s(6,i) = -s(1,i)*f(6)
       s(12,i) = -s(1,i)*g(6)
       s(7,i) = -f(4)
       s(13,i) = -g(4)
       go to 10
   11  call root (vf,p,ta,uf,d1,i4,nogo)
       if (nogo) write (output,2001) s(1,i),t(i),i4
 2001  format ('0******** Root failure, p =',1p,e14.6,', t =',e14.6,', i
     * =',i2)
       call helmcd (af,vf,ta,2,i4)
       call root (vg,p,ta,ug,d1,i3,nogo)
       if (nogo) write (output,2001) s(1,i),t(i),i3
       call helmcd (ag,vg,ta,2,i3)
       call cona (af,2,f,0,0,crhm,crvm,crtm)
       call cona (ag,2,g,0,0,crhm,crvm,crtm)
       s(2,i) = vf*crvm
       s(8,i) = vg*crvm
       s(3,i) = uf*crhm
       s(9,i) = ug*crhm
       d1 = s(2,i)*f(3)
       d2 = s(8,i)*g(3)
       s(4,i) = -f(5)/d1
       s(10,i) = -g(5)/d2
       s(5,i) = 1.0/d1
       s(11,i) = 1.0/d2
       s(6,i) = s(1,i)*(f(5)*f(5)/f(3) - f(6))
       s(12,i) = s(1,i)*(g(5)*g(5)/g(3) - g(6))
       s(7,i) = -f(4)
       s(13,i) = -g(4)
   10  continue
       write (output,2002)
 2002  format ('0',55x,'Saturation properties',/,'0',8x,'pressure',5x,'t
     *emperature',3x,'liq.sp.volume',2x,'liq.int.energy liq.therm. expsn
     *',4x,'liq.compress',3x,'liq.heat cap.',5x,'liq.entropy',/,36x,'vap
     *.sp.volume',2x,'vap.int.energy vap.therm.expsn',4x,'vap.compress',
     *3x,'vap.heat cap.',5x,'vap.entropy')
       do 12 i = 1,n
         write (output,2003) t(i),(s(j,i),j=1,13)
 2003  format ('0',1p,8e16.6,/,33x,6e16.6)
   12  continue
       return
       end
       subroutine snph (t,p,s,nt,np)
c
c      s(1,i,j) - v
c      s(2,i,j) - u
c      s(3,i,j) - beta (thermal expansion)
c      s(4,i,j) - kappa (compressibility)
c      s(5,i,j) - c sub p (heat capacity)
c      s(6,i,j) - s (entropy)
c
$if def,in32,1
       implicit real*8(a-h,o-z)
*call efiless
       common /munits/ crpm,crtm,crvm,crhm,crsm,tom,jcm,gcm,sqjcm,sonicm
       real jcm
       real t(1),p(1),s(6,nt,1)
       real af(6),f(6)
       logical nogo
*call efilesd
c
       t1 = 62315.0/64730.0
       t2 = 86315.0/64730.0
       call psatk (p1,t1,0)
       do 10 i = 1,nt
       ta = t(i)/crtm
       if (ta .le. 1.0) call psatk (pk,ta,0)
       if (ta.gt.t1 .and. ta.le.t2) call psatl (pl,ta,0)
       do 11 j = 1,np
       pa = p(j)/crpm
       if (t(i) .gt. 1073.15) go to 100
       if (ta .gt. t1) go to 12
       if (pa .lt. pk) go to 22
       go to 21
   12  if (ta .ge. 1.0) go to 13
       if (pa .le. pl) go to 22
       if (pa .lt. pk) go to 23
       go to 24
   13  if (ta .ge. t2) go to 22
       if (pa .le. pl) go to 22
       go to 23
   21  ir = 1
       go to 26
   22  ir = 2
   26  call gibbab (af,pa,ta,2,ir)
       call cona (af,2,f,0,0,crhm,crpm,crtm)
       v = af(2)
       s(1,i,j) = f(2)
       s(2,i,j) = f(1) - t(i)*f(4) - p(j)*f(2)
       s(3,i,j) = f(5)/f(2)
       s(4,i,j) = -f(3)/f(2)
       s(5,i,j) = -t(i)*f(6)
       s(6,i,j) = -f(4)
       go to 11
   23  ir = 3
       go to 27
   24  ir = 4
   27  call root (v,pa,ta,u,d1,ir,nogo)
       if (nogo) write (output,2001) p(j),t(i),ir
 2001  format ('0******** Root failure, p =',1p,e14.6,', t =',e14.6,', i
     * =',i2)
       call helmcd (af,v,ta,2,ir)
       call cona (af,2,f,0,0,crhm,crvm,crtm)
       s(1,i,j) = v*crvm
       s(2,i,j) = u*crhm
       d1 = s(1,i,j)*f(3)
       s(3,i,j) = -f(5)/d1
       s(4,i,j) = 1.0/d1
       s(5,i,j) = t(i)*(f(5)*f(5)/f(3) - f(6))
       s(6,i,j) = -f(4)
c  Finished now with astem.  this area has been used for temps
c  within the range of astem - up to 1073.15 deg k.
       go to 11
c
  100  continue
c
c  This branch for the case where temperatures are beyond astem's
c  upper limit of 1073.15 deg k.  The janaf treatment of Stull
c  and Prophet is used here.
       ta = 1073.15/crtm
       ir = 2
       call gibbab ( af, pa, ta, 2, ir)
       call cona ( af, 2, f, 0, 0, crhm, crpm, crtm )
       s0 = -f(4)
       u0 = f(1) - 1073.15*f(4) - p(j)*f(2)
       v = f(2)
       r = p(j)*v/1073.15
       v = r * t(i) / p(j)
c
c  Integrate c sub p.
       call intgrc ( 1073.15, t(i), csubpi, cpint, ier )
       if ( ier .ne. 0 ) write (output,101) p(j), t(i)
  101 format ('0******** Integration error in snph; p,t =',2e14.6)
       u = u0 + cpint - r * ( t(i) - 1073.15 )
c
c  Calculate ds from 1073.15 to t(i).
       call dels ( 1073.15, t(i), ds, ier )
       if ( ier .ne. 0 ) write (output,102) p(j), t(i)
  102 format ('0******** Error in routine dels')
       s(1,i,j) = v
       s(2,i,j) = u
       s(3,i,j) = 1.0/t(i)
       s(4,i,j) = 1.0/p(j)
       s(5,i,j) = csubpi
       s(6,i,j) = s0 + ds
   11  continue
   10  continue
       j1 = 1
   30  j2 = j1 + 5
       if (j2 .gt. np) j2 = np
       write (output,2002) (p(j),j=j1,j2)
 2002  format ('1',54x,'Single phase properties',/,'0',5x,'temperature',
     *8x,'pressure',1p,6e16.6)
       do 31 i = 1,nt
       write (output,2003) t(i),(s(1,i,j),j=j1,j2)
 2003  format ('0',1p,e16.6,7x,'sp.volume',6e16.6)
       write (output,2004) (s(2,i,j),j=j1,j2)
 2004  format (23x,'int.energy',1p,6e16.6)
       write (output,2005) (s(3,i,j),j=j1,j2)
 2005  format (22x,'therm.expsn',1p,6e16.6)
       write (output,2006) (s(4,i,j),j=j1,j2)
 2006  format (25x,'compress',1p,6e16.6)
       write (output,2007) (s(5,i,j),j=j1,j2)
 2007  format (24x,'heat cap.',1p,6e16.6)
       write (output,2008) (s(6,i,j),j=j1,j2)
 2008  format (26x,'entropy',1p,6e16.6)
   31  continue
       j1 = j2 + 1
       if (j2 .lt. np) go to 30
       return
       end
      subroutine intgrc ( tlo, thi, csubpp, a, ier)
c
c  This routine integrates c sub p for water from a lower limit of tlo
c  to an upper limit of thi.  A trapezoidal method is employed to do
c  the integration.
c
c     inputs: tlo - lower temperature limit (k)
c     thi - upper temperature limit (k)
c     outputs:
c     a - the integral of csubp from tlo to thi ( j/kg) )
c     csubpp - c sub p at temperature thi (j kg(-1) deg(-1))
c     ier - error flag: no error if ier = 0.
c
c  This routine was written by S. W. James.
c
$if def,in32,1
       implicit real*8(a-h,o-z)
*call efiless
      real tcp(52), csubp(52)
*call efilesd
c
c  The following sp.heats for water are taken from janaf thermo-
c  chemical tables by Stull and Prophet.
c  The units are cal.mole(-1)deg(-1) in the data statements.
c  The temperatures are in degrees kelvin.
      data  csubp /  9.851, 10.152, 10.444, 10.753, 10.987,
     *              11.233, 11.462, 11.674, 11.869, 12.048,
     *              12.214, 12.366, 12.505, 12.634, 12.753,
     *              12.863, 12.965, 13.059, 13.146, 13.226,
     *              13.304, 13.374, 13.441, 13.503, 13.562,
     *              13.617, 13.669, 13.716, 13.768, 13.808,
     *              13.850, 13.890, 13.957, 13.963, 13.997,
     *              14.030, 14.061, 14.091, 14.120, 14.148,
     *              14.174, 14.201, 14.228, 14.254, 14.279,
     *              14.303, 14.328, 14.351, 14.375, 14.396,
     *              14.422, 14.422/
      data  tcp /  1000.,1100.,1200.,1300.,1400.,1500.,
     *             1600.,1700.,1800.,1900.,2000.,2100.,
     *             2200.,2300.,2400.,2500.,2600.,2700.,
     *             2800.,2900.,3000.,3100.,3200.,3300.,
     *             3400.,3500.,3600.,3700.,3800.,3900.,
     *             4000.,4100.,4200.,4300.,4400.,4500.,
     *             4600.,4700.,4800.,4900.,5000.,5100.,
     *             5200.,5300.,5400.,5500.,5600.,5700.,
     *             5800.,5900.,6000.,6000. /
c  si is the conversion factor to si units for csubp:
      data si/232.238/
      ier = 0
c
c  Check that 1000 .le. tlo .le. thi .le. 6000 (deg k).
      if ( 1000.0 .le. tlo ) go to 20
      write (output,10)
   10 format ('0******** Error:1000.le.tlo.le.thi.le.6000 violated')
      ier = 1
   20 if ( tlo .le. thi ) go to 30
      write (output,10)
      ier = 1
   30 if ( thi .le. 6000.) go to 40
      write (output,10)
      ier = 1
   40 if ( ier .ne. 1 ) go to 60
      write (output,50)
   50 format ('0******** Error in routine to integrate csubp for water')
      go to 130
   60 continue
c
c  Find bracketing intervals for tlo and thi.
      do 70 n = 1, 51
         if (tcp(n).le.tlo.and.tlo.lt.tcp(n+1)) go to 80
   70    continue
c
   80 do 90 m = 1, 51
         if (tcp(m).le.thi.and.thi.lt.tcp(m+1)) go to 100
   90    continue
  100 continue
      slope1 = ( csubp(n+1) - csubp(n) )*0.01
      slope2 = ( csubp(m+1) - csubp(m) )*0.01
c
      cplo = slope1 * ( tlo - tcp(n) ) + csubp(n)
      cphi = slope2 * ( thi - tcp(m) ) + csubp(m)
      a = 0.5*( ( cplo + csubp(n+1)) * (tcp(n+1) - tlo)
     *     +   ( cphi + csubp(m)) * (thi - tcp(m))  )
      if ( n .eq.m ) a = 0.5*( cplo + cphi )*( thi - tlo )
      if ( n + 1  .ge.  m  ) go to 120
      j1 = n + 1
      j2 = m - 1
      do 110 j = j1, j2
  110    a = a + 0.5*(csubp(j) + csubp(j+1))*(tcp(j+1) - tcp(j))
  120 continue
c
c  Convert area and csubpp to si.
      csubpp = si * cphi
      a = si * a
  130 continue
      return
      end
      subroutine dels ( tlo, thi, ds, ier )
c
c  This routine calculates the change in entropy of steam
c  from temperature tlo to temperature thi in the janaf tables.
c
c     inputs: tlo - lower temperature limit (k)
c     thi - upper temperature limit (k)
c     output:
c     ds - delta entropy,(tlo to thi)--(j/kg deg-1**2)
c
c     this routine was written by s. w. james
c
$if def,in32,1
       implicit real*8(a-h,o-z)
*call efiless
      real tcp(52), s(52)
*call efilesd
c
c  The following entropy values are taken from janaf thermo-chemical
c  tables by Stull and Prophet.
c  The units are cal.mole(-1)deg(-2) in the data statements.
c  The temperatures are in degrees kelvin.
      data s / 55.592, 56.545, 57.441, 58.288, 59.092,
     *         59.859, 60.591, 61.293, 61.965, 62.612,
     *         63.234, 63.834, 64.412, 64.971, 65.511,
     *         66.034, 66.541, 67.032, 67.508, 67.971,
     *         68.421, 68.856, 69.284, 69.698, 70.102,
     *         70.496, 70.881, 71.256, 71.622, 71.980,
     *         72.331, 72.673, 73.008, 73.336, 73.658,
     *         73.973, 74.281, 74.584, 74.881, 75.172,
     *         75.459, 75.740, 76.016, 76.287, 76.553,
     *         76.816, 77.074, 77.327, 77.577, 77.823,
     *         78.065, 78.065/
      data  tcp /  1000.,1100.,1200.,1300.,1400.,1500.,
     *             1600.,1700.,1800.,1900.,2000.,2100.,
     *             2200.,2300.,2400.,2500.,2600.,2700.,
     *             2800.,2900.,3000.,3100.,3200.,3300.,
     *             3400.,3500.,3600.,3700.,3800.,3900.,
     *             4000.,4100.,4200.,4300.,4400.,4500.,
     *             4600.,4700.,4800.,4900.,5000.,5100.,
     *             5200.,5300.,5400.,5500.,5600.,5700.,
     *             5800.,5900.,6000.,6000. /
c  si is the conversion factor to si units for entropy.
      data si / 232.238/
      ier = 0
c
c  Check that 1000 .le. tlo .le. thi .le. 6000 (deg k).
      if ( 1000.0 .le. tlo ) go to 20
      write (output,10)
   10 format('0******** Error, 1000.le.tlo.le.thi.le.6000 violated.')
      ier = 1
   20 if ( tlo .le. thi ) go to 30
      write (output,10)
      ier = 1
   30 if ( thi .le. 6000.) go to 40
      write (output,10)
      ier = 1
   40 if ( ier .ne. 1 ) go to 60
      write (output,50)
   50 format ('0******** Error inputs out of range in dels')
      go to 110
   60 continue
c
c  Find bracketing intervals for tlo and thi.
      do 70 n = 1, 51
         if (tcp(n).le.tlo.and.tlo.lt.tcp(n+1)) go to 80
   70    continue
c
   80 do 90 m = 1, 51
         if (tcp(m).le.thi.and.thi.lt.tcp(m+1)) go to 100
   90    continue
  100 continue
      slope1 = ( s(n+1) - s(n) )*0.01
      slope2 = ( s(m+1) - s(m) )*0.01
      slo = slope1 * ( tlo - tcp(n) ) + s(n)
      shi = slope2 * ( thi - tcp(m) ) + s(m)
      ds = shi - slo
c
c  Convert entropy to si units.
      ds = ds * si
  110 continue
      return
      end
       subroutine ftbmem (lscm,llcm)
$if def,in32,1
       implicit real*8 (a-h,o-z)
       common /fast/ a(20000)
       if (lscm .eq. 0) lscm = 30000 + locf(a(1))
       return
       end
