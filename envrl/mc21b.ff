       subroutine mc21b (n,icn,licn,ip,lenr,iperm,numnz,pr,arp,cv,out)
!
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
       integer licn,n,numnz
       integer arp(:),cv(:),icn(:),ip(:),iperm(:),lenr(:),out(:),
     & pr(:)
!
!  pr(i) is the previous row to i in the depth first search.
!  It is used as a work array in the sorting algorithm.
!  Elements (iperm(i),i) i=1, ... n  are non-zero at the end of the
!  algorithm unless n assignments have not been made, in which case
!  (iperm(i),i) will be zero for n-numnz entries.
!  cv(i) is the most recent row extension at which column i was visited.
!  arp(i) is one less than the number of non-zeros in row i which have
!  not been scanned when looking for a cheap assignment.
!  out(i) is one less than the number of non-zeros in row i which have
!  not been scanned during one pass through the main loop.
!
       integer i,ii,in1,in2,ioutk,j,j1,jord,k,kk
!
!  Initialization of arrays.
       do i = 1,n
         arp(i) = lenr(i) - 1
         cv(i) = 0
         iperm(i) = 0
       enddo
       numnz = 0
!
!  Main loop.
!  Each pass round this loop either results in a new assignment
!  or gives a row with no assignment.
       lp2: do jord = 1,n
         j = jord
         pr(j) = -1
         lp3: do k = 1,jord
!  Look for a cheap assignment.
           in1 = arp(j)
           if (in1.ge.0) then
             in2 = ip(j) + lenr(j) - 1
             in1 = in2 - in1
             do ii = in1,in2
               i = icn(ii)
               if (iperm(i).eq.0) exit lp3
             enddo
!  No cheap assignment in row.
             arp(j) = -1
           endif
!  Begin looking for assignment chain starting with row j.
           out(j) = lenr(j) - 1
!  Inner loop. Extends chain by one or backtracks.
           do kk = 1,jord
             in1 = out(j)
             if (in1.ge.0) then
               in2 = ip(j)+lenr(j) - 1
               in1 = in2 - in1
!  Forward scan.
               do ii = in1,in2
                 i = icn(ii)
                 if (cv(i).eq.jord) cycle
!  Column i has not yet been accessed during this pass.
                 j1 = j
                 j = iperm(i)
                 cv(i) = jord
                 pr(j) = j1
                 out(j1) = in2 - ii - 1
                 cycle lp3
               enddo
             endif
!  Backtracking step.
             j = pr(j)
             if (j.eq.-1) cycle lp2
           enddo
         enddo lp3
!  New assignment is made.
         iperm(i) = j
         arp(j) = in2 - ii - 1
         numnz = numnz + 1
         do k = 1,jord
           j = pr(j)
           if (j.eq.-1) exit
           ii = ip(j) + lenr(j) - out(j) - 2
           i = icn(ii)
           iperm(i) = j
         enddo
       enddo lp2
!
!  If matrix is structurally singular, we now complete the
!  permutation iperm.
       if (numnz.eq.n) return
       arp(1:n) = 0
       k=0
       do i = 1,n
         if (iperm(i).eq.0) then
           k = k + 1
           out(k) = i
         else
           j = iperm(i)
           arp(j) = i
         endif
       enddo
       k=0
       do i = 1,n
         if (arp(i).ne.0) cycle
         k = k + 1
         ioutk = out(k)
         iperm(ioutk) = i
       enddo
       return
       end
