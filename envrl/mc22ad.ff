       subroutine mc22ad (n,icn,a,nz,lenrow,ip,iq,iw,iw1)
!
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
       integer n,nz
       real(kr) a(:)
       integer icn(:),ip(:),iq(:),iw(:,:),iw1(:),lenrow(:)
!
       real(kr) aval
       integer i,ichain,iold,ipos,j,j2,jj,jnum,jval,length,newpos
!
       if (nz.le.0 .or. n.le.0) return
!  Set start of row i in iw(i,1) and lenrow(i) in iw(i,2).
       iw(1,1) = 1
       iw(1,2) = lenrow(1)
       do i = 2,n
         iw(i,1) = iw(i-1,1) + lenrow(i-1)
         iw(i,2) = lenrow(i)
       enddo
!  Permute lenrow according to ip. Set off-sets for new position
!  of row iold in iw(iold,1) and put old row indices in iw1 in
!  positions corresponding to the new position of this row in a/icn.
       jj = 1
       do i = 1,n
         iold = ip(i)
         iold = abs(iold)
         length = iw(iold,2)
         lenrow(i) = length
         if (length.eq.0) cycle
         iw(iold,1) = iw(iold,1)-jj
         j2 = jj + length - 1
         iw1(jj:j2) = iold
         jj = j2 + 1
       enddo
!  Set inverse permutation to iq in iw(.,2).
       do i=1,n
         iold = iq(i)
         iold = abs(iold)
         iw(iold,2) = i
       enddo
!  Permute a and icn in place, changing to new column numbers.
!
!  Main loop
!  Each pass through this loop places a closed chain of column indices
!  in their new (and final) positions. This is recorded by setting the
!  iw1 entry to zero so that any which are subsequently encountered
!  during this major scan can be bypassed.
       do i = 1,nz
         iold = iw1(i)
         if (iold.eq.0) cycle
         ipos = i
         jval = icn(i)
!  If row iold is in same positions after permutation, branch.
         if (iw(iold,1).ne.0) then
           aval = a(i)
!  Chain loop.
!  Each pass through this loop places one (permuted) column index
!  in its final position viz. pos.
           do ichain = 1,nz
!  newpos is the original position in a/icn of the element to be placed
!  in position ipos. It is also the position of the next element in the
!  chain.
             newpos = ipos + iw(iold,1)
! Is chain complete ?
             if (newpos.eq.i) exit
             a(ipos) = a(newpos)
             jnum = icn(newpos)
             icn(ipos) = iw(jnum,2)
             ipos = newpos
             iold = iw1(ipos)
             iw1(ipos) = 0
!  End of chain loop.
           enddo
           a(ipos) = aval
         endif
         icn(ipos) = iw(jval,2)
!  End of main loop.
       enddo
       return
       end
