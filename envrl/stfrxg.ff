*deck stfrxg
       program stfrxg (input,output,stfrxt,tape5=input,tape6=output,
     * debug=output)
c program to generate freon thermodynamic property tables.
       common /fast/ a(1)
       common/coes/g(50)
       common/formul/kfrm,lrange
       common/dat/nco
       common/uplmd/fachi
       common/rfpr/rf(10)
       common/crpr/cr(3)
       common/itt/ic,icc
       common/cons/tk,pk,rok,ga,rh,amol
       common/cigcp/gi(17)
       common/fld/fluid
       common/csl/cl(25)
       common/csv/cv(25)
       common/cvpn/gv(21)
       common/scrh/x(50)
       integer ia(1,1)
       equivalence (a(1),ia(1,1))
       integer l3a(8),l3b(9),l3c(9),ttl(10),hed(9)
       logical err
       integer output,stfrxt
       call c11p50
       call refr11
       data l3a/1000,0,2,2,0,1,2*0/
       data l3b/1001,-1999,0,0,0,1,2,1,1/
       data l3c/2001,-2999,0,0,0,1,2,1,1/
       data output/6loutput/,stfrxt/6lstfrxt/
       data ttl    /"(stfrxg/00","1,11/19/81",",jkh)     ","          ",
     * "program to"," generate ","freon ther","modynamic ","property t",
     * "ables"/
       call header (1,95,ttl)
       call ftbint (2)
       i = lcontg(1)
       j = 0
       k = 0
       call ftbrsv (1.0,i,-1,l)
       call inp (a(l),i,hed,j,k,isw)
       if (isw .eq. 3) stop 6
       if (isw .ne. 1) go to 10
       write (output,2001)
 2001  format ("1******** no input data supplied.")
       stop 16
   10  if (k .gt. 1) go to 11
       write (output,2002)
 2002  format ("0******** no data cards entered.")
       stop 16
   11  err = isw .eq. 2
       if (j .le. 0) go to 12
       write (output,2003)
 2003  format ("0program does not allow multiple cases, other cases igno
     *red.")
   12  call shift (1.0,k,2,l)
       i = lcontg(1)
       call ftbrsv (2.0,i,1,nsl)
       ln = nsl + i
       call inp2 (a(l),a(nsl),l3a)
       if (l3a(6) .gt. 0) go to 13
       write (output,2004)
 2004  format ("0******** error prevents further input checking.")
       stop 16
   13  nt = ia(1,nsl)
       np = ia(1,nsl+1)
       if (nt.gt.1 .and. np.gt.1) go to 14
       write (output,2005)
 2005  format ("0******** incorrect data on card 1000, no further checki
     *ng performed.")
       stop 16
   14  nl1 = nsl + nt
       nl2 = nl1 + np
       if (nl2 .le. ln) go to 15
   16  write (output,2006)
 2006  format ("0******** not sufficient region space furnished.")
       stop 16
   15  l3b(3) = nt
       l3b(4) = nt
       call inp2 (a(l),a(nsl),l3b)
       if (l3b(6) .lt. 0) go to 17
       j = nsl
       ns = 0
       if (a(j) .lt. 250.00) go to 19
       if (a(j) .le. tk) ns = 1
       do 18 i = 2,nt
       if (a(j+1) .le. tk) ns = ns + 1
       if (a(j+1) .le. a(j)) go to 19
   18  j = j + 1
       if (a(j) .gt. 673.15) go to 19
       if (ns .ge. 2) go to 20
   19  write (output,2007)
 2007  format ("0******** temperatures not in increasing order or not in
     * range.")
   17  err = .true.
   20  l3c(3) = np
       l3c(4) = np
       call inp2 (a(l),a(nl1),l3c)
       if (l3c(6) .lt. 0) go to 21
       j = nl1
       ns2 = 0
       if (a(j) .le. 0.0) go to 23
       if (a(j) .le. (pk*1.0e6))ns2 = 1
       do 22 i = 2,np
       if (a(j+1) .le. (pk*1.0e6))ns2 = ns2 + 1
       if (a(j+1) .le. a(j)) go to 23
   22  j = j + 1
       if (a(j) .le. 10000e4) go to 24
   23  write (output,2008)
 2008  format ("0******** pressures not in increasing order or not bound
     *ed.")
   21  err = .true.
   24  i = inp8(1,a(l))
       if (err .or. i.ne.0) stop 16
       if (a(nsl) .ne. 250.00) go to 25
       if (a(nsl+ns-1) .ne. 471.15) go to 25
       if (a(nl1) .gt. 150.0e2) go to 25
       if (a(nl1+np-1) .eq. 1.0e8) go to 26
   25  write (output,2010)
 2010  format ("0temperatures equal to 250.00, and 673.15, a pressure
     *less than or equal to 150.0e2, and a pressure equal
     *1.0e8"/" should be entered for stfrx use.")
c
c a temperature equal to or too close to the critical temperature
c of freon 11 must not be input for single phase properties
c as problems arise in convergence.
c
   26  nl3 = nl2 + 13*ns
       nl4 = nl3 + 13*ns2
       nl5 = nl4 + 6*nt*np
       if (nl5 .gt. ln) go to 16
       ln = nl5 - nsl
       write (output,2009) nt,np,ns,ns2,ln
 2009  format ("0number of single phase temperatures ="i4/"0number of si
     *ngle phase pressures ="i4/"0number of saturated temperatures ="i4/
     *"0number of saturated pressures ="i4/"0number of words required ="
     * i6)
       write(output,2011)
 2011  format("1","pressure is input in pascals and output in pascals"/
     *"0temperature is input in kelvin and the output is in kelvin"/
     *"0specific volume is output in cubic-meter/kilogram"/
     *"0internal energy is output in joule/kilogram"/
     *"0thermal expansion is output in 1.0/kelvin"/
     *"0compressibilty is output in 1.0/pascals"/
     *"0heat capacity is output in joule/(kilogram-kelvin)"/
     *"0entropy is output in joule/(kilogram-kelvin)")
       call sat1fr (a(nsl),a(nl2),ns)
       call sat2fr (a(nl1),a(nl3),ns2)
       call snphfr (a(nsl),a(nl1),a(nl4),nt,np)
       buffer out (stfrxt,1) (nt,ns2)
       if (unit(stfrxt) .ge. 0.0) go to 100
       buffer out (stfrxt,1) (a(nsl),a(nl5-1))
       if (unit(stfrxt) .ge. 0.0) go to 100
       endfile stfrxt
       stop
 100   write (output,2012)
 2012  format ("0******** write error on stfrxt.")
       stop "trouble"
       end
      subroutine snphfr(t,p,s,nt,np)
      common/coes/g(50)
      common/formul/kfrm,lrange
      common/dat/nco
      common/uplmd/fachi
      common/rfpr/rf(10)
      common/crpr/cr(3)
      common/itt/ic,icc
      common/cons/tk,pk,rok,ga,rh,amol
      common/cigcp/gi(17)
      common/fld/fluid
      common/csl/cl(25)
      common/csv/cv(25)
      common/cvpn/gv(21)
      common/scrh/x(50)
      common/fast/a(1)
      integer ia(1,1)
      equivalence (a(1),ia(1,1))
      real t(1),p(1),s(6,nt,1),pp(50)
      dimension c(50)
c
c the common block has been installed and the value c which
c should be passed into the call routine is dimensioned
c
c pressure is input in pascals and converted to megapascals
c for use in the program. the output is in pascals.
c temperature is input in kelvin. the output is in kelvin.
c specific volume is output in cubic-meter/kilogram.
c internal energy is output in joule/kilogram.
c thermal expansion is output in 1./kelvin.
c compressibility is output in 1./pascals.
c heat capacity is output in joule/(kilogram-kelvin).
c entropy is output in joule/(kilogram-kelvin).
c
c calculate the equation of state and various properties
c
      do 10 i = 1,nt
        do 11 j = 1,np
c
c this calculation is done for the saturated vapor properties
c
      pp(j) = p(j)*1.0e-6
      call hs50(t(i),ro,pp(j),h,u,se,1,1,g,1)
c
c the pressure that is printed in this table is the pressure in pa
c
      xro = ro*rf(7)
      call xkappa(t(i),ro,xka)
      call beta(xka,ro,t(i),b)
      call csubv(t(i),ro,c,csuv)
      call csubp(t(i),ro,c,csuv,csup)
      call sspeed(ro,t(i),ssp,csuv,csup)
      s(1,i,j) = 1.0/xro
      s(2,i,j) = u
      s(3,i,j) = b
      s(4,i,j) = xka
      s(5,i,j) = csup
      s(6,i,j) = se
   11 continue
   10 continue
      j1 = 1
   30 j2 = j1 + 5
      if(j2.gt.np)j2 = np
      write(6,2002)(p(j),j=j1,j2)
 2002 format("1"54x"single phase properties"/"0"5x"temperature"
     *8x"pressure"1p6e16.6)
      do 31 i = 1,nt
      if(lines(0).lt.7)write(6,2002)(p(j),j=j1,j2)
      write(6,2003)(t(i),(s(1,i,j),j=j1,j2))
 2003 format("0"1pe16.6,7x"sp.volume"6e16.6)
      write(6,2004)(s(2,i,j),j=j1,j2)
 2004 format(23x"int.energy"1p6e16.6)
      write(6,2005)(s(3,i,j),j=j1,j2)
 2005 format(22x"therm.expsn"1p6e16.6)
      write(6,2006)(s(4,i,j),j=j1,j2)
 2006 format(25x"compress"1p6e16.6)
      write(6,2007)(s(5,i,j),j=j1,j2)
 2007 format(24x"heat cap."1p6e16.6)
      write(6,2008)(s(6,i,j),j=j1,j2)
 2008 format(26x"entropy"1p6e16.6)
   31 continue
      j1 =j2+1
      if(j2.lt.np)go to 30
      return
      end
      subroutine c11p50
c     coefficients for the pressure explicit equation of state for
c...  refrigerant-11
c     this routine also gives the information needed by the buffer
c     program to direct it to the proper subroutines.
      common/coes/g(50)
      common/formul/kfrm,lrange
      common/dat/nco
      kfrm=10
      lrange=1
      nco=50
      do 10 i=1,50
   10 g(i)=0.0e0
c...  the coefficients in this routine are from the 29th fit 10/08/80
          g( 1) =  0.2539531506e-02
          g( 3) = -0.2284579298e 01
          g( 6) = -0.9981771771e 07
          g( 8) = -0.2478421618e-07
          g(19) =  0.3667573458e-05
          g(21) = -0.1386913423e 00
          g(24) =  0.1638785822e 02
          g(30) = -0.2892072959e-02
          g(31) = -0.4431701099e-07
          g(33) =  0.6598235968e 05
          g(35) = -0.8512403439e 10
          g(36) = -0.1518312360e 04
          g(37) =  0.6129193685e 09
          g(38) =  0.1822145354e 03
          g(39) = -0.5724806129e 05
          g(40) = -0.1851433480e 01
          g(43) =  0.1829017816e-01
          g(45) =  0.3377133256e 04
          g(46) = -0.3084806772e-03
          g(50) = -0.2977490270e 00
      return
      end
      subroutine dcham1(t,p,d,l)
      common /uplmd/fachi
      common /rfpr/ rf(10)
      common /crpr/cr(3)
c
c.... routine to generate trial densities for iterative solution of
c.... the equation of state for density given temperature and pressure
c
c     l=0 indicates single phase point, input t and p
c     l=1 indicates saturated liquid, input t
c     l=2 indicates saturated vapor, input t
c
      if((l.le.2).and.(l.ge.0))go to 1
      write(6,300)l
  300 format(" *** error in call dcham1 ***",/,
     .       "     l must equal 0, 1, or 2",/,
     .       "     l = ",i10)
      return
    1 continue
      pc=cr(1)
      dc=cr(2)
      tc=cr(3)
      if(l.gt.0)go to 5
      if(t.ge.tc)go to 2
    8 vp=vpeqn(t)
      call satl(t,dsal)
      call satv(t,dsav)
    9 if(p.le.vp)go to 3
    4 continue
      dh=fachi*dc
      dl=dsal*0.95e0
      call dcham2(d,t,p,dl,dh)
      return
    3 dl=1.0e-07
      dh=dsav*1.05e0
      call dcham2(d,t,p,dl,dh)
      return
    2 dl=1.e-07
      dh=fachi*dc
      call dcham2(d,t,p,dl,dh)
      return
    5 continue
      p=vpeqn(t)
      if(l.eq.1)go to 10
      call satv(t,dsav)
      go to 3
   10 call satl(t,dsal)
      go to 4
      end
      subroutine dcham2(d,t,p,dl,dh)
      common/coes/g(50)
      common/crpr/cr(3)
      common/uplmd/fachi
      common/itt/ic,icc
      dimension c(50)
      data maxx/300/
      data maxz/150/
      eps=1.e-6*p
c
c.... routine to perform iterative solution of the equation of state
c
c.... dl is lower bound on density
c.... dh is upper bound on density
c
c.... the desired density must lie between dl and dh
c
c.... algorithm is modified version of
c.... 'a quadratic formula for finding the root of an equation'  by
c.... g. chambers mathematics of computation vol 25 no 114 april (1971)
c
      dlo=dl
      dho=dh
      m=0
      ic=0
      icc=0
    2 continue
      m=m+1
      d1=dl
      d2=dh
      call pressp(d1,t,c,g,p1,1)
      y1=p1-p
      px=1.0/p
      if(abs(y1*px).le.eps)go to 15
      call pressp(d2,t,c,g,p2,1)
      y2=p2-p
      if(abs(y2*px).le.eps)go to 16
    1 ic=ic+1
      if(ic.gt.maxx)go to 17
      x =1.0/( y2-y1)
      ds=(d1*y2-d2*y1)*x
      call pressp(ds,t,c,g,ps,1)
      ys=ps-p
      y =1.0/( ys-y2)
      z =1.0/( ys-y1)
      d3=ds*y1*y2*y*z +
     .   d1*ys*y2*x*z -
     .   d2*ys*y1*x*y
      if (d3.lt.d1 .or. d3.gt.d2) go to 17
      call pressp(d3,t,c,g,p3,1)
      y3=p3-p
      if(abs(y3*px).le.eps)go to 3
      if(y3.gt.0.e0)go to 12
      y1=y3
      d1=d3
      go to 1
   12 y2=y3
      d2=d3
      go to 1
   15 d=d1
      return
   16 d=d2
      return
    3 d=d3
      return
c     if the chambers method fails the incremental search is used to
c     locate better estimates spanning the root.
   17 if(abs(d1-d2).lt.1.e-6) go to 15
      if(m.gt.1)goto 5
c     test for the proper starting value and maximun value.
      if(fachi.eq.0.e0)fachi=1.0
      tuc=1.08e0*cr(3)
      tlc=0.95e0*cr(3)
      if(t.gt.tuc)goto 30
      if(t.lt.tlc)goto 40
      vplc=vpeqn(tlc)
      if(p.le.vplc)goto 31
      call satv(tlc,dvc)
      call pressp(dvc,tuc,c,g,puc,1)
      if(p.gt.puc)goto 35
      call pressp(dvc,t,c,g,pt,1)
      if(p.lt.pt) go to 31
      call satl(tlc,dsc)
c     in the critical region the bisection method is used.
   18 dest=(dvc+dsc)*0.5
      icc=icc+1
      call pressp(dest,t,c,g,pest,1)
      delp=pest-p
      if(abs(delp).le.eps)goto 20
      if(icc.gt.maxz)goto 5
      if(delp.lt.0.e0)goto 19
      dsc=dest
      goto 18
   19 dvc=dest
      goto 18
   20 d=dest
      return
c     assign values for the initial estimate and maximun
   30 dc=cr(2)
      call pressp(dc,t,c,g,pc,1)
      if(p.gt.pc)goto 35
c     vapor region with t > tc
   31 dint=1.e-6
      dmax=fachi*cr(2)
      goto 50
c     liquid region with t > tc
   35 continue
      dc = cr(2)
      dint=dc
      dmax=2.e0*fachi*cr(2)
      goto 50
   40 dchk=fachi*cr(2)-1.e0
      if(dh.gt.dchk)goto 41
      goto 45
c     liquid region with t < tc
   41 dint=dl
      dmax=2.e0*fachi*cr(2)
      goto 50
c     vapor region with t < tc
   45 dint=1.e-6
      dmax=dh
c     incremental search method
   50 continue
      deld=cr(2)*0.1
      call pressp(dint,t,c,g,pc,1)
      delp=pc-p
      if(abs(delp).le.eps)goto 60
   51 dl=dint
      dint=dint+deld
      if(dint.gt.dmax)dint=dmax
      call pressp(dint,t,c,g,pc,1)
      delp2=pc-p
      if(abs(delp2).le.eps)goto 60
      chx=delp*delp2
      if(chx.lt.0.e0)goto 55
      if(dint.ge.dmax)goto 5
      delp=delp2
      goto 51
   55 dh=dint
c     now that the solution is bounded return to the chamber's method.
      goto 2
   60 d=dint
      return
    5 write(6,300)t,p,dlo,dho,dl,dh,d1,y1,d2,y2,ds,ys,d3,y3,dest,dmax,
     x            ic,icc
  300 format(" *** dcham2 failed to converge ***",/,
     .       "     t  = ",g15.7,/,
     .       "     p  = ",g15.7,/,
     .       "     dlo= ",g15.7,/,
     .       "     dho= ",g15.7,/,
     .       "     dl = ",g15.7,/,
     .       "     dh = ",g15.7,/,
     .       "     d1 = ",g15.7,/,
     .       "     y1 = ",g15.7,/,
     .       "     d2 = ",g15.7,/,
     .       "     y2 = ",g15.7,/,
     .       "     ds = ",g15.7,/,
     .       "     ys = ",g15.7,/,
     .       "     d3 = ",g15.7,/,
     .       "     y3 = ",g15.7,/,
     .       "   dest = ",g15.7,/,
     .       "   dmax = ",g15.7,/,
     .       "     ic = ",i5,/,
     .       "    icc = ",i5,/)
      d=777.e0
      if(icc.ge.maxz)d=dest
      return
      end
      subroutine hs50(temp,ro,p,h,u,se,ih,is,coef,k)
c     calculation of enthalpy, internal energy and entropy using
c     the 50-term e.o.s.
      dimension coef(50)
      dimension x(50),f(10)
      common /cons/tk,pk,rok,ga,rh,amol
      common /rfpr/rf(10)  /crpr/cr(3)  /cigcp/cig(9)
c     if ih=1 enthalpy and internal energy are returned.
c     if is=1 entropy is returned.
c     coef are the coefficients of the e.o.s.
c          k=1 for single phase properties
c          k=2 for saturated liquid properties.
c          k=3 for saturated vapor properties.
c     input arguments are temperature and density for k=1.
c
c     for k=2 and k=3 the input variable is temperature.
c     vapor pressure is calculated from the vapor pressure equation.
c     the saturation density is calculated from the equation of state.
      ak=rf(6)/rf(7)
      r=rf(5)
      t=temp
      ts=sqrt(t)
      t2=t*t
      t3=t2*t
      t4=t3*t
      t5=t4*t
      t6=t5*t
      t11 = 1.0/t
      t21 = 1.0/t2
      t31 = 1.0/t3
      t41 = 1.0/t4
      t51 = 1.0/t5
      t61 = 1.0/t6
      if(k.eq.1)go to 19
c     saturated properties -
      if(k.ne.2)go to 18
      call dcham1(t,p,rol,1)
      ro=rol
      go to 20
   18 call dcham1(t,p,rog,2)
      ro=rog
      go to 20
   19 call dcham1(t,p,ro,0)
   20 continue
c
c     calculation of integral ((r/d-1/d**2(dp/dt)) dd)
c          between limits of d=d and d=0.
      do 30 i=1,2
      d=ro
      if(i.eq.2)d=0.e0
      d2=d*d
      d3=d2*d
      d4=d3*d
      d5=d4*d
      d6=d5*d
      d7=d6*d
      d8=d7*d
      d9=d8*d
      d10=d9*d
      d11=d10*d
      d12=d11*d
      d13=d12*d
      d14=d13*d
      d15=d14*d
      g11 = 1.0/(2.0*ga)
      ff=exp(ga*d2)
      g1=ff*g11
      g2=(ff*d2-2.e0*g1)*g11
      g3=(ff*d4-4.e0*g2)*g11
      g4=(ff*d6-6.e0*g3)*g11
      g5=(ff*d8-8.e0*g4)*g11
      g6=(ff*d10-10.e0*g5)*g11
      g7=(ff*d12-12.e0*g6)*g11
      x( 1)=-d
      x( 2)=-0.5*d/ts
      x( 3)=0.0e0
      x( 4)=d*t21
      x( 5)=2.e0*d*t31
      x( 6)=3.e0*d*t41
      x( 7)=4.e0*d*t51
      x( 8)=-d2*t
      x( 9)=-0.5*d2
      x(10)=0.e0
      x(11)=0.5*d2*t21
      x(12)=d2*t31
      x(13)=-2.e0*d3*t/3.e0
      x(14)=-d3/3.e0
      x(15)=0.e0
      x(16)=d3/(3.e0*t2)
      x(17)=2.e0*d3/(3.e0*t3)
      x(18)=-d4*t*0.5
      x(19)=-d4*0.25
      x(20)=0.e0
      x(21)=0.25*d4*t21
      x(22)=0.50*d4*t31
      x(23)=0.20*d5*t21
      x(24)=0.40*d5*t31
      x(25)=d6/(6.e0*t2)
      x(26)=d6/(3.e0*t3)
      x(27)=d7/(7.e0*t2)
      x(28)=2.e0*d7/(7.e0*t3)
      x(29)=0.125*d8*t21
      x(30)=0.25*d8*t31
      x(31)=0.10*d10*t21
      x(32)=0.20*d10*t31
      x(33)=2.e0*g1*t31
      x(34)=3.e0*g1*t41
      x(35)=4.e0*g1*t51
      x(36)=2.e0*g2*t31
      x(37)=4.e0*g2*t51
      x(38)=2.e0*g3*t31
      x(39)=3.e0*g3*t41
      x(40)=2.e0*g4*t31
      x(41)=3.e0*g4*t41
      x(42)=4.e0*g4*t51
      x(43)=2.e0*g5*t31
      x(44)=3.e0*g5*t41
      x(45)=4.e0*g5*t51
      x(46)=2.e0*g6*t31
      x(47)=3.e0*g6*t41
      x(48)=4.e0*g6*t51
      x(49)=3.e0*g7*t41
      x(50)=4.e0*g7*t51
      n=50
      sum150=0.e0
      do 1 ii=1,n
    1 sum150 = sum150 + coef(ii)*x(ii)
      if(i.eq.1)sum15u=sum150
      if(i.eq.2)sum15l=sum150
   30 continue
      if(ih.ne.1)go to 40
c
c     calculation of integral ((p/d**2 - r*t/d) dd)
c         between limits of d=d and d=0.
      do 35 i=1,2
      d=ro
      if(i.eq.2)d=0.e0
      a=2.0e0*ga
      aa=1.0/a
      d2=d*d
      d3=d2*d
      d4=d3*d
      d5=d4*d
      d6=d5*d
      d7=d6*d
      d8=d7*d
      d9=d8*d
      d10=d9*d
      d11=d10*d
      d12=d11*d
      d13=d12*d
      d14=d13*d
      d15=d14*d
      e=exp(ga*d2)
      f(1)=e*aa
      f(2)=(d2*e-2.e0*f(1))*aa
      f(3)=(d4*e-4.e0*f(2))*aa
      f(4)=(d6*e-6.e0*f(3))*aa
      f(5)=(d8*e-8.e0*f(4))*aa
      f(6)=(d10*e-10.e0*f(5))*aa
      f(7)=(d12*e-12.e0*f(6))*aa
      x(1)=d*t
      x(2)=d*ts
      x(3)=d
      x(4)=d*t11
      x(5)=d*t21
      x(6)=d*t31
      x(7)=d*t41
      x(8)=d2*t2*0.5
      x(9)=d2*t*0.5
      x(10)=d2*0.5
      x(11)=0.5*d2*t11
      x(12)=0.5*d2*t21
      x(13)=d3*t2/3.e0
      x(14)=d3*t/3.e0
      x(15)=d3/3.e0
      x(16)=d3/(3.e0*t)
      x(17)=d3/(3.e0*t2)
      x(18)=d4*t2*0.25
      x(19)=d4*t*0.25
      x(20)=d4*0.25
      x(21)=0.25*d4*t11
      x(22)=0.25*d4*t21
      x(23)=0.2*d5*t11
      x(24)=0.2*d5*t21
      x(25)=d6/(6.e0*t)
      x(26)=d6/(6.e0*t2)
      x(27)=d7/(7.e0*t)
      x(28)=d7/(7.e0*t2)
      x(29)=0.125*d8*t11
      x(30)=0.125*d8*t21
      x(31)=0.1*d10*t11
      x(32)=0.1*d10*t21
      x(33)=f(1)*t21
      x(34)=f(1)*t31
      x(35)=f(1)*t41
      x(36)=f(2)*t21
      x(37)=f(2)*t41
      x(38)=f(3)*t21
      x(39)=f(3)*t31
      x(40)=f(4)*t21
      x(41)=f(4)*t31
      x(42)=f(4)*t41
      x(43)=f(5)*t21
      x(44)=f(5)*t31
      x(45)=f(5)*t41
      x(46)=f(6)*t21
      x(47)=f(6)*t31
      x(48)=f(6)*t41
      x(49)=f(7)*t31
      x(50)=f(7)*t41
      n=50
      sum250=0.e0
      do 2 ii=1,n
      sum250 = sum250 + coef(ii)*x(ii)
    2 continue
      if(i.eq.1)sum25u=sum250
      if(i.eq.2)sum25l=sum250
   35 continue
   40 continue
      if(is.ne.1)go to 45
c
c     calculation of the ideal gas entropy.
      t00=rf(4)
      s00=rf(2)/rf(7)
      t=temp
      do 60 i=1,2
      if(i.eq.2)t=t00
      t2=t*t
      t3=t2*t
      t11 = 1.0/t
      t21 = 1.0/t2
      t31 = 1.0/t3
      u=cig(9)*t11
      eu=exp(u)
      x(1)=-1.e0/(3.e0*t3)
      x(2)=-0.5*t21
      x(3)=-t11
      x(4)=log(t)
      x(5)=t
      x(6)=t2*0.5
      x(7)=t3/3.e0
      x(8)=u/(eu-1.e0)-log(1.e0-1.e0/eu)
      cps=0.e0
      do 4 ii=1,8
    4 cps=cps+x(ii)*cig(ii)
      cps=cps*r*ak
      if(i.eq.1)cpsiu=cps
      if(i.eq.2)cpsil=cps
   60 continue
      t=temp
      p0=0.101325e0
      s0=s00+cpsiu-cpsil
c
c     calculation of entropy at temp & ro.
      se=s0-(r*log(ro*r*t/p0)-sum15u+sum15l)*ak
   45 continue
      if(ih.ne.1)return
c
c     calculation of ideal gas enthalpy.
      t00=rf(3)
      h00=rf(1)/rf(7)
      t=temp
      do 70 i=1,2
      if(i.eq.2)t=t00
      t2=t*t
      t3=t2*t
      t4=t3*t
      t11 = 1.0/t
      t21 = 1.0/t2
      t31 = 1.0/t3
      t41 = 1.0/t4
      u=cig(9)*t11
      x(1)=-0.5*t21
      x(2)=-t11
      x(3)=log(t)
      x(4)=t
      x(5)=t2*0.5
      x(6)=t3/3.e0
      x(7)=t4*0.25
      x(8)=u*t/(exp(u)-1.e0)
      cph=0.e0
      do 3 ii=1,8
    3 cph=cph+x(ii)*cig(ii)
      cph=cph*r*ak
      if(i.eq.1)cphiu=cph
      if(i.eq.2)cphil=cph
   70 continue
      t=temp
      h0=h00+cphiu-cphil
c
c     calculation of enthalpy and internal energy at temp & ro.
      h=h0+(t*(sum15u-sum15l)+sum25u-sum25l+p/ro-r*t)*ak
       u= (h - (p/ro) * ak) * 1000.
      return
      end
      subroutine pderp(k,den,temp,c,coef,dcal,ind)
c..defines derivatives w.r.t density or temperature
c..of pressure explicit eos for fitting
c.. k=1 dp/dro
c.. k=2 d2p/dro2
c.. k=3 d3p/dro3
c.. k=4 d4p/dro4
c.. k=5 dp/dt
c.. k=6 d2p/dt2
c..if ind=1 derivative is calculated in dcal
      dimension c(50),coef(50)
      common/cons/tk,pk,rok,ga,rh,amol
      common/dat/nco
      d=den
      t=temp
      d2=d*d
      d3=d*d2
      d4=d*d3
      d5=d*d4
      d6=d*d5
      d7=d*d6
      d8=d*d7
      d9=d*d8
      d10=d*d9
      d11=d*d10
      d12=d2*d10
      d13=d*d12
      d14=d2*d12
      d15=d*d14
      t12=sqrt(t)
      t32=t*t12
      t2=t*t
      t3=t*t2
      t4=t*t3
      t5=t*t4
      t6=t*t5
      t11 = 1.0/t
      t21 = 1.0/t2
      t31 = 1.0/t3
      t41 = 1.0/t4
      t51 = 1.0/t5
      t61 = 1.0/t6
      a=2.0e0*ga
      e=exp(ga*d2)
      goto(1,2,3,4,5,6),k
    1 f1=e*(3.0e0*d2+a*d4)
      f2=e*(5.0e0*d4+a*d6)
      f3=e*(7.0e0*d6+a*d8)
      f4=e*(9.0e0*d8+a*d10)
      f5=e*(11.0e0*d10+a*d12)
      f6=e*(13.0e0*d12+a*d14)
      f7=e*(15.0e0*d14+a*d14*d2)
      if(k.eq.2) goto 2
      c(1)=2.e0*d*t
      c(2)=2.e0*d*t12
      c(3)=2.e0*d
      c(4)=2.e0*d*t11
      c(5)=2.e0*d*t21
      c(6)=2.e0*d*t31
      c(7)=2.e0*d*t41
      c(8)=3.e0*d2*t2
      c(9)=3.e0*d2*t
      c(10)=3.e0*d2
      c(11)=3.e0*d2*t11
      c(12)=3.e0*d2*t21
      c(13)=4.e0*d3*t2
      c(14)=4.e0*d3*t
      c(15)=4.e0*d3
      c(16)=4.e0*d3*t11
      c(17)=4.e0*d3*t21
      c(18)=5.0e0*d4*t2
      c(19)=5.0e0*d4*t
      c(20)=5.0e0*d4
      c(21)=5.0e0*d4*t11
      c(22)=5.0e0*d4*t21
      c(23)=6.0e0*d5*t11
      c(24)=6.0e0*d5*t21
      c(25)=7.0e0*d6*t11
      c(26)=7.0e0*d6*t21
      c(27)=8.0e0*d7*t11
      c(28)=8.0e0*d7*t21
      c(29)=9.0e0*d8*t11
      c(30)=9.0e0*d8*t21
      c(31)=11.0e0*d10*t11
      c(32)=11.0e0*d10*t21
      goto 12
    2 f1=e*d*(6.0e0+a*d2*(7.0e0+a*d2))
      f2=e*d3*(20.0e0+a*d2*(11.0e0+a*d2))
      f3=e*d5*(42.0e0+a*d2*(15.0e0+a*d2))
      f4=e*d7*(72.0e0+a*d2*(19.0e0+a*d2))
      f5=e*d9*(110.0e0+a*d2*(23.0e0+a*d2))
      f6=e*d11*(156.0e0+a*d2*(27.0e0+a*d2))
      f7=e*d*d12*(210.0e0+a*d2*(31.0e0+a*d2))
      c(1)=2.e0*t
      c(2)=2.e0*t12
      c(3)=2.e0
      c(4)=2.e0*t11
      c(5)=2.e0*t21
      c(6)=2.e0*t31
      c(7)=2.e0*t41
      c(8)=6.e0*d*t2
      c(9)=6.e0*d*t
      c(10)=6.e0*d
      c(11)=6.e0*d*t11
      c(12)=6.e0*d*t21
      c(13)=12.e0*d2*t2
      c(14)=12.e0*d2*t
      c(15)=12.e0*d2
      c(16)=12.e0*d2*t11
      c(17)=12.e0*d2*t21
      c(18)=20.0e0*d3*t2
      c(19)=20.0e0*d3*t
      c(20)=20.0e0*d3
      c(21)=20.0e0*d3*t11
      c(22)=20.0e0*d3*t21
      c(23)=30.0e0*d4*t11
      c(24)=30.0e0*d4*t21
      c(25)=42.0e0*d5*t11
      c(26)=42.0e0*d5*t21
      c(27)=56.0e0*d6*t11
      c(28)=56.0e0*d6*t21
      c(29)=72.0e0*d7*t11
      c(30)=72.0e0*d7*t21
      c(31)=110.0e0*d9*t11
      c(32)=110.0e0*d9*t21
      goto 12
    3 f1=e*(6.0e0+a*d2*(27.0e0+a*d2*(12.0e0+a*d2)))
      f2=e*d2*(60.0e0+a*d2*(75.0e0+a*d2*(18.0e0+a*d2)))
      f3=e*d4*(210.0e0+a*d2*(147.0e0+a*d2*(24.0e0+a*d2)))
      f4=e*d6*(504.0e0+a*d2*(243.0e0+a*d2*(30.0e0+a*d2)))
      f5=e*d8*(990.0e0+a*d2*(363.0e0+a*d2*(36.0e0+a*d2)))
      f6=e*d10*(1716.0e0+a*d2*(507.e00+a*d2*(42.0e0+a*d2)))
      f7=e*d12*(2730.0e0+a*d2*(675.0e0+a*d2*(48.0e0+a*d2)))
      do 10 i=1,7
   10 c(i)=0.0e0
      c(8)=6.e0*t2
      c(9)=6.e0*t
      c(10)=6.e0
      c(11)=6.e0*t11
      c(12)=6.e0*t21
      c(13)=24.e0*d*t2
      c(14)=24.e0*d*t
      c(15)=24.e0*d
      c(16)=24.e0*d*t11
      c(17)=24.e0*d*t21
      c(18)=60.0e0*d2*t2
      c(19)=60.0e0*d2*t
      c(20)=60.0e0*d2
      c(21)=60.0e0*d2*t11
      c(22)=60.0e0*d2*t21
      c(23)=120.0e0*d3*t11
      c(24)=120.0e0*d3*t21
      c(25)=210.0e0*d4*t11
      c(26)=210.0e0*d4*t21
      c(27)=336.0e0*d5*t11
      c(28)=336.0e0*d5*t21
      c(29)=504.0e0*d6*t11
      c(30)=504.0e0*d6*t21
      c(31)=990.0e0*d8*t11
      c(32)=990.0e0*d8*t21
      goto 12
    4 f1=e*d*a*(60.0e0+a*d2*(75.0e0+a*d2*(18.0e0+a*d2)))
      f2=e*d*(120.0e0+a*d2*(360.0e0+a*d2*(183.0e0+a*d2*(26.0e0+a*d2))))
      f3=e*d3*(840.e0+a*d2*(1092.0e0+a*d2*(339.0e0+a*d2*(34.0e0+a*d2))))
      f4=e*d5*(3024.0e0+a*d2*(2448.0e0+a*d2*(543.0e0+a*d2*(42.0e0+a*d2))
     @))
      f5=e*d7*(7920.0e0+a*d2*(4620.0e0+a*d2*(795.0e0+a*d2*(50.0e0+a*d2))
     @))
      f6=e*d9*(17160.0e0+a*d2*(7800.0e0+a*d2*(1095.0e0+a*d2*(58.0e0+a*d2
     @))))
      f7=e*d11*(32760.e0+a*d2*(12180.e0+a*d2*(1443.e0+a*d2*(66.0e0+a*d2
     @))))
      do 11 i=1,12
   11 c(i)=0.0e0
      c(13)=24.e0*t2
      c(14)=24.e0*t
      c(15)=24.e0
      c(16)=24.e0*t11
      c(17)=24.e0*t21
      c(18)=120.0e0*d*t2
      c(19)=120.0e0*d*t
      c(20)=120.0e0*d
      c(21)=120.0e0*d*t11
      c(22)=120.0e0*d*t21
      c(23)=360.0e0*d2*t11
      c(24)=360.0e0*d2*t21
      c(25)=840.0e0*d3*t11
      c(26)=840.0e0*d3*t21
      c(27)=1680.0e0*d4*t11
      c(28)=1680.0e0*d4*t21
      c(29)=3024.0e0*d5*t11
      c(30)=3024.0e0*d5*t21
      c(31)=7920.0e0*d7*t11
      c(32)=7920.0e0*d7*t21
   12 c(33)=f1*t21
      c(34)=f1*t31
      c(35)=f1*t41
      c(36)=f2*t21
      c(37)=f2*t41
      c(38)=f3*t21
      c(39)=f3*t31
      c(40)=f4*t21
      c(41)=f4*t31
      c(42)=f4*t41
      c(43)=f5*t21
      c(44)=f5*t31
      c(45)=f5*t41
      c(46)=f6*t21
      c(47)=f6*t31
      c(48)=f6*t41
      c(49)=f7*t31
      c(50)=f7*t41
      if(ind.eq.0) return
      go to 7
    5 continue
      c(1) = d2
      c(2) = 0.5*d2/t12
      c(3) = 0.0
      c(4) = -d2*t21
      c(5) = -2.0*d2*t31
      c(6) = -3.0*d2*t41
      c(7) = -4.0*d2*t51
      c(8) = 2.0*d3*t
      c(9) = d3
      c(10) = 0.0
      c(11) = -d3*t21
      c(12) = -2.0*d3*t31
      c(13) = 2.0*d4*t
      c(14) = d4
      c(15) = 0.0
      c(16) = -d4*t21
      c(17) = -2.0*d4*t31
      c(18) = 2.0*d5*t3
      c(19) = d5
      c(20) = 0.0
      c(21) = -d5*t21
      c(22) = -2.0*d5*t31
      c(23) = -d6*t21
      c(24) = -2.0*d6*t31
      c(25) = -d7*t21
      c(26) = -2.0*d7*t31
      c(27) = -d8*t21
      c(28) = -2.0*d8*t31
      c(29) = -d9*t21
      c(30) = -2.0*d9*t31
      c(31) = -d11*t21
      c(32) = -2.0*d11*t31
      c(33) = -2.0*d3*t31*e
      c(34) = -3.0*d3*t41*e
      c(35) = -4.0*d3*t51*e
      c(36) = -2.0*d5*t31*e
      c(37) = -4.0*d5*t51*e
      c(38) = -2.0*d7*t31*e
      c(39) = -3.0*d7*t41*e
      c(40) = -2.0*d9*t31*e
      c(41) = -3.0*d9*t41*e
      c(42) = -4.0*d9*t51*e
      c(43) = -2.0*d11*t31*e
      c(44) = -3.0*d11*t41*e
      c(45) = -4.0*d11*t51*e
      c(46) = -2.0*d13*t31*e
      c(47) = -3.0*d13*t41*e
      c(48) = -4.0*d13*t51*e
      c(49) = -3.0*d15*t41*e
      c(50) = -4.0*d15*t51*e
      go to 7
    6 continue
c *** calculates d2p/dt2
      c(1) = 0.0
      c(2) = -0.25*d2/t32
      c(3) = 0.0
      c(4) = 2.0*d2*t31
      c(5) = 6.0*d2*t41
      c(6) = 12.0*d2*t51
      c(7) = 20.0*d2*t61
      c(8) = 2.0*d3
      c(9) = 0.0
      c(10) = 0.0
      c(11) = 2.0*d3*t31
      c(12) = 6.0*d3*t41
      c(13) = 2.0*d4
      c(14) = 0.0
      c(15) = 0.0
      c(16) = 2.0*d4*t31
      c(17) = 6.0*d4*t41
      c(18) = 2.0*d5
      c(19) = 0.0
      c(20) = 0.0
      c(21) = 2.0*d5*t31
      c(22) = 6.0*d5*t41
      c(23) = 2.0*d6*t31
      c(24) = 6.0*d6*t41
      c(25) = 2.0*d7*t31
      c(26) = 6.0*d7*t41
      c(27) = 2.0*d8*t31
      c(28) = 6.0*d8*t41
      c(29) = 2.0*d9*t31
      c(30) = 6.0*d9*t41
      c(31) = 2.0*d11*t31
      c(32) = 6.0*d11*t41
      c(33) = 6.0*d3*t41*e
      c(34) = 12.0*d3*t51*e
      c(35) = 20.0*d3*t61*e
      c(36) = 6.0*d5*t41*e
      c(37) = 20.0*d5*t61*e
      c(38) = 6.0*d7*t41*e
      c(39) = 12.0*d7*t51*e
      c(40) = 6.0*d9*t41*e
      c(41) = 12.0*d9*t51*e
      c(42) = 20.0*d9*t61*e
      c(43) = 6.0*d11*t41*e
      c(44) = 12.0*d11*t51*e
      c(45) = 20.0*d11*t61*e
      c(46) = 6.0*d13*t41*e
      c(47) = 12.0*d13*t51*e
      c(48) = 20.0*d13*t61*e
      c(49) = 12.0*d15*t51*e
      c(50) = 20.0*d15*t61*e
    7 sum = 0.0e0
      do 8 i = 1,nco
    8 sum = sum + c(i)*coef(i)
      if(k.eq.1) dcal = sum+rh*t
      if((k.gt.1).and.(k.ne.5))dcal = sum
      if(k.eq.5)dcal = sum+d*rh
      return
      end
      subroutine pressp(de,temp,c,coef,pcal,ind)
c..pressure explicit form for fitting
c..b.armstrong..29/nov/77
c..calculates coefficient terms for p-ro*r*t
c..calculates pressure in pcal if ind=1
      dimension c(50),coef(50)
      common/cons/tk,pk,rok,ga,rh,amol
      common/dat/nco
      nco=50
      d=de
      t=temp
      d2=d*d
      d3=d*d2
      d4=d3*d
      d5=d4*d
      d6=d*d5
      d7=d*d6
      d8=d*d7
      d9=d*d8
      d10=d*d9
      d11=d*d10
      d13=d2*d11
      d15=d2*d13
      t2=t*t
      t3=t*t2
      t4=t*t3
      t11 = 1.0/t
      t21 = 1.0/t2
      t31 = 1.0/t3
      t41 = 1.0/t4
      e=exp(ga*d2)
      c(1)=d2*t
      c(2)= d2*sqrt(t)
      c(3)=d2
      c(4)= d2*t11
      c(5)=d2*t21
      c(6)=d2*t31
      c(7)=d2*t41
      c(8)=d3*t2
      c(9)=d3*t
      c(10)=d3
      c(11)=d3*t11
      c(12)=d3*t21
      c(13)=d4*t2
      c(14)=d4*t
      c(15)=d4
      c(16)=d4*t11
      c(17)=d4*t21
      c(18)=d5*t2
      c(19)=d5*t
      c(20)=d5
      c(21)=d5*t11
      c(22)=d5*t21
      c(23)=d6*t11
      c(24)=d6*t21
      c(25)=d7*t11
      c(26)=d7*t21
      c(27)=d8*t11
      c(28)=d8*t21
      c(29)=d9*t11
      c(30)=d9*t21
      c(31)=d11*t11
      c(32)=d11*t21
      c(33)=d3*e*t21
      c(34)=d3*e*t31
      c(35)=d3*e*t41
      c(36)=d5*e*t21
      c(37)=d5*e*t41
      c(38)=d7*e*t21
      c(39)=d7*e*t31
      c(40)=d9*e*t21
      c(41)=d9*e*t31
      c(42)=d9*e*t41
      c(43)=d11*e*t21
      c(44)=d11*e*t31
      c(45)=d11*e*t41
      c(46)=d13*e*t21
      c(47)=d13*e*t31
      c(48)=d13*e*t41
      c(49)=d15*e*t31
      c(50)=d15*e*t41
      if(ind.eq.0) return
      sum=0.0
      do 100 i=1,nco
  100 sum=sum+c(i)*coef(i)
      pcal=sum+d*rh*t
      return
      end
      subroutine refr11
c     reference routine for refrigerant-11
c
c     this subroutine gives the reference and critical properties and th
c     coefficients for the vapor pressure, heat capacity, saturated liqu
c     and vapor density equations.
c
c    common block    arguments         definitions
c_______________________________________________________________________
c       fld            fluid       fluid name
c       cons           tk          critical temperature
c                      pk          critical pressure
c                      rok         critical density
c                      ga          gamma
c                      rh          gas constant in units of the eos.
c                      amol        molecular weight
c       crpr           cr(1)       critical pressure
c                      cr(2)       critical density
c                      cr(3)       critical temperature
c       rfpr           rf(1)       reference enthalpy at temperature toh
c                      rf(2)       reference entropy at temperature tos
c                      rf(3)       temperature toh
c                      rf(4)       temperature tos
c                      rf(5)       gas constant in units of eos
c                      rf(6)       conversion factor to change eos units
c                                  to energy units
c                      rf(7)       molecular weight
c                      rf(8)       triple point temperature
c                      rf(9)       triple point pressure
c                      rf(10)      not used
c       cvpn           gv(21)      vapor pressure coefficients
c       cigcp          gi(17)      ideal gas heat capacity coefficients
c       csl            cl(25)      saturated liquid coefficients
c       csv            cv(25)      saturated vapor coefficients
c       ctevp          ct(8)
c       cml            cm(10)
      common/cons/tk,pk,rok,ga,rh,amol
      common/crpr/cr(3)
      common/rfpr/rf(10)
      common/fld/fluid
      common /uplmd/fachi
      common/csl/cl(25)
      common/csv/cv(25)
      common/cvpn/gv(21)
      common/cigcp/gi(17)
      fachi=3.3e0
      data r11/"rf-11   "/
      fluid=r11
      do 10 i=1,17
   10 gi(i)=0.0e0
          gi( 1) = -0.1579205970e 07
          gi( 2) =  0.7684971405e 05
          gi( 3) = -0.1283842807e 04
          gi( 4) =  0.1137468900e 02
          gi( 5) =  0.6121616429e-02
          gi( 6) = -0.3584915235e-05
          gi( 7) =  0.7555011561e-09
          gi( 8) = -0.2032873919e 01
          gi( 9) =  0.3000000000e 04
      do 50 i=1,21
      gv(i)=0.0e0
   50 continue
          gv( 1) = -0.1813893466e 00
          gv( 2) = -0.4652293316e 01
          gv( 3) = -0.1064018529e 02
          gv( 4) =  0.3436611141e 02
          gv( 5) = -0.5676941063e 02
          gv( 6) =  0.5024183096e 02
          gv( 7) = -0.2181030863e 02
      do 2 j=1,25
      cl(j)=0.0e0
      cv(j)=0.0e0
    2 continue
          cv( 3) =  0.8473399328e 04
          cv( 4) =  0.3886661900e 04
          cv( 6) = -0.1294618478e 06
          cv( 7) =  0.7639523496e 06
          cv( 8) = -0.2095520466e 07
          cv( 9) =  0.3139206101e 07
          cv(10) = -0.2247848324e 07
          cv(12) =  0.1036111262e 07
          cv(13) = -0.4632329404e 06
          cv(23) =  0.1252969827e 05
          cv(25) =  0.8958723528e 04
          cl(11) =  0.8713913666e 00
          cl(12) =  0.2320762565e 01
          cl(16) =  0.6018025117e 00
      rf(1)=27824.8465285e0
      rf(1)=rf(1)-0.024537e0
      rf(2)=94.4705612e0
      rf(3)=233.15e0
      rf(4)=233.15e0
      rf(5)=0.00831434e0
      rf(6)=1000.0e0
      rf(7)=137.368e0
      rf(8)=0.16204e03
      cr(1)=4.40966e0
      pk=cr(1)
      cr(2)=4.0550786e0
      rok=cr(2)
      cr(3)=0.47115e3
      tk=cr(3)
      rh=rf(5)
      ga=-1.0e0/(rok*rok)
      amol=rf(7)
      return
      end
      subroutine satl(t,dlcal)
      dimension c(50)
      common/crpr/cr(3)
      common/rfpr/rf(10)
      common/csl/coef(25)
      crd=cr(2)
      tc=cr(3)
      tau=(tc-t)/tc
      theta=t/tc
      do 100 j=1,24
      i=j-11
      ai=i
      c(j)=tau**(ai/3.e0)
  100 continue
      c(25)=log(theta)
      nc=25
      dc=0.0e0
      do 5 j=1,nc
      dc=dc+c(j)*coef(j)
    5 continue
      dlcal=dc*crd
      return
      end
      subroutine satv(t,dvcal)
      dimension c(50)
      common/rfpr/rf(10)
      common/crpr/cr(3)
      common/csv/coef(25)
      tc=cr(3)
      crd=cr(2)
      tau=(tc-t)/tc
      theta=t/tc
      do 100 j=1,24
      ai=j
      c(j)=tau**(ai/3.e0)
  100 continue
      c(25)=log(theta)
      nc=25
      dc=0.0e0
      do 5 j=1,nc
      dc=dc+c(j)*coef(j)
    5 continue
      dbk=exp(dc)
      dbk1=dbk*crd
      dvcal=dbk1
      return
      end
      function vpeqn(t)
      real n2,ne
      common /fld/fluid
      common/cvpn/g(21) /crpr/cr(3) /rfpr/rf(10)
      dimension x(21)
c
c     function to calculate vapor pressure
c
      data n2/"nitrogen"/
      data o2/"oxygen  "/
      data air/"air     "/
      data ar/"argon   "/
      data ch4/"methane "/
      data ph2/"parahydg"/
      data ne/"neon    "/
      data ey/"ethylene"/
      data r11/"rf-11   "/
      data h2/"nhydroge"/
      tc=cr(3)
      pc=cr(1)
      ptr=rf(9)
      ttr=rf(8)
      tdell=abs(t-ttr)
      if(tdell.lt.1.e-06)go to 7
      tdelh=abs(t-tc)
      if(tdelh.lt.1.e-06)go to 8
      go to 9
    7 continue
      vpeqn=ptr
      return
    8 continue
      vpeqn=pc
      return
    9 continue
      totc=t/tc
      tau=1-totc
      tcot=tc/t
      tau2=tau*tau
      tau3=tau2*tau
      tau4=tau3*tau
      tau5=tau4*tau
      tau6=tau5*tau
      tau7=tau6*tau
      tau8=tau7*tau
      tau9=tau8*tau
      if(fluid.eq.ar) go to 10
      if(fluid.eq.ne) go to 10
      if(fluid.eq.n2)go to 10
      if(fluid.eq.o2)go to 10
      if(fluid.eq.air)go to 30
      if(fluid.eq.ch4) go to 50
      if(fluid.eq.ey) go to 50
      if(fluid.eq.ph2) go to 60
      if(fluid.eq.r11) go to 10
      if(fluid.eq.h2) go to 70
   10 continue
      do 100 i=1,21
  100 x(i)=(tau**(float(i)/2.e0))*tcot
      sum=0.e0
      do 101 i=1,21
  101 sum=sum+x(i)*g(i)
      vpeqn=exp(sum)*pc
      return
   30 continue
      write(6,199)
  199 format(" for air, properties have been requested out of range",
     ."of formulation  (vpn)")
      vpeqn=0.e0
      return
   50 continue
c
c.... function to calculate vapor pressure by goodman's equation.
c
      pt=rf(9)
      tt=rf(8)
      z=(1.0e0-tt/t)/(1.0e0-tt/tc)
      z2=z*z
      z3=z*z2
      z4=z*z3
      if(z.eq.1.0e0) go to 333
      q=(1.0e0-z)**1.5e0
      go to 444
  333 q=0.0e0
  444 x1=g(1)
      x2=g(2)*z
      x3=g(3)*z2
      x4=g(4)*z3
      x5=g(5)*z4
      x6=g(6)*z*q
      vpn=exp(x1+x2+x3+x4+x5+x6)
      if(fluid.eq.ey)pt=0.101325e0
      vpeqn=pt*vpn
      return
   60 continue
      tt=rf(8)
      tc=cr(3)
      x0=(1.0-tt/t)/(1.0-tt/tc)
      x(1)=x0
      x(2)=x0*x0
      x(3)=x(2)*x0
      x(4)=x0*(1.0-x0)**g(6)
      x(5)=1.e0
      p=0.e0
      do 1 i=1,5
    1 p=p+x(i)*g(i)
      p=exp(p)*rf(9)
      vpeqn=p
      return
   70 continue
      plog=g(1)+g(2)/t+g(3)*log10(t)
      p=g(4)*10.e0**plog
      vpeqn=p
      return
      end
      function cphi(temp)
      real n2,ne
c
c.... routine to calculate integral(cpo dt)
c
      common /cons/tk,pk,rok,ga,rh,amol
      common /coes/ g(50)
      common /rfpr/ rf(10)
      common /cigcp/ gi(17)
      common /scrh/x(50)
      common /fld/ fluid
      common /crpr/ cr(3)
      data n2/"nitrogen"/
      data ey/"ethylene"/
      data o2/"oxygen "/
      data ch4/"methane "/
      data air/"air     "/
      data ar/"argon   "/
      data ne/"neon    "/
      data ph2/"parahydg"/
      data h2/"nhydroge"/
      r=rf(5)/amol
      ak=rf(6)
      t=temp
      t2=t*t
      t3=t2*t
      t4=t3*t
      t5=t4*t
      t6=t5*t
      t11=1.0/t
      t21=1.0/t2
      if(fluid.eq.n2) go to 100
      if(fluid.eq.o2) go to 100
      if(fluid.eq.ey) go to 100
      if(fluid.eq.ch4) go to 200
      if(fluid.eq.air) go to 300
      if(fluid.eq.ne) go to 400
      if(fluid. eq.ar) go to 400
      if(fluid.eq.ph2) go to 500
      if(fluid.eq.h2) go to 500
  100 continue
      u=g(9)*t11
      x(1)=-0.5*t21
      x(2)=-t11
      x(3)=log(t)
      x(4)=t
      x(5)=t2*0.5
      x(6)=t3/3.e0
      x(7)=t4*0.25
      x(8)=u*t/(exp(u)-1.e0)
      cphi=0.e0
      do 1 i=1,8
    1 cphi=cphi+x(i)*g(i)
      cphi=cphi*r*ak
      return
  200 continue
      t5=t4*t
      u=g(10)*t11
      x(1)=0.750*t**(4.e0/3.e0)
      x(2)=0.6*t**(5.e0/3.e0)
      x(3)=0.5e0*t2
      x(4)=(3.e0/7.e0)*t**(7.e0/3.e0)
      x(5)=(3.e0/8.e0)*t**(8.e0/3.e0)
      x(6)=(1.e0/3.e0)*t3
      x(7)=0.25e0*t4
      x(8)=0.2e0*t5
      x(9)=u*t/(exp(u)-1.e0)
      cphi=0.e0
      do 2 i=1,9
    2 cphi=cphi+x(i)*g(i)
      cphi=cphi*r*ak
      return
  300 continue
      return
  400 continue
      cphi=2.5*r*t*ak
      return
  500 continue
      x(1)=-1.e0/(t6*6.e0)
      x(2)=-1.e0/(t5*5.e0)
      x(3)=-1.e0/(t4*4.e0)
      x(4)=-1.e0/(t3*3.e0)
      x(5)=-0.5*t21
      x(6)=-t11
      x(7)=log(t)
      x(8)=t
      x(9)=t**1.5/1.5e0
      x(10)=t2*0.5
      x(11)=t**2.5*0.4
      x(12)=t3/3.e0
      x(13)=t**3.5/3.5e0
      x(14)=t4*0.25
      x(15)=t**4.5/4.5e0
      x(16)=t5*0.2
      x(17)=t6/6.e0
      cphi=0.0e0
      do 3 i=1,17
    3 cphi=cphi+x(i)*g(i)
      cphi=cphi*r*ak
c.... cphi in joules/mol-k
      return
      end
      function cpsi(temp)
      real n2,ne
c
c.... routine to calculate integral(cpo/t dt)
c
      common /cons/tk,pk,rok,ga,rh,amol
      common /coes/ g(50)
      common /rfpr/ rf(10)
      common /cigcp/ gi(17)
      common /scrh/x(50)
      common /fld/ fluid
      common /crpr/ cr(3)
      data ey/"ethylene"/
      data n2/"nitrogen"/
      data o2/"oxygen "/
      data ch4/"methane "/
      data air/"air     "/
      data ar/"argon   "/
      data ne/"neon    "/
      data ph2/"parahydg"/
      data h2/"nhydroge"/
      r=rf(5)/amol
      ak=rf(6)
      t=temp
      t2=t*t
      t3=t2*t
      t4=t3*t
      t5=t4*t
      t6=t5*t
      t7=t6*t
      t11 = 1.0/t
      if(fluid.eq.n2) go to 100
      if(fluid.eq.o2) go to 100
      if(fluid.eq.ey) go to 100
      if(fluid.eq.ch4) go to 200
      if(fluid.eq.air) go to 300
      if(fluid.eq.ne) go to 400
      if(fluid. eq.ar) go to 400
      if(fluid.eq.ph2) go to 500
      if(fluid.eq.h2) go to 500
  100 continue
      u=g(9)*t11
      eu=exp(u)
      x(1)=-1.e0/(3.e0*t3)
      x(2)=-1.e0/(2.e0*t2)
      x(3)=-t11
      x(4)=log(t)
      x(5)=t
      x(6)=t2*0.5
      x(7)=t3/3.e0
      x(8)=u/(eu-1.e0)-log(1.e0-1.e0/eu)
      cpsi=0.e0
      do 1 i=1,8
    1 cpsi=cpsi+x(i)*g(i)
      cpsi=cpsi*r*ak
      return
  200 continue
      u=g(10)*t11
      eu=exp(u)
      x(1)=3.e0*t**(1.e0/3.e0)
      x(2)=(3.e0/2.e0)*t**(2.e0/3.e0)
      x(3)=t
      x(4)=(3.e0/4.e0)*t**(4.e0/3.e0)
      x(5)=(3.e0/5.e0)*t**(5.e0/3.e0)
      x(6)=0.5e0*t2
      x(7)=(1.e0/3.e0)*t3
      x(8)=0.25e0*t4
      x(9)=u/(eu-1.e0)-log(1.e0-1.e0/eu)
      cpsi=0.e0
      do 2 i=1,9
    2 cpsi=cpsi+x(i)*g(i)
      cpsi=cpsi*r*ak
      return
  300 continue
      return
  400 continue
      cpsi=2.5*r*log(t)*ak
      return
  500 continue
      x(1)=-1.e0/(t7*7.e0)
      x(2)=-1.e0/(t6*6.e0)
      x(3)=-1.e0/(t5*5.e0)
      x(4)=-1.e0/(t4*4.e0)
      x(5)=-1.e0/(t3*3.e0)
      x(6)=-1.e0/(t2*2.e0)
      x(7)=-t11
      x(8)=log(t)
      x(9)=t**.5*2.0
      x(10)=t
      x(11)=t**1.5/1.5e0
      x(12)=t2*0.5
      x(13)=t**2.5*0.4
      x(15)=t**3.5/3.5e0
      x(14)=t3/3.e0
      x(16)=t4*0.25
      x(17)=t5*0.2
      cpsi=0.0e0
      do 3 i=1,17
    3 cpsi=cpsi+x(i)*g(i)
      cpsi=cpsi*r*ak
c.... cpsi in joules/mol-k
      return
      end
      subroutine xkappa(temp,ro,xka)
c.... subroutine to calculate the value for the
c.... isothermal compressibility of freon
c.... the density of the substance must be known
c....
      common/coes/g(50)
      common/crpr/cr(3)
      common/rfpr/rf(10)
      common/cons/tk,pk,rok,ga,rh,amol
      dimension c(50)
c.... calculation of the 1st derivative dp/dro
      call pderp(1,ro,temp,c,g,dpdro,1)
       xka= 1.0e-6/(ro*dpdro)
c.... kappa is returned to the main program
      return
      end
      subroutine beta(xka,ro,temp,b)
c.... subroutine to calculate the value for the
c.... coefficient of thermal expansion of freon
c.... the density of the substance must be known
c....
      common/coes/g(50)
      common/crpr/cr(3)
      common/rfpr/rf(10)
      common/cons/tk,pk,rok,ga,rh,amol
      dimension c(50)
c.... calculation of the first derivative dp/dt
      call pderp(5,ro,temp,c,g,dpdt,1)
c.... calculation of beta
       b = xka*dpdt*1.0e6
      return
      end
      subroutine csubv(temp,ro,c,csuv)
c.... subroutine to calculate the specific heat at
c.... constant volume of freon
c....
      dimension c(50), x(7)
      common/coes/g(50)
      common/cons/tk,pk,rok,ga,rh,amol
      common/rfpr/rf(10)
      common/crpr/cr(3)
      common/cigcp/gi(17)
      ak = rf(6)/rf(7)
      r = rf(5)
      t = temp
      ts = sqrt(t)
      t2 = t * t
      t3 = t * t2
      t4 = t * t3
      t5 = t * t4
      t11 = 1.0/t
      t21 = 1.0/t2
      t31 = 1.0/t3
      t41 = 1.0/t4
      t51 = 1.0/t5
      ts1 = 1.0/ts
c.... calculation of the powers of gamma
      ga2 = ga * ga
      ga3 = ga * ga2
      ga4 = ga * ga3
      ga5 = ga * ga4
      ga6 = ga * ga5
      ga7 = ga * ga6
      ga11 = 1.0/ga
      ga21 = 1.0/ga2
      ga31 = 1.0/ga3
      ga41 = 1.0/ga4
      ga51 = 1.0/ga5
      ga61 = 1.0/ga6
      ga71 = 1.0/ga7
c....calculation of the integral (t/ro**2)*((d**2*p)/(d*t**2))dro
c....between the limits of d = ro and d = 0
      do 10 i = 1,2
      d = ro
      if(i.eq.2)d = 0.0
      d2 = d * d
      d3 = d * d2
      d4 = d * d3
      d5 = d * d4
      d6 = d * d5
      d7 = d * d6
      d8 = d * d7
      d9 = d * d8
      d10 = d * d9
      d11 = d * d10
      d12 = d * d11
      e = exp(ga*d2)
      c(1) = 0.0
      c(2) = - 0.25 * d*ts1
      c(3) = 0.0
      c(4) = 2.0 * d*t21
      c(5) = 6.0 * d*t31
      c(6) = 12.0 * d*t41
      c(7) = 20.0 * d*t51
      c(8) = d2 * t
      c(9) = 0.0
      c(10) = 0.0
      c(11) = d2*t21
      c(12) = 3.0 * d2*t31
      c(13) = (2.0/3.0) * d3*t11
      c(14) = 0.0
      c(15) = 0.0
      c(16) = (2.0/3.0) * d3*t21
      c(17) = 2.0 * d3*t31
      c(18) = 0.5 * d4 * t
      c(19) = 0.0
      c(20) = 0.0
      c(21) = 0.5 * d4*t21
      c(22) = 1.5 * d4*t31
      c(23) = 0.4 * d5*t21
      c(24) = 1.2 * d5*t31
      c(25) = (1.0/3.0) * d6*t21
      c(26) = d6*t31
      c(27) = (2.0/7.0) * d7*t21
      c(28) = (6.0/7.0) * d7*t31
      c(29) = 0.25 * d8*t21
      c(30) = 0.75 * d8*t31
      c(31) = 0.2 * d10*t21
      c(32) = 0.6 *d10*t31
      c(33) = (3.0/(ga*t3))*e
      c(34) = (6.0/(ga*t4))*e
      c(35) = (10.0/(ga*t5))*e
      deg1 = (d2*ga11 - 1.0*ga21)*0.5*e
      c(36) = deg1 * 6.0*t31
      c(37) = deg1 * 20.0*t51
      deg2 = (0.5 * d4*ga11 - d2*ga21 + 1.0*ga31)*e
      c(38) = deg2 * 6.0*t31
      c(39) = deg2 * 12.0*t41
      deg3 = (0.5 * d6*ga11 - 1.5 * d4*ga21 + 3.0 * d2*ga31 -
     1 3.0*ga41)*e
      c(40) = deg3 * 6.0*t31
      c(41) = deg3 * 12.0*t41
      c(42) = deg3 * 20.0*t51
      deg4 = (0.5*d8*ga11 - 2.0*d6*ga21 + 6.0*d4*ga31 - 12.0*d2*ga41 +
     112.0*ga51)*e
      c(43) = deg4 * 6.0*t31
      c(44) = deg4 * 12.0*t41
      c(45) = deg4 * 20.0*t51
      deg5 = (0.5 * d10*ga11 - 2.5 * d8*ga21 + 10.0 * d6*ga31 -
     130.0 * d4*ga41 + 60.0 * d2*ga51 - 60.0*ga61)*e
      c(46) = deg5 * 6.0*t31
      c(47) = deg5 * 12.0*t41
      c(48) = deg5 * 20.0*t51
      deg6 = (0.5 * d12*ga11 - 3.0 * d10*ga21 + 15.0 * d8*ga31 - 60.0*
     1d6*ga41 + 180.0 * d4*ga51 - 360.0 * d2*ga61  + 360.0*ga71)*e
      c(49) = deg6 * 12.0*t41
      c(50) = deg6 * 20.0*t51
      n = 50
      sum100 = 0.0
      do 20 ii = 1,n
   20 sum100 = sum100 + c(ii) * g(ii)
      if(i.eq.1)sum10a = sum100
      if(i.eq.2)sum10b = sum100
   10 continue
c.... calculation of cpo at constant t
c.... gi values used are stored in the common block
c.... the value of the conversion factor to correct
c.... the units is ak.  ak = 1000.0/137.368, (gm/kg)*(g-moles/gm)
c.... it to be ak
      x(1) = gi(1)*t31
      x(2) = gi(2)*t21
      x(3) = gi(3)*t11
      x(4) = gi(4)
      x(5) = gi(5)*t
      x(6) = gi(6)*t2
      x(7) = gi(7)*t3
      sumg = 0.0
      do 30 k = 1,7
   30 sumg = sumg + x(k)
      ep = exp(gi(9)*t11)
      gxt = (gi(8)*(gi(9)*gi(9))*ep)/(t2*(ep-1.0)*(ep-1.0))
      cpo = r * (sumg - gxt)
       csuv=(cpo-r-(sum10a-sum10b))*ak*1000.
      return
      end
      subroutine csubp(temp,ro,c,csuv,csup)
c.... subroutine to calculate the specific heat at
c.... constant pressure
c.... csubp is calculated from csubv
      common/cons/tk,pk,rok,ga,rh,amol
      common/rfpr/rf(10)
      common/crpf/cr(3)
      common/coes/g(50)
      dimension c(50)
      ak = rf(6)/rf(7)
      d = ro
      d2 = d * d
c.... calculation of dpdro
      call pderp(1,d,temp,c,g,dpdro,1)
c.... calculation of dpdt
      call pderp(5,d,temp,c,g,dpdt,1)
c.... dpdro and dpdt are necessary in the calculation
c.... of csubp
c.... calculation of csubp
       csup=csuv+(temp/d2*((dpdt*dpdt)/dpdro))*ak*1000.
      return
      end
      subroutine sspeed(ro,temp,ssp,csuv,csup)
      common/coes/g(50)
       common/rfpr/rf(10)
      dimension c(50)
c.... calculation of the speed of sound
c.... calculation of dpdro
      call pderp(1,ro,temp,c,g,dpdro,1)
c.... sound speed calculation
       ssp=sqrt((csup/csuv)*dpdro*1.0e6/rf(7))
      return
      end
      subroutine sat1fr(t,s,n)
      common/coes/g(50)
      common/formul/kfrm,lrange
      common/dat/nco
      common/uplmd/fachi
      common/rfpr/rf(10)
      common/crpr/cr(3)
      common/itt/ic,icc
      common/cons/tk,pk,rok,ga,rh,amol
      common/cigcp/gi(17)
      common/fld/fluid
      common/csl/cl(25)
      common/csv/cv(25)
      common/cvpn/gv(21)
      common/scrh/x(50)
      common/fast/a(1)
      dimension c(50)
      real t(1),s(13,1)
c the common block has been installed and the value c which
c should be passed into the subroutines is simensioned
c
c
c calculation of the equation of state
c
      do 10 i = 1,n
       if(t(i).ge.tk)go to 50
       call hs50(t(i),rog,p,hg,ug,sg,1,1,g,3)
       xrog = rog*rf(7)
       call hs50(t(i),rol,p,hl,ul,sl,1,1,g,2)
       xrol = rol*rf(7)
       call xkappa(t(i),rog,xkag)
       call xkappa(t(i),rol,xkal)
       call beta(xkag,rog,t(i),bg)
       call beta(xkal,rol,t(i),bl)
       call csubv(t(i),rog,c,csuvg)
       call csubv(t(i),rol,c,csuvl)
       call csubp(t(i),rog,c,csuvg,csupg)
       call csubp(t(i),rol,c,csuvl,csupl)
       call sspeed(rog,t(i),sspg,csuvg,csupg)
       call sspeed(rol,t(i),sspl,csuvl,csupl)
c installed the calculated values into the arrays that are to be
c printed by the tables calling program
c
       s(1,i) = p*1.0e6
       s(2,i) = 1.0/xrol
       s(8,i) = 1.0/xrog
       s(3,i) = ul
       s(9,i) = ug
       s(4,i) = bl
       s(10,i) = bg
       s(5,i) = xkal
       s(11,i) = xkag
       s(6,i) = csupl
       s(12,i) = csupg
       s(7,i) = sl
       s(13,i) = sg
   10 continue
   50 if(lines(0).lt.57)write(6,2000)
 2000 format("1")
      write(6,2002)
 2002 format("0"55x"saturation properties"/"0"5x"temperature"
     *8x"pressure"3x"liq.sp.volume"2x"liq.int.energy liq.therm.expsn"4x
     *"liq.compress"3x"liq.heat cap."5x"liq.entropy"/
     *36x"vap.sp.volume"2x"vap.int.energy vap.therm.expsn"4x
     *"vap.compress"3x"vap.heat cap."5x"vap.entropy")
      do 12 i = 1,n
       if(lines(0).gt.3)go to 13
          write(6,2000)
          write(6,2002)
   13     write(6,2003)t(i),(s(j,i),j=1,13)
 2003 format("0",1p8e16.6/33x6e16.6)
   12 continue
      return
      end
      subroutine sat2fr(p,s,n)
       common/coes/g(50)
       common/formul/kfrm,lrange
       common/dat/nco
       common/uplmd/fachi
       common/rfpr/rf(10)
       common/crpr/cr(3)
       common/itt/ic,icc
       common/cons/tk,pk,rok,ga,rh,amol
       common/cigcp/gi(17)
       common/fld/fluid
       common/csl/cl(25)
       common/csv/cv(25)
       common/cvpn/gv(21)
       common/scrh/x(50)
       common/fast/a(1)
       dimension c(50)
       real t(50),s(13,1),p(1),pp(50)
c
c this subroutine calculated the saturation values when a
c given pressure is passed - the saturation temperature
c is calculated in a separate subroutine
c
c
       do 10 i = 1, n
          pp(i) = p(i)*1.0e-6
          if(pp(i).ge.pk)go to 50
          call tsat(ts,pp(i))
          t(i) = ts
          if(t(i).ge.tk)go to 50
          call hs50(t(i),rog,pr,hg,ug,sg,1,1,g,3)
          xrog = rog*rf(7)
          call hs50(t(i),rol,pr,hl,ul,sl,1,1,g,2)
          xrol = rol*rf(7)
          call xkappa(t(i),rog,xkag)
          call xkappa(t(i),rol,xkal)
          call beta(xkag,rog,t(i),bg)
          call beta(xkal,rol,t(i),bl)
          call csubv(t(i),rog,c,csuvg)
          call csubv(t(i),rol,c,csuvl)
          call csubp(t(i),rog,c,csuvg,csupg)
          call csubp(t(i),rol,c,csuvl,csupl)
          call sspeed(rog,t(i),sspg,csuvg,csupg)
          call sspeed(rol,t(i),sspl,csuvl,csupl)
c
c setting the s array
c
          s(1,i) = t(i)
          s(2,i) = 1.0/xrol
          s(8,i) = 1.0/xrog
          s(3,i) = ul
          s(9,i) = ug
          s(4,i) = bl
          s(10,i) = bg
          s(5,i) = xkal
          s(11,i) = xkag
          s(6,i) = csupl
          s(12,i) = csupg
          s(7,i) = sl
          s(13,i) = sg
   10 continue
   50 if(lines(0).lt.57) write(6,2000)
 2000 format("1")
      write(6,2002)
 2002 format("0"55x"saturation properties"/"0"8x"pressure"5x
     *"temperature"3x"liq.sp.volume"2x"liq.int.energy liq.therm.expsn"4x
     *"liq.compress"3x"liq.heat cap."5x"liq.entropy"/
     *36x"vap.sp.volume"2x"vap.int.energy vap.therm.expsn"4x
     *"vap.compress"3x"vap.heat cap."5x"vap.entropy")
      do 12 i = 1,n
         if(lines(0).gt.3)go to 13
         write(6,2000)
         write(6,2002)
   13 write(6,2003)p(i),(s(j,i),j=1,13)
 2003 format("0"1p8e16.6/33x6e16.6)
   12 continue
      return
      end
      subroutine tsat(ts,p)
      common/crpr/cr(3)
      common/cvpn/gv(21)
      common/cons/tk,pk,rok,ga,rh,amol
c
c the cr array supplies the critical pressure,critical density
c and the critical temperature
c
c      cr(1) = critical pressure
c      cr(2) = critical density
c      cr(3) = critical temperature
c
c the gv array passes the vapor pressure coefficients that are
c used in the calculation of the saturation temperature at a
c given pressure
c
       pc = cr(1)
       tc = cr(3)
       apc = log(p/pc)
       to = tc/(1.0 + (apc/gv(2)))
       if(to.ge.tc)to = tc-0.01
       t = to
       ic = 0
   10 continue
       ic =ic + 1
       t22 = (1.0 - t/tc)
       if(t22.le.0.00)t22=0.001
       t12 = sqrt(t22)
       t32 = t12 * t22
       t42 = t12 * t32
       t52 = t12 * t42
       t62 = t12 * t52
       t72 = t12 * t62
       tsum = gv(1)*t12 + gv(2)*t22 + gv(3)*t32 + gv(4)*t42 +
     * gv(5)*t52 + gv(6)*t62 + gv(7)*t72 - t *apc/tc
      dtsum=(-0.5*gv(1)/t12-gv(2) - 1.5*gv(3)*t12 - 2.0*gv(4)*
     *t22 - 2.5*gv(5)*t32 - 3.0*gv(6)*t42 - 3.5*gv(7)*t52 - apc)
     */tc
      delt = -tsum/dtsum
      adelt = abs(delt)
      t = t + delt
      ts = t
      if(adelt.lt.0.001)go to 20
      go to 10
   20 continue
      return
      end
