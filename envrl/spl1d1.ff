       subroutine spl1d1 (nx,x,f0,f2,iop,ij,a,b,c)
c  Computes one dimensional spline values.
c
c  nx   Number of points in the interpolation.
c  x    Origin of table of independent variable.
c  f0   Origin of table of dependent variable.
c  f2   Array of dimension nx which contains the calculated second
c       derivatives upon return.
c  iop  Array of dimension 2 which contains combinations of the
c       integers 1 thru 5 used to specify the boundary conditions.
c  ij   Spacing in the f0 and f2 tables.
c  a,b,c   Arrays of dimension nx used for temporary storage.
c
       implicit none
c
       integer ij,iop(2),nx
       real a(2),b(2),c(2),f0(2),f2(2),x(4)
c
       integer i,j,j1,j2,k,k1,k2,k3,k4,l1,l2,l3,m,ml,mk
       real a1,a2,a3,a4,a5,a6,b1,b2,b3,b4,b5,b6,bill,bob,c1,c2,con,
     * d1,d2,don,e,r3,r6
       parameter (r3=1.0/3.0, r6=1.0/6.0)
       external fabend
c
       k = nx - 1
       a(2) = -(x(2) - x(1))*r6
       b(2) =(x(3) - x(1))*r3
       f2(ij+1) = (f0(2*ij+1) - f0(ij+1))/(x(3) - x(2)) -
     * (f0(ij+1) - f0(1))/(x(2) - x(1))
       if (nx .ne. 3) then
         do 10 i = 3,k
           m = (i - 1)*ij + 1
           j1 = m + ij
           j2 = m - ij
           con = (x(i+1) - x(i-1))*r3
           don = (x(i) - x(i-1))*r6
           b(i) = con - (don**2)/b(i-1)
           e = (f0(j1) - f0(m))/(x(i+1) - x(i)) - (f0(m) - f0(j2))/
     *     (x(i) - x(i-1))
           f2(m) = e - (don*f2(j2))/b(i-1)
           a(i) = -(don*a(i-1))/b(i-1)
   10    continue
       endif
       k1 = (nx - 2)*ij + 1
       c(nx-1) = (x(nx-1) - x(nx))*r6/b(nx-1)
       f2(k1) = f2(k1)/b(nx-1)
       a(nx-1) = a(nx-1)/b(nx-1)
       k2 = k - 1
       if (nx .ne. 3) then
         do 20 i = 2,k2
           j = nx - i
           con = (x(j+1) - x(j))*r6
           a(j) = (a(j) - con*a(j+1))/b(j)
           c(j) = -con*c(j+1)/b(j)
           k3 = (j - 1)*ij + 1
           m = k3 + ij
           f2(k3) = (f2(k3) - con*f2(m))/b(j)
   20    continue
       endif
       k4 = (nx - 1)*ij + 1
       if (iop(1) .eq. 5) go to 200
  201  c1 = f2(1)
       if (iop(2) .eq. 5) go to 202
  203  c2 = f2(k4)
       go to 205
  200  if (nx .lt. 4) go to 300
       a1 = x(1) - x(2)
       a2 = x(1) - x(3)
       a3 = x(1) - x(4)
       a4 = x(2) - x(3)
       a5 = x(2) - x(4)
       a6 = x(3) - x(4)
       f2(1) = f0(1)*(1.0/a1 + 1.0/a2+1.0/a3) - a2*a3*f0(ij+1)/
     * (a1*a4*a5) + a1*a3*f0(2*ij+1)/(a2*a4*a6 ) -
     * a1*a2*f0(3*ij+1)/(a3*a5*a6)
       go to 201
  202  if (nx .lt. 4) go to 300
       b1 = x(nx) - x(nx-3)
       b2 = x(nx) - x(nx-2)
       b3 = x(nx) - x(nx-1)
       b4 = x(nx-1) - x(nx-3)
       b5 = x(nx-1) - x(nx-2)
       b6 = x(nx-2) - x(nx-3)
       l1 = k4 - ij
       l2 = l1 - ij
       l3 = l2 - ij
       f2(k4) = -b2*b3*f0(l3)/(b6*b4*b1) + b1*b3*f0(l2)/(b6*b5*b2) -
     * b1*b2*f0(l1)/(b4*b5*b3) + f0(k4)*(1.0/b1 + 1.0/b2 + 1.0/b3)
       go to 203
  205  do 50 i=1,k
         m = (i - 1)*ij + 1
         mk = iop(1)
         go to (62,64,66,68,66), mk
         call fabend
   62    if (i .eq. 1) then
           a(1) = -1.0
           c(1) = 0.0
         else
           bob = 0.0
         endif
         go to 500
   64    if (i .eq. 1) then
           a(1) = -1.0
           c(1) = 0.0
           f2(1) = 0.0
         else
           if (i .le. 2) then
             bob = -c1
           else
             bob = 0.0
           endif
         endif
         go to 500
   66    if (i .eq. 1) then
           a(1) = -(x(2) - x(1))*r3
           c(1) = 0.0
           f2(1) = -c1 + (f0(ij+1) - f0(1))/(x(2) - x(1))
         else
           if (i .le. 2) then
             bob = (x(2) - x(1))*r6
           else
             bob = 0.0
           endif
         endif
         go to 500
   68    if (i .eq. 1) then
           a(1) = -1.0
           c(1) = 1.0
           f2(1) = 0.0
         else
           bob = 0.0
         endif
  500    ml = iop(2)
         go to (120,130,140,150,140), ml
         call fabend
  120    if (i .eq. 1) then
           a(nx) = 0.0
           c(nx) = -1.0
         else
           bill = 0.0
         endif
         go to 70
  130    if (i .eq. 1) then
           a(nx) = 0.0
           c(nx) = -1.0
           f2(k4) = 0.0
         else
           if (i .eq. k) then
             bill = -c2
           else
             bill = 0.0
           endif
         endif
         go to 70
  140    if (i .eq. 1) then
           a(nx) = 0.0
           c(nx) = (x(nx-1) - x(nx))*r3
           f2(k4) = c2 - (f0(k4) - f0(k1))/(x(nx) - x(nx-1))
         else
           if (i .eq. k) then
             bill = (x(nx) - x(nx-1))*r6
           else
             bill = 0.0
           endif
         endif
   70    if (i .ne. 1) then
           f2(1) = f2(1) - bob*f2(m)
           f2(k4) = f2(k4) - bill*f2(m)
           a(1) = a(1) - bob*a(i)
           a(nx) = a(nx) - bill*a(i)
           c(1) = c(1) - bob*c(i)
           c(nx) = c(nx) - bill*c(i)
         endif
   50  continue
       go to 100
  150  if (i .eq. 1) then
         a(nx) = 0.0
         c(nx) = (x(nx-1) + x(1) - x(nx) - x(2))*r3
         f2(k4) = (f0(ij+1) - f0(1))/(x(2) - x(1)) - (f0(k4) - f0(k1))/
     *   (x(nx) - x(nx-1))
       else
         if (i .eq. 2) then
           bill = (x(2) - x(1))*r6
         else
           if (i .eq. k) then
             bill = (x(nx) - x(nx-1))*r6
           else
             bill = 0.0
           endif
         endif
       endif
  100  con = a(1)*c(nx) - c(1)*a(nx)
       d1 = - f2(1)
       d2 = - f2(k4)
       f2(1) = (d1*c(nx) - c(1)*d2)/con
       f2(k4) = (a(1)*d2 - d1*a(nx))/con
       do 110 i = 2,k
         m = (i - 1)*ij + 1
         f2(m) = f2(m) + a(i)*f2(1) + c(i)*f2(k4)
  110  continue
       return
c
  300  write (6,3001)
 3001  format ('Number of points input to spl1d1 is less than 4, results
     * are incorrect.')
       stop 'spl1d1'
       end
