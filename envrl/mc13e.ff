       subroutine mc13e (n,icn,licn,ip,lenr,arp,ib,num,lowl,numb,prev)
!
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
       integer licn,n,num
       integer arp(:),ib(:),icn(:),ip(:),lenr(:),lowl(:),numb(:),
     & prev(:)
!
!  arp(i) is one less than the number of unsearched edges leaving node
!  i. At the end of the algorithm it is set to a permutation which puts
!  the matrix in block lower triangular form.
!  ib(i) is the position in the ordering of the start of the ith block.
!  ib(n+1-i) holds the node number of the ith node on the stack.
!  lowl(i) is the smallest stack position of any node to which a path
!  from node i has been found. It is set to n+1 when node i is removed
!  from the stack.
!  numb(i) is the position of node i in the stack if it is on it, is the
!  permuted order of node i for those nodes whose final position has
!  been found and is otherwise zero.
!  prev(i) is the node at the end of the path when node i was placed on
!  the stack.
!
       integer dummy,i,i1,i2,icnt,ii,isn,ist,ist1,iv,iw,j,k,lcnt,
     & nnm1,stp
!
!  icnt is the number of nodes whose positions in final ordering have
!  been found.
       icnt = 0
!
!  num is the number of blocks that have been found.
       num = 0
       nnm1 = n + n - 1
!  Initialization of arrays.
       do j = 1,n
         numb(j) = 0
         arp(j) = lenr(j) - 1
       enddo
!
       do 120 isn = 1,n
!  Look for a starting node.
         if (numb(isn).ne.0) go to 120
         iv = isn
!  ist is the number of nodes on the stack; it is the stack pointer.
         ist = 1
!  Put node iv at beginning of stack.
         lowl(iv) = 1
         numb(iv) = 1
         ib(n) = iv
!
!  The body of this loop puts a new node on the stack or backtracks.
         do dummy = 1 ,nnm1
           i1 = arp(iv)
!  Have all edges leaving node iv been searched.
           if (i1.lt.0) go to 60
           i2 = ip(iv) + lenr(iv) - 1
           i1 = i2 - i1
!
!  Look at edges leaving node iv until one enters a new node or all
!  edges are exhausted.
           do ii=i1,i2
             iw=icn(ii)
!  Has node iw been on stack already?
             if (numb(iw).eq.0) go to 100
!  Update value of lowl(iv) if necessary.
             lowl(iv)=min0(lowl(iv),lowl(iw))
           enddo
!
!  There are no more edges leaving node iv.
           arp(iv) = -1
!  Is node iv the root of a block?
   60      if (lowl(iv).lt.numb(iv)) go to 90
!
!  Order nodes in a block.
           num = num + 1
           ist1 = n + 1 - ist
           lcnt =icnt + 1
!  Peel block off the top of the stack starting at the top and working
!  down to the root of the block.
           do stp = ist1,n
             iw = ib(stp)
             lowl(iw) =n + 1
             icnt = icnt + 1
             numb(iw) = icnt
             if (iw.eq.iv) exit
           enddo
           ist = n - stp
           ib(num) = lcnt
! Are there any nodes left on the stack?
           if (ist.ne.0) go to 90
!  Have all the nodes been ordered?
           if (icnt.lt.n) go to 120
           go to 130
!
!  Backtrack to previous node on path.
   90      iw = iv
           iv = prev(iv)
!  Update value of lowl(iv) if necessary.
           lowl(iv) = min(lowl(iv),lowl(iw))
           cycle
!
!  Put new node on the stack.
 100       arp(iv) = i2 - ii - 1
           prev(iw) = iv
           iv = iw
           ist = ist + 1
           lowl(iv) = ist
           numb(iv) = ist
           k = n + 1 - ist
           ib(k) = iv
         enddo
  120  continue
!
!  Put permutation in the required form.
  130  do i = 1,n
         ii = numb(i)
         arp(ii) = i
       enddo
       return
       end
