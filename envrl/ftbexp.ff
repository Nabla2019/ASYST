       subroutine ftbexp (ityp,i1,i2)
c
c  This subroutine expands ftb space in scm-lcm.
c  If ityp is 0, i1 and i2 become new field lengths.
c  If ityp is 1, scm and lcm are lengthened by i1 and i2.
c
c  Cognizant engineer: rjw
c
*call ftbcom
c
$if -def,in32,1
       parameter (msk=1073741823)
c
c  check ityp.
       if (ityp.lt.0 .or. ityp.gt.1) call ftberr (65)
c  convert arguments to field lengths if ityp is one, and check
c  if increments are negative.
       if (ityp .eq. 0) go to 10
       j1 = i1 + szz(8)
       j2 = i2 + szz(2)
       go to 11
   10  j1 = i1
       j2 = i2
   11  if (j1.lt.szz(8) .or. j2.lt.szz(2)) call ftberr (66)
c  get new space, set maxz and size.
       maxz(1) = szz(8)
       maxz(2) = szz(2)
       call ftbmem (j1,j2)
       szz(8) = j1
       szz(2) = j2
       j1 = j1 - maxz(1)
       j2 = j2 - maxz(2)
       maxz(1) = szz(8) - locf(a(1))
       szz(1) = maxz(1)
       maxz(2) = 1
$if -def,lcm,1
       if (szz(2) .ne. 0) maxz(2) = szz(2) - locf(b(1))
$if def,lcm,1
       if (szz(2).ne.0) maxz(2) = szz(2) - (.not.mask(1).and.locf(b(1)))
       size(1) = size(1) + j1
       size(2) = size(2) + j2
c  move links if necessary
       if (hilo .or. j1.eq.0) go to 20
       maxz(1) = maxz(1) - 200
       call ftbmov (a(link1),a(maxz(1)),-200)
       if (minz(1) .gt. link1) minz(1) = link1
       link1 = maxz(1)
$if -def,in32,1
       ia(link1+3) = ior(ishft(link1,30),200)
$if def,in32,2
       ia(1,link1+3) = link1
       ia(2,link1+3) = 200
       if (nolink .gt. 1) go to 12
       lasdes = lasdes + j1
       nexdes = nexdes + j1
       go to 20
$if -def,in32,2
  12   k = ishft( ia(link1+199),-30) + 196
       ia(k+1) = ior(ishft(link1+192,30),iand(ia(k+1),msk))
$if def,in32,2
   12  k = ia(1,link1+199) + 196
       ia(1,k+1) = link1 + 192
       if (nolink .gt. 2) go to 15
       if (nofils .eq. 0) lasdes = lasdes + j1
   15  dlt = .true.
       call ftbslk
c
   20  return
       end
