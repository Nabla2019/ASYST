       subroutine sth2x1 (a,s,err)
c   compute water thermodynamic properties as a function of temperature
c   and quality
$if -def,in32,1
       real a(1),s(26)
$if def,in32,2
       implicit real*8(a-h,o-z)
       real*8 a(1),s(26)
$if def,lcm,1
       level 2, a
       logical err
c
       common /sth2xc/ nt,np,ns,ns2,klp,klp2,llp,nt5,jpl
       save /sth2xc/
c
$if -def,in32,1
       real k(9),c(9),b(6),cc(3)
$if def,in32,1
       real*8 k(9),c(9),b(6),cc(3)
       logical s1,s2,s3,s4
$if -def,in32,1
       parameter (msk=1073741823)
$if def,in32,2
       integer iunp(2)
       equivalence (unp,iunp(1))
       data   k   /-7.691234564e0,-26.08023696e0,-168.1706546e0,
     *              6.423285504e1,-1.189646225e2, 4.167117320e0,
     *              2.097506760e1, 1.e9,          6.e0/
       data   crt/647.3e0/,crp/22120000.e0/
       data   pxxx/1378.951459e0/,pxxy/3102640.782e0/,
     * pxx1/1.450377377e-3/,pxx2/1.450377377e-4/
       data   plow/611.2444e0/
       data   c   /274.9043833e0,13.66254889e0,1.176781611e0,
     * -.189693e0,8.74535666e-2,-1.7405325e-2,2.147682333e-3,
     * -1.383432444e-4,3.800086611e-6/
       data   b   /6669.352222e0,-4658.899e0,1376.536722e0,
     * -201.9126167e0,14.82832111e0,-.4337434056e0/
       data cc/0.84488898e0,2.9056480e0,219.74589e0/
c
c  Check for valid input.
       s1 = .false.
   15  if (s(1).lt.a(1) .or. s(1).gt.a(ns)) go to 101
       if (s(9).lt.0.0 .or. s(9).gt.1.0) go to 101
       if (s1) go to 16
       fr = s(1)/crt
       fr1 = 1.0 - fr
       s(10) = crp* exp((((((k(5)*fr1+k(4))*fr1+k(3))*fr1+k(2))*fr1+
     * k(1))*fr1)/(((k(7)*fr1+k(6))*fr1+1.0)*fr) - fr1/(k(8)*fr1*fr1+
     * k(9)))
       s(2) = s(10)
       entry sth2xb (a,s,err)
!  If input is exactly at the critical point, set results directly from 
!  table without interpolation.
       if (s(1).eq.a(ns) .or. s(2).eq.a(nt+ns2)) then
         kp = klp + ns*13
         s(11) = a(kp+1)
         s(12) = a(kp+7)
         s(13) = a(kp+2)
         s(14) = a(kp+8)
         s(15) = s(14) + s(2)*s(11)
         s(16) = s(15) + s(2)*s(12)
         s(17) = a(kp+3)
         s(18) = a(kp+9)
         s(19) = a(kp+4)
         s(20) = a(kp+10)
         s(21) = a(kp+5)
         s(22) = a(kp+11)
         s(25) = a(kp+6)
         s(26) = a(kp+12)
         fr = 1.0 - s(9)
         s(3) = s(9)*s(12) + fr*s(11)
         s(4) = s(9)*s(14) + fr*s(13)
         s(5) = s(9)*s(16) + fr*s(15)
         s(24) = s(9)*s(25) + fr*s(26)
         return
       endif
$if -def,in32,5
$if def,cray,1
  16   ip = shiftr(s(23),30)
$if -def,cray,1
  16   ip = ishft(int(s(23)),-30)
       jp = and(int(s(23)),msk)
$if def,in32,3
   16  unp = s(23)
       ip = iunp(1)
       jp = iunp(2)
       s2 = .false.
       s3 = .false.
       if (ip.le.0 .or. ip.ge.ns) ip = 1
       if (jp.le.0 .or. jp.ge.ns2) jp = 1
c   set indexes in temperature and pressure tables for saturation
c   computations
   11  if (s(1) .ge. a(ip)) go to 10
       ip = ip - 1
       go to 11
   10  if (s(1) .lt. a(ip+1)) go to 12
       ip = ip + 1
       go to 10
   12  jpp = jp + nt
  111  if (s(10) .ge. a(jpp)) go to 110
       jpp = jpp - 1
       if (jpp .gt. nt) go to 111
       s3 = .true.
       go to 112
  110  if (s(10) .lt. a(jpp+1)) go to 112
       jpp = jpp + 1
       if (jpp .lt. jpl) go to 110
       s2 = .true.
  112  jp = jpp - nt
       kp2 = klp2 + jp*13
       kp = klp + ip*13
       if (s3 .or. a(jpp).le. a(kp)) go to 113
       pa = a(jpp)
       ta = a(kp2)
       ia = kp2
       go to 115
  113  ta = a(ip)
       pa = a(kp)
       ia = kp
  115  if (s2 .or. a(jpp+1).ge.a(kp+13)) go to 116
       s4 = jp + 1 .eq. nt + ns2
       pb = a(jpp+1)
       tb = a(kp2+13)
       ib = kp2 + 13
       go to 117
  116  s4 = ip + 1 .eq. nt
       tb = a(ip+1)
       pb = a(kp+13)
       ib = kp + 13
  117  fr1 = s(1) - ta
       fr = fr1/(tb-ta)
c   two phase fluid.
       if (s4) then
         s(11) = a(ia+1) + (a(ia+1) - a(ib+1))*fr
         s(12) = a(ia+7) + (a(ib+7) - a(ib+7))*fr
         s(18) = a(ia+9) + fr*tb/s(1)*(a(ib+9)-a(ia+9))
         s(20) = a(ia+10) + (s(10) - pa)/(pb - pa)*pb/s(10)*
     &   (a(ib+10) - a(ia+10))
       else
         hfg1 = a (ia+8) - a (ia+2) + pa * ( a (ia+7) - a (ia+1))
         hfg2 = a (ib+8) - a (ib+2) + pb * ( a (ib+7) - a (ib+1))
         dpdt1 = hfg1 / ( ta   *( a(ia+7)- a(ia+1)))
         dpdt2 = hfg2 / ( tb   *( a(ib+7)- a(ib+1)))
         f1 = a (ia+1) * ( a (ia+3) - a (ia+4) * dpdt1)
         f2 = a (ib+1) * ( a (ib+3) - a (ib+4) * dpdt2)
         d1 = f1 * ( tb - ta )
         d2 = f2 * ( tb - ta )
         c0 = a (ia+1)
         c1 = d1
         c2 = 3.0*(a(ib+1) - a(ia+1)) - d2 - 2.0*d1
         c3 = d2 + d1 - 2. *( a(ib+1) - a(ia+1))
         s (11) = c0 + fr*(c1 + fr*(c2 + fr*c3))
         f1 = a (ia+7) * ( a (ia+9) - a (ia+10)* dpdt1)
         f2 = a (ib+7) * ( a (ib+9) - a (ib+10)* dpdt2)
         d1 = f1 * ( tb - ta )
         d2 = f2 * ( tb - ta )
         c0 = a (ia+7)
         c1 = d1
         c2 = 3.0*( a(ib+7) - a(ia+7)) - d2 - 2.0*d1
         c3 = d2 + d1 - 2.0*( a(ib+7) - a(ia+7))
         s(12) = c0 + fr *(c1 + fr *(c2 + fr*c3))
         s(18) = a(ia+9) + fr*tb/s(1)*(a(ib+9)-a(ia+9))
         s(20) = a(ia+10) + (s(10) - pa)/(pb - pa)*pb/s(10)*
     &   (a(ib+10) - a(ia+10))
       endif
       s(13) = a(ia+2) + (a(ib+2)-a(ia+2))*fr
       s(14) = a(ia+8) + (a(ib+8)-a(ia+8))*fr
       s(15) = s(13) + s(10)*s(11)
       s(16) = s(14) + s(10)*s(12)
       s(17) = a(ia+3) + (a(ib+3)-a(ia+3))*fr
       s(19) = a(ia+4) + (a(ib+4)-a(ia+4))*fr
       s(21) = a(ia+5) + (a(ib+5)-a(ia+5))*fr
       s(22) = a(ia+11) + (a(ib+11)-a(ia+11))*fr
       s(25) = a(ia+6) + (a(ib+6)-a(ia+6))*fr
       s(26) = a(ia+12) + (a(ib+12)-a(ia+12))*fr
       fr = 1.0 - s(9)
       s(3) = fr*s(11) + s(9)*s(12)
       s(4) = fr*s(13) + s(9)*s(14)
       s(5) = fr*s(15) + s(9)*s(16)
       s(24) = fr*s(25) + s(9)*s(26)
$if -def,in32,1
       s(23) = or(int(shift(ip,30)),jp)
$if def,in32,3
       iunp(1) = ip
       iunp(2) = jp
       s(23) = unp
       err = .false.
   20  return
       entry sth2x2 (a,s,err)
c  Compute water thermodynamic properties as a function of pressure
c  and quality.
       s1 = .true.
c  Temporary patch to be able to do ice condenser debug runs.
       s(2) = max(s(2),plow)
       s(10) = s(2)
       if (s(2).lt.plow .or. s(2).gt.crp) go to 101
       if (s(2) .lt. pxxx) go to 18
       if (s(2) .gt. pxxy) go to 17
       fr = log(pxx1*s(2))
       s(1) = (((((((fr*c(9)+c(8))*fr+c(7))*fr+c(6))*fr+c(5))*fr+c(4))*
     * fr+c(3))*fr+c(2))*fr+c(1)
       go to 14
   17  fr = log(pxx2*s(2))
       s(1) = ((((fr*b(6)+b(5))*fr+b(4))*fr+b(3))*fr+b(2))*fr+b(1)
       s(1) = min(s(1),crt)
       go to 14
   18  fr = log(s(2))
       s(1) = (cc(1)*fr + cc(2))*fr + cc(3)
   14  fr = s(1)/crt
       fr1 = 1.0 - fr
       d1 = ((((k(5)*fr1+k(4))*fr1+k(3))*fr1+k(2))*fr1+k(1))*fr1
       d2 = (((5.0*k(5)*fr1+4.0*k(4))*fr1+3.0*k(3))*fr1+2.0*k(2))*fr1 +
     * k(1)
       c2 = k(7)*fr1
       c1 = (c2+k(6))*fr1+1.0
       c2 = 2.0*c2 + k(6)
       f2 = k(8)*fr1
       f1 = 1.0/(f2*fr1 + k(9))
       f2 = 2.0*f2
       hfg1 = 1.0/(fr*c1)
       hfg2 = fr1*f1
       pa = crp*exp(d1*hfg1 - hfg2)
       s(1) = max(s(1) + (s(2)-pa)*crt/(pa*((d1*hfg1*(fr*c2 - c1) -
     * d2)*hfg1 + (1.0 - hfg2*f2)*f1)),273.16)
       go to 15
  101  err = .true.
       go to 20
       end
