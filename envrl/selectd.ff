*deck selectd
      program selectd(in,input,out,output)
c
c  program to delete a compile time option from the relap5 deck.
c  the deleted option does not appear in the compile file.
c
      logical chng,ldef,lomit
      integer in,input,out,output,define,if,endif,def,mdef,null,
     +deftbl(100,2),iftbl(100,8),buf(9),hed(8),ihld(6),mesg(3,11),
     +char,word,bincod,ctype,wd,ncards(8000,4)
      data in/l"in"/,input/l"input"/,out/l"out"/,output/l"output"/,
     +define/l"$define"/,if/l"$if"/,endif/l"$endif"/,def/l"def"/,
     +mdef/l"-def"/,null/r" "/
      data hed/" selectd a"," program t","o delete c","ompile tim",
     +"e options ",3*" "/,ncards/32000*" "/
      data mesg/3*" ","unrecogniz","able $card"," ",
     +"$define ca","rd misposi","tioned",
     +"incorrect ","$define ca","rd",
     +"too many $","define car","ds",
     +"incorrect ","$if card"," ",
     +"too many s","tacked $if"," cards",
     +"incorrect ","$if card"," ",
     +"col 1 is n","ot blank f","or * ins.",
     +"if stateme","nt not nes","ted",
     +"$endif not"," matched w","ith $if"/
c
c  read in the variables to be deleted and masked.
c  also read correction set id and write the *ident card
c  to the update deck file.
c
      write(output,1006)
 1006 format("1")
      call date(hed(8))
      call header(1,79,hed)
      read(input,998) ihld(1)
      write(out,997) ihld(1)
  998 format(a10)
  997 format("*ident ",a10)
      read(input,999) ndel,(deftbl(i,1),i=1,ndel)
      read(input,999) nmask,(deftbl(i,1),i=(ndel+1),(ndel+nmask))
  999 format(i3/(8a10))
      do 600 i=1,(ndel+nmask)
          if(i.le.ndel) deftbl(i,2)=1
          if(i.gt.ndel) deftbl(i,2)=-1
  600 continue
      write(output,1000) ihld(1),(deftbl(i,1),i=1,ndel)
 1000 format("0the correction set identifier for the update"/
     +" deck generated by this selectd run = ",a10/
     +"0the variables defined for deletion are;"/1x,(9a10))
      write(output,603) (deftbl(i,1),i=(ndel+1),(ndel+nmask))
  603 format("0the variables defined to be masked are;"/1x,(9a10))
      ndefs=ndel+nmask
c
c  left justify the input variables and change blanks to zeroes.
c
      i=1
   60 ibitcnt=60
      bincod=deftbl(i,1)
   61 bincod=shift(bincod,6)
      char=.not.mask(54).and.bincod
      if(char.eq.r" ") go to 62
      ibitcnt=ibitcnt-6
      if(ibitcnt.lt.0) go to 63
      go to 61
   62 deftbl(i,1)=mask(60-ibitcnt).and.shift(bincod,(ibitcnt-6))
   63 i=i+1
      if(i.le.ndefs) go to 60
      ldef=.false.
      nifs=0
      ncrds=0
      nmesg=0
      last=0
      nupdts=0
      ncorec=0
      lomit=.false.
      nends=0
c
c  read in a card to be processed.
c
   10 read(in,1001,end=900) buf
 1001 format(9a10)
      ncrds=ncrds+1
      ctype=0
      imsg=0
c
c  check to see if first character is a $.
c
      if((.not.mask(54).and.shift(buf(1),6)).ne.r"$") then
          ctype=1
          go to 213
      end if
      nfields=0
      ibitcnt=60
      word=0
      j=1
      jcc=90
      chng=.false.
   15 jc=10
      bincod=buf(j)
   20 bincod=shift(bincod,6)
c
c  search by character for blanks or commas breaking card into the
c  physical words contained on it, including the update ident and
c  sequence number.
c
      char=.not.mask(54).and.bincod
      if(.not.chng) go to 25
      if(char.eq.r" ") go to 40
      if(char.eq.r",") go to 404
      chng=.false.
      go to 30
   25 if(char.eq.r" ".or.char.eq.r",") go to 35
   30 ibitcnt=ibitcnt-6
      if(ibitcnt.lt.0) go to 404
      word=shift(word,6).or.char
      go to 40
   35 nfields=nfields+1
      if(nfields.gt.6) go to 404
      if(last.ne.1.or.nfields.ne.1) ihld(nfields)=shift(word,ibitcnt)
      if(last.eq.1.and.nfields.eq.1) ihld(nfields)=
     + shift(word,(ibitcnt+18))
      ibitcnt=60
      word=0
      chng=.true.
   40 jcc=jcc-1
      if(jcc.gt.0) go to 45
      if(.not.chng) go to 35
      go to 99
   45 jc=jc-1
      if(jc.gt.0) go to 20
      j=j+1
      go to 15
   99 if(last.eq.1) go to 324
      go to 100
  404 imsg=2
      go to 213
c
c  check if this is a $define card.
c
  100 if(ihld(1).ne.define) go to 200
      if(.not.ldef) go to 105
      imsg=3
      go to 213
  105 if(nfields.eq.4) go to 110
      imsg=4
      go to 213
  110 if(ndefs.lt.100) then
          ctype=1
          go to 213
      else
          imsg=5
          go to 213
      endif
c
c  check to see if this is a $if card
c
  200 ldef=.true.
      if(ihld(1).ne.if) go to 700
      if(nfields.gt.4) go to 205
  202 imsg=6
      go to 213
  205 if(nfields.ne.5.and.nfields.ne.6) go to 202
      if(ihld(2).ne.def.and.ihld(2).ne.mdef) go to 202
c
c  set ctype flag for this if statement
c
      do 210 i=1,ndefs
          if(deftbl(i,1).ne.ihld(3)) go to 210
          if(nfields.eq.6) go to 207
          if(deftbl(i,2).eq.1.and.ihld(2).eq.def) ctype=5
          if(deftbl(i,2).eq.1.and.ihld(2).eq.mdef) ctype=6
          if(deftbl(i,2).eq.-1.and.ihld(2).eq.def) ctype=6
          if(deftbl(i,2).eq.-1.and.ihld(2).eq.mdef) ctype=5
          go to 211
  207     if(deftbl(i,2).eq.1.and.ihld(2).eq.def) ctype=2
          if(deftbl(i,2).eq.1.and.ihld(2).eq.mdef) ctype=3
          if(deftbl(i,2).eq.-1.and.ihld(2).eq.def) ctype=3
          if(deftbl(i,2).eq.-1.and.ihld(2).eq.mdef) ctype=2
          go to 211
  210 continue
  211 if(ctype.ne.0) go to 212
      if(nfields.eq.6) ctype=4
      if(nfields.eq.5) ctype=7
  212 if((ctype.gt.4.and.ctype.lt.8).and.lomit) nends=nends+1
      go to 213
c
c  check to see if this is a $endif card
c
  700 if(ihld(1).eq.endif) go to 705
      imsg=2
      go to 213
  705 if(nfields.eq.3) go to 710
      imsg=8
      go to 213
  710 ctype=8
c
c  ctype has been set according to the following;
c
c        ctype                    card description
c        -----          -------------------------------------
c          0            error has been detected
c          1            $define card or not a $ card.
c          2            $if def,var,n card with var tagged as
c                                     delete type.
c                       $if -def,var,n card with var tagged as
c                                     mask type.
c          3            $if def,var,n card with var tagged as
c                                     mask type.
c                       $if -def,var,n card with var tagged as
c                                     delete type.
c          4            $if def,var,n card not tagged.
c                       $if -def,var,n card not tagged.
c          5            $if def,var   card with var tagged as
c                                     delete type.
c                       $if -def,var  card with var tagged as
c                                     mask type.
c          6            $if def,var   card with var tagged as
c                                     mask type.
c                       $if -def,var  card with var tagged as
c                                     delete type.
c          7            $if def,var   card not tagged.
c                       $if -def,var  card not tagged.
c          8            $endif card.
c
c
c  perform the following on the if table;
c
c      1) - decrement the statement counter by 1
c      2) - write delete card with new if statement
c           following it if the counter has been
c           decremented
c      3) - delete exhausted ifs from the table
c
  213 ndel=0
      if(nifs.eq.0) go to 221
      do 220 i=1,nifs
          if(iftbl(i,1).gt.1.and.iftbl(i,1).lt.5) go to 214
          if(iftbl(i,1).gt.4.and.iftbl(i,1).lt.8) go to 220
          imsg=6
          go to 405
  214     iftbl(i,4)=iftbl(i,4)-1
          if(iftbl(i,4).gt.0) go to 220
          if(iftbl(i,4).eq.0) go to 215
          imsg=10
          go to 405
  215     if(iftbl(i,1).eq.2) go to 216
          if(iftbl(i,1).eq.3) go to 217
          if(iftbl(i,5).eq.iftbl(i,8)) go to 218
          call delins(4,iftbl(i,6),iftbl(i,7),null,null,iftbl(i,2),
     +    iftbl(i,3),iftbl(i,5),nupdts,ncorec,ncards)
          go to 218
c
c  go read ident.seqnum off of this card
c
  216     last=1
          j=8
          jcc=17
          nfields=0
          word=0
          jc=7
          chng=.false.
          ibitcnt=42
          bincod=shift(buf(j),18)
          go to 20
  324     call delins(2,iftbl(i,6),iftbl(i,7),ihld(1),ihld(2),null,
     +    0,0,nupdts,ncorec,ncards)
          last=0
          lomit=.false.
          go to 218
  217     call delins(3,iftbl(i,6),iftbl(i,7),null,null,null,0,0,
     +    nupdts,ncorec,ncards)
  218     ndel=ndel+1
          iftbl(i,1)=0
  220 continue
      if(ndel.eq.0) go to 221
      ii=1
      do 219 j=1,ndel
  208     if(iftbl(ii,1).eq.0) go to 201
          ii=ii+1
          go to 208
  201     do 209 l=ii,nifs-1
              do 206 k=1,8
  206         iftbl(l,k)=iftbl(l+1,k)
  209     continue
          nifs=nifs-1
  219 continue
  221 if(ctype.eq.0) go to 1100
      if(ctype.eq.1) go to 10
      if(ctype.eq.8) go to 300
c
c  put this if statement into the iftbl matrix if the omit flag is off
c
      if(nifs.eq.0) go to 503
      do 502 i=1,nifs
           if(iftbl(i,1).eq.2.or.iftbl(i,1).eq.5) lomit=.true.
           if(lomit) go to 10
  502 continue
  503 if(ctype.eq.2.or.ctype.eq.5) lomit=.true.
  504 nifs=nifs+1
      iftbl(nifs,1)=ctype
      iftbl(nifs,2)=ihld(3)
      if(ihld(2).eq.def) iftbl(nifs,3)=0
      if(ihld(2).eq.mdef) iftbl(nifs,3)=1
      if(nfields.eq.5) go to 501
      iftbl(nifs,6)=ihld(5)
      iftbl(nifs,7)=ihld(6)
      go to 305
  501 iftbl(nifs,6)=ihld(4)
      iftbl(nifs,7)=ihld(5)
c
c  find integer value of the counter on this if card
c
  305 word=0
      if(nfields.eq.5) go to 515
      jc=10
  310 ihld(4)=shift(ihld(4),6)
      char=.not.mask(54).and.ihld(4)
      if(char.eq.0) go to 515
      if(char.ge.r"0".and.char.le.r"9") go to 315
      imsg=6
      go to 1100
  315 word=word*10+(char-r"0")
      jc=jc-1
      if(jc.gt.0) go to 310
  515 iftbl(nifs,4)=word
      iftbl(nifs,5)=word
      iftbl(nifs,8)=word
      if(ctype.ne.2.and.ctype.ne.3) go to 517
      do 516 l=1,nifs
      if(ctype.eq.3) go to 514
      if(iftbl(l,1).gt.1.and.iftbl(l,1).lt.5) iftbl(l,5)=iftbl(l,5)-word
     +-1
      go to 516
  514 if(iftbl(l,1).gt.1.and.iftbl(l,1).lt.5) iftbl(l,5)=iftbl(l,5)-1
  516 continue
  517 go to 10
c
c  $endif processing
c
  300 if(nends.eq.0) go to 301
      nends=nends-1
      go to 10
  301 if(nifs.eq.0) go to 325
      if(iftbl(nifs,1).gt.4) go to 326
      wd=nifs
      do 327 i=1,nifs
          if(iftbl(wd,1).gt.4) go to 328
  327 wd=wd-1
  325 imsg=11
      go to 1100
  328 ic=nifs-1
      do 329 i=wd,ic
          do 330 j=1,8
  330     iftbl(i,j)=iftbl(i+1,j)
  329 continue
      imsg=10
      nifs=nifs-1
      go to 405
  326 go to (337,338,339) (iftbl(nifs,1)-4)
  337 call delins(5,iftbl(nifs,6),iftbl(nifs,7),ihld(2),ihld(3),
     +null,0,0,nupdts,ncorec,ncards)
      lomit=.false.
      go to 339
  338 call delins(6,iftbl(nifs,6),iftbl(nifs,7),null,null,null,
     +0,0,nupdts,ncorec,ncards)
      call delins(6,ihld(2),ihld(3),null,null,null,0,0,nupdts,ncorec,
     +ncards)
  339 nifs=nifs-1
      go to 10
c
c  write error messages and then continue with the next card
c
  405 if(imsg.lt.2) go to 10
      nmesg=nmesg+1
      write(output,1002) iftbl(i,6),iftbl(i,7),(mesg(i,imsg),i=1,3)
 1002 format("0error detected on card = ",2a10/
     +1x,"error message = ",3a10)
      if(nmesg.gt.15) go to 900
      go to 10
 1100 nmesg=nmesg+1
      write(output,1003) buf,(mesg(i,imsg),i=1,3)
 1003 format(" card in error = ",9a10/
     +1x,"error message = ",3a10)
      if(nmesg.gt.15) go to 900
      go to 10
c
c  write final message indicating the # of cards read, the
c  # of errors detected, the # of update cards written and
c  the # of correction cards written to the update file.
c  also write out the card images stored in the ncards matrix.
c
  900 if(nifs.eq.0) go to 910
      write(output,1004) nifs
 1004 format(1x,i4," unsatisfied if cards remain")
  910 write(output,1005) ncrds,nmesg,nupdts,ncorec
 1005 format("0number of cards processed = ",i8/
     +1x,"number of error messages generated = ",i8/
     +1x,"number of update cards generated = ",i8/
     +1x,"number of correction statements written = ",i8)
      write(out,1007) ((ncards(i,j),j=1,4),i=1,nupdts)
 1007 format((4a10))
      stop
      end
      subroutine delins(ctype,w1,w2,w3,w4,var,deftyp,n,nupdts,
     +                  ncorec,ncards)
c
c  write update delete card and write the correction card
c  if needed (i.e. if the counter on an existing if card
c  has changed).
c
      integer word(5),outv(4),char,xword,var,deftyp,n,ctype,
     +w1,w2,w3,w4,out,ncards(8000,4),output
      data out/l"out"/,output/l"output"/
      if(nupdts.lt.8000) go to 1
      write(output,2)
    2 format("0",15("*"),5x,"error",5x,15("*")/
     +"0attempt to write more than 8000 update cards,"/
     +" increase dimensions and re-run."/
     +"0",15("*"),5x,"error",5x,15("*"))
    1 word(1)=l"*d"
      word(2)=w1
      word(3)=w2
      word(4)=w3
      word(5)=w4
      type=0
    5 do 100 i=1,4
  100 outv(i)=.not.mask(60)
c
c  pack the characters contained in the words sent to the subroutine
c  into the outv vector.
c
      nchar=0
      j=1
      jj=1
      jcc=1
      jc=10
   10 xword=shift(word(j),((11-jc)*6))
      char=(.not.mask(54).and.xword)
      nchar=nchar+1
      if(char.ne.0) go to 20
      jc=jc-1
      if(jc.ne.0) go to 40
c
c  insert a comma, period, or blank at the appropriate place
c  in the outv vector.
c
   15 j=j+1
      jc=10
      if(j.eq.2) char=r" "
      if((j.eq.3.or.j.eq.5).and.type.eq.0) char=r"."
      if(j.eq.3.and.type.eq.1) char=r","
      if((j.eq.4.and.word(4).ne.r" ").and.type.eq.0) char=r","
      if(j.eq.4.and.type.eq.1) char=r","
      if((j.eq.4.and.word(4).eq.r" ").and.type.eq.0) nchar=50
      if(nchar.eq.50) go to 40
      go to 25
   20 jc=jc-1
   25 outv(jj)=outv(jj).or.shift(char,((10-jcc)*6))
      jcc=jcc+1
      if(jc.ne.0) go to 30
      go to 15
   30 if(jcc.ne.11) go to 40
      jj=jj+1
      jcc=1
   40 if(nchar.lt.50) go to 10
c
c  put blanks in the remaining characters of the outv vector.
c
   50 ii=jcc
      do 110 j=ii,10
          outv(jj)=outv(jj).or.shift(r" ",((10-jcc)*6))
  110 jcc=jcc+1
      if(jj.gt.4) go to 60
      jj=jj+1
      jcc=1
      go to 50
   60 if(type.ne.0) go to 63
c
c  check to see if this is a repetitious card.
c
      do 83 i=1,nupdts
          do 84 j=1,4
              if(outv(j).ne.ncards(i,j)) go to 83
   84     continue
          go to 500
   83 continue
c
c  write a delete card.
c
      nupdts=nupdts+1
      if(jj.gt.4) jj=4
      do 90 i=1,jj
   90 ncards(nupdts,i)=outv(i)
   63 if(ctype.ne.4) go to 500
      if(n.eq.0) go to 500
      if(type.ne.0) go to 200
c
c  pack the variable name into outv(1)
c
      word(1)=l"$if"
      if(deftyp.eq.0) word(2)=l"def"
      if(deftyp.eq.1) word(2)=l"-def"
      word(3)=var
      word(4)=r" "
      word(5)=r" "
      type=1
      go to 5
c
c  write a correction card to the update file (only if
c  the counter on the if statement has changed).
c
  200 ncorec=ncorec+1
      nupdts=nupdts+1
      outv(3)=0
      j=0
      nchar=10
      xword=n
   70 xword=shift(xword,6)
      char=.not.mask(54).and.xword
      if(nchar.eq.0) go to 80
      nchar=nchar-1
      if(char.eq.0) go to 70
      j=j+1
      char=char+27
      outv(3)=outv(3).or.shift(char,(60-(6*j)))
   80 if(j.eq.10) go to 81
      do 82 i=(j+1),10
   82 outv(3)=outv(3).or.shift(r" ",(60-(6*i)))
   81 outv(4)=r"          "
      ncards(nupdts,1)=outv(1)
      ncards(nupdts,2)=outv(2)
      ncards(nupdts,3)=outv(3)
      ncards(nupdts,4)=outv(4)
  500 return
      end
