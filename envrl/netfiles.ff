      DOUBLE PRECISION FUNCTION D9LGMC (X)
!   BEGIN PROLOGUE  D9LGMC
!   SUBSIDIARY
!   PURPOSE  Compute the log Gamma correction factor so that
!            LOG(DGAMMA(X)) = LOG(SQRT(2*PI)) + (X-5.)*LOG(X) - X
!            + D9LGMC(X).
!   LIBRARY   SLATEC (FNLIB)
!   CATEGORY  C7E
!   TYPE      DOUBLE PRECISION (R9LGMC-S, D9LGMC-D, C9LGMC-C)
!   KEYWORDS  COMPLETE GAMMA FUNCTION, CORRECTION TERM, FNLIB,
!             LOG GAMMA, LOGARITHM, SPECIAL FUNCTIONS
!   AUTHOR  Fullerton, W., (LANL)
!   DESCRIPTION
!
! Compute the log gamma correction factor for X .GE. 10. so that
! LOG (DGAMMA(X)) = LOG(SQRT(2*PI)) + (X-.5)*LOG(X) - X + D9lGMC(X)
!
! Series for ALGM       on the interval  0.          to  1.00000E-02
!                                   with weighted error  1.28E-31
!                                    log weighted error  30.89
!                          significant figures required  29.81
!                               decimal places required  31.48
!
!***REFERENCES  (NONE)
!***ROUTINES CALLED  D1MACH, DCSEVL, initds, xermsg
!***REVISION HISTORY  (YYMMDD)
!   770601  DATE WRITTEN
!   890531  Changed all specific intrinsics to generic.  (WRB)
!   890531  REVISION DATE from Version 3.2
!   891214  Prologue converted to Version 4.0 format.  (BAB)
!   900315  CALLs to XERROR changed to CALLs to xermsg.  (THJ)
!   900720  Routine changed from user-callable to subsidiary.  (WRB)
!***END PROLOGUE  D9LGMC
!
       interface
       include "initds.hh"
       end interface
!
       integer, parameter :: kr=selected_real_kind(12,200)
       real(kr) x,algmcs(15),xbig,xmax,dcsevl,d1mach
      LOGICAL FIRST
      SAVE NALGM, XBIG, XMAX, FIRST
      DATA ALGMCS(  1) / +.1666389480 4518632472 0572965082 2 e+0      /
      DATA ALGMCS(  2) / -.1384948176 0675638407 3298605913 5 e-4      /
      DATA ALGMCS(  3) / +.9810825646 9247294261 5717154748 7 e-8      /
      DATA ALGMCS(  4) / -.1809129475 5724941942 6330626671 9 e-10     /
      DATA ALGMCS(  5) / +.6221098041 8926052271 2601554341 6 e-13     /
      DATA ALGMCS(  6) / -.3399615005 4177219443 0333059966 6 e-15     /
      DATA ALGMCS(  7) / +.2683181998 4826987489 5753884666 6 e-17     /
      DATA ALGMCS(  8) / -.2868042435 3346432841 4462239999 9 e-19     /
      DATA ALGMCS(  9) / +.3962837061 0464348036 7930666666 6 e-21     /
      DATA ALGMCS( 10) / -.6831888753 9857668701 1199999999 9 e-23     /
      DATA ALGMCS( 11) / +.1429227355 9424981475 7333333333 3 e-24     /
      DATA ALGMCS( 12) / -.3547598158 1010705471 9999999999 9 e-26     /
      DATA ALGMCS( 13) / +.1025680058 0104709120 0000000000 0 e-27     /
      DATA ALGMCS( 14) / -.3401102254 3167487999 9999999999 9 e-29     /
      DATA ALGMCS( 15) / +.1276642195 6300629333 3333333333 3 e-30     /
      DATA FIRST /.TRUE./
!***FIRST EXECUTABLE STATEMENT  D9LGMC
      IF (FIRST) THEN
         nalgm = initds(algmcs(:),d1mach(3))
         XBIG = 1.0e0/SQRT(D1MACH(3))
         XMAX = EXP (MIN(LOG(D1MACH(2)/12.e0), -LOG(12.e0*D1MACH(1))))
      ENDIF
      FIRST = .FALSE.
!
       if (x .lt. 10.0) call xermsg ('slatec', 'd9lgmc',
     & 'x must be ge 10', 1, 2)
       if (x .ge. xmax) go to 20
!
       d9lgmc = 1.e0/(12.e0*x)
       if (x.lt.xbig) d9lgmc = dcsevl (2.0e0*(10.e0/x)**2-1.e0, algmcs,
     & nalgm)/x
       return
!
 20   D9LGMC = 0.e0
       call xermsg ('slatec', 'd9lgmc', 'x so big d9lgmc underflows', 2,
     & 1)
       return
       end
      DOUBLE PRECISION FUNCTION DBETAI (X, PIN, QIN)
!***BEGIN PROLOGUE  DBETAI
!***PURPOSE  Calculate the incomplete Beta function.
!***LIBRARY   SLATEC (FNLIB)
!***CATEGORY  C7F
!***TYPE      DOUBLE PRECISION (BETAI-S, DBETAI-D)
!***KEYWORDS  FNLIB, INCOMPLETE BETA FUNCTION, SPECIAL FUNCTIONS
!***AUTHOR  Fullerton, W., (LANL)
!***DESCRIPTION
!
!   DBETAI calculates the DOUBLE PRECISION incomplete beta function.
!
!   The incomplete beta function ratio is the probability that a
!   random variable from a beta distribution having parameters PIN and
!   QIN will be less than or equal to X.
!
!     -- Input Arguments -- All arguments are DOUBLE PRECISION.
!   X      upper limit of integration.  X must be in (0,1) inclusive.
!   PIN    first beta distribution parameter.  PIN must be .GT. 0.0.
!   QIN    second beta distribution parameter.  QIN must be .GT. 0.0.
!
!***REFERENCES  Nancy E. Bosten and E. L. Battiste, Remark on Algorithm
!                 179, Communications of the ACM 17, 3 (March 1974),
!                 pp. 156.
!***ROUTINES CALLED  D1MACH, DLBETA, xermsg
!***REVISION HISTORY  (YYMMDD)
!   770701  DATE WRITTEN
!   890531  Changed all specific intrinsics to generic.  (WRB)
!   890911  Removed unnecessary intrinsics.  (WRB)
!   890911  REVISION DATE from Version 3.2
!   891214  Prologue converted to Version 4.0 format.  (BAB)
!   900315  CALLs to XERROR changed to CALLs to xermsg.  (THJ)
!   920528  DESCRIPTION and REFERENCES sections revised.  (WRB)
!***END PROLOGUE  DBETAI
       DOUBLE PRECISION X, PIN, QIN, ALNEPS, ALNSML, C, EPS, FINSUM, P,
     & PS, Q, SML, TERM, XB, XI, Y, D1MACH, DLBETA, P1
      LOGICAL FIRST
      SAVE EPS, ALNEPS, SML, ALNSML, FIRST
      DATA FIRST /.TRUE./
!***FIRST EXECUTABLE STATEMENT  DBETAI
      IF (FIRST) THEN
         EPS = D1MACH(3)
         ALNEPS = LOG (EPS)
         SML = D1MACH(1)
         ALNSML = LOG (SML)
      ENDIF
      FIRST = .FALSE.
!
       if (x.lt.0.0 .or. x.gt.1.0) call xermsg ('slatec', 'dbetai',
     & 'x is not in the range (0,1)', 1, 2)
       if (pin.le.0.0 .or. qin.le.0.0) call xermsg ('slatec',
     &  'dbetai', 'p and/or q is le zero', 2, 2)
!
      Y = X
      P = PIN
      Q = QIN
      IF (Q.LE.P .AND. X.LT.0.8e0) GO TO 20
      IF (X.LT.0.2e0) GO TO 20
      Y = 1.0e0 - Y
      P = QIN
      Q = PIN
!
 20   IF ((P+Q)*Y/(P+1.e0).LT.EPS) GO TO 80
!
! EVALUATE THE INFINITE SUM FIRST.  TERM WILL EQUAL
! Y**P/BETA(PS,P) * (1.-PS)-SUB-I * Y**I / FAC(I) .
!
      PS = Q - AINT(Q)
      IF (PS.EQ.0.e0) PS = 1.0e0
      XB = P*LOG(Y) - DLBETA(PS,P) - LOG(P)
      DBETAI = 0.0e0
      IF (XB.LT.ALNSML) GO TO 40
!
      DBETAI = EXP (XB)
      TERM = DBETAI*P
      IF (PS.EQ.1.0e0) GO TO 40
      N = MAX (ALNEPS/LOG(Y), 4.0)
      DO 30 I=1,N
        XI = I
        TERM = TERM * (XI-PS)*Y/XI
        DBETAI = DBETAI + TERM/(P+XI)
 30   CONTINUE
!
! NOW EVALUATE THE FINITE SUM, MAYBE.
!
 40   IF (Q.LE.1.0e0) GO TO 70
!
      XB = P*LOG(Y) + Q*LOG(1.0e0-Y) - DLBETA(P,Q) - LOG(Q)
      IB = MAX (XB/ALNSML, 0.0e0)
      TERM = EXP(XB - IB*ALNSML)
      C = 1.0e0/(1.e0-Y)
      P1 = Q*C/(P+Q-1.e0)
!
      FINSUM = 0.0e0
      N = Q
      IF (Q.EQ.DBLE(N)) N = N - 1
      DO 50 I=1,N
        if (p1.le.1.0 .and. term/eps.le.finsum) go to 60
        XI = I
        TERM = (Q-XI+1.0)*C*TERM/(P+Q-XI)
!
        IF (TERM.GT.1.0) IB = IB - 1
        IF (TERM.GT.1.0) TERM = TERM*SML
!
        IF (IB.EQ.0) FINSUM = FINSUM + TERM
 50   CONTINUE
!
 60   DBETAI = DBETAI + FINSUM
 70   IF (Y.NE.X .OR. P.NE.PIN) DBETAI = 1.0e0 - DBETAI
      DBETAI = MAX (MIN (DBETAI, 1.0e0), 0.0e0)
      RETURN
!
 80   DBETAI = 0.0e0
      XB = P*LOG(MAX(Y,SML)) - LOG(P) - DLBETA(P,Q)
      IF (XB.GT.ALNSML .AND. Y.NE.0.0e0) DBETAI = EXP(XB)
      IF (Y.NE.X .OR. P.NE.PIN) DBETAI = 1.0e0 - DBETAI
!
      RETURN
      END
      DOUBLE PRECISION FUNCTION DCSEVL (X, CS, N)
!***BEGIN PROLOGUE  DCSEVL
!***PURPOSE  Evaluate a Chebyshev series.
!***LIBRARY   SLATEC (FNLIB)
!***CATEGORY  C3A2
!***TYPE      DOUBLE PRECISION (CSEVL-S, DCSEVL-D)
!***KEYWORDS  CHEBYSHEV SERIES, FNLIB, SPECIAL FUNCTIONS
!***AUTHOR  Fullerton, W., (LANL)
!***DESCRIPTION
!
!  Evaluate the N-term Chebyshev series CS at X.  Adapted from
!  a method presented in the paper by Broucke referenced below.
!
!       Input Arguments --
!  X    value at which the series is to be evaluated.
!  CS   array of N terms of a Chebyshev series.  In evaluating
!       CS, only half the first coefficient is summed.
!  N    number of terms in array CS.
!
!***REFERENCES  R. Broucke, Ten subroutines for the manipulation of
!                 Chebyshev series, Algorithm 446, Communications of
!                 the A.C.M. 16, (1973) pp. 254-256.
!               L. Fox and I. B. Parker, Chebyshev Polynomials in
!                 Numerical Analysis, Oxford University Press, 1968,
!                 page 56.
!***ROUTINES CALLED  D1MACH, xermsg
!***REVISION HISTORY  (YYMMDD)
!   770401  DATE WRITTEN
!   890831  Modified array declarations.  (WRB)
!   890831  REVISION DATE from Version 3.2
!   891214  Prologue converted to Version 4.0 format.  (BAB)
!   900315  CALLs to XERROR changed to CALLs to xermsg.  (THJ)
!   900329  Prologued revised extensively and code rewritten to allow
!           X to be slightly outside interval (-1,+1).  (WRB)
!   920501  Reformatted the REFERENCES section.  (WRB)
!***END PROLOGUE  DCSEVL
      DOUBLE PRECISION B0, B1, B2, CS(*), ONEPL, TWOX, X, D1MACH
      LOGICAL FIRST
      SAVE FIRST, ONEPL
      DATA FIRST /.TRUE./
!***FIRST EXECUTABLE STATEMENT  DCSEVL
      IF (FIRST) ONEPL = 1.0e0 + D1MACH(4)
      FIRST = .FALSE.
       if (n .lt. 1) call xermsg ('slatec', 'dcsevl',
     & 'number of terms .le. 0', 2, 2)
       if (n .gt. 1000) call xermsg ('slatec', 'dcsevl',
     & 'number of terms .gt. 1000', 3, 2)
       if (abs(x) .gt. onepl) call xermsg ('slatec', 'dcsevl',
     & 'x outside the interval (-1,+1)', 1, 1)
!
      B1 = 0.0e0
      B0 = 0.0e0
      TWOX = 2.0e0*X
      DO 10 I = 1,N
         B2 = B1
         B1 = B0
         NI = N + 1 - I
         B0 = TWOX*B1 - B2 + CS(NI)
   10 CONTINUE
!
      DCSEVL = 0.5e0*(B0-B2)
!
      RETURN
      END
      SUBROUTINE DGAMLM (XMIN, XMAX)
!***BEGIN PROLOGUE  DGAMLM
!***PURPOSE  Compute the minimum and maximum bounds for the argument in
!            the Gamma function.
!***LIBRARY   SLATEC (FNLIB)
!***CATEGORY  C7A, R2
!***TYPE      DOUBLE PRECISION (GAMLIM-S, DGAMLM-D)
!***KEYWORDS  COMPLETE GAMMA FUNCTION, FNLIB, LIMITS, SPECIAL FUNCTIONS
!***AUTHOR  Fullerton, W., (LANL)
!***DESCRIPTION
!
! Calculate the minimum and maximum legal bounds for X in gamma(X).
! XMIN and XMAX are not the only bounds, but they are the only non-
! trivial ones to calculate.
!
!             Output Arguments --
! XMIN   double precision minimum legal value of X in gamma(X).  Any
!        smaller value of X might result in underflow.
! XMAX   double precision maximum legal value of X in gamma(X).  Any
!        larger value of X might cause overflow.
!
!***REFERENCES  (NONE)
!***ROUTINES CALLED  D1MACH, xermsg
!***REVISION HISTORY  (YYMMDD)
!   770601  DATE WRITTEN
!   890531  Changed all specific intrinsics to generic.  (WRB)
!   890531  REVISION DATE from Version 3.2
!   891214  Prologue converted to Version 4.0 format.  (BAB)
!   900315  CALLs to XERROR changed to CALLs to xermsg.  (THJ)
!***END PROLOGUE  DGAMLM
      DOUBLE PRECISION XMIN, XMAX, ALNBIG, ALNSML, XLN, XOLD, D1MACH
!***FIRST EXECUTABLE STATEMENT  DGAMLM
      ALNSML = LOG(D1MACH(1))
      XMIN = -ALNSML
      DO 10 I=1,10
        XOLD = XMIN
        XLN = LOG(XMIN)
        XMIN = XMIN - XMIN*((XMIN+0.5e0)*XLN - XMIN - 0.2258e0 + ALNSML)
     &    / (XMIN*XLN+0.5e0)
        IF (ABS(XMIN-XOLD).LT.0.005e0) GO TO 20
 10   CONTINUE
       call xermsg ('slatec', 'dgamlm', 'unable to find xmin', 1, 2)
!
 20   XMIN = -XMIN + 0.01e0
!
      ALNBIG = LOG (D1MACH(2))
      XMAX = ALNBIG
      DO 30 I=1,10
        XOLD = XMAX
        XLN = LOG(XMAX)
        XMAX = XMAX - XMAX*((XMAX-0.5e0)*XLN - XMAX + 0.9189e0 - ALNBIG)
     &    / (XMAX*XLN-0.5e0)
        IF (ABS(XMAX-XOLD).LT.0.005e0) GO TO 40
 30   CONTINUE
       call xermsg ('slatec', 'dgamlm', 'unable to find xmax', 2, 2)
!
 40   XMAX = XMAX - 0.01e0
      XMIN = MAX (XMIN, -XMAX+1.e0)
!
      RETURN
      END
      DOUBLE PRECISION FUNCTION DGAMMA (X)
!***BEGIN PROLOGUE  DGAMMA
!***PURPOSE  Compute the complete Gamma function.
!***LIBRARY   SLATEC (FNLIB)
!***CATEGORY  C7A
!***TYPE      DOUBLE PRECISION (GAMMA-S, DGAMMA-D, CGAMMA-C)
!***KEYWORDS  COMPLETE GAMMA FUNCTION, FNLIB, SPECIAL FUNCTIONS
!***AUTHOR  Fullerton, W., (LANL)
!***DESCRIPTION
!
! DGAMMA(X) calculates the double precision complete Gamma function
! for double precision argument X.
!
! Series for GAM        on the interval  0.          to  1.00000E+00
!                                        with weighted error   5.79E-32
!                                         log weighted error  31.24
!                               significant figures required  30.00
!                                    decimal places required  32.05
!
!***REFERENCES  (NONE)
!***ROUTINES CALLED  D1MACH, D9LGMC, DCSEVL, DGAMLM, initds, xermsg
!***REVISION HISTORY  (YYMMDD)
!   770601  DATE WRITTEN
!   890531  Changed all specific intrinsics to generic.  (WRB)
!   890911  Removed unnecessary intrinsics.  (WRB)
!   890911  REVISION DATE from Version 3.2
!   891214  Prologue converted to Version 4.0 format.  (BAB)
!   900315  CALLs to XERROR changed to CALLs to xermsg.  (THJ)
!   920618  Removed space from variable name.  (RWC, WRB)
!***END PROLOGUE  DGAMMA
!
       interface
       include "initds.hh"
       end interface
!
       integer, parameter :: kr=selected_real_kind(12,200)
       real(kr) x,gamcs(42),dxrel,pi,sinpiy,sq2pil,xmax,
     & xmin,y,d9lgmc,dcsevl,d1mach
      LOGICAL FIRST
!
      SAVE PI, SQ2PIL, NGAM, XMIN, XMAX, DXREL, FIRST
      DATA GAMCS(  1) / +.8571195590 9893314219 2006239994 2 e-2      /
      DATA GAMCS(  2) / +.4415381324 8410067571 9131577165 2 e-2      /
      DATA GAMCS(  3) / +.5685043681 5993633786 3266458878 9 e-1      /
      DATA GAMCS(  4) / -.4219835396 4185605010 1250018662 4 e-2      /
      DATA GAMCS(  5) / +.1326808181 2124602205 8400679635 2 e-2      /
      DATA GAMCS(  6) / -.1893024529 7988804325 2394702388 6 e-3      /
      DATA GAMCS(  7) / +.3606925327 4412452565 7808221722 5 e-4      /
      DATA GAMCS(  8) / -.6056761904 4608642184 8554829036 5 e-5      /
      DATA GAMCS(  9) / +.1055829546 3022833447 3182350909 3 e-5      /
      DATA GAMCS( 10) / -.1811967365 5423840482 9185589116 6 e-6      /
      DATA GAMCS( 11) / +.3117724964 7153222777 9025459316 9 e-7      /
      DATA GAMCS( 12) / -.5354219639 0196871408 7408102434 7 e-8      /
      DATA GAMCS( 13) / +.9193275519 8595889468 8778682594 0 e-9      /
      DATA GAMCS( 14) / -.1577941280 2883397617 6742327395 3 e-9      /
      DATA GAMCS( 15) / +.2707980622 9349545432 6654043308 9 e-10     /
      DATA GAMCS( 16) / -.4646818653 8257301440 8166105893 3 e-11     /
      DATA GAMCS( 17) / +.7973350192 0074196564 6076717535 9 e-12     /
      DATA GAMCS( 18) / -.1368078209 8309160257 9949917230 9 e-12     /
      DATA GAMCS( 19) / +.2347319486 5638006572 3347177168 8 e-13     /
      DATA GAMCS( 20) / -.4027432614 9490669327 6657053469 9 e-14     /
      DATA GAMCS( 21) / +.6910051747 3721009121 3833697525 7 e-15     /
      DATA GAMCS( 22) / -.1185584500 2219929070 5238712619 2 e-15     /
      DATA GAMCS( 23) / +.2034148542 4963739552 0102605193 2 e-16     /
      DATA GAMCS( 24) / -.3490054341 7174058492 7401294910 8 e-17     /
      DATA GAMCS( 25) / +.5987993856 4853055671 3505106602 6 e-18     /
      DATA GAMCS( 26) / -.1027378057 8722280744 9006977843 1 e-18     /
      DATA GAMCS( 27) / +.1762702816 0605298249 4275966074 8 e-19     /
      DATA GAMCS( 28) / -.3024320653 7353062609 5877211204 2 e-20     /
      DATA GAMCS( 29) / +.5188914660 2183978397 1783355050 6 e-21     /
      DATA GAMCS( 30) / -.8902770842 4565766924 4925160106 6 e-22     /
      DATA GAMCS( 31) / +.1527474068 4933426022 7459689130 6 e-22     /
      DATA GAMCS( 32) / -.2620731256 1873629002 5732833279 9 e-23     /
      DATA GAMCS( 33) / +.4496464047 8305386703 3104657066 6 e-24     /
      DATA GAMCS( 34) / -.7714712731 3368779117 0390152533 3 e-25     /
      DATA GAMCS( 35) / +.1323635453 1260440364 8657271466 6 e-25     /
      DATA GAMCS( 36) / -.2270999412 9429288167 0231381333 3 e-26     /
      DATA GAMCS( 37) / +.3896418998 0039914493 2081663999 9 e-27     /
      DATA GAMCS( 38) / -.6685198115 1259533277 9212799999 9 e-28     /
      DATA GAMCS( 39) / +.1146998663 1400243843 4761386666 6 e-28     /
      DATA GAMCS( 40) / -.1967938586 3451346772 9510399999 9 e-29     /
      DATA GAMCS( 41) / +.3376448816 5853380903 3489066666 6 e-30     /
      DATA GAMCS( 42) / -.5793070335 7821357846 2549333333 3 e-31     /
      DATA PI / 3.1415926535 8979323846 2643383279 50 e0 /
      DATA SQ2PIL / 0.9189385332 0467274178 0329736405 62 e0 /
      DATA FIRST /.TRUE./
!***FIRST EXECUTABLE STATEMENT  DGAMMA
      IF (FIRST) THEN
         ngam = initds(gamcs(:),0.1*d1mach(3))
!
         CALL DGAMLM (XMIN, XMAX)
         DXREL = SQRT(D1MACH(4))
      ENDIF
      FIRST = .FALSE.
!
      Y = ABS(X)
      IF (Y.GT.10.e0) GO TO 50
!
! COMPUTE GAMMA(X) FOR -XBND .LE. X .LE. XBND.  REDUCE INTERVAL AND FIND
! GAMMA(1+Y) FOR 0.0 .LE. Y .LT. 1.0 FIRST OF ALL.
!
      N = X
      IF (X.LT.0.e0) N = N - 1
      Y = X - N
      N = N - 1
      DGAMMA = 0.9375e0 + DCSEVL (2.e0*Y-1.e0, GAMCS, NGAM)
      IF (N.EQ.0) RETURN
!
      IF (N.GT.0) GO TO 30
!
! COMPUTE GAMMA(X) FOR X .LT. 1.0
!
      N = -N
       if (x .eq. 0.0) call xermsg ('slatec', 'dgamma', 'x is 0', 4, 2)
       if (x .lt. 0.0 .and. x+n-2 .eq. 0.0) call xermsg ('slatec',
     & 'dgamma', 'x is a negative integer', 4, 2)
       if (x .lt. (-0.5) .and. abs((x-aint(x-0.5))/x) .lt. dxrel)
     & call xermsg ('slatec', 'dgamma',
     & 'answer lt half precision because x too near negative integer',
     & 1, 1)
!
      DO 20 I=1,N
        DGAMMA = DGAMMA/(X+I-1 )
 20   CONTINUE
      RETURN
!
! GAMMA(X) FOR X .GE. 2.0 AND X .LE. 10.0
!
 30   DO 40 I=1,N
        DGAMMA = (Y+I) * DGAMMA
 40   CONTINUE
      RETURN
!
! GAMMA(X) FOR ABS(X) .GT. 10.0.  RECALL Y = ABS(X).
!
 50    if (x .gt. xmax) call xermsg ('slatec', 'dgamma',
     & 'x so big gamma overflows', 3, 2)
!
      DGAMMA = 0.e0
       if (x .lt. xmin) call xermsg ('slatec', 'dgamma',
     &   'x so small gamma underflows', 2, 1)
      IF (X.LT.XMIN) RETURN
!
      DGAMMA = EXP ((Y-0.5e0)*LOG(Y) - Y + SQ2PIL + D9LGMC(Y) )
      IF (X.GT.0.e0) RETURN
!
       if (abs((x-aint(x-0.5))/x) .lt. dxrel) call xermsg ('slatec',
     & 'dgamma',
     & 'answer lt half precision, x too near negative integer', 1, 1)
!
      SINPIY = SIN (PI*Y)
       if (sinpiy .eq. 0.0) call xermsg ('slatec', 'dgamma',
     & 'x is a negative integer', 4, 2)
!
      DGAMMA = -PI/(Y*SINPIY*DGAMMA)
!
      RETURN
      END
      DOUBLE PRECISION FUNCTION DLBETA (A, B)
!***BEGIN PROLOGUE  DLBETA
!***PURPOSE  Compute the natural logarithm of the complete Beta
!            function.
!***LIBRARY   SLATEC (FNLIB)
!***CATEGORY  C7B
!***TYPE      DOUBLE PRECISION (ALBETA-S, DLBETA-D, CLBETA-C)
!***KEYWORDS  FNLIB, LOGARITHM OF THE COMPLETE BETA FUNCTION,
!             SPECIAL FUNCTIONS
!***AUTHOR  Fullerton, W., (LANL)
!***DESCRIPTION
!
! DLBETA(A,B) calculates the double precision natural logarithm of
! the complete beta function for double precision arguments
! A and B.
!
!***REFERENCES  (NONE)
!***ROUTINES CALLED  D9LGMC, DGAMMA, DLNGAM, DLNREL, xermsg
!***REVISION HISTORY  (YYMMDD)
!   770701  DATE WRITTEN
!   890531  Changed all specific intrinsics to generic.  (WRB)
!   890531  REVISION DATE from Version 3.2
!   891214  Prologue converted to Version 4.0 format.  (BAB)
!   900315  CALLs to XERROR changed to CALLs to xermsg.  (THJ)
!   900727  Added EXTERNAL statement.  (WRB)
!***END PROLOGUE  DLBETA
      DOUBLE PRECISION A, B, P, Q, CORR, SQ2PIL, D9LGMC, DGAMMA, DLNGAM,
     &  DLNREL
      EXTERNAL DGAMMA
      SAVE SQ2PIL
      DATA SQ2PIL / 0.9189385332 0467274178 0329736405 62 e0 /
!***FIRST EXECUTABLE STATEMENT  DLBETA
      P = MIN (A, B)
      Q = MAX (A, B)
!
       if (p .le. 0.0) call xermsg ('slatec', 'dlbeta',
     & 'both arguments must be gt zero', 1, 2)
!
      IF (P.GE.10.e0) GO TO 30
      IF (Q.GE.10.e0) GO TO 20
!
! P AND Q ARE SMALL.
!
      DLBETA = LOG (DGAMMA(P) * (DGAMMA(Q)/DGAMMA(P+Q)) )
      RETURN
!
! P IS SMALL, BUT Q IS BIG.
!
 20   CORR = D9LGMC(Q) - D9LGMC(P+Q)
      DLBETA = DLNGAM(P) + CORR + P - P*LOG(P+Q)
     &  + (Q-0.5e0)*DLNREL(-P/(P+Q))
      RETURN
!
! P AND Q ARE BIG.
!
 30   CORR = D9LGMC(P) + D9LGMC(Q) - D9LGMC(P+Q)
      DLBETA = -0.5e0*LOG(Q) + SQ2PIL + CORR + (P-0.5e0)*LOG(P/(P+Q))
     &  + Q*DLNREL(-P/(P+Q))
      RETURN
!
      END
      DOUBLE PRECISION FUNCTION DLNGAM (X)
!***BEGIN PROLOGUE  DLNGAM
!***PURPOSE  Compute the logarithm of the absolute value of the Gamma
!            function.
!***LIBRARY   SLATEC (FNLIB)
!***CATEGORY  C7A
!***TYPE      DOUBLE PRECISION (ALNGAM-S, DLNGAM-D, CLNGAM-C)
!***KEYWORDS  ABSOLUTE VALUE, COMPLETE GAMMA FUNCTION, FNLIB, LOGARITHM,
!             SPECIAL FUNCTIONS
!***AUTHOR  Fullerton, W., (LANL)
!***DESCRIPTION
!
! DLNGAM(X) calculates the double precision logarithm of the
! absolute value of the Gamma function for double precision
! argument X.
!
!***REFERENCES  (NONE)
!***ROUTINES CALLED  D1MACH, D9LGMC, DGAMMA, xermsg
!***REVISION HISTORY  (YYMMDD)
!   770601  DATE WRITTEN
!   890531  Changed all specific intrinsics to generic.  (WRB)
!   890531  REVISION DATE from Version 3.2
!   891214  Prologue converted to Version 4.0 format.  (BAB)
!   900315  CALLs to XERROR changed to CALLs to xermsg.  (THJ)
!   900727  Added EXTERNAL statement.  (WRB)
!***END PROLOGUE  DLNGAM
      DOUBLE PRECISION X, DXREL, PI, SINPIY, SQPI2L, SQ2PIL, XMAX,
     &  Y, DGAMMA, D9LGMC, D1MACH, TEMP
      LOGICAL FIRST
      EXTERNAL DGAMMA
      SAVE SQ2PIL, SQPI2L, PI, XMAX, DXREL, FIRST
      DATA SQ2PIL / 0.9189385332 0467274178 0329736405 62 e0 /
      DATA SQPI2L / +.2257913526 4472743236 3097614947 441 e+0    /
      DATA PI / 3.1415926535 8979323846 2643383279 50 e0 /
      DATA FIRST /.TRUE./
!***FIRST EXECUTABLE STATEMENT  DLNGAM
      IF (FIRST) THEN
         TEMP = 1.e0/LOG(D1MACH(2))
         XMAX = TEMP*D1MACH(2)
         DXREL = SQRT(D1MACH(4))
      ENDIF
      FIRST = .FALSE.
!
      Y = ABS (X)
      IF (Y.GT.10.e0) GO TO 20
!
! LOG (ABS (DGAMMA(X)) ) FOR ABS(X) .LE. 10.0
!
      DLNGAM = LOG (ABS (DGAMMA(X)) )
      RETURN
!
! LOG ( ABS (DGAMMA(X)) ) FOR ABS(X) .GT. 10.0
!
 20    if (y .gt. xmax) call xermsg ('slatec', 'dlngam',
     & 'abs(x) so big dlngam overflows', 2, 2)
!
      IF (X.GT.0.e0) DLNGAM = SQ2PIL + (X-0.5e0)*LOG(X) - X + D9LGMC(Y)
      IF (X.GT.0.e0) RETURN
!
      SINPIY = ABS (SIN(PI*Y))
       if (sinpiy .eq. 0.0) call xermsg ('slatec', 'dlngam',
     & 'x is a negative integer', 3, 2)
!
       if (abs((x-aint(x-0.5))/x) .lt. dxrel) call xermsg ('slatec',
     & 'dlngam',
     & 'answer lt half precision because x too near negative integer',
     & 1, 1)
!
      DLNGAM = SQPI2L + (X-0.5e0)*LOG(Y) - X - LOG(SINPIY) - D9LGMC(Y)
      RETURN
!
      END
      DOUBLE PRECISION FUNCTION DLNREL (X)
!***BEGIN PROLOGUE  DLNREL
!***PURPOSE  Evaluate ln(1+X) accurate in the sense of relative error.
!***LIBRARY   SLATEC (FNLIB)
!***CATEGORY  C4B
!***TYPE      DOUBLE PRECISION (ALNREL-S, DLNREL-D, CLNREL-C)
!***KEYWORDS  ELEMENTARY FUNCTIONS, FNLIB, LOGARITHM
!***AUTHOR  Fullerton, W., (LANL)
!***DESCRIPTION
!
! DLNREL(X) calculates the double precision natural logarithm of
! (1.0+X) for double precision argument X.  This routine should
! be used when X is small and accurate to calculate the logarithm
! accurately (in the relative error sense) in the neighborhood
! of 1.0.
!
! Series for ALNR       on the interval -3.75000E-01 to  3.75000E-01
!                                        with weighted error   6.35E-32
!                                         log weighted error  31.20
!                               significant figures required  30.93
!                                    decimal places required  32.01
!
!***REFERENCES  (NONE)
!***ROUTINES CALLED  D1MACH, DCSEVL, initds, xermsg
!***REVISION HISTORY  (YYMMDD)
!   770601  DATE WRITTEN
!   890531  Changed all specific intrinsics to generic.  (WRB)
!   890531  REVISION DATE from Version 3.2
!   891214  Prologue converted to Version 4.0 format.  (BAB)
!   900315  CALLs to XERROR changed to CALLs to xermsg.  (THJ)
!***END PROLOGUE  DLNREL
!
       interface
       include "initds.hh"
       end interface
!
       integer, parameter :: kr=selected_real_kind(12,200)
       real(kr) alnrcs(43), x, xmin,  dcsevl, d1mach
      LOGICAL FIRST
      SAVE NLNREL, XMIN, FIRST
      DATA ALNRCS(  1) / +.1037869356 2743769800 6862677190 98 e+1     /
      DATA ALNRCS(  2) / -.1336430150 4908918098 7660415531 33 e+0     /
      DATA ALNRCS(  3) / +.1940824913 5520563357 9261993747 50 e-1     /
      DATA ALNRCS(  4) / -.3010755112 7535777690 3765377765 92 e-2     /
      DATA ALNRCS(  5) / +.4869461479 7154850090 4563665091 37 e-3     /
      DATA ALNRCS(  6) / -.8105488189 3175356066 8099430086 22 e-4     /
      DATA ALNRCS(  7) / +.1377884779 9559524782 9382514960 59 e-4     /
      DATA ALNRCS(  8) / -.2380221089 4358970251 3699929149 35 e-5     /
      DATA ALNRCS(  9) / +.4164041621 3865183476 3918599019 89 e-6     /
      DATA ALNRCS( 10) / -.7359582837 8075994984 2668370319 98 e-7     /
      DATA ALNRCS( 11) / +.1311761187 6241674949 1522943450 11 e-7     /
      DATA ALNRCS( 12) / -.2354670931 7742425136 6960923301 75 e-8     /
      DATA ALNRCS( 13) / +.4252277327 6034997775 6380529625 67 e-9     /
      DATA ALNRCS( 14) / -.7719089413 4840796826 1081074933 00 e-10    /
      DATA ALNRCS( 15) / +.1407574648 1359069909 2153564721 91 e-10    /
      DATA ALNRCS( 16) / -.2576907205 8024680627 5370786275 84 e-11    /
      DATA ALNRCS( 17) / +.4734240666 6294421849 1543950059 38 e-12    /
      DATA ALNRCS( 18) / -.8724901267 4742641745 3012632926 75 e-13    /
      DATA ALNRCS( 19) / +.1612461490 2740551465 7398331191 15 e-13    /
      DATA ALNRCS( 20) / -.2987565201 5665773006 7107924168 15 e-14    /
      DATA ALNRCS( 21) / +.5548070120 9082887983 0413216972 79 e-15    /
      DATA ALNRCS( 22) / -.1032461915 8271569595 1413339619 32 e-15    /
      DATA ALNRCS( 23) / +.1925023920 3049851177 8785032448 68 e-16    /
      DATA ALNRCS( 24) / -.3595507346 5265150011 1897078442 66 e-17    /
      DATA ALNRCS( 25) / +.6726454253 7876857892 1945742267 73 e-18    /
      DATA ALNRCS( 26) / -.1260262416 8735219252 0824256375 46 e-18    /
      DATA ALNRCS( 27) / +.2364488440 8606210044 9161589555 19 e-19    /
      DATA ALNRCS( 28) / -.4441937705 0807936898 8783891797 33 e-20    /
      DATA ALNRCS( 29) / +.8354659446 4034259016 2412939946 66 e-21    /
      DATA ALNRCS( 30) / -.1573155941 6479562574 8992535210 66 e-21    /
      DATA ALNRCS( 31) / +.2965312874 0247422686 1543697066 66 e-22    /
      DATA ALNRCS( 32) / -.5594958348 1815947292 1560132266 66 e-23    /
      DATA ALNRCS( 33) / +.1056635426 8835681048 1872841386 66 e-23    /
      DATA ALNRCS( 34) / -.1997248368 0670204548 3149994666 66 e-24    /
      DATA ALNRCS( 35) / +.3778297781 8839361421 0498559999 99 e-25    /
      DATA ALNRCS( 36) / -.7153158688 9081740345 0381653333 33 e-26    /
      DATA ALNRCS( 37) / +.1355248846 3674213646 5020245333 33 e-26    /
      DATA ALNRCS( 38) / -.2569467304 8487567430 0798293333 33 e-27    /
      DATA ALNRCS( 39) / +.4874775606 6216949076 4595199999 99 e-28    /
      DATA ALNRCS( 40) / -.9254211253 0849715321 1323733333 33 e-29    /
      DATA ALNRCS( 41) / +.1757859784 1760239233 2697600000 00 e-29    /
      DATA ALNRCS( 42) / -.3341002667 7731010351 3770666666 66 e-30    /
      DATA ALNRCS( 43) / +.6353393618 0236187354 1802666666 66 e-31    /
      DATA FIRST /.TRUE./
!***FIRST EXECUTABLE STATEMENT  DLNREL
      IF (FIRST) THEN
         nlnrel = initds(alnrcs(:),0.1*d1mach(3))
         XMIN = -1.0e0 + SQRT(D1MACH(4))
      ENDIF
      FIRST = .FALSE.
!
       if (x .le. (-1.0)) call xermsg ('slatec', 'dlnrel', 'x is le -1'
     & , 2, 2)
       if (x .lt. xmin) call xermsg ('slatec', 'dlnrel',
     & 'answer lt half precision because x too near -1', 1, 1)
!
      IF (ABS(X).LE.0.375e0) DLNREL = X*(1.e0 -
     &  X*DCSEVL (X/.375e0, ALNRCS, NLNREL))
!
      IF (ABS(X).GT.0.375e0) DLNREL = LOG (1.0e0+X)
!
      RETURN
      END
