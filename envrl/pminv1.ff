      subroutine pminv1 (a,ind,ip,n,np,res,is)
$if def,in32,1
       implicit real*8(a-h,o-z)
c
       real a(:),res(:,:)
       integer ind(:),ip(:,:)
       real u
c  diag is used to return integer scaling powers, and to hold
c  counts of non-zeros in rows and columns during execution.
c  is is set to 0 on successful completion, to i if row i has only
c  zero elements, to -i if column i has only zero elements
c  res is a workspace array. columns 1 and 2 hold non-zero half
c  of residual vector for two consecutive iterations.   column
c  3 holds column scaling powers, and column 4 holds their
c  changes over a double iteration.
c
c  smin is used in a convergence test on (residual norm)**2
      data smin/.01/
c
      is=0
c  Initialise for accumulation of sums and products.
      do 2 l=1,2
      do 2 i=1,n
      res(i,l)=0.
      res(i,l+2)=0.
    2 ip(i,l+2)=0
      do 4 j=1,n
      i2=ip(j,2)
      k1=ip(i2,1)
      k2=ip(ip(j+1,2),1)-1
      if(k1.gt.k2)go to 4
      do 3 k=k1,k2
      i1=ind(k)
      u=abs(a(k))
      if(u.eq.0.)go to 3
      u = exponent(u) - 1
c  Count non-zeros in row and column.
      ip(i1,3)=ip(i1,3)+1
      ip(i2,4)=ip(i2,4)+1
      res(i1,1)=res(i1,1)+u
      res(i2,3)=res(i2,3)+u
    3 continue
    4 continue
c  Compute rhs vectors testing for zero row or column.
      j=0
      do 8 i=1,n
      j=j+ip(i,3)
      do 9 l=1,2
      if(ip(i,l+2).gt.0 )go to 13
      ip(i,l+2)=1
      is=i*(3-2*l)
   13 continue
    9 res(i,2*l-1)=res(i,2*l-1)/ip(i,l+2)
    8 continue
      sm=smin*j
c  Sweep to compute initial residual vector.
      do 12 j1=1,n
      j=ip(j1,2)
      k1=ip(j,1)
      k2=ip(ip(j1+1,2),1)-1
      if(k1.gt.k2)go to 12
      do 10 k=k1,k2
      if(a(k).eq.0.0)go to 10
      i=ind(k)
      res(i,1)=res(i,1)-res(j,3)/ip(i,3)
   10 continue
   12 continue
c  Initialise iteration.
      e=0.
      e1=0.
      q=1.
      s=0.
      do 11 i=1,n
   11 s=s+ip(i,3)*res(i,1)**2
      l=2
      if(s.le.sm)go to 101
c  Iteration step.
   20 em=e*e1
c  Sweep through matrix to update residual vector.
      do 28 j3=1,n
      j1=ip(j3,2)
      k1=ip(j1,1)
      k2=ip(ip(j3+1,2),1)-1
      if(k1.gt.k2)go to 28
      do 22 k=k1,k2
      if(a(k).eq.0.0) go to 22
      j2=(2-l)*(j1-ind(k))
      i=j1-j2
      j=ind(k)+j2
      res(i,l)=res(i,l)+res(j,3-l)
   22 continue
   28 continue
      s1=s
      s=0.
      do 23 i=1,n
      v=-res(i,l)/q
      res(i,l)=v/ip(i,l+2)
   23 s=s+v*res(i,l)
      e1=e
      e=q*s/s1
      q1=q
      q=1.-e
      m=3-l
      if(s.gt.sm)go to 27
      e=m-1
      m=1
      q=1.
   27 if(l.eq.2)go to 25
      qm=q*q1
      do 26 i=1,n
      res (i,4)=(em*res(i,4)+res(i,2))/qm
   26 res(i,3)=res(i,3)+res(i,4)
   25 l=m
      do 24 i=1,n
   24 res(i,l)=res(i,l)*ip(i,l+2)*e
      if(s.gt.sm)go to 20
c  Sweep through matrix to get row scaling powers.
  101 do 105 j1=1,n
      j=ip(j1,2)
      k1=ip(j,1)
      k2=ip(ip(j1+1,2),1)-1
      if(k1.gt.k2)go to 105
      do 103 k=k1,k2
      u=abs(a(k))
      if(u.eq.0.)go to 103
       u = exponent(u) - 1
      i=ind(k)
      res(i,1)=res(i,1)+res(j,3)-u
  103 continue
  105 continue
c  Convert powers to integers.
      do 104 i=1,n
      v=res(i,1)/ip(i,3)
      ip(i,3)=v+sign(0.5,v)
  104 ip(i,4)=-(res(i,3)+sign(0.5,res(i,3)))
      return
      end
