       subroutine coxide (ctemp,dtz,am5,drod,pint,ip2,y8,y9,y9a,y9b,w1,
     & p,al8,krap)
!  This program was developed from the matpro subroutine "cobild",
!  written by G. A. Reymann.
!
!  Data and analyses from J. V. Cathcart of ORNL are used to compute the
!  Zro2 and oxygen-stabilized alpha thicknesses on the cladding outer
!  surface and similar equations from P. Hofmann of the
!  Kernforschungszentrum Karlsruhe (KFK) for oxygen-stabilized alpha
!  layers on the cladding inner surface when there is fuel pellet-
!  cladding mechanical interaction (pcmi).
!
!  For temperatures of 1853K-2100K, data from V. F. Urbanic and T. R.
!  Heidrick, "High-Temperature Oxidation of Zircaloy-2 and Zircaloy-4 in
!  steam," Journal of Nuclear Materials 75,(1978). 251-261 are used to
!  compute oxygen weight gain and zro2 thickness.
!      p      = output linear power generated by the zr+o2 = zro2
!                 reaction(w/m).
!      al8    = output beta thickness (m).
!      ip2    = output/input pcmi parameter
!                ip2 = 0 implies no pcmi
!                ip2 = 2 implies pcmi
!      y8     = output/input oxide thickness(m).
!      y9     = output/input thickness of oxygen-stabilized alpha
!                 nearest to the outer cladding surface (m).
!      y9a    = output/input thickness of oxygen-stabilized alpha
!                 nearest to the uo2 fuel (m).
!      y9b    = output/input thickness of oxygen-stabilized alpha
!                 between y9 and y9a (m).
!      w1     = output/input oxygen uptake through the outer cladding
!                 surface (kg/m**2).
!      krap   = output/input error flag
!                 krap = 0 if no error detected
!                 krap = 1 if correlation range exceeded
!                 krap = 2 if impossible input detected
!      ctemp  = input cladding temperature (k).
!      dtz    = input duration of time step (s).
!      am5    = input wall thickness of as-fabricated rod (m).
!      drod   = input diameter  of as-fabricated rod (m).
!      pint   = input pellet-cladding interface pressure (pa).
!
!     this model should not be used outside the temperature range 1273-
!     2100k or for problems which cause the beta phase region to become
!     much smaller than the remainder of the cladding.
!      recommended input values for a fresh rod are:
!           pint = 0.0
!           y8,y9,y9a,y9b, and w1, al8 = 0.0
!           ip2 = 0
!
!  coxide was coded by N. L. Hampton in September, 1981 (CDF-MP-04).
!  Modified by D. L. Hagrman November 1981 (CDF-MP-04).
!
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
!
       real(kr) ctemp,dtz,am5,drod,pint,y8,y9,y9a,y9b,w1,p,al8
       integer krap,ip2
!
       real(kr) al2,al4,al7,w11,y6,y7b,y8f
       integer kpick
!
       include 'contrl.h'
       include 'ufiles.h'
!
       real(kr) al80,zoxden,zrden,zrheat,w1i,w2,y7,y7a
       real coxthk,coxthkr,coxwtk,coxwtkr
       integer ikrap,ip,ipint
       data zoxden,zrden,zrheat/5820.,6490.,6.45e-06/
!
!  Check input validity--if out of range,error flag is set to 2
!  (krap=2), input is listed, coxide returns.
! 
       if (ctemp.gt.0.0 .and. dtz.gt.0.0 .and. am5.gt.0.0 .and.
     & drod.gt.0.0 .and. pint.ge.0.0 .and. ip2.ge.0 .and. y8.ge.0.0
     & .and. y9.ge.0.0 .and. y9a.ge.0.0 .and. y9b.ge.0.0 .and.
     & w1.ge.0.0) then
                      ikrap = krap
                      al80=0.0
                      ipint = int(pint)
                      if(ipint .ne. 0) am5 = am5/2.
                      w1i = w1
                else
                      write(output,2773)
                      write(output,2772)ctemp,dtz,am5,drod,pint
                      write(output,2774)ip2,y8,y9,y9a,y9b,w1
                      p=1.0
                      al8=1.0
                      krap = 2
                      return
                 endif
!
!
       if(ipint.ne.0 .and. ip2.eq.0)    then
                 ip2=2
            else
                 if(ipint.eq.0 .and. ip2.ne.0)    then
                          ip2=0
            endif
       endif
!      ***** ip always zero on first pass *****
                 ip=0
!
  200 continue
!
  225  al2 = am5 - (1-ip)*(2.0*y8/3.0+y9) - ip*(y9a+y9b)
       if(ip2 .lt. 1) al2 = al2 - (y9a+y9b)
!      al2 = beta thickness at start of each time step.
!
!      ****** bypass outer layer calculations on second pass ******
!      ****** when ip=1 and calculate inner layers           ******
       if(ip.eq.1) go to 650
!
       kpick = 1
       if (chngno(70)) then
         y6 = coxthkr(ctemp,kpick)
       else
         y6 = coxthk(ctemp,kpick)
       endif
!
!     ****** check for temperatures out of range of correlation ******
!
      if(ctemp.lt.1273.)   then
!       ***** input temperature below range of the correlation *****
!
        if(ikrap .lt. 2) krap = 1
      endif
!
      if(ctemp.gt.2100.)    then
!         *** input temperature has exceeded cladding melt ***
        if(ikrap .lt. 2) krap = 1
!
!
      endif
!
       kpick=2
       if (chngno(70)) then
         y7 = coxthk(ctemp,kpick)
       else
         y7 = coxthkr(ctemp,kpick)
       endif
!
      y8=sqrt(y8**2+y6*dtz)
!     y8=oxide layer thickness after step
      y9=sqrt(y9**2+y7*dtz)
!     y9=alpha layer thickness after step
!
!
       if (chngno(70)) then
         w2 = coxwtk(ctemp)
       else
         w2 = coxwtkr(ctemp)
       endif
!
      w1=sqrt(w1**2+w2*dtz)
!     w1=total oxygen concentration after step
       w11=  y8*(5820.)*.26
!      w11 is the minimum oxygen in (kg/m**2) necessary to form the
!           oxide layer.
       if((w1-w11).le. 0.0) w1 = w11
!
!      ** bypass inside oxidation calculations until pcmi occurs (ip=1)*
       if(ip.eq.0) go to 671
!
!
  650  continue
       kpick = 3
       if (chngno(70)) then
         y7a = coxthkr(ctemp,kpick)
       else
         y7a = coxthk(ctemp,kpick)
       endif
       kpick = 4
       if (chngno(70)) then
         y7b = coxthkr(ctemp,kpick)
       else
         y7b = coxthk(ctemp,kpick)
       endif
       y9a = sqrt(y9a**2 + y7a*dtz)
       y9b = sqrt(y9b**2 + y7b*dtz)
!
!
  671  continue
       al8 = am5 - (1-ip)*(2.0*y8/3.0+y9) - ip*(y9a+y9b)
       if(ip2 .lt. 1) al8 = al8 - (y9a+y9b)
       if(ip.eq.0) al80 = al8
!      al8 = beta thickness at end of each time step.
!
 2210  al4 = al2 - al8
!      al4 = delta beta during step
!
 2215  al7=al2/8.0
 2220  if(al4.gt.al7)     then
            write(output,2274)
            if(ikrap .lt. 2) krap = 1
       endif
!
       if(ip.eq.1)    then
            am5=2.0*am5
            al8=al8+al80
                else
                    if(ipint .ne. 0) ip = 1
                    if(ip.eq.1) go to 200
        endif
!
!
 2760 continue
       y8f   =  w1/(5820.*0.26)
       p     = 1.15e+08 * ( w1 - w1i) * drod / (2. * dtz)
!
!
!
 2774 format(3x,"ip2=",i10,"y8=",f10.4,"y9=",f10.4,"y9a=",f10.4,
     #"y9b=","w1=",f10.4)
 2274 format("****** decrease in beta layer is greater",/,
     *" than 1/8 initial layer...time step too large or beta layer",/,
     *" too depleted.")
 2773  format(5x,"******** input error in subroutine coxide ********")
 2772  format(3x,"ctemp=",f10.0," dt=",f10.2," am5=",f10.4," drod=",
     *f10.3,"pint=",e10.5)
 3100  continue
       return
       end
