      function polate (xy,xx,nn,kk)
c
c     polate returns an interpolated number, y(xx), using
c     an input table of up to 13 pairs of numbers.
c
c     polate = output interpolated value of y at xx.
c     kk     = output location of xx in the table of y,x pairs
c              (number of first pair with x less than xx).
c     xy     = input table of up to 13 pairs of y and x values --
c              y(1),x(1),y(2),x(2),......,y(nn),x(nn).
c     xx     = input value of independent variable for
c              which an interpolated dependent value is desired.
c     nn     = input number of pairs in the input table.
c     kk     = input estimated location of xx in the table of
c              pairs (number of first pair with x less than xx
c
c     polate was coded by d. l. hagrman to replace an older matpro
c     subcode of unknown origin july 1981 (cdr-mp-05).
c
$if def,in32,1
       implicit real*8(a-h,o-z)
c
      dimension xy(*)
c
c     check for 0 or 1 table entries
      if(nn - 1) 10,20,25
   10 print 901
  901 format(23h   polate given no data)
      polate = 0.0
      return
   20 polate = xy(1)
      return
c     check suggested position versus table limits
   25 if(kk .lt. 1) kk = 1
      if(kk .gt. (nn - 1)) kk = nn - 1
      k = kk
c     find table values nearest xx by adjusting index k
c     loop to lower index until xy(2*k) is less than or
c     equal to xx
   30 if(xy(2*k) .le. xx) go to 40
      k = k - 1
      if(k .gt. 0) go to 30
      polate = xy(1)
      return
c     loop to raise index until xy(2*k) is larger than xx or
c     the table is exhausted
   40 if(xy(2*k+2) .gt. xx) go to 50
      k = k + 1
      if(k .lt. nn) go to 40
      polate = xy(2*nn - 1)
      return
c     if xx is bounded above and below by table values
c     do a linear interpolation
   50 kk = k
      polate = xy(2*k-1) +(xx-xy(2*k)) * (xy(2*k+1)-xy(2*k-1))
     #                                 / (xy(2*k+2)-xy(2*k))
      return
      end
