      subroutine celast (costh2,costh4,cosfi2,cosfi4,ct2cf2,ct2cf4,
     #                   ct4cf2,ct4cf4,ctemp,fnck,cwkf,deloxy,crs)
c
$if def,in32,1
       implicit real*8(a-h,o-z)
c
      dimension cc(12),cs(12),crs(9)
c
c     celast calculates elastic compliance constants of zircaloy
c     from orientation parameters.
c
c     in the following, theta is the angle between the radial
c     or normal direction of the sample and the basal pole
c     direction. phi is the angle between the projection of the
c     basal pole direction onto the plane containing the axial
c     and circumferential directions and the circumferential
c     direction. alpha is the complement of phi.
c
c     crs(i) = output elastic compliance constants (1/pa).  s matrix
c              elements are
c
c               ( crs(1)  crs(7)  crs(9)    0       0       0    )
c
c               ( crs(7)  crs(2)  crs(8)    0       0       0    )
c
c               ( crs(9)  crs(8)  crs(3)    0       0       0    )
c
c               (   0       0       0     crs(4)    0       0    )
c
c               (   0       0       0       0     crs(5)    0    )
c
c               (   0       0       0       0       0     crs(6) )
c
c
c              where direction 1 is circumferential or transverse
c                              2 is axial or longitudinal
c                              3 is radial or normal
c
c     costh2 = input volume fraction weighted average of the squared
c              cosine of theta (unitless)
c     costh4 = input volume fraction weighted average of the
c              fourth power of the cosine of theta (unitless)
c     cosfi2 = input volume fraction weighted average of the squared
c              cosine of alpha (unitless ratio)
c     cosfi4 = input volume fraction weighted average of the
c              fourth power of the cosine of alpha (unitless)
c     ct2cf2 = input volume fraction weighted average of the product
c              of the squared cosine of theta and the squared cosine
c              of alpha (unitless)
c     ct2cf4 = input volume fraction weighted average of the product
c              of the squared cosine of theta and the fourth power of
c              the cosine of alpha (unitless)
c     ct4cf2 = input volume fraction weighted average of the product
c              of the fourth power of the cosine of theta and the
c              squared cosine of alpha (unitless)
c     ct4cf4 = input volume fraction weighted average of the product
c              of the fourth power of the cosine of theta and the
c              fourth power of the cosine of alpha (unitless)
c     ctemp  = input cladding temperature (k)
c     fnck   = input effective fast fluence (neutrons/(m**2))
c     cwkf   = input effective cold work (unitless ratio of areas)
c     deloxy = input average oxygen concentration excluding
c              oxide layer - average oxygen concentration of
c              as received cladding  (kg oxygen/kg zircaloy)
c
c     the elastic compliance constants are based on data from
c     (1) l. r. bunnell, g. b. mellinger  and j. l. bates, high
c         temperature properties of zircaloy - oxygen alloys, epri
c         report np - 524 (1977)
c     (2) e. s. fisher and c. j. renken, physical review 135 2a
c         (20 july,1964)  pp a482 - 494.
c     (3) p. e. armstrong and h. l. brown, transactions of the
c         metallurgical society of aime 230 (august 1964)
c         pp 962 - 966
c     (4) a. padel and a. groff, journal of nuclear materials 59
c         (1976) pp 325 - 326
c     (5) w. r. smalley, saxton core ii fuel performance evaluation.
c         part i: materials, wcap-3385-56 (september 1971)
c
c     celast was coded by d. l. hagrman in december 1977
c     last modified by d. l. hagrman march 1982
c
      if(ctemp .lt. 2098.) then
c
      cc(1) = 1.562e+11- 4.484e+07*ctemp
      cc(2) = 1.746e+11- 3.282e+07*ctemp
      cc(3) = 3.565e+10- 1.281e+07*ctemp
      cc(5) = 6.448e+10+ ctemp*(3.1882e+07- ctemp*1.2318e+04)
      cc(6) = 6.518e+10- 6.817e+05*ctemp
      if( cc(1)  .lt. (0.999*cc(5))) cc(5) = 0.999*cc(1)
      cc(4) = (cc(1) - cc(5))/2.
      factor= (cc(1) - cc(5))*((cc(1) + cc(5))*cc(2) - 2*((cc(6)**2)))
      cs(1) = 0.102841e-10 + ctemp * (-0.541683e-14 + ctemp *
     #        0.147552e-16)
      cs(2) = (cc(1) + cc(5))*(cc(1) - cc(5))/factor
      cs(3) = 0.390354e-10+ctemp * (-0.81186e-14+ ctemp *
     #        0.211523e-16)
      cs(4) = 1.0/cc(4)
      cs(5) = ((cc(6))**2-(cc(5)*cc(2)))/factor
      cs(6) = (cc(5) - cc(1))*cc(6)/factor
      b     = (1.16e+11+ ctemp*1.037e+08) * 5.7015
      bs    = (1.24e+11- ctemp*0.406e+08) * 5.7015
      c2    = 1.0
      if(fnck .gt. 1.0e+22) c2 = 0.88*(1.0 - exp(-fnck/1.0e+25))
     #                           + exp(-fnck/1.0e+25)
      c3    = -2.6e+10
      cs(1) = c2/(1.0/cs(1) + b  * deloxy + c3 * cwkf )
      cs(2) = c2/(1.0/cs(2) + b  * deloxy + c3 * cwkf )
      cs(3) = c2/(1.0/cs(3) + bs * deloxy )
      cs(5) = c2/(1.0/cs(5) + b  * deloxy + c3 * cwkf )
      cs(6) = c2/(1.0/cs(6) + b  * deloxy + c3 * cwkf )
      if( cs(1) .lt. (0.999*cs(5))) cs(5) = 0.999*cs(1)
      cs(4) = 2*(cs(1) - cs(5))
      crs(1)   = (cosfi4-2*ct2cf4+ct4cf4+2*ct2cf2-2*ct4cf2+costh4)*cs(1)
     # + (1.0 -2*cosfi2 + cosfi4 -2*costh2 +4*ct2cf2-2*ct2cf4
     # + costh4 - 2*ct4cf2 + ct4cf4) * cs(2) +  (-cosfi4 + 2*ct2cf4
     # - ct4cf4 + cosfi2 - 3*ct2cf2 +2*ct4cf2 + costh2 - costh4 )
     # * ( 2* cs(6) + cs(3) )
      crs(2)   = (cosfi4-2*ct2cf4+ct4cf4-2*cosfi2+2*ct2cf2+1.0)*cs(1)
     # + (cosfi4 - 2*ct2cf4 + ct4cf4 )*cs(2) + (cosfi2 - cosfi4
     # + 2*ct2cf4 - ct2cf2 - ct4cf4) * (2*cs(6) + cs(3))
      crs(3)   = (1.0 - 2*costh2 + costh4) * cs(1)
     # +(costh2 - costh4)* (2*cs(6) + cs(3)) + costh4 * cs(2)
      crs(4)   =  ( 2 * (1.0 - costh2 - cosfi2) + 6 *  ct2cf2
     # -4 * ct4cf2 ) *cs(1) + 4 * ( ct2cf2 - ct4cf2 ) * cs(2)
     # + ( costh2 + cosfi2 - 5 * ct2cf2 + 4 * ct4cf2 ) * cs(3)
     # + 2 * (-1.0 + costh2 + cosfi2 - ct2cf2 ) * cs(5)
     # + 8 * (-ct2cf2 + ct4cf2 ) * cs(6)
      crs(5)   = (costh2 - costh4 + 0.5*cosfi2 - 1.5*ct2cf2 + ct4cf2) *
     # cs(1) +  (costh2 - costh4 - ct2cf2 + ct4cf2 ) * cs(2)  +
     # (1.0 - 4*costh2 + 4*costh4 - cosfi2 + 5*ct2cf2 - 4*ct4cf2)*0.25*
     # cs(3) - 0.5*(cosfi2 - ct2cf2)*cs(5) - 2*(costh2 - costh4 -ct2cf2
     # +ct4cf2 )*cs(6)
      crs(5)   =  4.0 * crs(5)
      crs(6)   = (0.5*costh2 + cosfi2 - cosfi4 - 2*ct2cf2 + 2*ct2cf4 +
     # ct4cf2 - ct4cf4) * cs(1) + (cosfi2 - cosfi4 - 2*ct2cf2 +2*ct2cf4+
     # ct4cf2 - ct4cf4) * cs(2) + (1.0 - 4*cosfi2 + 4*cosfi4 - costh2 +
     # 8*ct2cf2 - 8*ct2cf4 - 4*ct4cf2 + 4*ct4cf4 ) * 0.25*cs(3) -
     # 0.5*costh2 * cs(5) -2.0 * (cosfi2 - cosfi4 - 2*ct2cf2 +
     # 2 * ct2cf4 + ct4cf2 - ct4cf4 ) * cs(6)
      crs(6)   =  4.0 * crs(6)
      crs(7)   = (cosfi2 - cosfi4 - 2*ct2cf2 + 2*ct2cf4 + ct4cf2
     # - ct4cf4) * cs(1) + (cosfi2 - cosfi4 -2*ct2cf2 + 2*ct2cf4
     # + ct4cf2 - ct4cf4) * ( cs(2) - cs(3) ) + costh2 * cs(5)
     # + ( 1.0 - costh2 - 2*cosfi2 + 2*cosfi4 + 4*ct2cf2 - 4*ct2cf4
     # - 2*ct4cf2 + 2*ct4cf4) * cs(6)
      crs(8)   = (ct2cf2 - ct4cf2) * ( cs(1) + cs(2) - cs(3) ) +
     # (1.0 - costh2 - cosfi2+ ct2cf2) * cs(5) + ( costh2 + cosfi2
     # - 3*ct2cf2 + 2*ct4cf2 ) * cs(6)
      crs(9)   = (costh2 - costh4 - ct2cf2 + ct4cf2) * ( cs(1) +
     # cs(2) - cs(3) ) + (cosfi2 - ct2cf2) * cs(5) + (1.0 - 2*costh2
     # +2*costh4 - cosfi2 + 3*ct2cf2 - 2*ct4cf2) * cs(6)
      if(ctemp .lt. 1090. ) go to 101
c
c     calculate a to a + b and a + b to b boundaries
      wfox = deloxy + 0.0012
      taab = 1094. + wfox * (-1.289e+03 + wfox * 7.914e+05)
      if ( wfox .lt. 0.025) go to 15
      taab = 1556.4 + 3.8281e+04*(wfox - 0.025)
   15 tabb = 392.46*((100*deloxy + 0.1242807)**2 + 3.1417)
      if (deloxy .lt. 4.7308937e-03) go to 25
      tabb = (100*deloxy + 0.12) * 491.157 + 1081.7413
   25 continue
c
      if (ctemp .lt. taab) go to 101
      if (ctemp .gt. tabb) go to 35
      cc(7) = 1.562e+11- 4.484e+07*taab
      cc(8) = 1.746e+11- 3.282e+07*taab
      cc(9) = 3.565e+10- 1.281e+07*taab
      cc(11)= 6.448e+10+ taab *(3.1882e+07- taab *1.2318e+04)
      cc(12)= 6.518e+10- 6.817e+05*taab
      if( cc(7) .lt. (0.999*cc(11))) cc(11) = 0.999*cc(7)
      fxctor= (cc(7) -cc(11))*((cc(7) +cc(11))*cc(8) -2*((cc(12)**2)))
      cs(7) = 0.102841e-10 + taab  * (-0.541683e-14 + taab  *
     #        0.147552e-16 )
      cs(8) = (cc(7) +cc(11))*(cc(7) -cc(11))/fxctor
      cs(9) = 0.390354e-10+taab  * (-0.81186e-14+ taab  *
     #        0.211523e-16)
      cs(11)=((cc(12))**2-(cc(11)*cc(8)))/fxctor
      cs(12)=(cc(11) -cc(7))*cc(12)/fxctor
      bt    =(1.16e+11+ taab *1.037e+08) * 5.7015
      bst   =(1.24e+11- taab *0.406e+08) * 5.7015
      cs(7) = c2/(1.0/cs(7) + bt * deloxy + c3 * cwkf )
      cs(8) = c2/(1.0/cs(8) + bt * deloxy + c3 * cwkf )
      cs(9) = c2/(1.0/cs(9) + bst* deloxy )
      cs(11)= c2/(1.0/cs(11)+ bt * deloxy + c3 * cwkf )
      cs(12)= c2/(1.0/cs(12)+ bt * deloxy + c3 * cwkf )
      if( cs(7) .lt. (0.999*cs(11))) cs(11) = 0.999*cs(7)
      cs(10)= 2*(cs(7) - cs(11))
      cls1     = (cosfi4-2*ct2cf4+ct4cf4+2*ct2cf2-2*ct4cf2+costh4)*cs(7)
     # + (1.0 -2*cosfi2 + cosfi4 -2*costh2 +4*ct2cf2-2*ct2cf4
     # + costh4 - 2*ct4cf2 + ct4cf4) * cs(8) +  (-cosfi4 + 2*ct2cf4
     # - ct4cf4 + cosfi2 - 3*ct2cf2 +2*ct4cf2 + costh2 - costh4 )
     # * ( 2* cs(12)+ cs(9) )
      cls2     = (cosfi4-2*ct2cf4+ct4cf4-2*cosfi2+2*ct2cf2+1.0)*cs(7)
     # + (cosfi4 - 2*ct2cf4 + ct4cf4 )*cs(8) + (cosfi2 - cosfi4
     # + 2*ct2cf4 - ct2cf2 - ct4cf4) * (2*cs(12)+ cs(9))
      cls3     = (1.0 - 2*costh2 + costh4) * cs(7)
     # +(costh2 - costh4)* (2*cs(12)+ cs(9)) + costh4 * cs(8)
      cls4     =  ( 2 * (1.0 - costh2 - cosfi2) + 6 *  ct2cf2
     # -4 * ct4cf2 ) *cs(7) + 4 * ( ct2cf2 - ct4cf2 ) * cs(8)
     # + ( costh2 + cosfi2 - 5 * ct2cf2 + 4 * ct4cf2 ) * cs(9)
     # + 2 * (-1.0 + costh2 + cosfi2 - ct2cf2 ) * cs(11)
     # + 8 * (-ct2cf2 + ct4cf2 ) * cs(12)
      cls5     = (costh2 - costh4 + 0.5*cosfi2 - 1.5*ct2cf2 + ct4cf2) *
     # cs(7) +  (costh2 - costh4 - ct2cf2 + ct4cf2 ) * cs(8)  +
     # (1.0 - 4*costh2 + 4*costh4 - cosfi2 + 5*ct2cf2 - 4*ct4cf2)*0.25*
     # cs(9) - 0.5*(cosfi2 - ct2cf2)*cs(11)- 2*(costh2 - costh4 -ct2cf2
     # +ct4cf2 )*cs(12)
      cls5 = cls5 * 4.0
      cls6     = (0.5*costh2 + cosfi2 - cosfi4 - 2*ct2cf2 + 2*ct2cf4 +
     # ct4cf2 - ct4cf4) * cs(7) + (cosfi2 - cosfi4 - 2*ct2cf2 +2*ct2cf4+
     # ct4cf2 - ct4cf4) * cs(8) + (1.0 - 4*cosfi2 + 4*cosfi4 - costh2 +
     # 8*ct2cf2 - 8*ct2cf4 - 4*ct4cf2 + 4*ct4cf4 ) * 0.25*cs(9) -
     # 0.5*costh2 * cs(11)-2.0 * (cosfi2 - cosfi4 - 2*ct2cf2 +
     # 2 * ct2cf4 + ct4cf2 - ct4cf4 ) * cs(12)
      cls6 = cls6 * 4.0
      cls7     = (cosfi2 - cosfi4 - 2*ct2cf2 + 2*ct2cf4 + ct4cf2
     # - ct4cf4) * cs(7) + (cosfi2 - cosfi4 -2*ct2cf2 + 2*ct2cf4
     # + ct4cf2 - ct4cf4) * ( cs(8) - cs(9) ) + costh2 * cs(11)
     # + ( 1.0 - costh2 - 2*cosfi2 + 2*cosfi4 + 4*ct2cf2 - 4*ct2cf4
     # - 2*ct4cf2 + 2*ct4cf4) * cs(12)
      cls8     = (ct2cf2 - ct4cf2) * ( cs(7) + cs(8) - cs(9) ) +
     # (1.0 - costh2 - cosfi2+ ct2cf2) * cs(11)+ ( costh2 + cosfi2
     # - 3*ct2cf2 + 2*ct4cf2 ) * cs(12)
      cls9     = (costh2 - costh4 - ct2cf2 + ct4cf2) * ( cs(7) +
     # cs(8) - cs(9) ) + (cosfi2 - ct2cf2) * cs(11)+ (1.0 - 2*costh2
     # +2*costh4 - cosfi2 + 3*ct2cf2 - 2*ct4cf2) * cs(12)
      cts1 = 9.21e+10 - tabb * 4.05e+07
      cts2 = cts1
      cts3 = cts1
      cts4 = 3.49e+10 - tabb * 1.66e+07
      cts5 = cts4
      cts6 = cts4
      cts7 = (2*cts4*cts1)/(2*cts4 - cts1)
      cts8 = cts7
      cts9 = cts7
      crs(1) = 1.0/((1.0/cls1) + (ctemp - taab) * (cts1 - (1.0/cls1))/
     #         (tabb - taab))
      crs(2) = 1.0/((1.0/cls2) + (ctemp - taab) * (cts2 - (1.0/cls2))/
     #         (tabb - taab))
      crs(3) = 1.0/((1.0/cls3) + (ctemp - taab) * (cts3 - (1.0/cls3))/
     #         (tabb - taab))
      crs(4) = 1.0/((1.0/cls4) + (ctemp - taab) * (cts4 - (1.0/cls4))/
     #         (tabb - taab))
      crs(5) = 1.0/((1.0/cls5) + (ctemp - taab) * (cts5 - (1.0/cls5))/
     #         (tabb - taab))
      crs(6) = 1.0/((1.0/cls6) + (ctemp - taab) * (cts6 - (1.0/cls6))/
     #         (tabb - taab))
      crs(7) = 1.0/((1.0/cls7) + (ctemp - taab) * (cts7 - (1.0/cls7))/
     #         (tabb - taab))
      crs(8) = 1.0/((1.0/cls8) + (ctemp - taab) * (cts8 - (1.0/cls8))/
     #         (tabb - taab))
      crs(9) = 1.0/((1.0/cls9) + (ctemp - taab) * (cts9 - (1.0/cls9))/
     #         (tabb - taab))
      go to 101
c
   35 crs(1) = 1.0/(9.21e+10 - ctemp*4.05e+07)
      crs(2) = crs(1)
      crs(3) = crs(1)
      crs(4) = 1.0/(3.49e+10 - ctemp*1.66e+07)
      crs(5) = crs(4)
      crs(6) = crs(4)
      crs(7) = crs(1) - 0.5*crs(4)
      crs(8) = crs(7)
      crs(9) = crs(7)
  101 continue
      else
         do 50 i=1,9
   50 crs(i) = 1.0e+10
      endif
c
      return
      end
