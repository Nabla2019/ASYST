       subroutine cobild (ti,tf,dtz,am5,drod,pint,ip2,y8,y9,y9a,y9b,aao,
     & abo,aco,ado,aeo,afo,ago,aho,aio,aai,abi,aci,adi,aei,afi,agi,ahi,
     & aii,w1,p,persat,bwtfr,al8,krap)
!  Data and analyses from J. V. Cathcart of ORNL are used to compute the
!  zro2 and oxygen-stabilized alpha thicknesses on the cladding outer
!  surface and similar equations from P. Hofmann of the
!  Kernforschungszentrum Karlsruhe (KFK) for oxygen-stabilized alpha
!  layers on the cladding inner surface when there is fuel pellet-
!  cladding mechanical interaction (PCMI).
!
!  This program was adapted from the program "build5" written by
!  R. E. Pawel of Oak Ridge National Laboratory (ORNL).
!
!  Oxygen profiles are computed on the basis of a finite difference
!  method assuming the transient to be composed of a series of
!  isothermal segments.
!
!      p      = output linear power generated by the zr+o2 = zro2
!                 reaction(w/m).
!      persat = output per cent saturation of the beta (unitless).
!      bwtfr  = output average oxygen concentration in beta
!                 (weight fraction).
!      al8    = output beta thickness (m).
!      ip2    = output/input pcmi parameter
!                ip2 = 0 implies no pcmi--last step when input
!                        this step when output.
!                ip2 = 2 implies pcmi--last step when input
!                        this step when output.
!      y8     = output/input oxide thickness(m).
!      y9     = output/input thickness of oxygen-stabilized alpha
!                 nearest to the outer cladding surface (m).
!      y9a    = output/input thickness of oxygen-stabilized alpha
!                 nearest to the uo2 fuel (m).
!      y9b    = output/input thickness of oxygen-stabilized alpha
!                 between y9 and y9a (m).
!      aao to
!        aio  = output/input oxygen concentrations at equidistant nodes
!               in the beta
!                aao = concentration at the alpha-beta interface and
!                aio = concentration at the inner beta surface if
!                      there is no pcmi or at the beta midpoint if
!                      there is pcmi.
!      aai to
!        aii  = output/input oxygen concentrations at equidistant nodes
!               in the inner half of the beta if there is pcmi.
!                aai = the concentration at the inner alpha-beta
!                      interface and
!                aii = the concentration at the beta midpoint.
!                 all concentrations are in weight fraction of oxygen.
!      w1     = output/input oxygen uptake through the outer cladding
!                 surface (kg/m**2).
!      krap   = output/input eror flag
!                 krap = 0 if no errors detected
!                 krap = 1 if correlation range exceeded
!                 krap = 2 if impossible input detected
!      ti     = input cladding temperature at start of time step(k).
!      tf     = input cladding temperature at end of time step (k).
!      dtz    = input duration of time step (s).
!      am5    = input wall thickness of as-fabricated rod (m).
!      drod   = input diameter  of as-fabricated rod (m).
!      pint   = input pellet-cladding interface pressure (pa).
!
!     the equations used in this subroutine are based on data from
!     (1) j. v. cathcart, quartrly progress report on the zirconium
!         metal-water oxidation kinetics program sponsored by the nrc
!         division of reactor safety research for october-december
!         1976, ornl/nureg/tm-87 (february 1977).
!     (2) v. f. urbanic and t. r. heidrick, "high temperature oxidation
!         of zircaloy-2 and zircaloy-4 in steam," journal of nuclear
!         materials 75 (1978), pp. 251-261.
!     (3) p. hofmann, c. politis, "chemical interaction between uo2
!         and zry-4 in the temperature range between 900 and 1500 c,"
!         paper presented at the fourth international conference on
!         zirconium in the nuclear industry, stratford-upon-avon,
!         england, june 26-29, 1979.
!     (4) l. baker and l. c. just, studies of metal-water reactions
!         at high temperatures-iii. experimental and theoretical
!         studies of the zirconium-water reaction, anl-6548 (may 1962)
!     (5) r. e. pawel, "diffusion in a finite system with a moving
!         boundary," journal of nuclear materials, 49 (january 1974)
!         pp. 281-290.
!     (6) r. a. perkins, zirconium metal water oxidation kinetics ii,
!         oxygen-18 diffusion in b zircaloy, ornl/nureg/tm-19(1976).
!     (7) r. e. pawel, r. a. perkins, r. a. mckee, j. v. cathcart,
!         g. j. yurek, and r. e. druschel, "diffusion of oxygen in
!         beta-zircaloy and the high temperature zircaloy-steam
!         reaction," zirconium in the nuclear industry, astm stp 663
!         (1977) pp. 119-133.
!
!     this model should not be used outside the temperature range 1273-
!     2100k or for problems which cause the beta phase region to become
!     much smaller than the remainder of the cladding
!
!      recommended input values for a fresh rod are:
!           pint = 0.0
!           aao to aio, all = 0.0012
!           aai to aii, all = 0.0
!           y8,y9,y9a,y9b, and w1, all = 0.0
!           ip2 = 0
!
!  Cobild was coded by G. A. Reymann in July 1977.
!  Updated by G. A. Reymann in April 1979.
!  Updated by G. H. Beers to improve program efficiency and add input
!  check in November 1981 (CDF-MP-07).
!
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
!
       real(kr) ti,tf,dtz,am5,drod,pint,y8,y9,y9a,y9b,aao,abo,aco,ado,
     & aeo,afo,ago,aho,aio,aai,abi,aci,adi,aei,afi,agi,ahi,aii,w1,p,
     & persat,bwtfr,al8
       integer ip2,krap
!
       include 'contrl.h'
       include 'ufiles.h'
!
       real(kr) al2,al4,al5,al6,al7,aa(6),ab(6),ac(6),ad(6),ae(6),af(6),
     & ag(6),ah(6),ai(6),al80,am1,am16,am3,am4,aq2,aq20,ar,as1,az3,az8,
     & fip,t1,t2,ts,w11,w1i,w2,y5,y6,y7,y7a,y7b
       real(kr) coxthk,coxthkr,coxwtk,coxwtkr
       integer ikrap,ip,ipint,j
!
!  Save incoming value of the krap error flag.
       ikrap  = krap
!
! test input for proper ranges.  set krap error flag to specified values
! if exceptions are found.
      if  (    dtz  .le.  0.0
     +    .or.  am5  .le.  0.0
     +     .or.  drod  .le.  0.0
     +      .or.  y8    .lt.  0.0
     +       .or.  y9    .lt.  0.0
     +        .or.  y9a   .lt.  0.0
     +         .or.  y9b   .lt.  0.0
     +          .or.  w1    .lt.  0.0  )   then
!
! set krap error flag to 2 and check incoming krap value for change
          krap  = 2
          if  (ikrap .ne. 2) then
              write (output , 901 )
              write (output , 902 )  dtz , am5 , drod , y8 , y9 , y9a ,
     +                            y9b , w1
          endif
          return
      endif
!
      if  (     aao  .lt.  0.00119
     +     .or.  abo  .lt.  0.00119
     +      .or.  aco  .lt.  0.00119
     +       .or.  ado  .lt.  0.00119
     +        .or.  aeo  .lt.  0.00119
     +         .or.  afo  .lt.  0.00119
     +          .or.  ago  .lt.  0.00119
     +           .or.  aho  .lt.  0.00119
     +            .or.  aio  .lt.  0.00119 )   then
! set krap error flag to 2 and check incoming krap value for change
          krap  = 2
          if (ikrap .ne. 2) then
              write (output , 901 )
              write (output , 903 )  aao , abo , aco , ado , aeo ,
     +                        afo , ago , aho , aio
              write (output , 904 )  aai , abi , aci , adi , aei ,
     +                        afi , agi , ahi , aii
          endif
          return
      endif
! save input temperatures in variables which may be altered if necessary
      t1  =  ti
      t2  =  tf
      ts  =  dtz
      if  ( ti .gt. 2100.0  .or.  tf .gt. 2100.0  )   then
          if(ikrap .lt. 2) krap = 1
      else  if  ( ti .lt. 1273.0  .or.  tf .lt. 1273.0  )   then
          if(ikrap .lt. 2) krap = 1
          if  ( ti .le. 1239.0  .and.  tf .le. 1239.0 )   then
             return
          else
              if  ( tf .lt. 1239.0 )   then
                  t2  =  1239.0
                  ts  =  dtz * ( ti - 1239.0 ) / ( ti - tf )
! if ti is < 1239 k then t2 is set to 1239 and a new time step ts is
! created just for use within cobuild.
              else if (ti .lt. 1239.0) then
                  t1  =  1239.0
                  ts  =  dtz * ( tf - 1239.0 ) / ( tf - ti )
              endif
          endif
      endif
! initialize these holding variables
      aq20  =  0.0
      al80  =  0.0
      ipint  =  int( pint )
! ipint is integral part of pellet-cladding interface pressure
      if  ( ipint .ne. 0 )   then
          am5  =  0.5 * am5
      endif
! save incoming oxygen uptake through outer cladding surface in w1i
      w1i  =  w1
! set integration time increment
      az3  =  ts * 0.2
      ar   =  ( t2 - t1 ) / ts
! calculate temperature during interval  (k)
      az8  =  ( t1 + t2 ) * .5
! calculate beta saturation concentration
      if  (  az8 .lt. 1373.0 )   then
          as1  =  -0.0042807 + sqrt( ( az8 / 392.46 ) - 3.1417 )
      else
          as1  =  ( az8 - 1081.7 ) / 491.157
      endif
      as1  =  as1 / 100.0
! calculate d (ox in beta),  (cm2/s)
      al5  =  2.630e-06 * exp( -2.82e+04 / ( 1.987 * az8 ))
      if (ipint.ne.0 .and. ip2.eq.0) then
          ip2   =  2
          aai   =  aio
          abi   =  ( aho + aio ) * 0.5
          aci   =  aho
          adi   =  ( ago + aho ) * 0.5
          aei   =  ago
          afi   =  ( afo + ago ) * 0.5
          agi   =  afo
          ahi   =  ( aeo + afo ) * 0.5
          aii   =  aeo
          aio   =  aeo
          aho   =  ( ado + aeo ) * 0.5
          ago   =  ado
          afo   =  ( aco + ado ) * 0.5
          aeo   =  aco
          ado   =  ( abo + aco ) * 0.5
          aco   =  abo
          abo   =  ( 3.0 * aao + 6.0 * abo - aeo ) * 0.125
      else if (ipint.eq.0 .and. ip2.ne.0) then
          ip2   =  0
          abo   =  aco
          aco   =  aeo
          ado   =  ago
          aeo   =  ( aio + aii ) * 0.5
          afo   =  agi
          ago   =  aei
          aho   =  aci
          aio   =  aai
          aai   =  0.
          abi   =  0.
          aci   =  0.
          adi   =  0.
          aei   =  0.
          afi   =  0.
          agi   =  0.
          ahi   =  0.
          aii   =  0.
      endif
      ip    = 0
      aa( 1 )  =  aao
      ab( 1 )  =  abo
      ac( 1 )  =  aco
      ad( 1 )  =  ado
      ae( 1 )  =  aeo
      af( 1 )  =  afo
      ag( 1 )  =  ago
      ah( 1 )  =  aho
      ai( 1 )  =  aio
      go  to  225
  200 aa( 1 )  =  aai
      ab( 1 )  =  abi
      ac( 1 )  =  aci
      ad( 1 )  =  adi
      ae( 1 )  =  aei
      af( 1 )  =  afi
      ag( 1 )  =  agi
      ah( 1 )  =  ahi
      ai( 1 )  =  aii
  225 fip = float( ip )
      al2 = am5 - ( 1.0 - fip ) * ( 2.0 * y8 / 3.0 + y9 )
     +                                  - fip * ( y9a + y9b )
      if  ( ip2 .eq. 0 )   then
          al2  =  al2 - ( y9a + y9b )
      endif
!  al2 is the beta thickness at start of each time step.
       y5 = az3
  550  az8 = t1 + ar*(y5 - az3*0.5)
!  az8 is the average temp. during increment.
       if (ip .eq. 1) then
         if (chngno(70)) then
           y7a = coxthkr(az8,3)
           y7b = coxthkr(az8,4)
         else
           y7a = coxthk(az8,3)
           y7b = coxthk(az8,4)
         endif
         y9a = sqrt(y9a**2 + y7a*az3)
         y9b = sqrt(y9b**2 + y7b*az3)
       else
         if (chngno(70)) then
           y6 = coxthkr(az8,1)
           y7 = coxthkr(az8,2)
         else
           y6 = coxthk(az8,1)
           y7 = coxthk(az8,2)
         endif
         y8 = sqrt(y8**2 + y6*az3)
!  y8 is the oxide layer thickness after increment.
         y9 = sqrt(y9**2 + y7*az3)
!  y9 is the alpha layer thickness after increment.
           if (chngno(70)) then
             w2 = coxwtkr(az8)
           else
             w2 = coxwtk(az8)
           endif
           w1 = sqrt(w1**2 + w2*az3)
!  w1 is the total oxygen concentration after increment.
          w11 = y8*5.82*0.26
!  w11 is the minimum oxygen in (kg/m**2) necessary to form oxide layer.
          if  ( ( w1 - w11 ) .le.  0.0 )   then
              w1  =  w11
          endif
      endif
      y5   = y5 + az3
      if  ( y5 .le. ts )   then
          go  to  550
      endif
      fip   =  float( ip )
      al8   =  am5 - ( 1.0 - fip ) * ( .66667 * y8 + y9 )
     +                                     - fip * ( y9a + y9b )
      if  ( ip2 .eq. 0 )   then
          al8   =  al8 - ( y9a + y9b )
      endif
      if  ( ip .eq. 0 )   then
          al80  =  al8
      endif
! al8 is the beta thickness at end of each time step
      al4   =  al2 - al8
! al4 is delta beta during step
      al7   =  al2 * 0.125
      if  ( al4 .gt. al7 )   then
          if(ikrap .lt. 2) krap = 1
          write (output , 2771 )
      endif
      am3   =  al4 / ( 2.0 * al2 )
      am4   =  ( al4 ** 2 ) / ( 2.0 * ( al2 ** 2 ) )
      al6   =  al8 * 0.125
! al6 is h(x), the distance increment for fd network.
      am1   =  ( al6 ** 2 ) / ( al5 * az3 )
      if  ( am1 .lt. 2.0 )   then
          if(ikrap .lt. 2) krap = 1
          write (output , 5020 )
      endif
! in steps 2260 to 2320 the initial oxygen concentrations are
! calculated by parabolic interpolation. this is necessary due to
! the decrease in beta thickness as the other layers grow.
      aa( 1 )  =  aa( 1 ) + 8.0 * am3 * ( 4.0 * ab( 1 ) - 3.0 * aa( 1 )
     +             - ac( 1 ) ) + 64.0 * am4 * ( ac( 1 ) + aa( 1 )
     +             - 2.0 * ab( 1 ))
      if  ( as1 .gt. aa( 1 ) )   then
          aa( 1 )  =  as1
      endif
      ab(1) = ab(1) + 7.*am3*(4.*ac(1)-3.*ab(1)-ad(1)) +
     #         49.0*am4*(ad(1)+ab(1)-2.*ac(1))
      ac(1) = ac(1) + 6.*am3*(4.*ad(1)-3.*ac(1)-ae(1)) +
     #         36.0*am4*(ae(1)+ac(1)-2.*ad(1))
      ad(1) = ad(1) + 5.*am3*(4.*ae(1)-3.*ad(1)-af(1)) +
     #         25.0*am4*(af(1)+ad(1)-2.*ae(1))
       ae(1) = ae(1) + 4.*am3*(4.*af(1)-3.*ae(1)-ag(1)) +
     #         16.0*am4*(ag(1)+ae(1)-2.*af(1))
      af(1) = af(1) + 3.*am3*(4.*ag(1)-3.*af(1)-ah(1)) +
     #          9.0*am4*(ah(1)+af(1)-2.*ag(1))
      ag(1) = ag(1) + 2.*am3*(4.*ah(1)-3.*ag(1)-ai(1)) +
     #          4.0*am4*(ai(1)+ag(1)-2.*ah(1))
      ah(1) = ah(1) + 1.*am3*(4.*ai(1)-3.*ah(1)-ah(1)) +
     #          1.0*am4*(ah(1)+ah(1)-2.*ai(1))
      do  2535  j = 2 , 6
          aa( j )  =  aa( 1 )
          ab( j )  =  (aa(j-1) + (am1-2.)*ab(j-1) + ac(j-1))/(am1)
          ac( j )  =  (ab(j-1) + (am1-2.)*ac(j-1) + ad(j-1))/(am1)
          ad( j )  =  (ac(j-1) + (am1-2.)*ad(j-1) + ae(j-1))/(am1)
          ae( j )  =  (ad(j-1) + (am1-2.)*ae(j-1) + af(j-1))/(am1)
          af( j )  =  (ae(j-1) + (am1-2.)*af(j-1) + ag(j-1))/(am1)
          ag( j )  =  (af(j-1) + (am1-2.)*ag(j-1) + ah(j-1))/(am1)
          ah( j )  =  (ag(j-1) + (am1-2.)*ah(j-1) + ai(j-1))/(am1)
          ai( j )  =  ((am1-2.)*ai(j-1)+2.*ah(j-1))/am1
 2535 continue
!  calculate oxygen in beta layer
      aq2   = ( 6490. * al6 ) / 3.
      aq2   =  aq2 * (aa( 6 ) + ai( 6 )
     +            + 2.0 * ( ac( 6 ) + ae( 6 ) + ag( 6 ))
     +                + 4.0 * ( ab( 6 ) + ad( 6 ) + af( 6 ) + ah( 6 )))
      if (ip .eq. 1) then
          aai   =  aa( 6 )
          abi   =  ab( 6 )
          aci   =  ac( 6 )
          adi   =  ad( 6 )
          aei   =  ae( 6 )
          afi   =  af( 6 )
          agi   =  ag( 6 )
          ahi   =  ah( 6 )
          aii   =  ai( 6 )
          am5   =  2.0 * am5
          al8   =  al8 + al80
          aq2   =  aq2 + aq20
      else
! aq2 is the oxygen in the beta, kg/m**2, (by simpson's rule)
          aq20   =  aq2
          aao    =  aa( 6 )
          abo    =  ab( 6 )
          aco    =  ac( 6 )
          ado    =  ad( 6 )
          aeo    =  ae( 6 )
          afo    =  af( 6 )
          ago    =  ag( 6 )
          aho    =  ah( 6 )
          aio    =  ai( 6 )
          if  ( ipint .ne. 0 )   then
              ip   = 1
          endif
          if  ( ip .eq. 1 )    then
              go  to  200
          endif
      endif
      persat = 100.0*aq2/(as1*al8*6490.)
      p      =  1.15e+08 * drod * ( w1 - w1i ) / (2. * dtz)
      bwtfr  =  ( aq2 / ( 6490. * al8 ) ) - 0.0012
      if  ( bwtfr .lt. 0.0 )  then
          bwtfr   =  0.0
      endif
! awtfr = weight fraction oxygen in the alpha zircaloy.
! awtfr typically = 0.047.
! conversion to si units
       return
 2771 format("******  decrease in beta layer is greater",/,
     *" than 1/8 initial layer...time step too large or beta layer",/,
     *" too depleted.")
 5020  format(//20x,'diffusion is occurring too rapidly for cobild
     # to accurately calculate oxygen concentrations ' )
  901 format  ( //t2 , '****** input error detected for first time' )
  902 format  ( /t3 , 'dt =' , e12.5 , 2x , 'am5 =' , e11.5 , 2x ,
     +         'drod =' , e11.5 , 2x , 'y8 =' , e12.5 / 2x , 'y9 =' ,
     +         e12.5 , 2x , 'y9a =' , e11.5 , 2x , 'y9b =' , e11.5 ,
     +         2x , 'w1 =' , e11.5 )
  903 format  ( /t3 , 'aao =' , e11.5 , 2x , 'abo =' , e11.5 , 2x ,
     +         'aco =' , e11.5 , 2x , 'ado =' , e11.5 , 2x , 'aeo =' ,
     +         e11.5 / 2x , 'afo =' , e11.5 , 2x , 'ago =' , e11.5 ,
     +         2x , 'aho =' , e11.5 , 2x , 'aio =' , e11.5 )
  904 format  ( /t3 , 'aai =' , e11.5 , 2x , 'abi =' , e11.5 , 2x ,
     +         'aci =' , e11.5 , 2x , 'adi =' , e11.5 , 2x , 'aei =' ,
     +         e11.5 / 2x , 'afi =' , e11.5 , 2x , 'agi =' , e11.5 ,
     +         2x , 'ahi =' , e11.5 , 2x , 'aii =' , e11.5 )
      end
