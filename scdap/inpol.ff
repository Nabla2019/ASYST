*mlist
*if def,selap
       subroutine inpol (nadt,ft,kfun,time,f)
c
c  Descriptive sentence goes here.
c
c  Cognizant engineer: ewc.
c
c This is a COUPLE ROUTINE
*in32 nadt
*in32end
c     this routine returns a value for a function (f) at some time
c     value (time).  linear interpolation between time points is used.
c
c     nadt(2,kfun) =address in the storage array, ft, of
c                    the last time value input for each function
c     ft           = storage array for all time dependent function
c                    information.  format is... f(t),t,f(t),t,...
c     kfun         = function number
c     time         = time value
c     f            = function value (returned from this routine)
c     the parameter 'time' used in this routine is mearly the
c     independent variable for which f is the corresponding
c     dependent variable
c     define the number of points in the function, nt, and set the
c     address of the function value for the first point, nf1.
c
       implicit none
c
c  Local variables.
       integer i,k1,k2,kfun,loc,n,nf1,nt
       real dt,f,f1,f2,t1,t2,time
       integer nadt(3,*)
       real ft(*)
c
      k2 = nadt(2,kfun)
      k1 = 0
      n = kfun -1
      if(n.gt.0) k1 = nadt(2,n)
      nt = (k2-k1)/ 2
      nf1 = k1 +1
      k1 = nt -1
c     locate the two time points which bracket the current time
      do 50 i=1,k1
      loc = nf1 + 2* (i-1)
      t1 = ft(loc+1)
      t2 = ft(loc+3)
      if( (time.ge.t1) .and. (time.lt.t2) ) go to 100
   50 continue
c     out of range - will take boundary value
      if(time.ge.t2) f=ft(loc+2)
      loc=nf1
      t1=ft(loc+1)
      if(time.le.t1) f=ft(loc)
      go to 150
c     find the function value for t = time.
  100 f1 = ft(loc)
      f2 = ft(loc+2)
      dt = t2-t1
      f = f1 + (f2-f1) * (time-t1)/ dt
  150 continue
      return
      end
*endif
