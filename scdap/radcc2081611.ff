*mlist
       subroutine radcc2 (naz1,parstm)
c
c  Calculates the radiation heat transfer in a fuel bundle.
c
c  Cognizant engineer: ljs
c
c    Subroutines called: lsgedi and lsgefa from minerva mathematics
c                        library and emissv and zoemis from matpro
c
c    Engineer/programmer: L. Siefken
c
c    argument definitions:
c       naz1 = number of axial nodes  (input)
c       parstm(ndax) = partial pressure of steam at axial node
c
       use scdmod
       implicit none
cc
       include 'comctl.h'
       include 'fast.h'
       include 'voldat.h'
cc
       include 'cons.h'
       include 'scddat.h'
       include 'scntl.h'
       include 'bconds.h'
       include 'cpmdat.h'
       include 'fpdkht.h'
       include 'contrl.h'
       include 'radata.h'
       include 'scdads.h'
       include 'scdcom.h'
       include 'tblsp.h'
       include 'trnot1.h'
       include 'ufiles.h'
       include 'ndxara.h'
c
       integer naz1
       real parstm(ndax)
c
c  Local variables.
       real abf,abfi,abliq,absgs(ncomp1,ncomp1),abvap,alpd,amui,anum1,
     & area2,baij,bsubi(ncomp1),ctmax,ddrop,det(2),emf,emfi,
     & epsgs(ncomp1,ncomp1),epsl,grad(ncomp1,ncomp1),
     & hbsub1(ncomp1),hbsub2(ncomp1),hradw(ndax,ndcomp),
     & hsum1,hsum2,hsumef,qgas(ncomp1),qradsm,pathl(ndcomp,ndcomp),
     & sigsb,suma,sumef,tauni,tradth,trm1,trm2,tmaxc,ur1,zroxid
       real areaxx(ndcomp),areapr(ndcomp,ndcomp,2)
       integer i,iblk,info,ist,isteam,j,k,kk,n
       integer ichan,l
       integer ndbg
c
       data sigsb/ 5.6680e-8/,zroxid/0.3e-3/
c
       ndbg=0
cljs    if(timehy.ge.4.0.and.timehy.lt.5.0)ndbg=1
          if(ndbg.eq.1)then
          write(output,9005)timehy,ncomp1,iencl,igp
9005      format(' RADCC2 entered, timehy=',e10.4,' ncomp1=',i5,
     &    ' iencl=',i5,' igp=',i5)
          end if
       tradth = 250.0   
       if (scntrl(12)) tradth = 5000.0
       do k = 1,naz1
c  Calculate maximum component temperature.
cljs  bypass radiation for case of only shroud components
         tradth = 250.0
         tmaxc = 0.0
         iblk = 0
         if (idisrp(k) .eq. 1) iblk = 1
         do i = 1,ncomp1
           tmaxc = max(tmaxc,scd2(k,i)%tsur1l)
         enddo
cljs  if radiation only between two components and maximum
cljs  temperature less than 1000 K, then probably two nested  
cljs  shrouds; otherwise one cold rod and one shroud
cljs  Implement this check to avoid small residual error
cljs  in radiation causing small but cumulative damaging loss
cljs  of energy from a stagnant flow channel.
         if (iblk.eq.1 .or. tmaxc.lt.tradth) then
           do i = 1,ncomp1
             scd2(k,i)%qoutl = scd2(k,i)%hcnvcl*(scd2(k,i)%tsur1l -
     &       scd2(k,i)%tgradl)
             scd2(k,i)%qrdsrl = 0.0
           enddo
           qradab(iencl,k) = 0.0
           cycle
         endif
c  Calculate emissivities of surface of each component.
         do n = 1,ncomp1
           call zoemis (scd2(k,n)%tsur1l,zroxid,emsubn(n))
         enddo
c  Generate radiation matrix.
         isteam = 1
         alpd = 0.0
         ddrop = 1.e-4
         do i = 1,ncomp1
           do n = 1,ncomp1
c  Assume no droplets of water in steam.
             pathl(i,n) = pathll(k,i,n)
c  Approximate presence of hydrogen by inputting to emissv the partial
c  pressure of steam.
             call emissv (epsgs(i,n),absgs(i,n),scd2(k,n)%tgradl,
     &       parstm(k),pathl(i,n),scd2(k,n)%tsur1l,isteam,ddrop,alpd,
     &       epsl,abvap,abliq)
           enddo
         enddo
c  Modify diagonal terms of vapor emissivity and absorptivity to assure
c  conservation of energy.
c  If view factors were input by code user, do not adjust the diagonal
c  terms to account for radiation going a distance greater than two
c  pitch lengths.
         if (snc1(iencl)%nvfcal .gt. 0) then
           if (ncomp1 .ge. 2) then
             emf = 0.0
             do kk = 1,ncomp1
               emf = emf + epsgs(1,kk)*fviewz(k,1,kk)
             enddo
             do i = 2,ncomp1
               emfi = 0.0
               do j = 1,ncomp1
                 if (j .ne. i) emfi = emfi + epsgs(i,j)*fviewz(k,i,j)
               enddo
               if (fviewz(k,i,i).ge.1.e-10) epsgs(i,i) =
     &         (emf - emfi)/fviewz(k,i,i)
             enddo
             abf = 0.0
             do kk = 1,ncomp1
              abf = abf + absgs(1,kk)*fviewz(k,1,kk)
             enddo
             do i = 2,ncomp1
                abfi = 0.0
               do j = 1,ncomp1
                 if(j .ne. i) abfi = abfi + absgs(i,j)*fviewz(k,i,j)
               enddo
               if (fviewz(k,i,i) .lt. 1.e-10) absgs(i,i) =
     &         (abf - abfi)/fviewz(k,i,i)
             enddo
           endif
         endif
c  Generate radiation matrix.
         do i = 1,ncomp1
           do n = 1,ncomp1
             if (i .eq. n) then
               trm1 = 1.0
             else
               trm1 = 0.0
             endif
             tauni = (1. - absgs(n,i))
             grad(i,n) = trm1 - (1.0 - emsubn(i))*tauni*fviewz(k,i,n)
           enddo
         enddo
c  Invert matrix.
         call lsgefa (grad,ncomp1,ncomp1,ipvt,info)
         call lsgedi (grad,ncomp1,ncomp1,ipvt,det,worka,1)
c  Generate E_supI_subi and derivative vectors.
         do i = 1,ncomp1
           suma = 0.0
           hsum1 = 0.0
           hsum2 = 0.0
           do n = 1,ncomp1
             hsumef = 0.0
             sumef = 0.0
             do j = 1,ncomp1
               anum1 = epsgs(j,n)*fviewz(k,n,j)
               hsumef = hsumef + anum1
               sumef = sumef + anum1*scd2(k,j)%tgradl**4
             enddo
             trm1 = emsubn(n)*sigsb*scd2(k,n)%tsur1l**4
             trm2 = sigsb*(1.0 - emsubn(n))*sumef
             suma = suma + grad(i,n)*(trm1 + trm2)
             hsum1 = hsum1 + grad(i,n)*sigsb*emsubn(n)
             hsum2 = hsum2 + grad(i,n)*sigsb*(1.0 - emsubn(n))*hsumef
           enddo
           bsubi(i) = suma
           hbsub1(i) = hsum1
           hbsub2(i) = hsum2
             if(ndbg.eq.1)then
             write(output,9011)i,bsubi(i),hbsub1(i),hbsub2(i)
9011         format(' RADCC2; i=',i5,' bsubi=',e10.4,' hbsub1=',
     &       e10.4,' hbsub2=',e10.4)
             end if
         enddo
c  Calculate radiation heat flux and derivative with respect to tg**4 at
c  surface of each component.
         qradsm = 0.0
         amui = 0.0
         qradpvx(iencl,k,1:igp) = 0.0
         do i = 1,ncomp1
           qgas(i) = 0.0
           do j = 1,ncomp1
c  Calculate contribution to heat flux going to gas from surface i using
c  Q_subn expression.
             qgas(i) = qgas(i) + bsubi(i)*fviewz(k,i,j)*absgs(i,j) -
     &       fviewz(k,i,j)*sigsb*epsgs(i,j)*scd2(k,i)%tgradl**4
           enddo
c  Calculate total heat flux from surface i to the surroundings (gas and
c  the other surfaces).
           scd2(k,i)%qrdsrl = emsubn(i)/(1.0 - emsubn(i))*
     &     (sigsb*scd2(k,i)%tsur1l**4 - bsubi(i))
           scd2(k,i)%qoutl = scd2(k,i)%qrdsrl + scd2(k,i)%hcnvcl*
     &     (scd2(k,i)%tsur1l - scd2(k,i)%tgradl)
           hradw(k,i)= emsubn(i)/(1.0 - emsubn(i))*
     &     (sigsb - hbsub1(i))
           scd2(k,i)%hradgx = (emsubn(i)/(1.0 - emsubn(i))*hbsub2(i))*
     &     4.0*scd2(k,i)%tgradl**3
           area2 = emsubn(i)/(1.0 - emsubn(i))*hbsub2(i)
           area2 = hradw(k,i)*scd2(k,i)%tsur1l**4 - area2*
     &     scd2(k,i)%tgradl**4
           if (idcmpl(i).ne.2 .and. idcmpl(i).ne.8) then
             area2 = twopi*rcrs2l(k,i)*float(nsigll(i))
           elseif (idcmpl(i).eq.8) then
             area2 = slbwdl(i)*float(nsigll(i))
           elseif (ijcml(i).ne.ishrd(iencl)) then
             area2 = slbwdl(i)
           else
             area2 = slbwde
           endif
           areaxx(i) = area2
cc         write (12,"('radcc2a2',i9,3i5,5es13.5)") ncount,iencl,k,i,
cc   &     scd2(k,i)%qrdsrl,hradw(k,i),scd2(k,i)%hradgx,
cc   &     scd2(k,i)%tsur1l,(k,i)
           ist = ncmpch(iencl,i)
           qradpvx(iencl,k,ist) = qradpvx(iencl,k,ist) + qgas(i)*area2
             if(ndbg.eq.1)then
             write(output,9035)iencl,k,ist,qradpvx(iencl,k,ist)
9035         format(' RADCC2, iencl=',i5,' k=',i5,' ist=',i5,
     &       ' qradpvx=',e10.4)
             end if
           qradsm = qradsm + area2*scd2(k,i)%qrdsrl
           amui = amui + qgas(i)*area2
         enddo
         qradab(iencl,k) = qradsm
       enddo
       if (ncount .eq. 1) then
         write (12,"('radcc2aa  areas'/(6es13.5))") areaxx(1:ncomp1)
         write (12,"('radcc2aa  view factors')")
         do i = 1,ncomp1
           write (12,"(6es13.5)") fviewz(1,i,1:ncomp1)
           do j = 1,ncomp1
             areapr(i,j,1) = areaxx(i)*fviewz(1,i,j)
             areapr(j,i,2) = areaxx(j)*fviewz(1,j,i)
           enddo
         enddo
         write (12,"('radcc2aa  products')")
         do i = 1,ncomp1
           do j = 1,ncomp1
             write (12,"(2i10,2es13.5)") i,j,areapr(i,j,1),areapr(j,i,2)
           enddo
         enddo
         write (12,"('radcc2aa  sums')")
         do i = 1,ncomp1
           areapr(1,1,1) = sum(fviewz(1,i,1:ncomp1))
           areapr(1,1,2) = sum(fviewz(1,1:ncomp1,i))
           write (12,"(i10,2es13.5)") i,areapr(1,1,1:2)
         enddo
       endif
       return
       end
