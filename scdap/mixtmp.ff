*mlist
*if def,selap
       subroutine mixtmp(wuo1 , wuo2 , wzr1 , wzr2 , wzro1, wzro2,
     &                    wag1 , wag2 , wss1 , wss2 , wsso1, wsso2,
     &                    wzruo1,wzruo2, afru1, afru2, afrz1, afrz2,
     &                    wbc1 , wbc2 , tmp1 , tmp2 , tmpeq)
c  mixtmp calculates the equilibrium temperature of two mixtures which
c  are mixed together where they are assumed to instantly reach
c  equilibrium temperature so that heat generation and heat loss need
c  not be considered.
c
c  Cognizant engineer: ljs.
c
       implicit none
c
       real  wuo1,wuo2,wzr1,wzr2,wzro1,wzro2,wag1,wag2,wss1,wss2,wsso1,
     * wsso2,wzruo1,wzruo2,afru1,afru2,afrz1,afrz2,wbc1,wbc2,
     * tmp1,tmp2,tmpeq
       include 'ufiles.h'
       include 'contrl.h'
       include 'cpmdat.h'
c
c  subroutine mixtmp calculates equilibrium temperature of two
c  mixtures which are mixed together. the two mixtures are
c  assumed to instantly reach equilibrium temperature so that
c  heat generation and heat loss need not be considered.
c  tmpeq  = equilibrium temperature of mixture formed by
c  combining two mixtures. (k)  (output)
c  wuo1 thru tmp2 are input arguments.
c  mnemonics of these variables is as follows:
c  variables starting with w are masses and have units of kg,
c  variables ending in 1 apply to mixture #1,
c  variables ending in 2 apply to mixture #2,
c  uo  = uranium dioxide
c          zr  = zircaloy
c          zro = zirconium dioxide
c          ag  = silver-indium-cadmium
c          ss  = stainless steel
c          sso = stainless steel oxide
c          zruo= compound if zirconium-uranium-oxygen
c          tmp1   = temperature of mixture #1
c          tmp2   = temperature of mixture #2
c          afru1  = atomic fraction uranium in zr-u-o compound of first
c                   mixture
c          afrz1  = atomic fraction zr in zr-u-o compound of first
c                   mixture.
c           bc    = boron carbide
c
c        calculate specific heat capacities for each component in each
c        mixture.
c
c  Local variables.
       integer itmax,iter
       real tmpeps,enth
       real wmix1,wmix2,wpotot,tmpref,enth1,enth2
       real emixgs,etotmx,etot1,etot2,tmpmix,dltges,dltgs1,eps
       real atmfr(maxcon),wmixcm(maxcon)
       real acp,aenthl,fcp,fenthl,scp,senthl,zocp,zonthl,
     * zucp,zunthl
       real zucp1,zunth1
       external zucp1,zunth1
c
c  Data statements.
        data itmax/ 50/, tmpeps/ 0.1000/, eps /0.00001/
        data tmpref /300./, dltges / 1./
c
c    compute mixture enthalpy by first adding together the internal
c    energy in the two components.
       wmix1=wuo1+wzr1+wzro1+wss1+wag1+wbc1
       wmixcm(1)=wzr1
       wmixcm(2)=0.0
       wmixcm(3)=wss1
       wmixcm(4)=wag1
       wmixcm(5)=wbc1
       wmixcm(6)=wuo1
       wmixcm(7)=wzro1
       wmixcm(8)=0.0
       wmixcm(9)=0.0
       wmixcm(10)=0.0
       wmixcm(11)=0.0
       call calaf(wmixcm,wpotot,atmfr)
       enth1=zunth1(atmfr(1),atmfr(2),atmfr(3),atmfr(4),atmfr(5),
     # atmfr(6),atmfr(7),tmp1,atmfr(8),atmfr(9),atmfr(10),atmfr(11),
     # tmpref)
       etot1=enth1*wmix1
       wmix2=wuo2+wzr2+wzro2+wss2+wag2+wbc2
       wmixcm(1)=wzr2
       wmixcm(2)=0.0
       wmixcm(3)=wss2
       wmixcm(4)=wag2
       wmixcm(5)=wbc2
       wmixcm(6)=wuo2
       wmixcm(7)=wzro2
       wmixcm(8)=0.0
       wmixcm(9)=0.0
       wmixcm(10)=0.0
       wmixcm(11)=0.0
       call calaf(wmixcm,wpotot,atmfr)
       enth2=zunth1(atmfr(1),atmfr(2),atmfr(3),atmfr(4),atmfr(5),
     # atmfr(6),atmfr(7),tmp2,atmfr(8),atmfr(9),atmfr(10),atmfr(11),
     # tmpref)
       etot2=wmix2*enth2
       etotmx=etot1+etot2
       tmpmix=tmp1
       if(tmp2.gt.tmp1)tmpmix=tmp2
       iter=0
       dltgs1=dltges
       wmixcm(1)=wzr1+wzr2
       wmixcm(2)=0.0
       wmixcm(3)=wss1+wss2
       wmixcm(4)=wag1+wag2
       wmixcm(5)=wbc1+wbc2
       wmixcm(6)=wuo1+wuo2
       wmixcm(7)=wzro1+wzro2
       wmixcm(8)=0.0
       wmixcm(9)=0.0
       wmixcm(10)=0.0
       wmixcm(11)=0.0
       call calaf(wmixcm,wpotot,atmfr)
100    continue
       enth=zunth1(atmfr(1),atmfr(2),atmfr(3),atmfr(4),atmfr(5),
     # atmfr(6),atmfr(7),tmpmix,atmfr(8),atmfr(9),atmfr(10),atmfr(11),
     # tmpref)
       emixgs=(wmix1+wmix2)*enth
       if(emixgs.lt.etotmx)then
         if(abs((emixgs-etotmx)/etotmx).lt.eps.or.iter.gt.10)then
         go to 200
         else
         tmpmix=tmpmix+dltgs1
         dltgs1=dltgs1/10.
         iter=iter+1
         go to 100
         end if
       else
       tmpmix=tmpmix-dltgs1
       go to 100
       end if
200    continue
       tmpeq=tmpmix-0.5*dltges
       return
         end
*endif
