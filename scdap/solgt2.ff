*mlist
       subroutine solgt2 (kb,naz,tsur,tsol,tliqav,wbotgt,haddbt,
     & dz,wfrogt,avoidl,hadd,rftemp,ifrag,vladeb,dzfrcl,hremov,
     & woxdwf, oxdwf,wremgt)
! 
!  Descriptive sentence for solgt goes here.
!
!  Cognizant engineer: ljs.
!
!#     calling subroutine: liqcon
!#     subroutines called: matpro
!#     engineer/programmer: l.j. siefken
!#
!#     argument list :
!#     kb        = elevation at which liquid neutron ab-
!#                  sorber material begins to flow. (m)
!#                  (input)
!#     naz       = number of axial zones      (input)
!#     tsur(k)   = average temperature of control rod in
!#                 axial zone k at end of time step. (k).
!#                 (input)
!#     tsol      = solidification temperature (k)   (input)
!#      tliqav    = average temperature of liquified mater-
!#                  at start of flow. (k)   (input)
!#    wbotgt    = mass of liquified guide tube
!#                which flowed below bottom
!#                of core. (kg)    (input/output)
!#     wflo      = mass of liquified material at start of
!#                 flow. (kg)    (input)
!#     haddbt    = heat added to region below core due to
!#                 flow of liquified control rod material.
!#                 (j)     (input/output)
!#     dz(k)     = height of each axial zone  (m)  (input)
!#    wfrogt(k) = mass of solidified guide tube
!#                axial zone k. (kg)    (input/output)
!#     avoidl(k) = flow area around guide tube. (m**2)
!#                 (input)
!#     hadd(k)   = heat added to axial zone k during time
!#                 step due to flow of liquified control
!#                 rod material. (j)    (output)
!#     rftemp    = reference temperature for enthalpy cal-
!#                 culations. normally, rftemp is set equal
!#                 to room temperature. (k)    (input)
!#     ifrag(k)  = variable indicating whether or not in-
!#                 tact control rod, debris bed or void
!#                 region exists in axial zone k.
!#                 0 = intact control rod
!#                 1 or 2 = debris bed
!#                 3 = void region
!#                 (input)
!#     vladeb(k) = volume of liquid which can be absorbed
!#                 by debris bed in axial zone k. (m**2)
!#                 (input)
!#    dzfrcl(k) = fraction of height of axial zone k which
!#                solidified control rod material resting
!#                on top of debris bed.  (input/output)
!#   hremov(k) = removed heat from axial node k (J)
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
!
       include 'contrl.h'
       include 'ufiles.h'
       include 'scddat.h'
       include 'conele.h'
!
       integer kb,naz
       real(kr) tsol,tliqav,wbotgt,wflo, haddbt,rftemp
!
       integer ifrag
       real(kr) tsur,dz,avoidl,vladeb,wfrogt,hadd,dzfrcl,woxdwf,oxdwf,
     +   hremov,wremgt
       dimension tsur(ndax),dz(*),avoidl(ndax),ifrag(*),vladeb(*),
     # wfrogt(*),hadd(*),dzfrcl(*),oxdwf(*),hremov(*),wremgt(*)
!
!  Local variables.
       integer k,kbsol,kstack,nsw,ksol
       real(kr) rho,rhoo,vol,vols,wfzr,wfzo
       real(kr) cden,centhl,zoden,zonthl
!
!  Find first axial zone below zone kb which is cooler than
!  solidification temperature 
!
        nsw=0
        kbsol = 0
        wfzr=0.0
        wfzo=0.0
        
        do150k=kb,1,-1
          if(k.eq.kb)goto 150
          if(nsw.eq.1)goto 150
          if(wremgt(k).ge.1.e-10)goto 150
          if(tsur(k).lt.tsol)then
            nsw=1
            ksol=k
          end if
          if(nsw.eq.1)go to 150
          if(ifrag(k).eq.1.or.ifrag(k).eq.2)then
            nsw=1
            ksol=k
          end if
  150   continue
c     amount of relocated material in Zr base  
       wfzr=wrbszo(kb,icomp,9)
       wfzo=wrbszo(kb,icomp,10)
       if(ksol.ge.1)go to 200
!  calculate mass and heat added to region below bottom of core.
       wbotgt=wbotgt+wfzr+wfzo
       haddbt = haddbt +wfzr*centhl(tliqav,rftemp)
     &                       +wfzo*zonthl(tliqav,rftemp) 
       goto 850
  200   continue
       kbsol=ksol
       if(ifrag(kbsol).eq.0)then
          oxdwf(ndax*(icomp-1)+kbsol)=oxdwf(ndax*
     &   (icomp-1)+kbsol)+woxdwf
          wfrogt(kbsol)=wfrogt(kbsol)+wfzr+wfzo
          hadd(kbsol)=hadd(kbsol)+wfzr*centhl(tliqav,rftemp)
     &                             +wfzo*zonthl(tliqav,rftemp)      
          wrbszo(kbsol,icomp,9)=wrbszo(kbsol,icomp,9)
     &                                      +wrbszo(kb,icomp,9)
          wrbszo(kbsol,icomp,10)=wrbszo(kbsol,icomp,10)
     &                                      +wrbszo(kb,icomp,10)

        else
           rho=cden(tliqav)
           rhoo=zoden(tliqav)
           vol=wfzr/rho+wfzo/rhoo
           if(vol.le.vladeb(kbsol))vols=vol
           if(vol.gt.vladeb(kbsol))vols=vladeb(k)
           oxdwf(ndax*(icomp-1)+kbsol)=oxdwf(ndax*
     &   (icomp-1)+kbsol)+woxdwf*vols/vol
           wfrogt(kbsol)=wfrogt(kbsol)+(wfzr+wfzo)*vols/vol
           hadd(kbsol)=hadd(kbsol)+(wfzr*centhl(tliqav, rftemp)
     #                         +wfzo*zonthl(tliqav, rftemp))*vols/vol  
           wrbszo(kbsol,icomp,9)=wrbszo(kbsol,icomp,9)
     &                         +wrbszo(kb,icomp,9)*vols/vol
           wrbszo(kbsol,icomp,10)=wrbszo(kbsol,icomp,10)
     &                         +wrbszo(kb,icomp,10)*vols/vol
           if((vol-vols).lt.1.e-10)go to 240
           kstack=kbsol+1
!
!      stack balance of liquid on top of debris.
!
           if(kstack.gt.naz)kstack=naz
           oxdwf(ndax*(icomp-1)+kbsol)=oxdwf(ndax*
     &   (icomp-1)+kbsol)+woxdwf*(vol-vols)/vol
           wfrogt(kstack)=wfrogt(kstack)+
     #  (vol-vols)/vol*(wfzr+wfzo)
           hadd(kstack)=hadd(kstack)+(vol-vols)/vol
     #  *(wfzr*centhl(tliqav, rftemp)+wfzo*zonthl(tliqav, rftemp))
           dzfrcl(kstack)=dzfrcl(kstack)+(vol-vols)/avoidl(kstack)
           wrbszo(kbsol,icomp,9)=wrbszo(kbsol,icomp,9)
     &                           +wrbszo(kb,icomp,9)*(vol-vols)/vol
           wrbszo(kbsol,icomp,10)=wrbszo(kbsol,icomp,10)
     &                           +wrbszo(kb,icomp,10)*(vol-vols)/vol
  240    continue
        end if
  850   continue
  
         hremov(kb)=hremov(kb)+wfzr*centhl(tliqav, rftemp)
     &                    +wfzo*zonthl(tliqav, rftemp)   
         wrbszo(kb,icomp,9)=0.0
         wrbszo(kb,icomp,10)=0.0
       
       return
       end
