*mlist
      subroutine crucbr(rcos, pitch,idcomp, kmltbt, kmltop,
     &k1, j,unuca, unucda, nsigl, tcond3, tsat, dzfrcq, nslump,
     &qradpl, thkcbr, nhrdpn, lcrucb, icrcb0)
c
c
c
c  This subroutine determines whether the crust at the bottom of a
c  cohesive debris region in the core region has the strength to
c  contain and hold up liquefied core material in this cohesive
c  debris region.
c
c  Cognizant engineer: ljs.
c
c       rcos(j) = original outer radius of j-th component (m)  input
c       pitch(j) = pitch of component group j (m)  input .
c       idcomp(j) = indicator of type of component (0=fuel rod,
c                   1=control rod, 2=shroud)  input .
c       kmltbt = axial node of bottom of molten pool (input).
c       kmltop = axial node of top of liquefied cohesive debris
c                region  input .
c       k1 = axial node under consideration.  input
c       j = component group under consideration.  input .
c       unuca(k,j) = linear heat generation due to fission at axial
c                    node j of component k (w/m)  input .
c       unucda(k,j) = same as unuca(k,j), but for decay heat  input .
c      nsigl(j) = number of rods in component group j  input .
c      tcond3(l,k,j) = temperature of l-th radial node of k-th axial
c                      node of j-th component group. (k)  input .
c      tsat = saturation temperature (k)  input .
c      dzfrcq(k,j) = fractional height of cohesive debris at k-th
c                    axial node of j-th component group.
c                  =0.0=no cohesive debris; =1.0=node completely filled
c                   with cohesive debris.  input .
c      nslump = indicator of whether crust at bottom of cohesive debris
c               has breached. 0=no, 1=yes  output .
c      qradpl = amount of heat radiated from bottom crust of cohesive
c               debris region (w)  output .
c
c      thkcbr  = thickness at which breach occurs in hardpan in
c                core region that supports liquefied core.
c
c  nhrdpn = number of axial node at which hardpan from metallic
c           meltdown resides; if equal to zero, no metallic hardpan
c                exists for this rod group.
c  lcrucb(k,j) = indicator of whether material at axial node k of
c              component j is molten; 0=no, 1=yes.
c  icrcb0 = indicator of previous failure of crust supporting molten
c           pool; 0=no, 1=yes.
      implicit none
*call scddat
*call ufiles
*call hardpn
*call contrl
*call effprp
c
c  Local variables.
      integer idcomp,j,kmltbt, kmltop,nsigl,nslump,nhrdpn, lcrucb
      integer icrcb0, k1
      integer ndbg
      real rcos,pitch,unuca,unucda,tcond3,dzfrcq,qradpl,thkcbr,tsat
      dimension rcos(ndcomp), pitch(ndcomp), idcomp(ndcomp),
     &          unuca(ndax,ndcomp), unucda(ndax,ndcomp),
     &          nsigl(ndcomp), tcond3(ndrd,ndax,ndcomp),
     &          dzfrcq(ndax,ndcomp)
      dimension lcrucb(ndax,ndcomp)
c
        ndbg=0
!       if(timehy.ge.10210.0.and.timehy.le.10216.0)ndbg=1
          if(ndbg.eq.1)then
          write(output,9005)timehy,j,ifaluc(j)
9005      format(' CRUCBR entered; timehy=',e11.4,' j=',i5,
     &    ' ifaluc(j)=',i5)
!            if(ifaluc(j).ne.0)then
!            write(ouput,9006)ifaluc(j),timehy
!9006        format(' CRUCBR 9006; ifaluc(j)=',i5,
!      &     ' timehy=',e12.6)
!            end if
          end if
      nslump=0
c
c     begin IF BLOCK A-A
c     this IF BLOCK checks for case of molten pool that
c     is not supported by metallic crust.
c     At axial node 1 there is no fuel to support ceramic crust, so
c     delete coding based on meltthrough of ceramic crust.
        if(tupool.gt.(tmltuo+10.).and.lcrucb(1,j).eq.1
     #  .and.rpel00(j).gt.0.2e-3)then
          nslump=1
          write(output,20)
          write(output,30)timehy
          write(output,40)j
          write(output,50)tupool
        end if
        if(ifaluc(j).eq.1)then
!   meltthrough of bottom of core
        nslump=1
        write(output,9105)
9105    format(' CRUCBR: melt through of bottom of core')
        write(output,30)timehy
        write(output,40)j
        write(output,50)tupool
        write(output,9205)wupool
9205    format(' mass of slumped UO2 =',e11.4,' kg')
        end if
c         continuing in IF BLOCK A-A
c         check for failure at side of molten pool that borders core
c         bypass region.
        if(ifaluc(j).eq.4)then
cljs   ifaluc(j) = 4 never set
          nslump=1
          write(output,60)
          write(output,70)
          write(output,80)timehy,tupool
          write(output,9207)wupool
9207      format(' mass of slumped UO2 =',e11.4,' kg')
        end if
        if(ifaluc(j).eq.2)then
cljs   failure of supporting crust identified in subroutine heatld 
          nslump=1
          write(output,90)
          write(output,100)
          write(output,103)tcsidmn
103       format(' minimum thickness of crust at side of molten pool',
     &    ' at edge of core at previous time step =',e11.4,' m')
          write(output,80)timehy,tupool
          write(output,9211)wupool
9211      format(' mass of slumped UO2 =',e11.4,' kg')
            if(ndbg.eq.1)then
            write(output,9115)j,nslump,ifaluc(j)
9115        format(' CRUCBR 9115; j=',i5,' nslump=',i5,' ifaluc=',
     &      i5)
            end if
        end if
        if(ifaluc(j).eq.3)then
cljs  ifaluc(j) = 3 never set
          nslump=1
          write(output,110)
          write(output,120)
          write(output,80)timehy,tupool
          write(output,9215)wupool
9215      format(' mass of slumped UO2 =',e11.4,' kg')
        end if
c     Put upper limit on molten pool temperature to avoid exceeding
c     limits of water property and to avoid unrealistic representation
c     of molten pool.
!     if(tupool.gt.3900.0)then
      if(ifaluc(j).eq.5)then    
        nslump=1
        write(output,20)
        write(output,150)timehy
        write(output,160)tupool
        write(output,9225)wupool
9225    format(' mass of slumped UO2 =',e11.4,' kg')
      end if
        if(ndbg.eq.1)then
         write(output,90095)nslump
90095    format(' CRUCBR at end; nslump=',i3)
        end if
      return
   20 format(/,'  CRUCBR--------------core degradation event'
     &,'------------------------')
   30 format (' CRUCBR: *** Molten pool slumping to lower head for',
     &'  case of propagation to bottom of core',
     &' - event time =',g18.10)
   40 format(' CRUCBR: Meltthrough of molten pool in location of',
     &      ' component number',i3)
   50 format(' CRUCBR: temperature of pool =',es12.4)
   60 format(' CRUCBR: *** Slumping of molten pool',
     # ' at point of periphery of core ***')
   70 format(' Melt through at side of molten pool that',
     & ' interfaces with core bypass region')
   80 format(' event time =',es14.6,' temperature of slumping',
     &' material =',es12.4)
   90 format(' CRUCBR: *** Failure of crust: massive slumping ***')
  100 format(' melt through of crust on side of molten pool')      
  110 format(' crucbr *** Failure of crust: massive slumping ***')
  120 format(' molten pool spread to core bypass region with',
     &' user definition of slumping this stage of damage',
     &' progression')
  150 format(' Molten pool slumping to lower head for case of',
     &' excessive temperature of molten pool - event time =',
     &es14.6)
  160 format(' temperature of molten pool =',es12.4)
      end
