*mlist
*if def,selap
       subroutine bound (t4, nt4, bt, it, nadt, te2, ntf2, hcoef1,
     +ncf2,ih,bg,bv,tr2,ntr2,h3,nrf2,ir,tsm,b,ft,tz,areac,
     * arear,iv,vel,ivel,ftemp,iftemp,fvarea,ee,vrn,vzn,ir5vol,ix)
c
c
c  Descriptive sentence goes here.
c
c  Cognizant engineer: ewc.
c
c This is a COUPLE ROUTINE
*in32 nt4
*in32 it
*in32 nadt
*in32 ntf2
*in32 ncf2
*in32 ih
*in32 ntr2
*in32 nrf2
*in32 ir
*in32 iv
*in32 ivel
*in32 iftemp
*in32 ir5vol
*in32 ix
*in32end
c
       implicit none
c
*call alcm
*call iparm
*call parm
*call ufiles
c
c  Local variables.
       integer nt4,it,nadt,ntf2,ncf2,ih,ntr2,nrf2,ir,iv,ivel
       real t4,bt,te2,hcoef1,bg,bv,tr2,h3,b,ft,tsm,areac,tz,arear,vel,
     * ftemp,fvarea,ee,vrn,vzn
       integer ix(5,*)
      dimension t4(*),nt4(*),bt(*),it(*),nadt(3,*),
     +    te2(*), ntf2(*), hcoef1(*), ncf2(*), ih(*), bg(*),
     2bv(*),tr2(*),ntr2(*),h3(*),nrf2(*),ir(*),b(*),ft(2,*),tsm(*),
     3areac(*),tz(*),arear(*)
     4,iv(*),vel(*),ivel(*),ftemp(*),iftemp(*),fvarea(*),ee(9,*)
     *,vrn(*),vzn(*)
      integer ir5vol(*)
       integer i,icros,iftemp,ifun,ii,j,jfun,jj,jjs,kfun,l,le,ll,ls,n,
     * n1j,n2j,nseq
       integer loca
       external loca
       real bh,br,btf,btr,capcf,caprhf,rhof,td,tempi,tf,v,valbc,valbr,
     * valc,valtb,valte,valtf,valtr,valv,vcoupl,vr,vz
       external inpol,userh,userr
c
      if(nttem.eq.0) go to 701
      ifun=0
      do 700 n = 1,nttem
      if(it(n).eq.0) go to 700
      bt(n)=t4(n)
      if(nt4(n).le.0) go to 700
      kfun=nt4(n)
      if(ifun.eq.kfun) go to 81
      ifun=kfun
      call inpol(nadt,ft,kfun,time,valtb)
   81 bt(n)= t4(n)*valtb
  700 continue
  701 continue
      if(ncev.eq.0) go to 705
      ifun=0
      jfun=0
       nseq=0
      do 704 n = 1,ncev
      ii = ih(n)
      if(ii.eq.0) go to 704
      btf = te2(n)
      if(ntf2(n).lt.0) btf=tz(-ntf2(n))
      if(ntf2(n).le.0) go to 600
      kfun=ntf2(n)
      if(jfun.eq.kfun) go to 84
      jfun=kfun
      call inpol(nadt,ft,kfun,time,valte)
   84 btf = te2(n)*valte
  600 bh = hcoef1(n)
      if(ncf2(n).le.0) go to 200
      kfun= ncf2(n)
c     check type flag
      if(nadt(3,kfun)-2) 100,800,102
c     time dependence
  100 if(ifun.eq.kfun) go to 83
      ifun=kfun
      call inpol(nadt,ft,kfun,time,valbc)
      go to 83
c     calculate temp diff
  102 j = ih(n)
      tempi=tz(j)
      td=abs(tempi-btf)
      call inpol(nadt,ft,kfun,td,valbc)
   83 bh=hcoef1(n)*valbc
  200 i=ih(n)
      v=0.
      if(ifluid.eq.0) go to 203
      vr=vrn(i)
      vz=vzn(i)
      v=sqrt(vr*vr+vz*vz)
      if(v.gt.0.0) go to 203
      if(ntf2(n).ge.0) go to 203
      icros=-ntf2(n)
      vr=vrn(icros)
      vz=vzn(icros)
      v=sqrt(vr*vr+vz*vz)
  203 continue
       nseq=n
       if(nseq.gt.ncevr5)then
       write(output,913)
  913  format ('0******** In subroutine bound, index nseq too large.')
       end if
       n1j=ivcnpt
       n2j=ivcnpt+ncevr5-1
      if (ir5vol(nseq) .gt. 0) then
c  Nodes but those that model gap resistance.
       call userh(nseq,i,bh,btf,vcoupl, areac(n), tz, a(ivcnpt),
     # a(iqotpt), a(iqolpt), a(iqfopt), a(igmopt),
     # a(iqcopt),a(iqwcpt),a(igmcpt),a(itsink),a(ihtcto),ix)
      end if
      bh=bh*areac(n)
      if(ntf2(n).lt.0) go to 201
      b(i)=b(i)+bh*btf
      go to 202
  201 continue
      j=-ntf2(n)
      l=loca(i,j)
      tsm(l)=tsm(l)-bh
  202 continue
      l=loca(i,i)
      tsm(l)=tsm(l)+bh
      go to 704
  800 write (output,6000)
  704 continue
 6000 format(' the flag for the dependent heat transfer coefficient shou
     *ld never be 2')
  705 continue
      do 706 i=1,numnp
      b(i) = b(i) + bg(i)*bv(i)
  706 continue
      if(nrad.eq.0) go to 709
      ifun=0
      jfun=0
      do 708 n = 1,nrad
      if(ir(n).eq.0) go to 708
      btr = tr2(n) + radc
      if(ntr2(n).le.0) go to 900
      kfun=ntr2(n)
      if(jfun.eq.kfun) go to 87
      jfun=kfun
      call inpol(nadt,ft,kfun,time,valtr)
   87 btr = tr2(n)*(valtr+radc)
  900 br=h3(n)
      if(nrf2(n).le.0) go to 400
      kfun= nrf2(n)
      if(ifun.eq.kfun) go to 88
      ifun=kfun
      call inpol(nadt,ft,kfun,time,valbr)
   88 br=h3(n)*valbr
  400 i=ir(n)
       call userr(n, i, br, btr, arear(n), radc, time, tz, a(ivrapt),
     # a(iqotpt), a(iqolpt), a(iqfopt), a(igmopt), a(iqcopt), a(iqwcpt),
     # a(igmcpt))
      br=br*arear(n)
      b(i)=b(i)+br*(btr-radc)*(tz(i)+radc+btr)*((tz(i)+radc)**2+btr**2)
      l=loca(i,i)
      tsm(l)=tsm(l)+br*(tz(i)+radc+btr)*((tz(i)+radc)**2+btr**2)
  708 continue
  709 continue
      if(numvt.eq.0) go to 710
      ifun=0
      jfun=0
      do 404 n=1,numvt
      tf=ftemp(n)
      if(iftemp(n).le.0) go to 405
      kfun=iftemp(n)
      if(jfun.eq.kfun) go to 406
      jfun=kfun
      call inpol(nadt,ft,kfun,time,valtf)
  406 tf=tf*valtf
  405 v=vel(n)
      if(v.le.0.0) go to 404
      if(ivel(n).le.0) go to 407
      kfun=ivel(n)
      if(ifun.eq.kfun) go to 408
      ifun=kfun
      call inpol(nadt,ft,kfun,time,valv)
  408 v=v*valv
  407 continue
      if(v.le.0.0) go to 404
      i=iv(n)
      rhof=ee(2,matflu)
      capcf=ee(5,matflu)
      if(ee(8,matflu).eq.0.0) go to 409
      kfun=ee(8,matflu)
      call inpol(nadt,ft,kfun,tz(i),valc)
      capcf=capcf*valc
  409 caprhf=capcf*rhof
      b(i)=caprhf*v*tf*fvarea(n)+b(i)
      l=loca(i,i)
      tsm(l)=tsm(l)+caprhf*v*fvarea(n)
  404 continue
  710 continue
      if(nttem.eq.0) go to 500
      do 350 n=1,numnp
      do 360 i = 1,nttem
      if(it(i).eq.0) go to 360
      j=it(i)
      ll=abs(n-j)
      if(ll.gt.mud) go to 360
      l=loca(n,j)
      b(n)=b(n)-bt(i)*tsm(l)
  360 continue
  350 continue
      do 390 n = 1,nttem
      if(it(n).eq.0) go to 391
      i=it(n)
      l=loca(i,i)
      ls=l-mld
      if(i.lt.mld+1) ls=l-i+1
      le=l+mud
      if(i.gt.numnp-mud) le=l+numnp-i
      jjs=mud
      if(i.lt.mud+1) jjs=i-1
      jj=i-jjs
      do 380 j=ls,le
      tsm(j)=0.
      ll=loca(jj,i)
      tsm(ll)=0.
      jj=jj+1
  380 continue
      tsm(l)=1.
  390 b(i)=bt(n)
  391 continue
  500 continue
      return
      end
*endif
