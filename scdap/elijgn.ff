*mlist
*if def,selap
       subroutine elijgn (ix, ielem, jelem, elemij, imin, imax)
c
c  elijgn produces arrays that give i-j coordinates of each element
c  and the number of the element in any given i-j coordinate.
c
c  Cognizant engineer: ewc.
c
c This is a COUPLE ROUTINE
*in32 ix
*in32 ielem
*in32 jelem
*in32 elemij
*in32 imin
*in32 imax
*in32end
c
c
c      subroutine arguments:
c      numel=number of elements in mesh.
c      ix(1,n)=number of node in corner of first quadrant
c              of element n.
c      jelem(n)=value of j-th coordinate for lower left
c               corner of element n. [output]
c      ielem(n)=value of i-th coordinate for lower left
c               corner of element n. [output].
c      elemij(n)=element whose lower left corner is in
c                i-j space at i,j coordinates. [output]
c      imin(j)=minimum value of i coordinate for j-th
c              coordinate.
c      imax(j)=maximum value of i-th coordinate for j-th
c              coordinate.
c
       implicit none
c
c  Local variables.
       integer ijdyn,inc,inc1,inc2,jnc,l,n,nodi,nodsrh,nsize,nsw
       integer node
       external node
       integer ix(5,*), ielem(*), jelem(*), elemij(*), imin(*), imax(*)
*call iparm
*call ufiles
c
       nsize=maxj*maxi
       do20l=1,nsize
       elemij(l)=0
   20  continue
       do300n=1,numel
c      find i,j coordinates of lower left corner of element n
       nodi=ix(1,n)
c      find i and j coordinates of this node.
       nsw=0
       do60jnc=1,maxj
       if(nsw.eq.1)go to 60
       inc1=imin(jnc)
       inc2=imax(jnc)
       do50inc=inc1,inc2
       if(nsw.eq.1)go to 50
       nodsrh=node(inc,jnc)
       if(nodsrh.eq.nodi)then
       nsw=1
       ielem(n)=inc
       jelem(n)=jnc
       ijdyn=(maxj-1)*inc+jnc
       elemij(ijdyn)=n
       end if
   50  continue
   60  continue
       if(nsw.eq.0)then
       write(output,905)n,nodi
  905  format (//,' 0****** - for element',i5,' node=',i5,
     # ' no matching node found - subroutine elijgn')
       end if
  300  continue
       return
       end
*endif
