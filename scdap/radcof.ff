*mlist
*if def,selap
      subroutine radcof(ir,h3,nrf2,tr2,ntr2,area,r,z,ix,imme)
c
c  radcof is an unused subroutine.
c
c  Cognizant engineer: ewc.
c
       implicit none
*call iparm
*call parm
*call ufiles
       integer ir,nrf2,ntr2,ix,imme
       real h3,tr2,area,r,z
      dimension ir(*),h3(*),nrf2(*),tr2(*),ntr2(*),area(*),r(*),
     +z(*),ix(5,*),imme(*)
c
c  Local variables.
       integer i,j,jj,k,l,mat,mij,mjk,mkl,mli,n
       real atemp,d,pd,rs,sint,z1,z2,zmax,zmin
       external fabend
c
      do 500 n = 1,numel
      mat = ix(5,n)
      if(mat.eq.1) then
      i = ix(1,n)
      j = ix(2,n)
      k = ix(3,n)
      l = ix(4,n)
      do 600 jj = 1,nrad
      if(ir(jj).eq.i) then
      ir(jj) = 0
      h3(jj) = 0.0
      nrf2(jj) = 0
      tr2(jj) = 0.0
      ntr2(jj) = 0
      area(jj) = 0.0
      else
      endif
      if(ir(jj).eq.j) then
      ir(jj) = 0
      h3(jj) = 0.0
      nrf2(jj) = 0
      tr2(jj) = 0.0
      ntr2(jj) = 0
      area(jj) = 0.0
      else
      endif
      if(ir(jj).eq.k) then
      ir(jj) = 0
      h3(jj) = 0.0
      nrf2(jj) = 0
      tr2(jj) = 0.0
      ntr2(jj) = 0
      area(jj) = 0.0
      else
      endif
      if(ir(jj).eq.l) then
      ir(jj) = 0
      h3(jj) = 0.0
      nrf2(jj) = 0
      tr2(jj) = 0.0
      ntr2(jj) = 0
      area(jj) = 0.0
      else
      endif
  600 continue
      else
      endif
  500 continue
      do 700 n = 1,numel
      mat = ix(5,n)
      if(mat.ne.1) go to 700
      if(imme(n).ne.1) go to 700
      i = ix(1,n)
      j = ix(2,n)
      k = ix(3,n)
      l = ix(4,n)
      if(k.ne.l) then
c
c check intersection with i-j line
c
      mij=0
      z1 = z(i)
      z2 = z(j)
      zmax = max(z1,z2)
      zmin = min(z1,z2)
      if(height.lt.zmax.and.height.gt.zmin) then
      mij = 1
      else
      endif
c
c check intersection with j-k line
c
      mjk=0
      z1 = z(j)
      z2 = z(k)
      zmax = max(z1,z2)
      zmin = min(z1,z2)
      if(height.lt.zmax.and.height.gt.zmin) then
      mjk = 1
      else
      endif
c
c check intersection with k-l line
c
      mkl=0
      z1 = z(k)
      z2 = z(l)
      zmax = max(z1,z2)
      zmin = min(z1,z2)
      if(height.lt.zmax.and.height.gt.zmin) then
      mkl = 1
      else
      endif
c
c check intersection with l-i line
c
      mli=0
      z1 = z(l)
      z2 = z(i)
      zmax = max(z1,z2)
      zmin = min(z1,z2)
      if(height.lt.zmax.and.height.gt.zmin) then
      mli = 1
      else
      endif
      if(mij.eq.1 .and. mli.eq.1) then
      do 11 jj = 1,nrad
      if(ir(jj).eq.0) then
      ir(jj) = k
      h3(jj) = sigf
      tr2(jj) = rtemp
      d = sqrt((r(j)-r(k))**2 + (z(j)-z(k))**2)
      sint = abs((r(j) - r(k))/d)
      if(npp.eq.0 .and. sint.lt.1.0e-05) d = (z(j) - z(k))*r(k)
      if(npp.eq.0 .and. sint.gt.1.0e-05) d = (r(j)**2 - r(k)**2)/2./
     +sint
      d = abs(d)
      rs = r(j) + r(k)
      pd = d
      if(npp.eq.0) d = pd*(.5 + r(k)/rs)
      area(jj) = d/2
      if(npp.eq.0) d = pd*(.5 + r(j)/rs)
      atemp = d/2
      go to 12
      else
      endif
   11 continue
   12 continue
      do 13 jj = 1,nrad
      if(ir(jj).eq.0) then
      ir(jj) = j
      h3(jj) = sigf
      tr2(jj) = rtemp
      area(jj) = atemp
      go to 14
      else
      endif
   13 continue
   14 continue
      do 15 jj = 1,nrad
      if(ir(jj).eq.0) then
      ir(jj) = l
      h3(jj) = sigf
      tr2(jj) = rtemp
      d = sqrt((r(k)-r(l))**2 + (z(k)-z(l))**2)
      sint = abs((r(k) - r(l))/d)
      if(npp.eq.0 .and. sint.lt.1.0e-05) d = (z(k) - z(l))*r(l)
      if(npp.eq.0 .and. sint.gt.1.0e-05) d = (r(k)**2 - r(l)**2)/2./
     +sint
      d = abs(d)
      rs = r(k) + r(l)
      pd = d
      if(npp.eq.0) d = pd*(.5 + r(l)/rs)
      area(jj) = d/2
      if(npp.eq.0) d = pd*(.5 + r(k)/rs)
      atemp = d/2
      go to 16
      else
      endif
   15 continue
   16 continue
      do 17 jj = 1,nrad
      if(ir(jj).eq.0) then
      ir(jj) = k
      h3(jj) = sigf
      tr2(jj) = rtemp
      area(jj) = atemp
      go to 18
      else
      endif
   17 continue
   18 continue
      else
      endif
      if(mli.eq.1 .and. mjk.eq.1) then
      do 21 jj = 1,nrad
      if(ir(jj).eq.0) then
      ir(jj) = l
      h3(jj) = sigf
      tr2(jj) = rtemp
      d = sqrt((r(k)-r(l))**2 + (z(k)-z(l))**2)
      sint = abs((r(k) -r(l))/d)
      if(npp.eq.0 .and. sint.lt.1.0e-05) d = abs(z(k)-z(l))*r(l)
      if(npp.eq.0 .and. sint.ge.1.0e-05) d = (r(k)**2 - r(l)**2)/2./
     +sint
      d = abs(d)
      rs = r(k) + r(l)
      pd = d
      if(npp.eq.0) d = pd*(.5 + r(l)/rs)
      area(jj) = d/2
      if(npp.eq.0) d = pd*(.5 + r(k)/rs)
      atemp = d/2
      go to 22
      else
      endif
   21 continue
   22 continue
      do 23 jj = 1,nrad
      if(ir(jj).eq.0) then
      ir(jj) = k
      h3(jj) = sigf
      tr2(jj) = rtemp
      area(jj) = atemp
      go to 24
      else
      endif
   23 continue
   24 continue
      else
      endif
      if(mjk.eq.1 .and. mkl.eq.1) then
        write (output,2005)
 2005   format('0**** radcof - mesh is configured wrong')
        call fabend
      endif
      if(mij.eq.1 .and. mkl.eq.1) then
      do 25 jj = 1,nrad
      if(ir(jj).eq.0) then
      ir(jj) = k
      h3(jj) = sigf
      tr2(jj) = rtemp
      d = sqrt((r(j)-r(k))**2 + (z(j)-z(k))**2)
      sint = abs((r(j) -r(k))/d)
      if(npp.eq.0 .and. sint.lt.1.0e-05) d = abs(z(j)-z(k))*r(k)
      if(npp.eq.0 .and. sint.ge.1.0e-05) d = (r(j)**2 - r(k)**2)/2./
     +sint
      d = abs(d)
      rs = r(j) + r(k)
      pd = d
      if(npp.eq.0) d = pd*(.5 + r(k)/rs)
      area(jj) = d/2
      if(npp.eq.0) d = pd*(.5 + r(j)/rs)
      atemp = d/2
      go to 26
      else
      endif
   25 continue
   26 continue
      do 27 jj = 1,nrad
      if(ir(jj).eq.0) then
      ir(jj) = j
      h3(jj) = sigf
      tr2(jj) = rtemp
      area(jj) = atemp
      go to 28
      else
      endif
   27 continue
   28 continue
      else
      endif
      else
      write (output,2006)
 2006 format('0**** radcof - triangular element not allowed ')
      call fabend
      endif
  700 continue
      return
      end
*endif
