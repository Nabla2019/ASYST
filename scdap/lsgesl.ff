*deck lsgesl
*if def,selap
      subroutine lsgesl (a, lda, n, ipvt, b, job)
c
c  lsgesl solves the real system  a * x = b  or  trans(a) * x = b
c  using the factors computed by lsgefa.
c
c  Cognizant engineer: ewc (cxm esm).
c
c  ...1...  arguments / parameters / constants  .......
c  ...2...  notes / remarks  .......
c
       implicit none
c
c  Local variables.
       integer ii,job1,job2,kk,nn
      integer lda, n, ipvt(1), job
      real a(lda,1), b(1)
c
c  ...1...  function / purpose  .......
c       solves the real system  a * x = b  or  trans(a) * x = b
c       using the factors computed by lsgefa
c  ...2...  arguments / parameters / constants  .......
c     ..a..  input arguments  .....
c          a  r:lda,n  - factors produced by lsgefa
c          lda  i:1  - leading dimension of a
c          n  i:1  - order of the matrix  a
c          ipvt  i:n  - pivot vector from lsgefa
c          b  r:n  - right hand side vector
c          job  i:1  - job path parameter
c              = 00, to solve  a*x = b,
c              = 01, to solve  l*x = b,
c              = 10, to solve  trans(a)*x = b,
c              = 11, to solve  trans(u)*x = b,  where
c                    trans(.)  is the transpose.
c     ..b..  output arguments  .....
c          b - solution vector  x
c     ..c..  internal / local variables  .....
      integer k, kb, l, nm1
      real temp
c     ..d..  external / subprogram references  .....
c          intrinsic function - mod
       save
c     ..e..  constants  .....
c  ...3...  notes / remarks  .......
c     ..a..  usage  .....
c          (1) error condition:
c          a division by zero will occur if the input factor contains a
c          zero on the diagonal.  technically this indicates singularity
c          but it is often caused by improper arguments or improper
c          setting of lda .  it will not occur if the subroutines are
c          called correctly and if lsgeco has set rcond .gt. 0.0
c          or lsgefa has set info .eq. 0 .
c          (2) to compute  inverse(a) * c  where  c  is a matrix
c          with  p  columns:
c               call lsgeco (a, lda, n, ipvt, rcond, z)
c               if (rcond is too small) go to ...
c               do 10 j = 1, p
c                  call lsgesl (a, lda, n, ipvt, c(1,j), 0)
c            10    continue
c     ..b..  algorithm
c     ..c..  portability  .....
c     ..d..  references  .....
c          (1) j.j. dongarra, c.b. moler, j.r. bunch, and g.w. stewart,
c          linpack user's guide, siam, philadelphia, 1979
c     ..e..  history  .....
c          origin - sgesl - linpack - cleve moler, 08/14/78
c          modified - header, structure - e.s. marwil, 6/5/80
c
      nm1 = n - 1
      job1 = job/10
      job2 = mod(job,10)
      if (job1 .eq. 1) go to 50
c ---                  --------
c  1  solve  a*x = b
c ---
         if (n .eq. 1) go to 30
c    ---               --------
c     2  first solve  l*y = b
c    ---
         do 20 k = 1, nm1
            l = ipvt(k)
            temp = b(l)
            if (l .eq. k) go to 10
               b(l) = b(k)
               b(k) = temp
   10       continue
            nn = n - k
            if (nn .gt. 0) then
              do 11 ii = 1,nn
                b(ii+k) = b(ii+k) + temp*a(ii+k,k)
   11         continue
            endif
   20       continue
   30    continue
         if (job2 .eq. 1) go to 80
c    ---                  --------
c     b  now solve  u*x = y
c    ---
         do 40 kb = 1, n
            k = n + 1 - kb
            b(k) = b(k)/a(k,k)
            nn = k - 1
            if (nn .gt. 0) then
              do 41 ii = 1,nn
                b(ii) = b(ii) - b(k)*a(ii,k)
   41         continue
            endif
   40       continue
         go to 80
c ---------------
   50 continue
c ---
c  1' solve  trans(a)*x = b
c ---
c    ---
c     a  first solve  trans(u)*y = b
c    ---
       do 60 k = 1,n
         temp = 0.0
         nn = k - 1
         if (nn .ne. 0) then
           do 61 kk = 1,nn
             temp = temp + a(kk,k)*b(kk)
   61      continue
         endif
            b(k) = (b(k) - temp)/a(k,k)
   60       continue
         if (job2 .eq. 1) go to 80
c    ---                  --------
c     b  now solve trans(l)*x = y
c    ---
         if (n .eq. 1) go to 80
c                      --------
       do 70 kb = 1, nm1
         k = n - kb
         nn = n - k
         b(k) = 0.0
         if (nn .ne. 0) then
           do 71 kk = 1,nn
             b(k) = b(k) + a(kk+k,k)*b(kk+k)
   71      continue
         endif
            l = ipvt(k)
            if (l .eq. k) go to 70
               temp = b(l)
               b(l) = b(k)
               b(k) = temp
   70       continue
   80 continue
      return
      end
*endif
