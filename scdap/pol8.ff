*mlist
       function pol8(y,x,xx,nn,kk)
c
c
c  pol8 returns an interpolated number, y( xx ), using an input table of
c  to 13 pairs of numbers.
c
c
c  Cognizant engineer: rjw (dlh ghb).
c
c pol8   = output interpolated value of y at xx.
c kk     = output location of xx in the table of y.
c y      = input  table of up to 13 values of y -- y(1) , ... , y(nn).
c x      = input  table of up to 13 values of x -- x(1) , ... , x(nn).
c xx     = input value of independent variable  for which an
c                interpolated dependent value is desired.
c nn     = input  number of values in the y and x input tables.
c kk     = input  estimated location of xx in the tables.( number of
c                 values with x less than xx )
c
c polate was coded by d.l.hagrman to replace an older matpro subcode
c of unknown origin july 1981  (cdr-mp-05).
c
c pol8 was coded by g.h.beers to allow the use of a y table and an x
c table of input values instead of a table of pairs.  january 1982.
c
       implicit none
c
       real x,y
      dimension    y( * ) , x( * )
c
c  Local variables.
       integer k,kk,nn
       real xx
       real pol8
c
c check for 0 or 1 table entries
c
       if(nn .le. 0) then
          pol8 = 0.
          return
       elseif(nn .eq. 1) then
          pol8 = y(1)
          return
       endif
c
c check suggested position versus table limits
c
   25 if ( kk .lt. 1 ) kk = 1
      if ( kk .gt. (nn - 1 ))  kk = nn - 1
      k = kk
c
c find table values nearest x by adjusting index k
c
c loop to lower index until x( k ) is less than or equal to xx
c
   30 if ( x( k ) .le. xx )   go  to  40
      k = k - 1
      if  ( k .gt. 0 )   go  to  30
      pol8  = y( 1 )
      return
c
c loop to raise index until x( k ) is larger than xx or the table is
c exhausted
c
   40 if ( x( k+1 ) .gt. xx )  go  to  50
c
      k = k + 1
      if ( k .lt. nn )   go  to  40
      pol8  = y( nn )
      return
c
c if xx is bounded above and below by table values, do a linear
c interpolation
   50 kk = k
      pol8  = y( k ) + ( xx - x( k )) * ( y( k+1 ) - y( k )) /
     +                      ( x( k+1 ) - x( k ))
      return
      end
