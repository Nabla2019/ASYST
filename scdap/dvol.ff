*mlist
*if def,selap
      subroutine dvol(n,i,j,k,l,r,z,height,acvol,evol)
c
c  Descriptive sentence goes here.
c
c  Cognizant engineer: ewc.
c
c This is a COUPLE ROUTINE
c
       implicit none
*call ufiles
c
c  Local variables.
       integer i,izk,j,k,l,mij,mjk,mki,mkl,mli,mmm,n
       real acvol,area,evol,evolum,height,r,r1,r2,rij,rjk,rki,rkl,rli,
     * rrr,rxx,volump,z,z1,z2,zzz
       external insect,triv
      dimension r(*),z(*),volump(4),rrr(5),zzz(5),evol(*)
c
      do 10 izk = 1,4
   10 volump(izk) = 0.0
c
c     determine the r,z coordinate of the intersection of the top of
c     the debris bed with the sides of a linear retangular element
      evolum = evol(n)
      if(k.ne.l) then
c  check intersection with i-j line.
      z1 = z(i)
      z2 = z(j)
      r1 = r(i)
      r2 = r(j)
      call insect(z1,z2,r1,r2,height,mmm,rxx)
c     if mmm = 0, then no component in z direction for
c     line with coordinates r1,z1 at one end and r2,z2
c     at other end.
      mij = mmm
      rij = rxx
c
c     check intersection with j-k line
c
      z1 = z(j)
      z2 = z(k)
      r1 = r(j)
      r2 = r(k)
      call insect(z1,z2,r1,r2,height,mmm,rxx)
      mjk = mmm
      rjk = rxx
c
c     check intersection with k-l line
c
      z1 = z(k)
      z2 = z(l)
      r1 = r(k)
      r2 = r(l)
      call insect(z1,z2,r1,r2,height,mmm,rxx)
      mkl = mmm
      rkl = rxx
c
c     check intersection with l-i line
      z1 = z(l)
      z2 = z(i)
      r1 = r(l)
      r2 = r(i)
      call insect(z1,z2,r1,r2,height,mmm,rxx)
      mli = mmm
      rli = rxx
c
c     for typical COUPLE elemnt that has four nodes but is in shape of
c     triangle, the first case below is exercised.
      if(mij.eq.1 .and. mli.eq.1) then
      rrr(1) = r(i)
      rrr(2) = max(rij,rli)
      rrr(3) = min(rij,rli)
      zzz(1) = z(i)
      zzz(2) = height
      zzz(3) = height
      call triv(1,2,3,rrr,zzz,volump,area)
      acvol = volump(1)+volump(2)+volump(3)
      else
c
      if(mli.eq.1 .and. mjk.eq.1) then
      rrr(1) = r(i)
      rrr(2) = r(j)
      rrr(3) = max(rjk,rli)
      rrr(4) = min(rjk,rli)
      rrr(5) = 0.25*(rrr(1)+rrr(2)+rrr(3)+rrr(4))
      zzz(1) = z(i)
      zzz(2) = z(j)
      zzz(3) = height
      zzz(4) = height
      zzz(5) = 0.25*(zzz(1)+zzz(2)+zzz(3)+zzz(4))
      area = 0.0
      call triv(1,2,5,rrr,zzz,volump,area)
      call triv(2,3,5,rrr,zzz,volump,area)
      call triv(3,4,5,rrr,zzz,volump,area)
      call triv(4,1,5,rrr,zzz,volump,area)
      acvol = volump(1)+volump(2)+volump(3)+volump(4)
c
      else
c
      if(mjk.eq.1 .and. mkl.eq.1) then
      rrr(1) = min(rjk,rkl)
      rrr(2) = max(rjk,rkl)
      rrr(3) = r(k)
      zzz(1) = height
      zzz(2) = height
      zzz(3) = z(k)
      call triv(1,2,3,rrr,zzz,volump,area)
      acvol = evolum - (volump(1)+volump(2)+volump(3))
      else
c
      if(mij.eq.1 .and. mkl.eq.1) then
      rrr(1) = r(i)
      rrr(2) = max(rij,rkl)
      rrr(3) = min(rij,rkl)
      rrr(4) = r(l)
      rrr(5) = 0.25*(rrr(1)+rrr(2)+rrr(3)+rrr(4))
      zzz(1) = z(i)
      zzz(2) = height
      zzz(3) = height
      zzz(4) = z(l)
      zzz(5) = 0.25*(zzz(1)+zzz(2)+zzz(3)+zzz(4))
      area = 0.0
      call triv(1,2,5,rrr,zzz,volump,area)
      call triv(2,3,5,rrr,zzz,volump,area)
      call triv(3,4,5,rrr,zzz,volump,area)
      call triv(4,1,5,rrr,zzz,volump,area)
      acvol = volump(1)+volump(2)+volump(3)+volump(4)
c
      else
c
      if(mij.eq.1 .and. mjk.eq.1) then
      rrr(1) = r(j)
      rrr(2) = max(rij,rjk)
      rrr(3) = min(rij,rjk)
      zzz(1) = z(j)
      zzz(2) = height
      zzz(3) = height
      call triv(1,2,3,rrr,zzz,volump,area)
      acvol = volump(1)+volump(2)+volump(3)
      else
c
      if(mkl.eq.1 .and. mli.eq.1) then
      rrr(1) = min(rkl,rli)
      rrr(2) = max(rkl,rli)
      rrr(3) = r(l)
      zzz(1) = height
      zzz(2) = height
      zzz(3) = z(l)
      call triv(1,2,3,rrr,zzz,volump,area)
      acvol = evolum - (volump(1)+volump(2)+volump(3))
      else
      end if
      end if
      end if
      end if
      end if
      end if
      else
c     check intersection with i-j
      z1 = z(i)
      z2 = z(j)
      r1 = r(i)
      r2 = r(j)
      call insect(z1,z2,r1,r2,height,mmm,rxx)
      mij = mmm
      rij = rxx
c
c     check intersection with j-k
      z1 = z(j)
      z2 = z(k)
      r1 = r(j)
      r2 = r(k)
      call insect(z1,z2,r1,r2,height,mmm,rxx)
      mjk = mmm
      rjk = rxx
c
c     check intersection with k-i
      z1 = z(k)
      z2 = z(i)
      r1 = r(k)
      r2 = r(i)
      call insect(z1,z2,r1,r2,height,mmm,rxx)
      mki = mmm
      rki = rxx
c
      if(mij.eq.1 .and. mki.eq.1) then
      rrr(1) = r(i)
      rrr(2) = max(rij,rki)
      rrr(3) = min(rij,rki)
      zzz(1) = z(i)
      zzz(2) = height
      zzz(3) = height
      call triv(1,2,3,rrr,zzz,volump,area)
      acvol = volump(1) + volump(2) + volump(3)
      else
c
      if(mjk.eq.1 .and. mki.eq.1) then
      rrr(1) = min(rjk,rki)
      rrr(2) = max(rjk,rki)
      rrr(3) = r(k)
      zzz(1) = height
      zzz(2) = height
      zzz(3) = z(k)
      call triv(1,2,3,rrr,zzz,volump,area)
      acvol = evolum -(volump(1) + volump(2) + volump(3))
      else
c
      if(mij.eq.1 .and. mjk.eq.1) then
      rrr(1) = r(j)
      rrr(2) = max(rij,rjk)
      rrr(3) = min(rij,rjk)
      zzz(1) = z(j)
      zzz(2) = height
      zzz(3) = height
      call triv(1,2,3,rrr,zzz,volump,area)
      acvol = volump(1) + volump(2) + volump(3)
      else
      end if
      end if
      end if
      end if
c
      return
      end
*endif
