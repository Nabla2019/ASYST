*mlist
*if def,selap
       subroutine shfout(afp,bfp,tfp,xfp,anonc,acon,bnonc,bcon,
     & tnonc,tcon,xnonc,xcon,nspdeb,idsdeb)
c
c  Descriptive sentence for shfout goes here.
c
c  Cognizant engineer: ewc.
c
c This is a COUPLE ROUTINE
*in32 idsdeb
*in32end
      implicit none
c
      integer nspdeb
c
c
c
c     this subroutine converts anonc(i) and acon(k) to afp(n),
c                   bnonc(i,l) and bcon(k,l) to bfp(n,l),
c                              tnonc(i) and tcon(k) to tfp(n),
c                          and xnonc(i,l) and xcon(k,l) to xfp(n,l)
c
c     afp(n)   = output mass of n th species vapor
c              or noncondensable gas released
c              during the time increment (kg).
c              species identification is dynamic and
c              described with the variables nspdeb and
c              idsdeb.
c
c     bfp(n,l)   = output mass of n th species
c              vapor or noncondensable gas
c              in bubble size l at start/end of
c              time increment (kg).
c              species identification is dynamic and
c              described with the variables nspdeb and
c              idsdeb.
c
c     tfp(j)   = output total mass of j th species
c              vapor or noncondensable gas at
c              start/end of time increment (kg).
c              species identification is dynamic and
c              described with the variables nspdeb and
c              idsdeb.
c
c     xfp(n,l)   = output mass of n th species
c                   vapor or noncondensable gas
c                   released from the volume element
c                   during the time increment (kg).
c                   species identification is dynamic and
c                   described with the variables nspdeb and
c                   idsdeb.
c
c
c
c     anonc(i)   = input amount of i th noncondensable gas
c              released during the time increment (kg)
c               i =  3 is krypton
c               i =  4 is xenon
c
c     acon(k)   = input amount of k th condensable vapor
c              released during the time increment (kg)
c               k =  1 for iodine
c               k =  5 for cadmium
c               k = 18 for zinc iodide
c               k = 19 for zinc
c               k = 20 for cesium
c
c     bnonc(i,l) = input mass of i th noncondensable
c              gas in bubble size l at start of
c              time increment (kg)
c               i =  3 is krypton
c               i =  4 is xenon
c
c     bcon(k,l)  = input mass of k th condensable
c              vapor in bubble size l at start/end of
c              time increment (kg)
c               k =  1 for iodine
c               k =  5 for cadmium
c               k = 18 for zinc iodide
c               k = 19 for zinc
c               k = 20 for cesium
c
c     tnonc(i)   = input total mass of i th
c              noncondensable gas at start/end of
c              time increment (kg)
c               i =  3 is krypton
c               i =  4 is xenon
c
c     tcon(k)   = input total mass of k th
c              condensable vapor at start/end of
c              time increment (kg)
c               k =  1 for iodine
c               k =  5 for cadmium
c               k = 18 for zinc iodide
c               k = 19 for zinc
c               k = 20 for cesium
c
c     xnonc(i,l) = input mass of i th noncondensable
c                   gas that leaves the volume element in
c                   bubbles of size l during time increment
c                   dtime (kg)
c                    i =  3 is krypton
c                    I =  4 is xenon
c
c     xcon(k,l)  = input mass of k th condensable
c                   vapor that leaves the volume element in
c                   bubbles of size l during time increment
c                   dtime (kg)
c                    k =  1 for iodine
c                    k =  5 for cadmium
c                    k = 18 for zinc iodide
c                    k = 19 for zinc
c                    k = 20 for cesium
c
c     nspdeb     = input number of species that are to be tracked
c
c     idsdeb(n)  = input array of indicies that specify which
c              species are to be tracked in the debris bed.
c              n varies between 1 and nspdeb and the values
c              of idsdeb(n) denote the following species in
c              any order.
c
c               idsdeb =  1 for iodine
c               idsdeb =  2 for cesium iodide
c               idsdeb =  3 for cesium hydroxide
c               idsdeb =  4 for tellurium
c               idsdeb =  5 for hydrogen iodide
c               idsdeb =  6 for hydrogen telluride
c               idsdeb =  7 for cadmium
c               idsdeb =  8 for silver
c               idsdeb =  9 for uranium dioxide
c               idsdeb = 10 tin
c               idsdeb = 11 iron (not currently modeled)
c               idsdeb = 12 ruthenium (not currently modeled)
c               idsdeb = 13 barium (not currently modeled)
c               idsdeb = 14 antimony (not currently modeled)
c               idsdeb = 15 cse elemental cesium
c               idsdeb = 16 ie ?????? (not currently modeled)
c               idsdeb = 17 zinc
c               idsdeb = 18 xenon
c               idsdeb = 19 krypton
c               idsdeb = 20 zinc iodide (not currently
c                an input option but gasrl is ready to
c                release this species)
c
c
c
c     shfout was coded by d. l. hagrman october 13, 1989 for rev 5
c     last modified on june 25, 1990.  REV 15
*call bsize
c
      integer idsdeb(22)
      real  afp(22), bfp(22,15), tfp(22)
c
      real  anonc(10), acon(20), bnonc(10,15),
     #       bcon(20,15), tnonc(10), tcon(20)
c
      real nross(20), kiids(20)
c
      real  xnonc(10,15), xcon(20,15), xfp(nspdeb,15)
c
c     local variables
      integer i, k, l, n
c
c     nross(#) is o if idsdeb = # denotes a species not yet modeled
c            1 if idsdeb = # denotes a modeled vapor species
c            2 if idsdeb = # denotes a modeled noncondensable gas
c
      data nross /1,1,1,1,1,1,1,1,1, 1, 0, 0, 0, 0, 1, 0, 1, 2, 2, 1/
c      idsdeb(n)  1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
c
c     kiids(idsdeb(n)) = the index of idsdeb(n) in acon(k) or anonc(i)
      data kiids /1,2,3,4,10,9,5,6,15,11, 0, 0, 0, 0,20, 0,19, 4, 3,
c      idsdeb    1,2,3,4, 5,6,7,8, 9,10,11,12,13,14,15,16,17,18,19,
c      k or i ?   k k k k  k k k k  k, k, k, k  k  k  k  k  k  i  i
c
     # 18/
c      20,
c        k
c
c
c
c     initialize total and bubble noncondensable inventories
c      as well as release increments
      do 20 n = 1,nspdeb
       tfp(n) = 0.0e+00
       afp(n) = 0.0e+00
       do 15 l=1,nbs
          bfp(n,l) = 0.0e+00
            xfp(n,l) = 0.0
   15   continue
   20 continue
c
c     revise nonzero inventories and increments
      do 100 n=1,nspdeb
       if(nross(idsdeb(n)) .eq. 1) then
          k = kiids(idsdeb(n))
          afp(n) = acon(k)
          tfp(n) = tcon(k)
          do 80 l=1,nbs
             bfp(n,l) = bcon(k,l)
               xfp(n,l) = xcon(k,l)
   80      continue
       endif
       if(nross(idsdeb(n)) .eq. 2) then
          i = kiids(idsdeb(n))
          afp(n) = anonc(i)
          tfp(n) = tnonc(i)
          do 90 l=1,nbs
             bfp(n,l) = bnonc(i,l)
               xfp(n,l) = xnonc(i,l)
   90      continue
       endif
  100 continue
c
      return
      end
*endif
