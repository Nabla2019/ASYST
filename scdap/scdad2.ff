*mlist
*if def,selap
       subroutine scdad2
c
c  Descriptive sentence for scdad2 goes here.
c
c  Cognizant engineer: ewc.
c
       implicit none
*call comctl
*call contrl
*call fast
*call htrcom
*call jundat
*call scddat
*call cpmdat
*call debcom
*call statec
*call plndat
*call slumpv
*call hardpn
*call radata
*call solcom
*call buntim
*call cora
*call miscon
*call voldat
*call scdout
*call ndxara
*call tblsp
*call thplot
*call cons
*call nhtara
*call scdcom
*call trnot1
*call trnot2
*call ufiles
*call fpfast
*call fparm2
*call fpdkht
*call bconds
*call nrcom
*call uoxcom
*call fecom
*call bwgeom
*call intcom
*call debout
*call blageo
*call blinit
*call scdads
*call scdpow
c
c  Local variables.
       integer i,iidd,il1,il2,j,k,ni,no
c
c  Calculate radiation exchange between fuel element components.
       if (nvirn.eq.3 .or. nvirn.eq.4 .or. nvirn.eq.6) then
         do j = 1,numenc
           do i = 1,nfe(j)-1
             do k = 1,naz
               qraden(j,k,i) = 0.0
             enddo
           enddo
         enddo
         if (nsh .gt. 1) then
           lp1: do j = 1,numenc
             do i = 1,nfe(j)
               iidd = idsh(idfe(i,j))
               if (lflag(iidd).eq.1) cycle lp1
             enddo
             do k = 1,naz
               do i = 1,nfe(j)-1
                 sbcon = 5.729e-08
                 ni = 1
                 no = nrods2(k,idsh(idfe(i+1,j)))
                 ti = tcond3(ni,k,idsh(idfe(i,j)))
                 to = tcond3(no,k,idsh(idfe(i+1,j)))
                 ai = slbwd(idsh(idfe(i,j)))*dzcnd2(k,idsh(idfe(i,j)))
                 ao = slbwd(idsh(idfe(i+1,j)))*
     &           dzcnd2(k,idsh(idfe(i+1,j)))
                 emiss = 0.20
                 qraden(j,k,i) = (ai*sbcon*(ti**4 - to**4))/
     &           (1./emiss + (ai/ao)*((1.0 - emiss)/emiss))
               enddo
             enddo
           enddo lp1
         endif
       endif
c
c  If location is in volume for which upstream and downstream
c  junctions are 100% closed, then obtain steam and hydrogen flow
c  rates for oxidation at node above.
       do j = 1,ncomp
         do k = 1,naz
           if (nblkrd(k,j).eq.1 .or. lcrucb(k,j).ge.1) then
             il1 = (j - 1)*ndax + k
             il2 = (j - 1)*ndax + itopdb(k,j)
             flstm(il1) = flstm(il2)
             flstm0(il1) = flstm0(il2)
             flwh2(il1) = flwh2(il2)
             flwh20(il1) = flwh20(il2)
           endif
         enddo
       enddo
      return
      end
*endif
