*mlist
*if def,selap
      subroutine dsgeia (h, t0, tn, y, n, itol, rtol, atol, tnrm,
     *                   hmxi, itsk, tcrit, uround, info)
c
c  Descriptive sentence goes here.
c
c  Cognizant engineer: ljs.
c
       implicit none
c
      integer n, itol, itsk, info
      real h, t0, tn, y(n), rtol(1), atol(1), tnrm, hmxi, tcrit, uround
c ****
c
c  ...1...  function / purpose  .......
c
c       calculates the initial step size and adjusts as necessary
c
c  ...2...  arguments / parameters / constants  .......
c     ..a..  input arguments  .....
c          h  r:1  - step size to be attempted on the first step
c          t0  r:1  - initial valued of the independent variable
c          tn  r:1  - value of t at which output if desired first
c          y  r:n  - initial value vector
c          n  i:1  - number of first order ode's
c          itol  i:1  - type of error control for single step error
c              estimates in the weighted root-mean-square norm
c          rtol  r:1/n  relative tolerance parameter(s)
c          atol  r:1/n  absolute tolerance parameter(s)
c          tnrm  r:1  - weighted norm of the initial value vector
c          hmxi  r:1  - inverse of the maximum step size allowed
c          itsk  i:1  - task indicator; if itsk = 4 or 5, the initial
c              step is controlled so as not to overshoot t = tcrit
c          tcrit  r:1  - critical value of t
c          uround  r:1  - unit roundoff
c     ..b..  output arguments  .....
c          h - step size to be attempted on the first step
c          info  i:1  - error condition / message code
c              = 0, normal completion
c                 << type 4 - fatal >>
c              =44, (r1)/tn is too close to (r2)/t0 to start integration
c              =45, inconsistent values of t
c                   i1=1, (r1)/tcrit behind (r2)/tn
c     ..c..  internal / local variables  .....
      integer av, i, i1, i2, ni, nr
      real atoli, hundrd, milli, one, r1, r2, tdist, temp, tol, two, w,
     *   zero
c
c     ..d..  external / subprogram references  .....
c          minerva subroutine - ulemsg
c          intrinsic functions - abs, max, min, sign
c          fortran library - sqrt
       external ulemsg
       save
c     ..e..  constants  .....
      data zero /0.0e0/, milli /1.0e-3/, one /1.0e0/, two /2.0e0/,
     *     hundrd /1.0e2/
c  ...3...  notes / remarks  .......
c     ..a..  usage  .....
c     ..b..  algorithm  .....
c     ..c..  portability  .....
c          ansi 66 - nonstandard character constant in ulemsg call
c     ..d..  references  .....
c          see dsgedr
c     ..e..  history  .....
c          extracted - lsode - a.c. hindmarsh, lsode,3/6/80
c          modified - header,structure - e.s. marwil, 7 may 81
c
c  1  if not set, calculate initial step size
      if (h .ne. zero) go to 60
         tdist = abs (tn - t0)
         w = max (abs(t0), abs(tn))
         if (w .eq. zero) w = uround
         if (tdist .ge. two * uround * w) go to 10
            info = 44
            nr = 2
            r1 = t0
            r2 = tn
            go to 80
c           --------
   10    continue
         tol = rtol(1)
         if (itol .le. 2) go to 30
            do 20 i = 1, n
               tol = max (tol, rtol(i))
   20          continue
   30    continue
         if (tol .gt. zero) go to 50
            av = 0
            if (itol .eq. 2 .or. itol .eq. 4) av = 1
            atoli = atol(1)
            do 40 i = 1, n
               if (av .eq. 1) atoli = atol(i)
               temp = abs(y(i))
               if (temp .ne. zero) tol = max (tol, atoli/temp)
   40          continue
   50    continue
         tol = max (tol, hundrd*uround)
         tol = min (tol, milli)
         temp = one / (tol * w ** 2) + tol * tnrm ** 2
         h = one / sqrt (temp)
         h = min (h, tdist)
         h = sign (h, tn - t0)
c
   60 continue
c ---
c  2  adjust step size, if necessary
c ---
      temp = abs(h) * hmxi
      if (temp .gt. one) h = h / temp
      if (itsk .le. 3) go to 80
         if ((tcrit - tn)*h .ge. zero) go to 70
            info = 45
            ni = 1
            i1 = 1
            nr = 2
            r1 = tcrit
            r2 = tn
            go to 80
c           --------
   70    continue
         if ((t0 + h - tcrit)*h .gt. zero) h = tcrit - t0
c ------------
   80 continue
      if (info .ne. 0) call ulemsg (info, 'dsgeia', ni,i1,i2, nr,r1,r2)
      return
      end
*endif
