*mlist
*if def,selap
      subroutine isppin (n, x, xi, indx, iloc)
c
c  isppin performs the fission product interpolation.
c
c  Cognizant engineer: ewc (esm).
c
       implicit none
      integer n, indx, iloc
      real x(n), xi
c ****
c
c  ...1...  function / purpose  .......
c
c       computes indx = max(i: 1 .le. i .le. n .and. x(i) .le. xi)
c
c  ...2...  arguments / parameters / constants  .......
c
c     ..a..  input arguments  .....
c
c          n [i:1] - number of terms in the sequence x
c
c          x [r:n] - nondecreasing sequence of points
c
c          xi [r:1] - point whose location with respect to the
c              sequence x is to be determined
c
c     ..b..  output arguments  .....
c
c          indx, iloc [i:1] - pointer and flag, whose values are
c
c              =1, -1, if            xi .lt.  x(1)
c              =i,  0, if  x(i) .le. xi .lt. x(i+1)
c              =n,  1, if  x(n) .le. xi
c
c              iloc = 0 is the 'usual' case; otherwise, xi lies
c              outside the half-open interval x(1) .le. y .lt. x(n)
c              the asymmetric treatment of the interval is due to the
c              decision to make all pp functions continuous from the
c              right
c
c     ..c..  internal / local variables  .....
c
      integer hi, istep, lo, m
c
c     ..d..  external / subprogram references  .....
c
c     ..e..  constants  .....
c
      data lo /1/
c
c  ...3...  notes / remarks  .......
c
c     ..a..  usage  .....
c
c     ..b..  algorithm  .....
c
c          this program is designed to be efficient in the common
c          situation that it is called repeatedly, with  xi  taken from
c          an increasing or decreasing sequence. this will happen,
c          e.g. when a pp function is to be graphed.
c
c          the first guess for indx is therefore taken to be the
c          value returned at the previous call and stored in the local
c          variable lo.  a first check ascertains that lo .lt. n
c          (this is necessary since the present call may have nothing
c          to do with the previous call). then, if
c          x(lo) .le. xi .lt. x(lo+1), we set indx=lo and are
c          done after just three comparisons.
c
c          otherwise, we repeatedly double the difference
c          istep = hi - lo  while also moving lo and hi in the
c          direction of xi, until  x(lo) .le. xi .lt. x(hi),
c          after which we use bisection to get, in addition,
c          lo+1 = hi; indx=lo is then returned.
c
c     ..c..  portability  .....
c
c     ..d..  references  .....
c
c          (1) c. de boor, a practical guide to splines,
c          springer-verlag, new york, 1978
c
c     ..e..  history  .....
c
c          origin - interv (1)
c          modified - header, structure - e.s. marwil, 2 mar 83
c ****
      hi = lo + 1
      if (n .le. hi) then
         if (x(n) .le. xi) then
            iloc = 1
            indx = n
            return
         else if (n .le. 1) then
            iloc = -1
            indx = 1
            return
         end if
         lo = n - 1
         hi = n
      end if
      if (xi .lt. x(lo)) then
         istep = 1
   20    continue
         hi = lo
         lo = hi - istep
         if (1 .lt. lo) then
            if (xi .lt. x(lo)) then
               istep = istep * 2
               go to 20
            end if
         else
            lo = 1
            if (xi .lt. x(1)) then
               iloc = -1
               indx = 1
               return
            end if
         end if
      else if (x(hi) .le. xi) then
         istep = 1
   50    continue
         lo = hi
         hi = lo + istep
         if (hi .lt. n) then
            if (x(hi) .le. xi) then
               istep = istep * 2
               go to 50
            end if
         else
            hi = n
            if (x(n) .le. xi) then
               iloc = 1
               indx = n
               return
            end if
         end if
      end if
   70 continue
      m = (lo + hi) / 2
      if (m .ne. lo) then
         if (xi .lt. x(m)) then
            hi = m
         else
            lo = m
         end if
         go to 70
      end if
      iloc = 0
      indx = lo
      return
      end
*endif
