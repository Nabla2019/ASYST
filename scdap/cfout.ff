*mlist
*if def,selap
       subroutine cfout(itype)
c
c  Output the fuelrod analysis.
c
c  Cognizant engineer: ljs.
c
       use scdmod
       implicit none
       include 'scddat.h'
       include 'scntl.h'
       include 'buntim.h'
       include 'contrl.h'
       include 'fpnonv.h'
       include 'iocom.h'
       include 'cons.h'
       include 'scdcom.h'
       include 'intcom.h'
       include 'debout.h'
       include 'scdout.h'
       include 'tblsp.h'
       include 'fgrcom.h'
       include 'ndxara.h'
       include 'ufiles.h'
       include 'cmatp.h'
       include 'miscon.h'
       include 'dbacct.h'
       include 'scdpow.h'
       include 'oxcom4.h'
       include 'oxairv.h'
c  Local variables.
      integer knt,kdyn,knt2,nnn,ichn
      real fracox(ndax),sum1,wtlimd,wzrsum,winsum,wzisum
      real wrmzr1,wrmuo1,wfrzcl
      real vsfunc
      real dvsum,dvrod,tmpsum,frcmel,tmploc
      real tmtar1
      real tmpsto,tmpst2
      integer m,j
      integer mm
      integer kmid1
      character*3 ind(2)
      external prntt2
      external vsfunc
      character itype*10
      data ind / ' no' , 'yes' /
      write (output,10) scd1(icomp)%cmpno,itype,timehy
   10 format('1Analysis for component',i3,' - ',a,
     & ' at time ',f9.2,' s')
c     write(output,8252)ichn
c8252 format(/,' flow channel number for this component =',i5)
   20 format(1h0,a)
   25 format(1h0,9a12)
   26 format(1x,9a12)
   30 format (1p,(10(1x,g11.4)))
   35 format (4x, i3, 5x, 7es12.4)
c  Print heat conduction solution.
      call prntt2
c
c     write (output,9665) 'Heat generation (j)'
c     write (output,9680)'component','nuclear','oxidation','effective',
c    #  'total'
c9680 format(2x,a,5x,a,3x,a,3x,a,7x,a)
c
c     write (output,9665) 'Stored energy increase (j)'
c     write (output,9700) (qstor(j),j=1,ncomp)
c9700 format (2x,8(es15.6,1x))
      write(output,9231)
9231  format(/,' NUCLEAR HEAT GENERATION RATE AND MAXIMUM',
     & ' HISTORIC TEMPERATURE')
      write(output,9232)
9232  format('                 nuclear         oxidation')
      write(output,9233)
9233  format('  axial            heat             heat    ',
     &         '  maximum        time        max. ox.    time max.')
      write(output,9235)
9235  format('  node          generation       generation ',
     &       '  historic     max. clad       heat      ox. heat ', 
     &       '   frac. rels. frac. decay   frac. reduc.')
      write(output,9237)
9237  format('                   rate            rate     ',
     &       ' clad temp.    temperature  generation  generation', 
     &       '    volatile      power     decay heat due')
      write(output,9239)
9239  format('                  (W/m)            (W/m)    ',
     &       '    (K)           (s)         (W/m)        (s)   ',
     &       '     fis. prod. non-volatile vol. F. P. rels.')
      do knt=naz,1,-1
      write(output,9241)knt,unuca(knt,icomp),oxdhcc(knt,icomp),
     & tmxful(knt,icomp),tmxfl0(knt,icomp),oxdhmx(knt,icomp),
     & toxhmx(knt,icomp),frdkvl(knt,icomp),frdknv(knt,icomp),
     & frdkpw(knt,icomp)
9241  format(2x,i3,11x,e10.4,6x,e10.4,4x,f6.1,6x,e12.6,2x,e10.4,
     & 2x,e12.6,2x,e10.4,2x,e10.4,4x,e10.4)
      end do
cljs  print mole fractions of noncondensible gases at each axial node
      write(output,9401)
9401  format(/,' axial distribution of mole fractions of various',
     & ' gases (including H2O vapor) in gas phase',
     & ' (all zero when no gas phase):')
       write(output,9402)
9402   format(' Note: all components for air column listed under',
     & ' O2, N2, and argon columns, so column',
     & ' for air repeats what is included in other columns')
      write(output,9405)
9405  format(/,' axial node     H2O        hydrogen        oxygen      ',
     &         ' nitrogen      argon          air          helium   ')
        do knt=naz,1,-1
        write(output,9407)knt,frmh2o(knt,icomp),frcmh2(knt,icomp),
     &  frcmo2(knt,icomp),frcmn2(knt,icomp),frcmar(knt,icomp),
     &  frairm(knt,icomp),frcmhe(knt,icomp)
9407    format(3x,i3,6x,e10.4,4x,e10.4,4x,e10.4,4x,e10.4,4x,e10.4,
     &  4x,e10.4,4x,e10.4)
        end do
ccma  Change imput for simulator rod.
       if (idcomp(icomp). eq. 6) then
         write (output,1020) 'Electrical Heat Generation'
         sum1 = 0.0
         do knt = naz,1,-1
           sum1 = sum1 + unuca(knt,icomp)*dzcnd2(knt,icomp)
         enddo
         write (output,"(' Total Electric Heat Generation/rod:',
     &  es13.5,' (w)')") sum1
       else
         write (output,1020) 'Nuclear Heat Generation'
         sum1 = 0.0
         do knt = 1, naz
           sum1 = sum1 + unuca(knt,icomp)*dzcnd2(knt,icomp)
         enddo
         write (output,"(' Total nuclear heat generation/rod: ',
     &   e12.5,' (w)')") sum1
       endif
      if(mshmt3(1,1,icomp).ne.1)then
cljs   this component is not a dummy fuel rod
cljs  if gap conductance calculated, print size of fuel-cladding gap
cljs  and gap conductance.
      write(output,9104)
9104  format(/,' fuel-cladding gap heat transfer characteristics',
     & ' and cladding oxide thickness:')
      write(output,9105)
9105  format(/,'  axial           gap             gap',
     &       '          gap effective         oxide')
      write(output,9106)
9106  format('  node         thickness      conductance   ',
     &       '   conductivity        thickness')
      write(output,9108)
9108  format('                 (mm)           (W/m2.K)  ',
     &       '        (W/m.K)          (microns)')
        do knt =naz,1,-1
        fracox(1) = 1000.0*thkgp2(knt,icomp)
          if(nbgair(knt,icomp).eq.0)then
          fracox(2) = (rco((icomp-1)*ndax+knt) -
     &    rnoxd((icomp-1)*ndax+knt))*1.e+6
          else
          fracox(2) = oxdeo2(knt,icomp)*1.e+6
          end if
        write(output,9007)knt,fracox(1),htcgap(knt,icomp),
     &  kgpshi(knt,icomp),fracox(2)
9007    format(2x,i3,11x,f7.5,8x,e10.4,8x,e10.4,8x,f6.1)
        end do
      end if
cljs  print material index at each radial mesh of each axial node
      write(output,9011)
9011  format(/,' material index at each radial mesh of each axial',
     & ' node:')
      write(output,9013)
9013  format(/,' axial node; indices for outer most material',
     & ' for each radial mesh beginning with radial mesh 1',
     & ' at center of rod:')
        do knt = naz,1,-1
        write(output,9015)knt,(mshmt3(knt2,knt,icomp),knt2=1,
     &  numelm2(knt,icomp))                
9015    format(3x,i3,8x,25i3)
        end do
cljs  print as-fabricated radius to each radial node, 
cljs  which are same at each axial node.
        do knt = 1,numelm2(1,icomp)+1
        fracox(knt) = 1000.0*xcond3(knt,1,icomp)
        end do
      write(output,9021)
9021  format(/,' radial node      radius (mm) (as-fabricated) ')
        do knt =1,numelm2(1,icomp)+1
        write(output,9023)knt,fracox(knt)
9023    format(3x,i3,15x,f7.5)
        end do
c   add print at mid-plane axial node of variables input to heat
c   conduction solver, namely volumetric heat generation rate,
c   thermal conductivity, and volumetric heat capacity.
        kmid1 = naz/2 +1
        write(output,9303),kmid1
9303    format(/,' values for each radial mesh at mid-plane elevation',
     &  ' of variables used by heat conduction solver, axial node =',
     &  i3,/)
        write(output,9307)
9307    format('     inner        outer      volumetric    thermal',
     &         '   volumetric  temperature   material')
        write(output,9309)
9309    format('    radius        radius         heat      conduct.',
     &         '     heat        (K)         index')
        write(output,9311)
9311    format('     (m)           (m)        generation    (W/m.K)'
     &         '   capacity')
        write(output,9313)
9313    format('                               (W/m3)             ',
     &          '    (J/m3.K)')
        do mm=1,numelm2(1,icomp)
        tmpst2=0.5*(tcond3(mm,kmid1,icomp)+tcond3(mm+1,kmid1,icomp))
        write(output,9315)xcond3(mm,1,icomp),xcond3(mm+1,1,icomp),
     &  effgn1(mm,icomp),effk1(mm,icomp),effcp1(mm,icomp),tmpst2,
     &  mshmt3(mm,kmid1,icomp)
9315    format(3x,e10.4,3x,e10.4,3x,e10.4,3x,e10.4,2x,e10.4,2x,e10.4,
     &  4x,i3)
        end do
c-----------------------------------------------------------------------
c  print variables involved in oxidation of Zircaloy in air
      if(nsoxar.ge.1)then
      write(output,8501)
8501  format(/,' OXIDATION OF ZIRCALOY WITH PSI MODELS, INCLUDING',
     & ' OXIDATION IN STEAM AND AIR')
      write(output,8503)
8503  format('  axial   breakaway  ',
     &         '  metal        extent         oxide  ',
     &'   weight     eff. oxide ')                                         
      write(output,8505)
8505  format('  node    thickness ',
     &                  ' thickness     breakaway    thickness',
     &'     gain      thickness ')
        write(output,8507)
8507   format('            (m)         (m)   ',
     &        '    parameter        (m) ','      (kg/m2)       (m)')
	do knt=naz,1,-1
        tmtar1 = tmtair(knt,icomp)
          if(tmtar1.lt.1.e-6)tmtar1=0.0
	write(output,8511)knt,thbeg(knt,icomp),
     &  tmtar1,f1air(knt,icomp),          
     &  oxdeo(ndax*(icomp-1)+knt),oxdwc2(knt,icomp),
     &  thxeg(knt,icomp)
8511    format(2x,i3,4x,e10.4,2x,e10.4,2x,e10.4,4x,e10.4,
     &  3x,e10.4,2x,e10.4)
        end do
        write(output,8514)
8514    format(/,'   axial   fraction   breakaway   double-sided', 
     &  ' breakaway  breakaway   thk at end')
        write(output,8516)
8516      format('   node    oxidized   parameter    oxidation',
     &    '   thk steam   thk air    steam ox.   thbsag')
        write(output,8517)
8517    format('                                               ',
     &  '   (m)        (m)         (m)        (m)')
        do knt=naz,1,-1
        write(output,8512)knt,froxpl(knt,icomp),ibkarg(knt,icomp),
cljs &  brchv(knt,icomp)
     &  ind(int(brchv(knt,icomp))+1),thbksg(knt,icomp),
     &  thbkag(knt,icomp),thkstm(knt,icomp),thbsag(knt,icomp)
c8512    format(2x,i4,3x,e10.4,3x,i5,6x,e10.4)
8512    format(2x,i4,3x,e10.4,3x,i5,9x,a3,7x,e10.4,2x,e10.4,
     &  2x,e10.4,2x,e10.4)
        end do
      end if
      write (output,1020) 'MATERIAL INTERFACE RADII'
 1020 format('  ',/,1x,a)
      write (output,8010) 'Inner Radius','Inner Radius','Inner Radius',
     # 'Inner Radius','Outer Radius of','Outer Radius of','Midplane'
       write (output,8020) 'Dissolved UO2','of Cladding',
     # 'of Outer Oxide','Outer Alpha Layer','Cladding+Oxide',
     # 'Frozen Zr-UO2','Hoop Strain'
 8010 format(6x,a12,3x,a12,2x,a12,4x,a12,7x,a12,4x,a15,2x,a8)
 8020 format(6x,a13,2x,a11,3x,a14,2x,a17,2x,a14,2x,a13,4x,a11)
       if(unito)then
         write (output,8025)' (m)',' (m)',' (m)',' (m)',' (m)',' (m)'
       else
         write (output,8025)'(ft)','(ft)','(ft)','(ft)','(ft)','(ft)'
       endif
 8025  format(2x,4hNode,4x,a4,11x,a4,11x,a4,13x,a8,11x,a4,11x,a4)
       do knt = naz,1,-1
         if (unito) then
           write (output,8030) knt,
     #     ruliq((icomp-1)*ndax+knt),rci((icomp-1)*ndax+knt),
     #     rnoxd((icomp-1)*ndax+knt),rnalf((icomp-1)*ndax+knt),
     #     rco((icomp-1)*ndax+knt),rcrst2(knt,icomp),
     #     hoop((icomp-1)*ndax+knt)
         else
           write (output,8030) knt,
     #     ruliq((icomp-1)*ndax+knt)/0.3048,
     #     rci((icomp-1)*ndax+knt)/0.3048,
     #     rnoxd((icomp-1)*ndax+knt)/0.3048,
     #     rnalf((icomp-1)*ndax+knt)/0.3048,
     #     rco((icomp-1)*ndax+knt)/0.3048,
     #     rcrst2(knt,icomp)/0.3048,
     #     hoop((icomp-1)*ndax+knt)
         endif
       enddo
 8030  format(2x,i2,2x,1p,g11.4,4x,g11.4,3x,g11.4,5x,g11.4,8x,g11.4,5x,
     # g11.4,6x,g11.4)
c
c -------------------------------------------------------------------
      if(nsoxar.eq.0)then
      write (output,1020) 'CLADDING OXIDATION MODEL'
      write (output,8110)'Cladding','Hydrogen','Steam','Cladding',
     & ' Current ','Diffusion','Steam'
 8110 format(7x,a8,2x,a10,5x,a7,4x,a8,3x,a9,3x,a9,7x,a5)
      write (output,8120)'Fraction','Generation','Removal','Oxidation',
     # 'Oxidation','Limited','Limited','Double','Oxide','weight'
 8120 format(7x,a8,2x,a10,5x,a7,2(3x,a9),2(5x,a7),4x,a6,5x,a5,4x,a6)
      write (output,8130)'Oxidized','Rate','Rate','Rate','Rate',
     #  'Oxidation','Oxidation','Sided','Shattered','gain'
 8130 format(7x,a8,4(8x,a4),2(3x,a9),4x,a5,4x,a9,2x,a4)
      if(unito)then
        write (output,8135)'(%)','(kg/s)','(kg/s)',' (w/m)',
     #   ' (kg/m2-s)',' (kg/m2-s)',' (kg/m2-s)','kg O2/m2' 
      else
        write (output,8135)'(%)','(lb/s)','(lb/s)','(w/ft)',
     #   '(lb/ft2-s)','(lb/ft2-s)','(lb/ft2-s)','lbO2/ft2'
      endif
      end if
 8135 format(1x,4hnode,5x,a3,8x,2(a6,6x),a6,3(2x,a10),24x,a8)
      if (.not.scntrl(13)) then
        do knt=naz,1,-1
          if(nbgair(knt,icomp).eq.1)cycle
          kdyn=(icomp-1)*ndax+knt
c  1st argument, ngeom, states that cylindrical geometry applies.
          wtlimd=0.351*zrden*vsfunc(2,rcoi(kdyn),rci(kdyn))
          wtlimd=wtgnmx(knt,icomp)/(2.0*pi*rco(kdyn))
c  Check for double-sided oxidation.
          if(int(brchv(knt,icomp)).eq.1)then
            fracox(knt)=2.*oxdwc2(knt,icomp)/wtlimd
          else
            fracox(knt)=oxdwc2(knt,icomp)/wtlimd
          end if
          if(rnoxd((icomp-1)*ndax+knt).le.
     &    (rci((icomp-1)*ndax+knt)+1.e-6))fracox(knt)=1.
          if(fracox(knt).gt.1.)fracox(knt)=1.
          if(nsoxar.eq.0)then
          if(unito)then
            write(output,8140)knt,
     &      fracox(knt)*100.,
     &      h2oxd2(knt,icomp),
     &      sroxd((icomp-1)*ndax+knt),
     &      oxdhcc(knt,icomp),
     &      nolmt(knt,icomp),
     &      diflmt(knt,icomp),
     &      stmlmt(knt,icomp),
     &      ind(int(brchv(knt,icomp))+1),
     &      ind(shtflg(knt,icomp)+1),
     &      oxdwc2(knt,icomp)
          else
            write(output,8140)knt,
     &      fracox(knt)*100.,
     &      h2oxd2(knt,icomp)*2.205,
     &      sroxd((icomp-1)*ndax+knt)*2.205,
     &      oxdhcc(knt,icomp)/0.3048,
     &      nolmt(knt,icomp)*2.205e4/(2.54**2*144),
     &      diflmt(knt,icomp)*2.205e4/(2.54**2*144),
     &      stmlmt(knt,icomp)*2.205e4/(2.54**2*144),
     &      ind(int(brchv(knt,icomp))+1),
     &      ind(shtflg(knt,icomp)+1),
     &      oxdwc2(knt,icomp)*2.205e4/(2.54**2*144)
 8140 format(2x,i2,5x,f6.2,6(2x,es10.3),2(6x,a3),5x,e10.4)
          end if
          endif
        enddo
c  print variables involved in oxidation of Zircaloy in air
      if(icladf(icomp).eq.0)then
      write(output,8202)
 8202 format(/,' cladding intact along entire length of rod')
      else
      write(output,8204)
 8204 format(/,' cladding breached at one or more points due to',
     #' balloning or spacer grid chemical interaction')
      end if
      endif
c
c -------------------------------------------------------------------
c
c -------------------------------------------------------------------
      write (output,9208)                          
9208  format(/,' CLADDING AND FUEL LIQUEFACTION AND SOLIDIFICATION',
     & ' DESCRIPTION')
      write (output,8210)'UO2','UO2','Zr-Inc','Zr','Inc-Zr  ',
     #  'Fraction'       
 8210 format(9x,a3,13x,a3,13x,a6,10x,a2,14x,a7,9x,a4,9x,a8,3x,a8)  
      write(output,8220)'Drops','Removed','Drops','Removed',
     # 'Removed','Filled'
 8220 format(9x,a5,11x,a7,9x,a5,11x,a7,9x,a7,9x,a6)
      if(unito)then
        write(output,8225)'(kg)','(kg)','(kg)','(kg)','(kg)' 
      else
        write(output,8225)'(lb)','(lb)','(lb)','(lb)','(lb)'
      endif
 8225  format(1x,4hnode,5x,5(a4,12x))
       do knt = naz,1,-1
         if(unito)then
           wrmuo1=fdrmn2(knt,icomp)*wuobc2(knt,icomp)
           wrmzr1=fdrmn2(knt,icomp)*wzrbc2(knt,icomp)
           wfrzcl=wfrozr((icomp-1)*ndax+knt)+winfro(knt,icomp)
           write (output,8230) knt,wfrouo((icomp-1)*ndax+knt),
     &     wrmuo1,wfrzcl,wrmzr1,winrem(knt,icomp),dzfrcq(knt,icomp) 
         else
           wrmuo1=fdrmn2(knt,icomp)*wuobc2(knt,icomp)*2.205
           wrmzr1=fdrmn2(knt,icomp)*wzrbc2(knt,icomp)*2.205
           wfrzcl=(wfrozr((icomp-1)*ndax+knt)+winfro(knt,icomp))*2.205
           write(output,8230)knt,wfrouo((icomp-1)*ndax+knt)*2.205,
     &     wrmuo1,wfrzcl,wrmzr1,winrem(knt,icomp)*2.205,
     &     dzfrcq(knt,icomp)
         endif
       enddo
 8230  format(2x,i2,1x,1p,6(g14.4,2x))
913    format(10(2x,i4))
cljs print solidification and liquefaction temperatures
       write(output,9280)
9280   format(/,' MELTING CHARACTERISTICS OF FUEL')
       write(output,9281)
9281   format(' axial      solidus         liquidus')
       write(output,9283)
9283   format(' node     temperature     tmperature         ',
cljs &        '   fraction')
cljs code does not store value of fraction liquefied, so do not print.
     &        '           ')
       write(output,9285)
9285   format('              (K)             (K)             ',
     &        ' fraction liquefied')
         do knt = naz,1,-1
c  calculate average fuel temperature
          dvsum=0.0
          tmpsum=0.0
          j = icomp
            do m=2,nrods2(knt,j)
            dvrod=pi*(xcond3(m,knt,j)**2-xcond3(m-1,knt,j)**2)
            dvsum=dvsum+dvrod
            tmpsum=tmpsum+dvrod*0.5*(tcond3(m,knt,j)+tcond3(m-1,knt,j))
            enddo
          tmploc=tmpsum/dvsum
            if(tmploc.le.tmlsol(knt,j))then
            frcmel = 0.0
            elseif(tmploc.ge.tmlliq(knt,j))then
            frcmel = 1.
            else
            frcmel = (tmploc-tmlsol(knt,j))/(tmlliq(knt,j)-
     &               tmlsol(knt,j))
            end if
         write(output,9287)knt,tmlsol(knt,icomp),tmlliq(knt,icomp),
     &   frcmel               
9287     format(2x,i3,8x,f6.1,10x,f6.1,12x,f6.4)
         end do
       write(output,9205)
9205   format(/,' MATERIAL SLUMPING AND OXIDATION RESULTS')
       write(output,9207)
9207   format('    axial         time          fraction',
     &        '    heat         fraction        number     ',
     &        '     fraction                 ')
       write(output,9209)
9209   format('    node        slumping       oxidation',
     &        '  generation     covered         drops      ',
     &        '   flow space                ')
       write(output,9211)
9211   format('               into axial      solifified',
     &        ' solidified     or drop          per        ',
     &        '    filled                   ')
       write(output,9213)
9213   format('                  node           drops   ',
     &        '   drops        overlap         cm elev.   ',
     &        '     at node               ')
       write(output,9215)
9215   format('                  (s)                     ',
     &        '   (W/m)        factor                    ',
     &        '                        ')
       do knt=naz,1,-1
         if(wdfzm2(knt,icomp).ge.1.e-6)then
         fracox(knt) = wdfzm2(knt,icomp)
         else
         fracox(knt) = 0.0
         end if
         tmpsto=fadrop(knt,icomp)/fovlap
cljs  store number of drops per cm
       tmpst2 = 0.01*ndrfz2(knt,icomp)/dzcnd2(knt,icomp)
       write(output,9217)knt,tnxdr2(knt,icomp),fracox(knt),
     & qcdrps(knt,icomp),tmpsto,tmpst2,
     & dzfrcq(knt,icomp)                   
9217   format(4x,i3,7x,e10.4,9x,f6.4,3x,e10.4,5x,f6.4,8x,f6.1,
     & 11x,f6.4)
       end do
cc     write(output,956)
c 956  format(/,' indicator of cladding oxide failure or',
c    # ' melt through for each node; 0=no, 1=yes')
c      write(output,913)(kfail1(knt,icomp),knt=1,naz)
       do1122knt=1,naz
       fracox(knt)=0.0
        do nnn = 1,naz
          if(idrops(nnn,icomp).eq.2.or.idrops(nnn,icomp).eq.4.or.
     &    idrops(nnn,icomp).eq.1)then
          if(kdrops(nnn,icomp).eq.knt)fracox(knt)=fracox(knt)+
     &    powadd(nnn,icomp)/dzcnd2(knt,icomp)
          endif
        enddo
       if(nspowi.eq.3.or.nspowi.eq.1)fracox(knt)=powtot(1)*fracox(knt)
1122   continue
 8042  format(11(2x,es11.4))
c -------------------------------------------------------------------
      write(output,1020) 'GRID SPACER MODEL'
c  Print fraction of Zr in slumped mixture of spacer grid and
c  reacted cladding.
       do knt = 1,naz
         fracox(knt) = 0.0
         winsum = 0.0
         wzrsum = 0.0
         do knt2 = 1,naz
           if (idrpgs(knt2,icomp) .eq. 2) then
             if (kdrpgs(knt2,icomp) .eq. knt) then
               winsum = winsum + windrp(knt2,icomp)
               wzrsum = wzrsum + wzgdrp(knt2,icomp)
             endif
           endif
         enddo
         wzisum= winsum+wzrsum
         if (wzisum .gt. 1.e-6) then
           fracox(knt) = wzrsum/wzisum
         endif
       enddo
      write(output,8611)
8611  format(' indicator = 0 = no spacer grid at location,',
     # ' 1 = intact spacer grid, 2 = partially melted ,',
     # ' 4 = completely melted')
      write (output,8610)'axial','Melt','Cladding','Reaction',
     & 'heat','mass slumped','weight' 
 8610 format(2x,a5,4x,25x,a4,21x,a8,5x,a8,5x,a4,6x,a12x,2x,a6)
      write (output,8620)' node ','Front','Melt','Length','Zone',
     & 'generation','grid-cladding','fraction Zr'
 8620 format(1x,a6,28x,a5,8x,a4,9x,a6,7x,a4,6x,a10,3x,a13,2x,a11)
      write (output,8630)'number','Elevation','Indicator','Position',
     & 'Penetration','Liquified','Radius','oxidation','reacted',
     & 'slumped mix.'
 8630 format(1x,a6,2x,a9,4x,a9,4x,a8,5x,a11,2x,a9,4x,a6,5x,a9,
     & 5x,a7,5x,a12)
       write(output,8631)
 8631  format('            (m)                      (m)     ',
     &        '     (m)          (m)          (m)         ',
     &        'W/m)          (kg)')
       do knt = naz,1,-1
         write(output,8640)knt,zcond2(knt,icomp),igrdsp(knt,icomp),
     &   dinzrf(knt,icomp),dzrinf(knt,icomp),daxdis(knt,icomp),
     &   daxgrd(knt,icomp),qgrdox(knt,icomp),winfro(knt,icomp),
     &   fracox(knt)
       enddo
 8640  format( 1x,i4,3x,g11.4,2x,i5,6x,4(2x,g11.4),2x,e10.4,4x,e10.4,
     & 3x,e10.4)
       write(output,8264)
8264   format(/,' indicator for state of liquefaction of spacer grid;',
     & ' 0=intact, 1=liquefied, 2=solidified, 5=slumped below bottom',
     & ' rod')
       write(output,8265)
8265   format(/,'  original    state       current')
       write(output,8266)
8266   format('    node       of          node  ')
       write(output,8267)
8267   format('   spacer  liquefaction   spacer')
       write(output,8268)
8268   format('    grid   spacer grid     grid',/)
         do knt=naz,1,-1
           if(igrdsp(knt,icomp).ge.1)then
             if(kdrpgs(knt,icomp).eq.0)kdrpgs(knt,icomp)=knt
           write(output,8269)knt,idrpgs(knt,icomp),kdrpgs(knt,icomp)
8269       format(4x,i3,7x,i3,10x,i3)
           end if
         end do
c -------------------------------------------------------------------
      write (output,1020)'FUEL FISSION PRODUCT INVENTORY'
      write (output,8320)'Xe','Kr','Cs',' I','Te'
 8320 format(6x,5(5x,a2,5x))
      write (output,8325)'Node'
 8325 format(1x,a4,1x,5(4x,'(kg)',4x))
       do knt = naz,1,-1
         write (output,8330)knt,(fpivy3(knt,kdyn,icomp),kdyn=1,5)
       enddo
 8330  format (2x,i2,2x,1p,(5(1x,g11.4)))
c -------------------------------------------------------------------
      write (output,1020) 'RELEASE AND DEFORMATION MODEL'
      write (output,20) 'fuel rod gap inventory (kg)'
      write (output,1190) 'Xe','Kr','Cs',' I','He','H2',
     +   (ggivy(knt,icomp),knt=1,6)
 1190 format(1x,6(5x,a2,5x)/1p(6(1x,g11.4)) )
      write (output,20) 'release of noncondensibles to coolant'
      write (output,8101) 'xe+kr+he+h2',ggrelr(icomp),'(kg/slbl)'
 8101 format (1h0,a,' = ',1p,g11.4,1x,a)
      write (output,20) 'release of soluble gases to coolant'
      write (output,8101) 'csi+csoh',gsrelr(icomp),'(kg/s)'
      write (output,20)'Output from cladding deformation model'
      write (output,8111) 'local deformation / failure node',ii(icomp)
 8111 format (1h0,a,' = ',i2)
      write (output,8101)'Fuel rod gas pressure',pgas(icomp),'n/m2'
       return
       end
*endif
