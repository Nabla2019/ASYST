*mlist
*if def,selap
       subroutine fpgepc (yh,ldyh,n,ewt,error,y,savf,pw,ipiv,fcn,jac,t,
     & h,el,rc,bnd,iparm,job,info)
c
c  Performs the corrector iteration.
c
c  Cognizant engineer: ljs.
c
       implicit none
       external fcn, jac
       integer ipiv(1), ldyh, n, iparm(3), job(2), info
       real yh(ldyh,2), ewt(1), error(1), y(1), savf(1), pw(ldyh,1),
     & t, h, el, rc, bnd
c
c  ...2...  arguments / parameters / constants  .......
c
c     ..a..  input arguments  .....
c
c          yh [r:ldyh,2] - nordseick history array
c
c          ldyh [i:1] - leading dimension of yh
c
c          n [i:1] - number of first order odes
c
c          ewt [r:n] - weighting vector used for error control
c              in the weighted root-mean-square norm
c
c          error [r:n] - estimate of one step errors
c
c          y, savf [r:n] - work vectors
c
c          pw [r:n,n] - partial derivative matrix or approximation
c
c          ipiv [i:n] - pivot vector (used only if mitr = 1 or 2)
c
c          fcn [e] - user supplied subroutine defining the differential
c              equation
c
c          jac [e] - user supplied subroutine calculating the jacobian
c              matrix of partial derivatives
c
c          t [r:1] - independent variable
c
c          h [r:1] - current step size
c
c          el [r:1] - leading coefficient for the current order
c
c          rc [r:1] - ratio of new to old values of the coefficient h*el
c
c          bnd [r:1] - corrector convergence test value
c
c          job [i:2] - job path parameters
c              (1)/jstr - start / restart indicator
c              (2)/mitr - method of iteration indicator
c
c     ..b..  output arguments  .....
c
c          iparm [i:3] - integer parameters
c               (1)/nst - number of steps taken so far
c               (2)/nfe - number of fcn evaluations
c               (3)/nje - number of jac evaluations
c
c          info [i:1] - error condition / message code
c
c                 << type 3 - terminal >>
c
c              =31, corrector convergence could not be achieved
c
c     ..c..  internal / local variables  .....
c
       integer i,j,m,mio,mitr,newj,nfe,nst,nstj
       real crate,d,delta,d1,eps,epsfcn,hl,phl,r,temp,uround
c
c     ..d..  external / subprogram references  .....
c
      real usmach, vswrms
c
c          minerva real functions - usmach, vswrms
c          minerva subroutines - lsgefa, lsgesl
c          fortran library - sqrt
c          intrinsic functions - abs, max, min
c
c     ..e..  constants  .....
cccc
       save
cccc
c
c     ..d..  references  .....
c
c          see dsgedr
c
c     ..e..  history  .....
c
c          origin - stiff, pset - a.c. hindmarsh, gear, 12/20/74
c                 - stode, prepj, solsy - a.c. hindmarsh, lsode, 3/6/80
c          modified - header, structure - e.s. marwil, 4 may 81
c
       mitr = job(2)
       nst = iparm(1)
       nfe = iparm(2)
       if (job(1) .eq. 1) then
         uround = usmach(5)
         crate = 0.7
         nstj = 0
         mio = 0
       endif
c
c  Check for change of method of iteration.
       if (mitr .ne. mio) then
         mio = mitr
         newj = 1
       endif
       if (nst .ge. nstj + 20) newj = 1
       if (abs(rc - 1.0) .gt. 0.3) newj = 1
c
   30  m = 1
       info = 0
       d1 = 0.0
       do i = 1,n
         error(i) = 0.0
         y(i) = yh(i,1)
       enddo
c
   40  call fcn (savf, n, y, h)
       nfe = nfe + 1
       if (mitr .eq. 4) go to 160
c ---                  ---------
c  2  chord methods
c ---
      if (newj .le. 0) go to 140
c    ---               ---------
c     a  reevaluate jacobian
c    ---
         newj = 0
         rc = 1.0
         crate = 0.7
         nstj = nst
         hl = h * el
         iparm(3) = iparm(3) + 1
         if (mitr .eq. 3) go to 110
         if (mitr .eq. 2) go to 50
c
c  Analytic jacobian.
            call jac (pw, ldyh, n, yh, t)
            go to 90
c
c  Finite difference jacobian.
   50       epsfcn = abs(h)*1.0e3*uround
            eps    = sqrt(max(epsfcn,uround))
            do j = 1,n
               temp = yh(j,1)
               delta  = eps * abs(temp)
               if (delta .eq. 0.0) delta = eps
               yh(j,1) = temp + delta
               call fcn (y, n, yh, h)
               yh(j,1) = temp
               do i = 1,n
                 pw(i,j) = (y(i) - savf(i))/delta
               enddo
            enddo
            nfe = nfe + n
c
   90       do j = 1,n
               do i = 1,n
                 pw(i,j) = -hl*pw(i,j)
               enddo
               pw(j,j) = 1.0 + pw(j,j)
            enddo
            call lsgefa (pw, ldyh, n, ipiv, info)
            if (info .ne. 0) go to 200
c
            go to 160
c
c  Diagonal jacobian approximation.
  110       r = 0.1 * el
            do i = 1,n
              y(i) = y(i) + r * (h*savf(i) - yh(i,2))
            enddo
            call fcn (pw, n, y, h)
            nfe = nfe + 1
            do i = 1,n
               r = h * savf(i) - yh(i,2)
               d = 0.1 * r - h * (pw(i,1) - savf(i))
               pw(i,1) = 1.0
               if (abs(r) .lt. uround * ewt(i)) cycle
               if (d .eq. 0.0) go to 200
c
               pw(i,1) = 0.1*r/d
               y(i) = pw(i,1)*r
            enddo
            go to 180
c           ---------
  140  if (mitr .ne. 3) go to 160
c
c  Update diagonal jacobian approximation.
       phl = hl
       hl = h * el
       if (hl .eq. phl) go to 160
       r = hl / phl
       do i = 1,n
         d = 1.0 - r*(1.0 - 1.0/pw(i,1))
         if (d .eq. 0.0) go to 210
c                               ---------
         pw(i,1) = 1.0/d
       enddo
c
c  Set up and solve linear system.
  160  do i = 1,n
          y(i) = h*savf(i) - (yh(i,2) + error(i))
       enddo
      if (mitr .eq. 3) then
         do i = 1,n
            y(i) = pw(i,1) * y(i)
         enddo
      endif
       if (mitr .eq. 1 .or. mitr .eq. 2)
     & call lsgesl (pw,ldyh,n,ipiv,y,0)
c
c  Update.
  180  do i = 1,n
         error(i) = error(i) + y(i)
       enddo
       d = vswrms (n, y, 1, ewt, 1)
       do i = 1,n
          y(i) = yh(i,1) + el * error(i)
       enddo
c
c  Test for convergence.
      if (m .ne. 1) crate = max(0.2e0*crate, d/d1)
      if (d * min(1.0, 1.5e0*crate) .le. bnd) go to 220
c
      if (m .eq. 4) go to 200
      if (crate .ge. 1.0) go to 200
         m = m + 1
         d1 = d
         go to 40
c
  200 if (newj .eq. -1) go to 210
         info = 31
         go to 220
c        ---------
  210    newj = 1
         go to 30
c -------========
  220 if (info .eq. 0 .and. mitr .ne. 4) newj = -1
      iparm(2) = nfe
      return
      end
*endif
