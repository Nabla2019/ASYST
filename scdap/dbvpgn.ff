*mlist
*if def,selap
       subroutine dbvpgn (ih,imme,ix,genz,ir5vec,qcoupl,qwgcou,gamcou,
     & powrat,icvnod,pore,tsink)
c
c  Calculates the heat transfer to fluid taking place inside a
c  quenched debris bed.
c
c  Cognizant engineer: ewc.
c
c This is a COUPLE ROUTINE
*in32 ih
*in32 imme
*in32 ix
*in32 ir5vec
*in32 icvnod
*in32end
c
       implicit none
       include 'fast.h'
       include 'comctl.h'
       include 'contrl.h'
       include 'voldat.h'
       include 'ufiles.h'
       include 'iparm.h'
       include 'cmptim.h'
       include 'scddat.h'
       include 'scdpow.h'
c  Local variables.
       integer i,ielem,jelem,k,kelem,l,lelem,mat,n
       real gam1,gencor
       integer imme(*),ix(5,*),ih(*),ir5vec(*),icvnod(*)
       real genz(4,*),qcoupl(*),qwgcou(*),gamcou(*)
       real powrat(*),pore(*),tsink(*)
       real pwkinc
c
       if (ncevr5 .eq. 0) return
       do k = 1,numel
         pwkinc = 1.0
         if (ncpow.eq.3 .and. powrat(k).ge.1.e-10) pwkinc =
     &   pwrfdk/powrat(k)
         mat = ix(5,k)
         if (mat .ne. 1) cycle
         if (imme(k) .eq. 0) cycle
c  Porosity limit for quenching needs to be consistent with that used
c  in subroutine tgpset.
         if (pore(k) .lt. 0.1) cycle
         do n = 1,ncevr5
           i = icvnod(n)
           if (i .eq. 0) cycle
           gencor = 0.0
           ielem = ix(1,k)
           jelem = ix(2,k)
           kelem = ix(3,k)
           lelem = ix(4,k)
           if (ielem .eq. i) gencor = gencor + pwkinc*genz(1,k)
           if (jelem .eq. i) gencor = gencor + pwkinc*genz(2,k)
           if (kelem .eq. i) gencor = gencor + pwkinc*genz(3,k)
           if (lelem .eq. i) gencor = gencor + pwkinc*genz(4,k)
c  If cylindrical geometry, heat generation stored in genz applies
c  to just one radian.
           if (npp .eq. 0) gencor = 6.283185*gencor
           if (gencor .lt. 1.e-10) cycle
           l = ir5vec(n) + filndx(4)
           qcoupl(n) = gencor + qcoupl(n)
           if (voidg(l) .le. 0.9999) then
             gam1 = gencor*recipv(l)/sathg(l)
           else
             gam1 = 0.0
           endif
           if (voidf(l) .gt. 0.0001) gamcou(n) = gam1 + gamcou(n)
         enddo
       enddo
       return
       end
*endif
