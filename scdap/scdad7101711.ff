*mlist
*if def,selap
       subroutine scdad7
c
c  Descriptive sentence for scdad7 goes here.
c
c  Cognizant engineer: ewc.
!
       use scdmod
       implicit none
       include 'comctl.h'
       include 'contrl.h'
       include 'fast.h'
       include 'htrcom.h'
       include 'jundat.h'
       include 'scddat.h'
       include 'cpmdat.h'
       include 'debcom.h'
       include 'statec.h'
       include 'plndat.h'
       include 'slumpv.h'
       include 'hardpn.h'
       include 'radata.h'
       include 'solcom.h'
       include 'buntim.h'
       include 'cora.h'
       include 'miscon.h'
       include 'voldat.h'
       include 'scdout.h'
       include 'ndxara.h'
       include 'tblsp.h'
       include 'thplot.h'
       include 'cons.h'
       include 'nhtara.h'
       include 'scdcom.h'
       include 'trnot1.h'
       include 'trnot2.h'
       include 'ufiles.h'
       include 'fpfast.h'
       include 'fparm2.h'
       include 'fpdkht.h'
       include 'bconds.h'
       include 'nrcom.h'
       include 'uoxcom.h'
       include 'fecom.h'
       include 'bwgeom.h'
       include 'intcom.h'
       include 'debout.h'
       include 'blageo.h'
       include 'blinit.h'
       include 'scdads.h'
       include 'scdpow.h'
       include 'dbacct.h'
       include 'cmatp.h'
       include 'oxairv.h'
c
       real zunth1,zuden1
c  Local variables.
       integer i,iloc,ilt,itime,j,jj,jx,k,khpup,kk,kplup,kvoid,l,n,nl
       integer kplup1,iii,nswap,lcrchn,icm1,k1,k2,nnn,nswslp,nbubsw
       integer nswcst,nswenr
       real qdpol1,qrt,powdba,cghgi,cghg1
       real kcrst,qpldot,tcool,gpool,betapl,alphpl,nupool,rpool,tplsol,
     & dtsuph,rapool,qmtop,qmsid,qmbot,emscst,sbcons,tsurgs,hcsrad,
     & hcvcst,hcmcst,thkcst,aconst,bconst,cconst,ccnst2,tsrcst,thklbr,
     & tmplbr,qmpool,tpool1,thklb2,theta,factor,radlbr,hcvcs2,sqtarg,
     & radlb2,thkcs2,tsrcs2
       integer itcnt,itmax,ithet,ithetm
       real h2intc
       real afmxlc(11),apel0(ndax)
       real hitdeb,xn,xn1,pordlc,wmixpr,volfil,radlh,zz1,voldlc,voltt
       real wmixlc(11),wmixtt,rftmix,tmixlc,enrmix,ttmxen,denmix
       integer npfth,iufth
       real polate
       data npfth/19/, iufth/1/
       real tabfth(38)
       integer ndbg
       integer ndbg2
c  Define table that computes angle factor for Nusselt number for
c  for natural convection at boundary of hemisphere.
       data tabfth / 0.150626, 0.0,      0.158157, 0.087266,
     &               0.165689, 0.174533, 0.192048, 0.261799,
     &               0.218408, 0.349066, 0.305018, 0.436332,
     &               0.391628, 0.523599, 0.523426, 0.610865,
     &               0.655224, 0.698132, 0.764428, 0.785398,
     &               0.873632, 0.872665, 1.001664, 0.959931,
     &               1.129696, 1.047198, 1.220072, 1.134464,
     &               1.310448, 1.221730, 1.374464, 1.308997,
     &               1.438480, 1.396263, 1.446011, 1.483530,
     &               1.453543, 1.570796 /
       data nswcst/0/,nswenr/0/
       ndbg=0
       ndbg2=0
cljs     if(timehy.ge.12699.0.and.timehy.le.12700.0)ndbg=2
         if(ndbg.eq.2)then
         write(output,9005)timehy
9005     format(' SCDAD7 entered; timehy=',e10.4)
         end if
c  Shroud - total heat in (shqin) and out (shqout).
       shqout = 0.
       shqin = 0.
       if (nvirn.ne.3 .and. nvirn.ne.4 .and. nvirn.ne.6) then
         if (jshq .gt. 0) then
           j = jshq
           jx = (j - 1)*ndax
           do i = 1,naz
             kdyn = (j - 1)*ndax + i
             shqin = shqin - (hcnvec(kdyn)*(tsur1(kdyn) - tcolc(i)) +
     &       scd22(i,j,1,1)%qrdsur)*dzcond(jx+i)*slbwd(j)
             shqout = shqout + qouts(i)*dzcond(jx+i)*slbwd(j)
           enddo
         endif
c  Bundle - global total fission product release - solubles.
         bgtfrs = 0.
c  Bundle - global total fission product release - non condensibles.
         bgtfrn = 0.
         do j = 1,ncomp
           bgtfrs = bgtfrs + (ggrel(3,j) + ggrel(4,j))*float(nsigl(j))
           bgtfrn = bgtfrn + (ggrel(1,j) + ggrel(2,j))*float(nsigl(j))
         enddo
       endif
c  Bundle - global nuclear heat generation.
       usum(1:ndax) = 0.
       dhrel = 0.
       if (tdown .eq. -1.) then
         do j = 1,ncomp
           jj = j
           if (idcomp(j) .ne. 0) then
             tdown = tshtdn(jj)
             exit
           endif
         enddo
       endif
       do j = 1,ncomp
         if (idcomp(j).eq.3 .or. idcomp(j).eq.8) cycle
         icomp = j
         jx = (j - 1)*ndax
         do i=1,naz
           apel0(i)=3.141592*rpel((j-1)*ndax+i)**2
           kdyn=(j-1)*ndax+i
           if (wremzr(kdyn).gt.1.e-10)
     &     apel0(i) = 3.141592*ruliq(kdyn)**2
         enddo
         call nheat (apel0, 0, qfrel)
         dhrel = dhrel + qfrel
         cgnhg = 0.
         do i = 1,naz
           unuca(i,j) = unuc(i)
           unucda(i,j) = unucd(i)
           kdyn =(j - 1)*ndax + i
           utot = unuc(i)
           powdba = 0.0
           if (idrfz2(i,j).eq.1 .or. idrfz2(i,j).eq.2 .or.
     &     idrfz2(i,j).eq.3) powdba = powdba + powadd(i,j)
           if (nspowi.eq.3 .or. nspowi.eq.1) powdba = powtot(1)*powdba
c  Add on power in relocated material.
           cgnhg = cgnhg + utot*nsigl(j)*dzcond(jx+i) + nsigl(j)*powdba
           if (irubpp(i,j).eq.1 .and. lcrucb(i,j).eq.0) then
c  Location has degenerated into debris; add on power in debris.
             powdba = powrub(i,j)
             if (nspowi.eq.3 .or. nspowi.eq.1) powdba = powtot(1)*powdba
             cgnhg = cgnhg + nsigl(j)*powdba
           endif
           usum(i) = usum(i) + utot*nsigl(j)
         enddo
         bgnhg = bgnhg + cgnhg
         poatot(j) = cgnhg
       enddo
c  Add on power in molten pool to variable storing total core power.
       qdpol1 = qdpool
c  Correct for decay power if relap kinetics.
       if (nspowi.eq.3 .or. nspowi.eq.1) qdpol1 = qdpol1*powtot(1)
       bgnhg = bgnhg + qdpol1
       if (filid(34) .ne. 0.0) then
c  Apportion the released decay heat, dhrel, into contributions of the
c  three elements, Cs, I, and Te, and then apportion each element into
c  contributions of gamma and beta.
c
c  Use the decay time used in nheat, dktime, to interpolate in the
c  tables elmfr and gamfr, for the element fractions and the gamma
c  fractions.
        dktime = timehy - tdown
c  Determine the Cs, I, and Te decay heat fractions.
         call isppin (ntelm, telm, dktime, itime, iloc)
         if (iloc .eq. 0) then
           tf = (dktime - telm(itime))/(telm(itime+1) - telm(itime))
           dkte = elmfr(lte,itime)*(1.0 - tf) + elmfr(lte,itime+1)*tf
           dki = elmfr(li,itime)*(1.0 - tf) + elmfr(li,itime+1)*tf
           dkcs = elmfr(lcs,itime)*(1.0 - tf) + elmfr(lcs,itime+1)*tf
         else
           dkte = elmfr(lte,itime)
           dki = elmfr(li,itime)
           dkcs = elmfr(lcs,itime)
         endif
c  Determine the gamma fraction for each element.
c  (The beta fraction is then one minus the gamma fraction.)
         call isppin (ntgam, tgam, dktime, itime, iloc)
         if (iloc .eq. 0) then
           tf = (dktime - tgam(itime))/(tgam(itime+1) - tgam(itime))
           dkteg = gamfr(lte,itime)*(1.0 - tf) + gamfr(lte,itime+1)*tf
           dkig = gamfr(li, itime)*(1.0 - tf)+gamfr(li,itime+1)*tf
           dkcsg = gamfr(lcs,itime)*(1.0 - tf) + gamfr(lcs,itime+1)*tf
         else
           dkcsg = gamfr(lcs,itime)
           dkig = gamfr(li,itime)
           dkteg = gamfr(lte,itime)
         endif
c  Apportion dhrel into the dkhtfr elements.
         dkhtfr(lte,lgamma) = dhrel*dkte*dkteg
         dkhtfr(lte,lbeta) = dhrel*dkte*(1. - dkteg)
         dkhtfr(li,lgamma) = dhrel*dki*dkig
         dkhtfr(li,lbeta) = dhrel*dki*(1. - dkig)
         dkhtfr(lcs,lgamma) = dhrel*dkcs*dkcsg
         dkhtfr(lcs,lbeta) = dhrel*dkcs*(1. - dkcsg)
       endif
c  Component - global hydrogen generation rate.
       bgth = 0.
       bgthi = 0.0
       bgthqd = 0.0
c  Component - global hydrogen generation rate due to uranium oxidation.
       bgthu = 0.
       bgtha = 0.0
cljs  h2intc = hydrogen generation from oxidation of intact structure
       h2intc = 0.0
       do j = 1,ncomp
         if(ndbg.eq.2)then
         write(output,9033)bgth,j
9033     format(' SCDAD7 start component loop, bgth=',e12.6,' j=',i5)
         end if
         cghg = 0.
         cghgi = 0.0
         cghgu = 0.
         cghga = 0.0
         do i = 1,naz
           if(ndbg.eq.2)then
           write(output,9009)i,j
9009       format(' SCDAD7 H2 production loop; i=',i5,' j=',i5)
           end if
cljs  multiplier of 0.5 missing in next line, fortunately
cljs  h2oxdo(i,j) always equal to zero.
cljs       cghg1=(h2oxd2(i,j) + h2oxdo(i,j))*nsigl(j)
           cghg1 = h2oxd2(i,j)*nsigl(j)
          h2intc = h2intc + cghg1 
           if (cghg1.lt.0.0) cghg1 = 0.0
           cghg = cghg +cghg1
             if(ndbg.eq.2)then
             write(output,9106)cghg,cghg1
9106         format(' SCDAD7 for rods; cghg=',e10.4,' cghg1=',e10.4)
             end if
           cghgi=cghgi+cghg1
c  Increment cghg to account for oxidation of drops of relocating
c  material.
cljs cghg1 reset, so following line not used.
cljs       cghg1 = (qdrops(i,j) + qcohst(i,j))*dzcond((j-1)*ndax+i)*
cljs &     float(nsigl(j))
cljs       if (cghg1.lt.0.0) cghg1 = 0.0
cljs   obtain oxdation heat generation directly from calculated
cljs   linear heat generation so it is valid also for oxidation
cljs   in presence of air.
cljs       bgthqd = bgthqd + cghg1
           bgthqd = bgthqd + float(nsigl(j))*oxdhcc(i,j)*
     &              dzcnd2(i,j) + cghg1
cljs cghg1 reset, so following line not used.
cljs       cghg1 = qdebox(i,j)*float(nsigl(j))
cljs       if (cghg1.lt.0.0) cghg1 = 0.0
           bgthqd = bgthqd + cghg1
           cghg1 = (hgdrps(i,j) + hgcohs(i,j) +
     &     hgdeb(i,j))*float(nsigl(j))
              if(ndbg.eq.2)then
              write(output,9107)hgdrps(i,j),hgcohs(i,j),
     &        hgdeb(i,j),cghg1
9107          format(' SCDAD7; hgdrps=',e10.4,' hgcohs=',e10.4,
     &        ' hgdeb=',e10.4,' cghg1=',e10.4)
              end if
           if (cghg1.lt.0.0) cghg1 = 0.0
           cghg =cghg + cghg1
             if(ndbg.eq.1)then
             write(output,9023)h2oxd2(i,j),
     &       h2oxdo(i,j),hgdrps(i,j),hgcohs(i,j),cghg1,cghg
9023         format(' SCDAD7;',
     &       ' h2oxd2=',e12.6,' h2oxdo=',e12.6,' hgdrps=',e12.6,
     &       ' hgcohs=',e12.6,' cghg1=',e12.6,' cghg=',e12.6)
             end if
           cghgu = cghgu + (h2uoxi(i,j) + h2uoxo(i,j))*nsigl(j)
           cghga = cghga + (h2aoxi(i,j) + h2aoxo(i,j))*nsigl(j)
         enddo
         bgthi = bgthi + cghgi
         bgth = bgth + cghg
           if(ndbg.eq.2)then
           write(output,9027)bgth,cghg,cghg1
9027       format(' SCDAD7; bgth=',e12.6,' cghg=',e12.6,
     &     ' cghg1=',e12.6,' cumulative comp i')
           end if
         bgthu = bgthu + cghgu
         bgtha = bgtha + cghga
       enddo
cljs  store cumulative hydrogen production rate
cljs   h2prod = h2prod + 0.5*(bgth + h2prd0)*dt
cljs   since h2prd0 may be calculated with different time step
cljs   than h2prod, calculate h2prod as shown below.
       h2prod = h2prod + bgth*dt
         if(ndbg.eq.2)then
         write(output,9011)h2prod,bgth,h2prd0,timehy
9011     format(' SCDAD7; h2prod=',e12.6,' bgth=',e12.6,
     &   ' h2prd0=',e12.6,' timehy=',e12.6)
         end if
           if(ndbg2.eq.1)then          
           write(output,9105)h2prod,bgth,timehy
9105       format(' SCDAD7; h2prodsum=',e10.4,' bgth=',e10.4,
     &     ' timehy=',e10.4)
           end if
cljs  store start of time step hydrogen production rate at
cljs  next time step
       h2prd0 = bgth
       bgthqi = bgthi*1.48e+08
cljs   bgthq = bgthi*1.48e+08 + bgthqd
       bgthq = bgthqd
       bgthqu = bgthu*1.4736e8
       if (nvirn.eq.4 .or. nvirn.eq.6) then
         bgthq = 1.7577e7*(bgth + bgtha)
         bgthqu = 1.4736e8*bgthu
       endif
       k = 0
       do i = 1,ncomp
         do j = 1,naz
           rcrsx0(j+k) = rcrsto(j+k)
           rcrsto(j+k) = rco(j+k)
         enddo
         k = k + ndax
       enddo
       if (nvirn.eq.3 .or. nvirn.eq.4 .or. nvirn.eq.6) go to 480
c  nslph0 = number of COUPLE mesh that models lower head of LWR.
       if (nslph0 .ge. 1) then
         mcp = nslph0
         call gpcoup(1)
       endif
c  Check to see whether material slumped into lower vessel region
c  during time step. if slumping, calculate amount of mass that
c  slumped.
       l = inv + filndx(4)
c  tsatlp = temperature of liquid phase in volume representing lower
c  plenum (K).
       tsatlp = tempf(l)
       tvapbc = tempg(l)
c  Determine whether hardpan exists. if so, store thickness of hardpan.
c  Check to see whether bottom crust of crucible has failed.
       do j = 1,ncomp
         iswlay(j) = 0
         thklay(j) = 0.0
         if (idcomp(j) .ne. 0) cycle
         if (rpel((j-1)*ndax+1) .lt. 0.2e-3) cycle
         nswliq = 0
         liqmin = naz
         do k = 1,naz
           if (lcrucb(k,j) .eq. 1) nswliq = 1
           if (lcrucb(k,j).eq. 1.and. k.lt.liqmin) liqmin = k
         enddo
         if (nswliq.eq.1 .and. liqmin.eq.nhrdpn(j)) cycle
c  If nswrub=1, then cohesive debris at one or more axial nodes and
c  rubble debris above cohesive debris. otherwise, nswrub=0.
         nswrub = 0
c  Update thickness of hardpan.
         nhrold = nhrdpn(j)
         nhrold = 0
         if (nhrold .eq. 0) then
           nmetsw(j) = 0
         else
           nmetsw(j) = nmetsw(j) + 1
         endif
         thkhp0 = thkhpn(j)
         thkhpn(j) = 0.0
         nhrdpn(j) = 0
         qdhdpn(j) = 0.0
         nswhdp = 0
         do k = 1,naz
c  Note: this do loop is not entered if possibility exists for thinning
c  of hardpan (lcrucb=1).
           kdyn = (j - 1)*ndax + k
           if (nswhdp .eq. 1) cycle
           if ((dzcond(kdyn)*dzfrcq(k,j)) .gt. 1.e-3) then
             if (nswhdp .eq. 0) icohpp(k,j) = 1
             if (nhrdpn(j) .eq. 0) nhrdpn(j) = k
             nswhdp = 2
             thkhpn(j) = thkhpn(j) + dzcond(kdyn)*dzfrcq(k,j)
c  Calculate smeared volumetric heat generation rate in hardpan.
           else
             if (nswhdp .eq. 2) nswhdp = 1
           endif
         enddo
         if (thkhpn(j) .gt. (thkhp0 + 1.e-3)) then
           iswlay(j) = 1
           thklay(j) = thkhpn(j) - thkhp0
         endif
c  nmetsw(j) = number of time steps since hardpan came into existence.
         if (nhrold.eq.0 .and. nhrdpn(j).ge.1) nmetsw(j) = 1
       enddo
c  Call subroutine to calculate heatup of circulating liquefied debris
c  contained in crucible and calculate thickness of crucible.
       do j = 1,ncomp
         nhpx = nhrdpn(j)
         if (ncerhp(j) .gt. nhpx) nhpx = ncerhp(j)
         if (nhpx .ge. 2) then
           ilt = (j - 1)*ndax+nhpx - 1
           nl = nvad(ilt) + filndx(4)
         else
           nl = lhvol(j) + filndx(4)
         endif
c  Store temperature of coolant interfacing bottom of hardpan.
         tchdpn(j) = tempg(nl)
c  Calculate chf at bottom surface of supporting crust according to
c  Zuber correlation.
         if (voidg(nl) .gt. 0.10) then
           qcrthp(j) = 0.0
         else
           qcrthp(j) = 0.14*(sathg(nl) - sathf(nl))* rhog(nl)*
     &     (sigma(nl)*9.80*(rhof(nl) - rhog(nl))/ rhog(nl)**2)**0.25
         endif
       enddo
       do j = 1,ncomp
         khpup = 0
         kvoid = 0
         do k = 1,naz
           if (lcrucb(k,j).eq.1 .or. nblkrd(k,j).eq.1) khpup = k + 1
           if (kvoid.lt.1 .and. lcrucb(k,j).eq.2 .and.
     &     nunbl2(ncmpgp(j),k).eq.2) kvoid = k
         enddo
         if (kvoid.gt. 0.and. khpup.gt.kvoid) khpup = kvoid
         if (khpup .ge. 1) then
           if (khpup .le. naz) then
c  Find relap5 volume number containing top of molten pool.
             ilt = (j - 1)*ndax + khpup
c  In debris region the coolant temperature adjacent to top of upper
c  crust is close to debris temperature.
             nl = nvad(ilt) + filndx(4)
             tchdpu(j) = tempg(nl)
           else
             nl = uhvol(j) + filndx(4)
             tchdpu(j) = tempg(nl)
           endif
         endif
       enddo
$if def,remove1
c  Beginning of macros.
       if (nswcst.eq.1 .and. timehy.gt.1200.0 .and. timehy.lt.1200.5)
     & then
c  Calculate crust thickness and crust temperature distribution as
c  function of molten pool size, power density, temperature of coolant
c  around molten pool, and molten pool temperature.
c  kcrst = thermal conductivity of crust (W/m.K).
         kcrst = 7.96
c  qpldot = power density in molten pool (W/m2).
         qpldot = 1.96e+6
c  tcool = temperature of coolant surrounding molten pool (K).
c  584. = saturation temperature at pressure of 10 MPa.
         tcool = 584.
c  gpool = acceleration of gravity (m/s2).
         gpool=9.8
c  betapl = coefficient of thermal expansion (1/K).
         betapl = 0.108e-3
c  alphpl = thermal diffusivity of crust (m2/s).
         alphpl = 1.8e-6
c  nupool = kinematic viscosity of molten material (m2/s).
         nupool = 1.59e-6
c  rpool = radius of hemisphere of molten pool (m).
         rpool=1.5
c  tplsol = solidus temperature of molten pool (K).
         tplsol = 2873.
c  tpool1 = temperature of molten pool (K).
         tpool1 = 3100.
         dtsuph = tpool1 - tplsol
c  rapool = Rayleigh number of molten pool.
         rapool = gpool*betapl*qpldot*(rpool**5)/(alphpl*nupool*kcrst)
c  emscst = emissivity of crust surface.
         emscst = 0.7
c  sbcons=Stefan-Boltzmann constant (W/m2K4).
         sbcons = 5.6697e-8
c  qmtop = heat flux at bottom side of crust at top of molten pool
c  (W/m2).
         qmtop = (kcrst*dtsuph/rpool)*0.345*rapool**0.233
         qmsid = (kcrst*dtsuph/rpool)*0.850*rapool**0.190
         qmbot = (kcrst*dtsuph/rpool)*0.540*rapool**0.180
         tsrcst = 1800.
         tsurgs = 1800.
         itmax = 50
         do itcnt=1,itmax
           tsurgs = 0.5*(tsrcst + tsurgs)
           if (tsurgs.gt.tplsol) tsurgs = tplsol
           hcsrad = emscst*sbcons*(tsurgs**2 + tcool**2)*(tsurgs +
     &     tcool)
           hcvcst = 1000.
           hcmcst = hcsrad + hcvcst
           qmpool = qmtop
           thkcst = (kcrst/qpldot)*((((qmpool/kcrst) +
     &     (qpldot/hcmcst))**2 +
     &     (4.*qpldot/(2.*kcrst))*(tplsol - tcool - qmpool/hcmcst))**0.5
     &     - ((qmpool/kcrst) + (qpldot/hcmcst)))
           thkcs2=(kcrst/qpldot)*(-(((qmpool/kcrst) +
     &     (qpldot/hcmcst))**2 +
     &     (4.*qpldot/(2.*kcrst))*(tplsol - tcool - qmpool/hcmcst))**0.5
     &     -((qmpool/kcrst) + (qpldot/hcmcst)))
           aconst = -qpldot/(2.*kcrst)
           bconst = -qmpool/kcrst
           cconst = tplsol
           tsrcst = aconst*(thkcst**2) + bconst*thkcst + cconst
           tsrcs2 = aconst*(thkcs2**2) + bconst*thkcs2 + cconst
           if (abs((tsrcst - tsurgs)/tsurgs).lt.0.001) exit
         enddo
         ccnst2 = cconst - 2250.
         sqtarg = bconst**2 - 4.*aconst*ccnst2
         if (sqtarg.ge.0.0) then
           radlb2 = (-bconst + sqtarg**0.5)/(2.*aconst)
           radlbr = (-bconst - sqtarg**0.5)/ (2.*aconst)
         else
           radlbr = 0.0
           radlb2 = 0.0
           write (output,9000) sqtarg
 9000  format (' Negative argument to square root in crust thickness equ
     &ation,  sqtarg=',es12.4)
         endif
         tmplbr=aconst*radlbr** 2+ bconst*radlbr+cconst
         write (output,9060)
 9060  format (/////,' Molten pool parameters:')
         write (output,9070) rpool
 9070  format (/,' Radius of molten pool =',es12.4,'  m')
         write (output,9080) tcool
 9080  format (/,' Coolant temperature around molten pool =',es12.4,
     & '  K')
         write (output,9090) qpldot
 9090  format (/,' Power density in molten pool =',es12.4,' W/m3')
         write (output,9100) tpool1
 9100  format (/,' Temperature of molten pool =',es12.4,'  K')
         write (output,9110) rapool
 9110  format(/,' Rayleigh number of molten pool =',es12.4)
         write (output,9120) hcvcst
 9120  format (/,' Convective htc at top surface of upper crust =',
     & es12.4, '  W/m2.K')
         write (output,9130)
 9130  format (//,' Parameters describing top crust:')
         write (output,9140) thkcst
 9140  format (/,' Total thickness of crust =',es12.4,'  m')
         thklbr = thkcst - radlbr
         write (output,9150) thklbr
 9150  format (/,' thickness of load bearing portion of upper crust =',
     & es12.4,'  m')
         write (output,9160)
 9160  format (/,' radial coordinate of inner surface of load bearing po
     &rtion')
         write (output,9170) radlbr
 9170  format (' of crust =',es12.4,'  m')
         write (output,9180) tsrcst
 9180  format(/,' upper crust outer surface temperature =',es12.4,'  K')
         ithetm = 21
         write (output,9220)
 9220  format(////,' description of hemispherical portion of crust (crus
     &t supporting molten pool):')
         write (output,9230)
 9230  format(/,' crust parameters as function of theta (A, B, and C are
     & coefficients')
         write (output,9240)
 9240  format(' in parabolic temperature distribution)')
         write (output,9250)
 9250  format(/,'   theta        thick.       Tsur         A      ',
     &'      B           C        ')
         write (output,9260)
 9260  format('  (radians)      (m)         (K)        (K/m2)   ',
     &'    (K/m)         K     ')
         do ithet = 1,ithetm
           theta = (float(ithet-1)/float(ithetm-1))*0.5*pi
           factor=polate(tabfth,theta,npfth,iufth)
           qmpool = factor*qmbot
           tsrcst = 1800.
           tsurgs = 1800.
           itmax = 50
           do itcnt = 1,itmax
             tsurgs = 0.5*(tsrcst + tsurgs)
             hcsrad = emscst*sbcons*(tsurgs**2 + tcool**2)*(tsurgs +
     &       tcool)
             hcvcs2 = hcvcst
             hcmcst = hcsrad + hcvcs2
             thkcst=(kcrst/qpldot)*((((qmpool/kcrst)+(qpldot/hcmcst))**2
     &       + (4.*qpldot/(2.*kcrst))*(tplsol - tcool -
     &       qmpool/hcmcst))**0.5 - ((qmpool/kcrst)+(qpldot/hcmcst)))
             aconst = -qpldot/(2.*kcrst)
             bconst = -qmpool/kcrst
             cconst = tplsol
             tsrcst = aconst*(thkcst**2) + bconst*thkcst + cconst
             if(abs((tsrcst - tsurgs)/tsurgs).lt.0.001) exit
           enddo
           ccnst2 = cconst - 2250.
           sqtarg = bconst**2 - 4.*aconst*ccnst2
           if (sqtarg.ge.0.0) then
             radlb2 = (-bconst + sqtarg**0.5)/(2.*aconst)
             radlbr = (-bconst - sqtarg**0.5)/(2.*aconst)
           else
             radlbr = 0.0
             radlb2 = 0.0
             write (output,9270) sqtarg
 9270  format (' Negative argument to square root in crust thickness equ
     &ation, sqtarg=',es12.4)
           endif
           thklbr = thkcst - radlbr
           write (output,9280) theta,thklbr,tsrcst,aconst,bconst,cconst
 9280  format (6(2x,es12.4))
         enddo
         write(output,"('1')")
         write(output,9300)
 9300  format (////,'   theta    ','    Qpool   total thick.',
     & '  htc(total) htc(convec.)')
         write (output,9310)
 9310  format ('  (radians)     (W/m2)        (m)      (W/m2.K)  ',
     & '   (W/m2.K)  ')
         do ithet = 1,ithetm
           theta = (float(ithet - 1)/float(ithetm - 1))*0.5*pi
           factor = polate(tabfth,theta,npfth,iufth)
           qmpool = factor*qmbot
           tsrcst = 1800.
           tsurgs = 1800.
           itmax = 50
           do itcnt=1,itmax
             tsurgs = 0.5*(tsrcst +tsurgs)
             hcsrad = emscst*sbcons*(tsurgs**2 + tcool**2)*(tsurgs +
     &       tcool)
             hcvcs2 = hcvcst
             hcmcst = hcsrad+hcvcs2
             thkcst = (kcrst/qpldot)*((((qmpool/kcrst) +
     &       (qpldot/hcmcst))**2 + (4.*qpldot/(2.*kcrst))*(tplsol -
     &       tcool - qmpool/hcmcst))**0.5 - ((qmpool/kcrst)+(qpldot/
     &       hcmcst)))
             aconst = -qpldot/(2.*kcrst)
             bconst = -qmpool/kcrst
             cconst = tplsol
             tsrcst = aconst*(thkcst**2) + bconst*thkcst +cconst
             if (abs((tsrcst - tsurgs)/tsurgs).lt.0.001) exit
           enddo
           ccnst2 = cconst - 2250.
           sqtarg = bconst**2 - 4.*aconst*ccnst2
           if (sqtarg.ge.0.0) then
             radlb2 = (-bconst + sqtarg**0.5)/(2.*aconst)
             radlbr = (-bconst - sqtarg**0.5)/(2.*aconst)
           else
             radlbr = 0.0
             radlb2 = 0.0
             write (output,9320) sqtarg
 9320  format (' Negative argument to square root in crust thickness equ
     &ation, sqtarg=',es10.4)
           endif
           thklbr = thkcst-radlbr
           write (output,9330) theta,qmpool,thkcst,hcmcst,hcvcs2
 9330  format (5(2x,es12.4))
         enddo
         write(output,9340)
 9340  format(///////////,' end of crust parameter output')
       endif
$endif
$if def,remove2
       if (nswenr.eq.1 .and. timehy.ge.1200.0 .and. timehy.le.1201.0)
     & then
c  Mass of Zr (kg).
         wmixlc(1) = 733.0
c  Mass of metallic U.
         wmixlc(2) = 0.0
c  Mass of stainless steel.
         wmixlc(3) = 1234.
c  Mass of Ag-In-Cd.
         wmixlc(4) = 0.0
c  Mass of Boron Carbide.
         wmixlc(5) = 0.0
c  Mass of UO2.
         wmixlc(6) = 7155.4
c  Mass of ZrO2.
         wmixlc(7) = 853.3
c  Mass of Al.
         wmixlc(8) = 0.0
c  Mass of Li.
         wmixlc(9) = 0.0
c  Mass of Cd.
         wmixlc(10) = 0.0
c  Mass of Si.
         wmixlc(11) = 0.0
         call calaf (wmixlc,wmixtt,afmxlc)
c  Temperature of mixture (K).
         rftmix = 373.
         tmixlc = 3095.
         write (output,9350)
 9350  format(/,' SCDAD7: calculations for mixture energy')
         write (output,9360) wmixlc(1)
 9360  format(' mass Zr in mixture =',es12.4)
         write (output,9370) wmixlc(3)
 9370  format(' mass stainless steel in mixture =',es12.4)
         write (output,9380) wmixlc(6)
 9380  format(' mass UO2 in mixture =',es12.4)
         write (output,9390) wmixlc(7)
 9390  format(' mass ZrO2 in mixture =',es12.4)
         write (output,9400) wmixlc(4)
 9400  format(' mass Ag-In-Cd in mixture =',es12.4)
         write (output,9410) tmixlc
 9410  format(' temperature of mixture =',es12.4,' K')
         write (output,9420) afmxlc(1),afmxlc(3)
 9420  format (/,' atomic fraction zr in mixture =',es12.4,
     & '   atomic fraction stainless steel in mixture =',es12.4)
         write (output,9430) afmxlc(6),afmxlc(7)
 9430  format (/,' atomic fraction UO2 in mixture =',es12.4,
     &'   atomic fraction ZrO2 in mixture =',es12.4)
         write (output,9440) afmxlc(4)
 9440  format (/,' atomic fraction Ag-In-Cd in mixture =',es12.4)
         enrmix = zunth1(afmxlc(1),afmxlc(2),afmxlc(3),afmxlc(4),
     &   afmxlc(5),afmxlc(6),afmxlc(7),tmixlc,afmxlc(8),afmxlc(9),
     &   afmxlc(10),afmxlc(11),rftmix)
         ttmxen = wmixtt*enrmix
         write (output,9450) wmixtt,enrmix,ttmxen
 9450  format (' SCDAD7 for mixture energy, wmixtt=',es12.4,
     & ' enrmix (J/kg) =',es12.4,' ttmxen (J) =',es12.4)
         denmix = zuden1(afmxlc(1),afmxlc(2),afmxlc(3),afmxlc(4),
     &   afmxlc(5),afmxlc(6),afmxlc(7),afmxlc(8),afmxlc(9),afmxlc(10),
     &   afmxlc(11),rftmix)
         write (output,9460) denmix
 9460  format (' density of quenched mixture =',es12.4,' kg/m3')
c  radlh = radius of inside surface of lower head (m).
         radlh = 2.009
c  Calculate depth of quenched debris assuming it has porosity of
c  pordlc.
         pordlc = 0.5
         voltt = 0.66666667*pi*radlh**3
c  wmixpr = mass of quenched debris from previous slumpings (kg).
         wmixpr = 10215.
         voldlc = ((wmixtt + wmixpr)/denmix)/(1. - pordlc)
         write (output,9470) wmixtt,wmixpr,voldlc
 9470  format(' total mass this slumping =',es12.4,' kg,   mass',
     & ' previous slumpings =',es12.4,' kg,  total volume of  porous',
     & ' debris =',es12.4,' m3')
         volfil = voltt - voldlc
         n = 0
         xn = 0.0
         do
           xn1 = xn - ((3.0*(radlh**2)*xn - xn**3 - (3.0*volfil/pi))/
     &     (3.0*radlh**2 - 3.0*xn**2))
           zz1 = abs(xn1 - xn)
           if (zz1.lt.0.001) exit
           xn = xn1
           n = n + 1
           if (n.gt.100) stop 'scdad7-1'
           cycle
         enddo
         hitdeb = radlh - xn1
         write (output,9480) pordlc,voldlc,n,hitdeb
 9480  format (' porosity debris=',es12.4,'  volume of porous debris =',
     & es12.4,' m3,   n=',i5,' height of debris =',es12.4,' m')
c  End of calculations of internal energy in mixture of slumping
c  material.
       endif
c  End of macros.
$endif
       call heatld (tvapbc, wfrouo, wfrozr, vladeb)
c  Calculate heat transfer from top of molten pool to fluid.
       do l = 1,numttp
         j = jnumtp(l)
         k = knumtp(l)
         if (k.le.naz) then
           ilt = (j - 1)*ndax + k
           nl = nvad(ilt) + filndx(4)
           if (tempg(nl).gt.max(tupool,tmltuo)) wtott(l) = 0.0
           qrt = wtott(l)*ardtmp(l)
           scd21(k,j,1)%qscd = scd21(k,j,1)%qscd + qrt
           if (voidf(nl).gt. 0.0001) then
             scd21(k,j,1)%gamscd = scd21(k,j,1)%gamscd +
     &       qrt*recipv(nl)/sathg(nl)
           else
             scd21(k,j,1)%qwgscd = scd21(k,j,1)%qwgscd + qrt
           endif
           if (help) write (12,"(a,i10,i5,i10,i4,4es13.5)") 'scdad701',
     &     ncount,l,volno(nl),ilt,qrt,scd21(k,j,1)%qscd,
     &     scd21(k,j,1)%gamscd,tempg(nl)
         else
           nl = uhvol(j) + filndx(4)
           if (tempg(nl).gt.max(tupool,tmltuo)) wtott(l) = 0.0
           qinvtp(j) = qinvtp(j) + wtott(l)*ardtmp(l)
         endif
       enddo
c  Radial spreading modeled.
       if (numrtp .ne. 0) then
         nswap = 0
         do j = 1,ncomp
c  ishrdcr(j).ge.1 = shroud component at periphery of core or bundle
c  that models interface with molten core or bundle.
           if (ishdcr(j).ge.1) nswap = 1
         enddo
c  Molten pool has right edge.
c  The following has been commented out for now. The model is deficient
c  in that the heat was computed using a temperature gradient, but is
c  then being attempted to move it to another sink, sometimes against
c  a temperature gradient. Failure is temperature of attempted receiving
c  volume exceeding temperature limit in thermodynamic tables.
c        do l = 1,numrtp
c          k = knumrt(l)
c          if (jnumrt(l).eq.100 .and. nswap.ne.1) then
c  Molten pool has spread to edge of core.
c  If no residual flow area in outermost flow channel in reactor core,
c  then put heat transferred from molten pool into bypass channel.
c            if (flmpmn.lt.0.001) then
c              kk = lbypss(k) + filndx(4)
c              qbps(k) = wtotr(l)*aradmp(l)
c              qwgbps(k) = qbps(k)*quals(kk)
c            else
c              j = ncomp
c              ilt = (j - 1)*ndax + k
c              nl = nvad(ilt) + filndx(4)
c              qrt = wtotr(l)*aradmp(l)
c              scd21(k,j,1)%qscd = scd21(k,j,1)%qscd + wtotr(l)*
c    &         aradmp(l)
c              if (voidf(nl).gt.0.0001 .and. (tempg(nl) -
c    &         satt(nl)).ge.300.) then
c                scd21(k,j,1)%qwgscd = scd21(k,j,1)%qwgscd +
c    &           qrt*voidg(nl)
c                scd21(k,j,1)%gamscd = scd21(k,j,1)%gamscd + qrt*(1.0 -
c    &           voidg(nl))*recipv(nl)/sathg(nl)
c              else
c                scd21(k,j,1)%qwgscd = scd21(k,j,1)%qwgscd + qrt
c              endif
c              if (help) write (12,"(a,i10,i5,i10,i4,4es13.5)")
c    &         'scdad702',ncount,l,volno(nl),ilt,qrt,scd21(k,j,1)%qscd,
c    &         scd21(k,j,1)%gamscd,tempg(nl)
c            endif
c          else
c            j = jnumrt(l)
c            ilt = (j - 1)*ndax + k
c            nl = nvad(ilt) + filndx(4)
c            qrt = wtotr(l)*aradmp(l)
c            scd21(k,j,1)%qscd = scd21(k,j,1)%qscd + wtotr(l)*aradmp(l)
c            if (voidf(nl).gt.0.0001 .and.
c    &       (tempg(nl) - satt(nl)).ge.300.) then
c              scd21(k,j,1)%qwgscd = scd21(k,j,1)%qwgscd + qrt*voidg(nl)
c              scd21(k,j,1)%gamscd = scd21(k,j,1)%gamscd + qrt*(1.0 -
c    &         voidg(nl))*recipv(nl)/sathg(nl)
c            else
c              scd21(k,j,1)%qwgscd = scd21(k,j,1)%qwgscd + qrt
c            endif
c            if (help) write (12,"(a,i10,i5,i10,i4,4es13.5)")
c    &       'scdad703',ncount,l,volno(nl),ilt,qrt,scd21(k,j,1)%qscd,
c    &       scd21(k,j,1)%gamscd,tempg(nl)
c          endif
c        enddo
       endif
c  Calculate heat transfer from bottom of molten pool to fluid.
       do l = 1,numbtp
         j = jnumbt(l)
         k = knumbt(l)
         if (k .le. naz) then
           j = jnumbt(l)
           ilt = (j - 1)*ndax + k
           nl =nvad(ilt) + filndx(4)
           if (tempg(nl).gt.max(tupool,tmltuo)) wtotb(l) = 0.0
           qrt = wtotb(l)*ardbmp(l)
           scd21(k,j,1)%qscd = scd21(k,j,1)%qscd + qrt
           if (voidf(nl).gt.0.01 .and. (tempg(nl) - satt(nl)).ge.300.)
     &     then
             scd21(k,j,1)%qwgscd = scd21(k,j,1)%qwgscd + qrt*voidg(nl)
             scd21(k,j,1)%gamscd = scd21(k,j,1)%gamscd + qrt*(1.0 -
     &       voidg(nl))*recipv(nl)/sathg(nl)
           else
             scd21(k,j,1)%qwgscd = scd21(k,j,1)%qwgscd + qrt
           endif
       if (help)
     & write (12,"(a,i10,i5,i10,i4,4es13.5)") 'scdad704',ncount,l,
     & volno(nl),ilt,qrt,scd21(k,j,1)%qscd,scd21(k,j,1)%gamscd,
     & tempg(nl)
         else
           qrt = wtotb(l)*ardbmp(l)
           nl = lhvol(j)+filndx(4)
           qinv(j) = qinv(j) + wtotb(l)*ardbmp(l)
         endif
       enddo
       do j = 1,ncomp
         if (j .lt. ncomp) then
           if (idcomp(j+1) .eq. 3) then
             do k = 1,naz
               if (lcrucb(k,j) .ge. 1)then
c  Zero out heat transfer from BWR control rods. (They should have
c  melted and slumped away.
                 scd21(k,j+1,1)%qscd = 0.0
                 scd21(k,j+1,1)%qwgscd = 0.0
                 scd21(k,j+1,1)%gamscd = 0.0
               endif
             enddo
           endif
         endif
       enddo
c  Make sure heat transfer to fluid is zero at any location that is
c  flagged as a location with a bulk blockage. Also zero out heat
c  transfer at any location at which material has slumped to lower head.
       do i = 1,igp
         do k = 1,naz
           lcrchn = 0
           do jj =1,icp(i)
             icm1 = ngpc(i,jj)
             if (lcrucb(k,icm1).eq.2 .and. idcomp(icm1).eq.0 .and.
     &       rpel((icm1-1)*ndax+k).gt.0.2e-3) lcrchn = 1
           enddo
           nbubsw = 0
           if (nbublk(i,k).eq.1) nbubsw = 1
c  If outer most flow channel and molten pool represented as spreading
c  radially outward in finger so that core periphery is penetrated
c  only in narrow front, then do not zero out flow to channel.
           if (i.eq.igp. and. flmpmn.ge.0.001) nbubsw = 0
           if (nbubsw.eq.1 .or. lcrchn.eq.1) then
             do jj = 1,icp(i)
               scd21(k,ngpc(i,jj),1)%qscd = 0.0
               scd21(k,ngpc(i,jj),1)%qwgscd = 0.0
               scd21(k,ngpc(i,jj),1)%gamscd = 0.0
             enddo
           endif
         enddo
       enddo
c  nslph0 = the number of COUPLE mesh that models lower head of LWR.
       if (nslph0 .le. 0) go to 480
       icrcb0 = int(crucb)
       call slump (wdtqlp,wuobng,tcond3,dzcond,nsigl,unuca,unucda,
     & idcomp,naz,pitch,rcos,dzfrcq,timehy,tsatlp,nhrdpn,lcrucb)        
       icrcb2 = int(crucb)
       if (icrcb0.eq.0 .and. int(crucb).eq.1) then
         imdctl(1) = ior(imdctl(1),dmwrite)
         write (inpout,"('0-------- Core degradation',es14.6,' s: Molten
     & core material has slumped to lower head in this time step.')")
     &   timehy
       endif
c  If liquefied debris has slumped, set temperature where it was located
c  to tsat.
       do j = 1,ncomp
         do k = 1,naz
           if (lcrucb(k,j) .eq. 2) then
             if (ienblk(k,j) .eq. 1) then
               nunbl2(ncmpgp(j),k) = 1
             endif
           endif
         enddo
       enddo
c  If lower head of reactor vessel is not being represented, then skip
c  following calculations. COUPLE mesh must be defined to represent
c  lower head.
       gamslp = 0.0
       eqnch = 0.0
       l = inv + filndx(4)
c  Find out whether material in core region slumped to lower head during
c  this time step.
       nswslp = 0
       do j = 1,ncomp
         if (npldrn(j).ge.1) nswslp = 1
       enddo
       if (nsqslp.ne.0 .or. nswslp.ne.0) then
c  Calculate temperature of slumping material.
c  Modify wuoslp etc. to reflect amount actually falling onto debris bed
c  during time step (not total amount that will eventually fall due to
c  slump number nsqslp).
         call debadd (tsatlp, deltb, voldb1, l, eqnch, nswslp)
c  Note. Threshold reduction in volume after which further heat input
c  not calculated should be consistent with that used in COUQOT and
c  COUR5Q, but greater than threshold in these subroutines so that heat
c  transfer is not cut off for case of volume of slumped debris being
c  more than volume of lower head control volume.
         if ((v(l)/vollh0) .ge. 0.1000) then
           v(l) = v(l) - voldb1
           dl(l) = v(l)/avol(l)
c      if (ncount.gt.1028 .and. volno(l).eq.060010000) then
c        write (12,"('scdad7b1',i6,i10,5es13.5)") ncount,volno(l),
c    &   avol(l),dl(l),v(l),voldb1,vollh0
c      endif
           if ((v(l)/vollh0) .lt. 0.10) then
             v(l) = 0.10*vollh0
             dl(l) = v(l)/avol(l)
c      if (ncount.gt.1028 .and. volno(l).eq.060010000) then
c        write (12,"('scdad7b2',i6,i10,4es13.5)") ncount,volno(l),
c    &   avol(l),dl(l),v(l),voldb1
c      endif
           endif
           recipv(l) = 1.0/v(l)
         endif
         qinslp = eqnch/dt
       endif
       call gpcoup (2)
c  Set the damage level (damlev) according the the settings of irubpp,
c  icohpp, lcrucb, and icladf.
  480  do j = 1,ndcomp
         do i = 1,naz
           if (idcomp(j) .eq. 1) then
c  PWR control rod.
             if (wremab((j-1)*ndax+i) .gt. 1.e-6) damlev(i,j) = 0.2
             if (wfroab((j-1)*ndax+i) .gt. 1.e-6) damlev(i,j) = 0.4
             if (lcrucb(i,j) .eq. 1) damlev(i,j) = 1.
           else
             if (icladf(j).gt. 0.and. ibrch(j).eq.i) damlev(i,j) = 0.1
             if (irubpp(i,j).eq.1 .and. nblkrd(i,j).eq.0)damlev(i,j)=0.2
             if ((dzfrcq(i,j)*dzcond((j-1)*ndax+i)).ge.depdeb)
     &       damlev(i,j) = 0.4
             if (lcrucb(i,j) .ge. 1) damlev(i,j) = 1.0
           endif
         enddo
       enddo
         if(ndbg.eq.1)then
           do j=1,ncomp
           write(output,9091)j
9091       format(' SCDAD7 at end; j=',i5)
             do k=1,naz
             write(output,9093)k,h2oxd2(k,j)
9093         format(' k=',i5,' h2oxd2=',e10.4)
             end do
           end do
         end if
       return
       end
*endif
