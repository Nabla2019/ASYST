*mlist
*if def,selap
      subroutine jacob(r,s,kk,xx,ndf,nel)
c
c  jacob evaluates the shape function, natural coordinate derivatives,
c  jacobian, inverse of the jacobian, determinant of the jacobian and
c  the global (cartesian) derivatives of the shape functions for a
c  three or four node element.
c
c  Cognizant engineer: ewc.
c
c This is a COUPLE ROUTINE
c
c
c     r,s          = natural coordinate variables
c     kk           = evaluation mode parameter
c                    1=  everything
c                    2=  skip the shape functions and the
c                        global derivatives
c                    3=  skip the jacobian inverse, determinant and
c                        the global derivatives
c     xx           = global coordinates of the nodes
c     ndf          = number of degrees of freedom
c     q            = shape functions
c     p            = natural coordinate derivatives
c     a(2,2)       = jacobian matrix
c     b(2,2)       = jacobian inverse
c                    except it has not yet been divided by det
c     det          = jacobian determinant
c
       implicit none
*call deriv
*call ufiles
c
c  Local variables.
       integer i,iy,iz,j,k,kk,l,ndf,nel
       real a1p1,a1pa2,a2p1,anorm,ascale,c,r,rm,rp,s,sm,sp,xx
      dimension          xx(2,*)
c
c     test for the number of degrees of freedom
c
      if(ndf.gt.3) go to 70
c
c     three (3) degrees of freedom
c     the nomenclature for natural coordinate variables is as follows...
c         r  corresponds to l1
c         s  corresponds to l2
c
      a1p1 = (r+1.)*.5
      a2p1 = (s+1.)*.5
      a1pa2 =(r+s)*.5
c  skip shape function evaluation for kk=2.
      if(kk.eq.2) go to 50
c
c     shape functions
c
      q(1) =       a1p1
      q(2) =       a2p1
      q(3) =      -a1pa2
c  natural coordinate derivatives of the shape functions.
   50 continue
c  with respect to l1.
      p(1,1) = .5
      p(1,2) =  0.0
      p(1,3) = -.5
c  with respect to l2.
      p(2,1) =  0.0
      p(2,2) =  .5
      p(2,3) = -.5
      go to 170
c  four (4) degrees of freedom.
c  the nomenclature for natural coordinate variables is as follows...
c  r corresponds to phi.
c  s corresponds to eta.
   70 rp=(1.+r)*.5
      rm=(1.-r)*.5
      sp=(1.+s)*.5
      sm=(1.-s)*.5
c
c     skip shape function evaluation for kk=2
c
      if(kk.eq.2) go to 100
c
c     shape functions
c
      q(1) = rm*sm
      q(2) = rp*sm
      q(3) = rp*sp
      q(4) = rm*sp
c
c     natural coordinate derivatives of the shape functions
c
  100 continue
c     with respect to phi
      p(1,1) =-sm*.5
      p(1,2) = sm*.5
      p(1,3) = sp*.5
      p(1,4) = -sp*.5
c     with respect to eta
      p(2,1) = -rm*.5
      p(2,2) = -rp*.5
      p(2,3) = rp*.5
      p(2,4) = rm*.5
c
c     form the jacobian matrix
c
  170 do 200 i=1,2
      do 200 j=1,2
      c=0.
      do 150 l=1,ndf
  150 c = c + p(i,l)*xx(j,l)
  200 a(i,j) = c
      anorm = 0.
      do 201 i=1,2
      do 201 j=1,2
  201 anorm = anorm + a(i,j)**2
      anorm = sqrt(anorm/4.0)
      ascale = anorm*1.0e-3
      do 202 i=1,2
      do 202 j=1,2
  202 if(abs(a(i,j)).lt.ascale) a(i,j) = 0.0
c
c     invert the jacobian if kk is 2 or less
c
      if(kk.eq.3) return
      b(1,1)= a(2,2)
      b(1,2)=-a(2,1)
      b(2,1)=-a(1,2)
      b(2,2)= a(1,1)
c
c     form the determinant of the jacobian
c
      det = a(1,1)*a(2,2) - a(1,2)*a(2,1)
 1001 format(' xx='/(1x,1p,2e10.3))
    7 format(' stop in jacob--kk=',i2,'   nel=',i4)
      if(abs(det).lt.1.0e-8) then
        write (output,7) kk,nel
        write (output,1001) ((xx(iz,iy),iz=1,2),iy=1,4)
        stop 'jacob-1'
      end if
      if(kk.eq.2) return
c
c     matrix of x,y derivatives
      do 400 i=1,2
      do 400 j=1,ndf
      c = 0.
      do 350 k=1,2
  350 c = c + b(i,k)*p(k,j)
  400 continue
      return
      end
*endif
