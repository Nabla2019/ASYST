*mlist
*if def,selap
      subroutine oxdair(delt,thbe,delwg,dheat,thx,thm,rcm,rcx,tempc,
     &                    yh2o,yn2,yo2,flow,wgrat,wg,
     &                    thbsa,thsa,f1,rci,rco,ynlim,yolim,
     &                    onemu,thm1,slen,fraca,
     &                    thxe,thx0,a,thbka,thbks,
     &                    ibrk,iopt,iopen,kz,icomp,nobrka,ndbg,
     &                    thxd)
crpcversion_latest
c
c    need a nobrk parameter somewhere
c
c
c  Cognizant engineer: bj42.
c  correction 231110, remove factor 91.22/32 from heat of reaction 
c  because larry already added it and use matpro values not melcoe ones
c  no, put 91.22/32 factor back in but use matpro vlues anyway
c
c corrections by bj42
c modification of logic to alow the breakaway thickness
c to be correctly set upon  switch from steam to air
c
c  subroutine that calculates rate of Zry oxidation in air
c
c     calling subroutines:  xxxxxxx
c     subroutines called:   xxxxxxx
c
c        variables      description
c        --------       -----------
c        (input)
c        tempc          temperature of cladding surface (K)
c        yh2o           mole fraction of steam
c        yn2            mole fraction of nitrogen
c        yo2            mole fraction of oxygen
c        flow           mass flow rate of oxygen into axial node per unit
c                       surface area of node (g/(s.m2))
c                       mass flow includes both oxygen from H2O and
c                       O2. Mass flow per one rod in bundle.
c        delt           timestep (s)
c        thx0           oxide thickness at end of oxidation in steam (m)
c        iopt           oxidation correlation option
c        kz             axial node number
c        icomp          component number
c        ndbg           index controlling debug output
c        nbrka          nobrk value read in
c
c        (constants)
c        frx            steam preoxidation memory indicator (deflt 1.0)
c        thba           nominal breakaway thickness of oxide in air
c        thbs           nominal breakaway thickness of oxide in steam
c        rhzr           density of Zr
c        rhzrx          density of ZrO2
c        a1             Arrhenius pre-exponential coefficient wrt wt gain
c        b1             Arrhenius exponential coefficient wrt wt gain
c        c1             ratio between weight gain and scale thickness
c        c02            1/c1**2
c        d1             pre-exp coefficient wrt scale thickness = a1*c02
c        e1             metal thickness consumed / oxide thickness formed
c        onemu          small length scale, 1 mu
c        deg            rate of decrease of thbe if > thb (nominally 1.0)
c        rep            rate of increase of thbe if < thb (nominally 1.0)
c        rhzr           density of Zr
c        rhzrx          density of ZrO2
c        wmzr           atomic weight of Zr
c        wmzrx          molecular weight of ZrO2
c        delhs          heat of oxidation reaction Zr-steam           
c        delho          heat of oxidation reaction Zr-oxygen
c        ynlim          minimum value of N2 fraction for air breakaway
c        yolim          minimum value of O2 fraction for oxygen oxidation
c        thm1           as-fabricated cladding thickness (m)
c
c
c        (output)
c        delth          increment in scale thickness this time step
c        delwg          weight gain this time step
c        dheat          heat generated by oxidation this time step (J/m2)
c        thx            thickness of oxide scale
c        thxd           thxd = thx - thbe For nobrk = 3 and ibrk = 11           
c        thbe           effective breakaway thickness of oxide scale
cljs     thbe is the thickness of oxide layer accounting for breakaway?
c        f1             parameter to mark progress of breakawy process
c        thm            thickness of remaining metallic cladding
c        rci            inner radius of metallic cladding
c        rco            outer radius of metallic cladding
c        rcx            outer radius of metallic cladding + oxide
c        thrat          rate of thickness increase
c        wgrat          rate of weight gain
c        ibrk           indicator for presence of N2 and breakaway state
c                       0 initial value
c                       1 pre-breakaway, N2 absent from start
c                       2 pre-breakaway, N2 present from start
c                       3 after start of transition to breakaway
c                       4 pre-breakaway, switched from no N2 absent to present
c                     +10 to indicate breakaway
c
c        (working)
c        iabk           iabs(ibrk)
c        thb            value of thba, thbs at current temperature 
c        thbka,s        value of tba, tbs at current temperature
c        thbk           thbka or thbks (N2 or no N2) 
c        thbe           current effective breakaway thickness
c        thdf           difference between thb and thbe
c        athdf          absolute value of thdf
c        thxe           effective thickness of oxide scale
c        d              oxidation rate wrt thickness
c        a              oxidation rate wrt wt gain
c        ma             ma=mtpco*mtpfr*a
c        mtpco          multiplier that modifies ox rate depending on yo2*100
c        mtpfr          multiplier that modifies ox rate depending on velocity
c        myo2           myo2=100*yo2
c        tmpc           tempc used in Arrhenius expression (up to 2200 K)
c 
c
cljs     arguments slen, rco, and iopen never effect oxidation
cljs     modeling.
c
c      jcb020713
c      revised set of options for breakaway
c     no longer control the breakaway by restting the ths, tha, tbs, tba
c     in cases nobrk = 1,3,6,7,8; instead logical determination of thxe

c     frac is no loger defined as tha/ths but is replaced by
c     frstm = 1.0 (in steam) and frair = 0.5 (in air, typically tha/ths)
c     reverting to original deelopmental assessmsnt case p1103al-p45-05
c     from KIT experiments and simulated with standalone model V130308l-p45 
c
c   a if nobrk = 0 (deflt) switch on for steam and air
c   b if nobrk = l logic and parameters but set thxe = thx in steam
c     treatment unphysical, but the assumption itself is unphysical
c   c if nobrk = 2 switch off for steam and air
c     reset bkwy parameters to 1.0
c   d if nobrk = 3 switch on for steam and off for air
c     keep noraml logic and parameters but set thxe = thx in air
c     treatment unphysical, but the assumption itself is unphysical
c   e if nobrk = 4 breakaway in air same as steam
c     neglecting effect of N2, recognising remaining uncertainty
c     reset air bkwy parameters to steam values
c   f if nobrk = 5 breakaway in steam same as air
c     assume N2 present, it might be there but perhaps not calculated
c     reset steam bkwy parameters to air values
c   g if nobrk = 6 switch off for steam unless already in breakaway by air
c     recognises uncertainty in steam breakaway
c     keep normal logic and parameters but set thxe = thx in steam and ibrk<10
c   h if nobrk = 7 switch off for air if not already in breakaway 
c     recognises uncertainty in air breakaway
c     keep normal logic and parameters but set thxe = thx in air and ibrk<10
c   i if nobrk = 8 switch off for air if preox and not already in breakaway 
c     keep normal logic and parameters but set thxe = thx in air and ibrk=4
clfm  include logic for ibrk=9: if breakaway happened, calculated the parameters
c     but do not apply them.
c
       implicit none
c       
       include 'contrl.h'
       include 'ufiles.h'
c
       real delt,thbe,delwg,dheat,thx,thm,rcm,rcx,tempc,yh2o,yn2,yo2,
     & flow,wgrat,wg,thbsa,thsa,f1,ynlim,yolim,onemu,area,slen,
     & fraca,frair,frstm, thxe,a,tmpc
       real thm1
clfm  
       real thxd
       integer ibrk,iopt,iopen,nobrk,iabk,nobrka
       integer k,l,m,i
       integer kz,icomp
       integer ndbg
c    local variables
      real thb,thbka,thdf,athdf,d,frx
      real frac,rco,rci,delhs,a1,b1,a2,b2,ta,tb,delho
      real t1,t2,t3,t4,t5,t6,a3,a4,b3,b4,a5,a6,b5,b6,a7,b7,yomin
      real thba,thbs,thbks,dtemp,deg,rep,thx0,thbk,c1,c2,c02,e1
      real rhzrx,wmzrx,wmzr,oflo,rhzr,delth,thrat,thtot
      real thm0,thxz,tt1,tt2,mtpco,mtpfr,ma, myo2
      real tha(14), ths(14), tba (14), tbs (14), temp(14)
      data temp/773.0,  873.0,  973.0, 1073.0, 1123.0, 1173.0, 1223.0,
     1         1273.0, 1373.0, 1473.0, 1573.0, 1673.0, 1773.0, 1873.0/
cljs  tha,ths, tba, and tbs evidently are defined for up to 14 different
cljs  values of temperature.
c
cjcb, increase tha so its not less than initial value
c     data tha/2.5e-6, 2.5e-6, 2.5e-6, 2.5e-6,  4.e-6,  6.e-6,  8.e-6, 
      data tha/ 3.e-6,  3.e-6,  3.e-6,  3.e-6,  4.e-6,  6.e-6,  8.e-6, 
     1         8.5e-6, 10.e-6, 12.e-6, 50.e-6, 80.e-6, 1.2e-4, 1.2e-4/     
      data ths/ 3.e-6,  4.e-6,  6.e-6, 13.e-6, 15.e-6, 20.e-6, 25.e-6,
     1         50.e-6, 1.2e-3, 1.2e-3, 1.2e-3, 1.2e-3, 1.2e-3, 1.2e-3/      
      data tba/ 6.e-6,  6.e-6, 10.e-6, 16.e-6, 18.e-6, 20.e-6, 30.e-6, 
     1         80.e-6, 1.2e-3, 1.2e-3, 1.2e-3, 1.2e-3, 1.2e-3, 1.2e-3/     
      data tbs/12.e-6, 12.e-6, 16.e-6, 22.e-6, 30.e-6, 40.e-6, 50.e-6, 
     1        100.e-6, 1.2e-3, 1.2e-3, 1.2e-3, 1.2e-3, 1.2e-3, 1.2e-3/  
     
c  
clfm  comment out nobrk value set in code, instead set to read in nbrka
c     nobrk = 0
      nobrk = nobrka
c
      if (nobrk .eq. 0) then
c     breakaway disabled for both steam and air
      do 10 i = 1,14
c        dummy command
   10    continue
c
      else if (nobrk .eq. 1) then
c     breakaway disabled for steam
         do 20 i = 1,14
c        dummy command
   20    continue        
c
      else if (nobrk .eq. 2) then
c     breakaway disabled for both steam and air
         do 30 i = 1,14
c        dummy command
   30    continue
c
      else if (nobrk .eq. 3) then 
c     breakaway disabled for air    
         do 40 i = 1,14
c        dummy command
   40    continue
c
      else if (nobrk .eq. 4) then 
c     breakaway in air same as in steam      
         do 50 i = 1,14
c        dummy command
   50    continue
c
      else if (nobrk .eq. 5) then 
c     breakaway in steam same as in air      
         do 60 i = 1,14
c        dummy command
   60    continue
c
      else if (nobrk .eq. 6) then 
c     breakaway disabled in steam if not already on     
         do 70 i = 1,14
c        dummy command
   70    continue
c
      else if (nobrk .eq. 7) then 
c     breakaway disabled in air if not already on    
         do 80 i = 1,14
c        dummy command
   80    continue
c
      else if (nobrk .eq. 8) then 
c     breakaway disabled in air if preoxidised and not already on    
         do 90 i = 1,14
c        dummy command
   90    continue
c
      endif
c    
c   path1 = case of oxdidation first in steam and currently in air
c   set memory indicator to nominal value 1.0
      frx = 1.0
      dheat=0.0
      thm0 = thm
      thxz = thx
c 
c     set oxidation model options
c     iopt = 100*k + 10*l + m
c     k: steam option: 
c     0 = Cathcart-Pawel/Urbanic-Heidrick
c     1 = Leistikov-Schanz/Prater-Courtright
c     2 = Leistikov
c     3 = Sokolov
c     l: air option
c     0    = Hofmann-Birchley
c     1(5) = Hayes-Roberson/Leistikov-Berg (NUREG1) (Birchley)
c     2(7) = Powers (NUREG2) (Birchley)
c     3(8) = Melcor (Birchley)
c     4(9) = Mozart (Birchley)
c     m: oxygen
c     0 = Hofmann
      k = iopt/100
      l = (iopt - 100*k)/10
      m = iopt - 100*k - 10*l
c
      frac = 1.0
c     wmzr = atomic weight of Zr
      wmzr = 91.22
c     wmzrx = molecular weight of ZrO2
      wmzrx = 123.22
c     rhzr = density of Zr (kg/m3)
      rhzr = 6500.
c     rhzrx = density of ZrO2 (kg/m3)
      rhzrx = 5600.
c     ljs defines yomin to be zero, not defined by Birchley.
      yomin = 0.0
c
c     calculate sample oxidation area 
      if (iopen .eq. 1) then
         area = 3.14159*(slen*2.0*(rco + rci) + 2*(rco**2 - rci**2))
      else if (iopen .eq. 0) then
         area = 3.14159*(slen*2.0*rco + 2*rco**2)
      else if (iopen .eq. -1) then
         area = 3.14159*slen*2.0*rco
      end if
c     oxidation model parameters from MELCOR
c     steam
c     delhs = 91.22/32.0*5.797e+6    melcor
c     delhs = 6.45e+6                matpro
      delhs = 91.22/32.0*6.45e+6
c
c     set effective upper limit on tempc
      tmpc = min(tempc,2200.0)
c     coefficients for steam

      if (k .eq. 0) then
c     Cathcart-Pawel/Urbanic-Heidrick
         a1 = 36.2
         b1 = 20111.0
         a2 = 10.817
         b2 = 16623.0   
         t1 = 1853.0
         t2 = 1873.0
c    use same values as in matpro not the ones published
         a1 = 33.6
         b1 = 20065.0
         a2 = 10.817
      else if (k .eq. 1) then
c     Leistikov-Schanz/Prater-Courtright
         a1 = 52.42
         b1 = 20953.0
         a2 = 3295.0
         b2 = 26461.0
         t1 = 1800.0
         t2 = 1900.0
      else if (k .eq. 2) then
c     Leistikov
         a1 = 52.42
         b1 = 20953.0
         a2 = 52.42
         b2 = 20953.0
         t1 = 273.0
         t2 = 273.0    
      else if (k .eq. 3) then
c     Urbanic-Heidrick
         a1 = 3.6426
         a2 = 10.817
         b1 = 16839.0
         b2 = 16623.0      
         t1 = 1853.0
         t2 = 1873.0        
c    use same values as in matpro not the ones published
         b1 = 16820.0
         b2 = 16610.0      
      else if (k .eq.4) then
c     Sokolov
         a1 = 159.0
         a2 = 98.25
         b1 = 23040.0
         b2 = 20800.0      
         t1 = 1763.0
         t2 = 1783.0
      else if (k .eq. 5) then 
c     Grosse Zry4
         if (tmpc .lt. 1673.0) then
            a1 = 816.245
            b1 = 25310.0
            a2 = 8.8804
            b2 = 18066.6
            t1 = 1223.0
            t2 = 1273.0
         else
            a1 = 36.2
            b1 = 20111.0
            a2 = 10.817
            b2 = 16623.0   
            t1 = 1853.0
            t2 = 1873.0
c    use same values as in matpro not the ones published
            a1 = 33.6
            b1 = 20065.0
            b2 = 16610.0   
         endif
      endif  
c     
c     oxygen
c     Hofmann
c     delho = 91.22/32.0*12.065e+6   melcor
c     delho = 12.04e+6               matpro
      delho = 91.22/32.0*12.04e+6
      if (tmpc .le. 1623.0) then
         a3 = 3137.0
         a4 = 9.2
         b3 = 25792.0
         b4 = 17895.0
         t3 = 1363.0
         t4 = 1383.0
      else 
         a3 = 36.2
         b3 = 20111.0
         a4 = 10.817
         b4 = 16623.0
         t3 = 1853.0
         t4 = 1873.0 
      endif   
c
c     air
      if (l .eq. 0) then
c     Hofmann-Birchley
         if (tmpc .le. 1623.0) then
            a5 = 3137.0
            a6 = 9.2
            b5 = 25792.0
            b6 = 17895.0
            t5 = 1363.0
            t6 = 1383.0 
         else 
            a5 = 36.2
            b5 = 20111.0
            a6 = 10.817
            b6 = 16623.0
            t5 = 1853.0
            t6 = 1873.0 
         endif
c        frac = fraca
      else if ((l .eq. 1) .or. (l .eq. 6)) then
c     Hayes-Roberson/Leistikov-Berg/Benjamin (NUREG-1)
         a5 = 0.115
         b5 = 13759.0
         a6 = 5761.0
         b6 = 26668.0
         a7 = 6.201
         b7 = 14630.0
         t5 = 1173.0
         t6 = 1523.0
c       if (l .eq. 6) frac = fraca
      else if ((l .eq. 2) .or. (l .eq. 7)) then
c     Sailor (NUREG-2)
         a5 = 30900.0
         b5 = 28485.0
         a6 = 3802.0
         b6 = 28485.0
         t5 = 273.0
         t6 = 273.0             
c        if (l .eq. 7) frac = fraca
      else if ((l .eq. 3) .or. (l .eq. 8)) then  
c     Benjamin(Melcor)
         a5 = 6.201
         b5 = 14630.0
         a6 = 6.201
         b6 = 14630.0
         t5 = 273.0
         t6 = 273.0    
c        if (l .eq. 8) frac = fraca
      else if ((l .eq. 4) .or. (l .eq. 9)) then
c     Mozart
         a5 = 24.58
         b5 = 21507.0
         a6 = 2.25e8
         b6 = 41449.0
         t5 = 1263.0
         t6 = 1283.0    
c        if (l .eq. 9) frac = fraca
      endif
c
c     define oxidation rate coefficient in terms of weight gain
      if (yn2 .gt. ynlim) then
c
c     correlation for air
         if ((l .eq. 1) .or. (l .eq. 6)) then
            ta = t5
            tb = t6
            if (tmpc .lt. t5) then
	       a = a5*exp(-b5/tmpc)
	    elseif (tmpc .gt. t6) then
	       a = min(a6*exp(-b6/tmpc),a7*exp(-b7/tmpc))
	    else
	       a = max(a6*exp(-b6/tmpc),a5*exp(-b5/tmpc))
	    endif   
         elseif (tmpc .lt. t5) then
	    a = a5*exp(-b5/tmpc)
	 elseif (tmpc .gt. t6) then
	    a = a6*exp(-b6/tmpc)
	 else
	    a = (a5*exp(-b5/t5)*(t6 - tmpc) + 
     &      a6*exp(-b6/t6)*(tmpc - t5))/(t6 - t5)
         endif
      else if (yo2 .lt. yolim) then
c
c     correlation for steam
         ta = t1
         tb = t2
         if (tmpc .lt. t1) then
            a = a1*exp(-b1/tmpc)
         elseif (tmpc .gt. t2) then
            a = a2*exp(-b2/tmpc)
         else
            a = (a1*exp(-b1/t1)*(t2 - tmpc) + 
     1           a2*exp(-b2/t2)*(tmpc - t1))/(t2 - t1)
         endif
      else
c
c     correlation for oxygen
         ta = t3
         tb = t4
         if (tmpc .lt. t3) then
            a = a3*exp(-b3/tmpc)
         elseif (tmpc .gt. t4) then
            a = a4*exp(-b4/tmpc)
         else
            a = (a3*exp(-b3/t3)*(t4 - tmpc) + 
     1           a4*exp(-b4/t4)*(tmpc - t3))/(t4 - t3)
         endif
      endif
c
c
c     Adding the multiplier for the oxidation rate not in bkwy
      if ((yn2 .ge. ynlim).and. (yo2 .ge. yolim) .and.
     1   (yo2 .le. 0.15).and. (ibrk .lt. 10)) then
         myo2 = 100*yo2
c         mtpco = 0.5
c         mtpco = -0.00294*myo2**2 + 0.09752*myo2 + 0.19125
c         mtpco = 0.280*myo2**0.47
c        set mtpco = 1.0
         mtpco = 1.0
         mtpfr = 1.0      
      elseif ((yn2 .ge. ynlim).and. (yo2 .lt. yolim) .and.
     1   (yh2o .le. 0.001).and. (ibrk .lt. 10)) then
         mtpco = 0.0
         mtpfr = 1.0    
      else
         mtpco = 1.0
         mtpfr = 1.0      
      endif
c
      ma = mtpco*mtpfr*a
      a =  ma
c     conversion factors for ox rate coeff 
c     from wt gain form to thickness form
      c1 = rhzrx*(wmzrx-wmzr)/wmzrx
      c2 = c1*c1
      c02 = 1.0/c2
      d = a*c02
      e1 = rhzrx*wmzr/(rhzr*wmzrx)     
c
c     set nominal brkwy thickness according to temp and environment
      if (tmpc .le. temp(1)) then
         thba = tha(1)
         thbs = ths(1)
         thbka = tba(1)
         thbks = tbs(1)
      else if (tmpc .ge. temp(14)) then
         thba = tha(14)
         thbs = ths(14)
         thbka = tba(14)
         thbks = tbs(14)
      else
         do 5 i= 1,13
         if ((tmpc. gt. temp(i)) .and. (tmpc .le. temp(i+1))) then
            dtemp = temp(i+1) - temp(i)
            tt1 = temp(i+1) - tmpc
            tt2 = tmpc - temp(i)
            thba = (tha(i)*tt1 + tha(i+1)*tt2)/dtemp
            thbs = (ths(i)*tt1 + ths(i+1)*tt2)/dtemp
            thbka = (tba(i)*tt1 + tba(i+1)*tt2)/dtemp
            thbks = (tbs(i)*tt1 + tbs(i+1)*tt2)/dtemp
         endif
    5    continue
      endif
c
c     set "repair/degradation" factors and breakaway limits
c     frac = thba/thbs
c     use "new" definition of frac
      frair = 0.5
      frstm = 1.0
      if (nobrk .eq. 4) then
         frac = frstm
      else if (nobrk .eq. 5) then
         frac = 0.5
      else if (yn2 .gt. ynlim) then
         frac = 0.5
      else 
         frac = 1.0
      endif
c      
c     set adjustmants to breakaway parameters if nobrk = 2, 4, 5
      if (nobrk .eq.2) then
         thba = 1.0
         thbs = 1.0
         thbka = 1.0
         thbks = 1.0
      else if (nobrk .eq.4) then
         thba = thbs
         thbka = thbks
c        frac = 1.0
      else if (nobrk .eq.5) then
         thbs = thba
         thbks = thbka
      end if
c
c     try deg goes as a**.75 with coeff to preserve value at  1273K
      deg = 0.00015496*a**0.75/sqrt(frac)
c      deg = 0.00015496*ma**0.75/sqrt(frac)
c
      if (yn2 .gt. ynlim) then
         thb = thba
         thbk = thbka
      else 
	 thb = thbs
	 thbk = thbks
      endif
c
c     logic for identifying breakaway or air condition and
c     defining effective limit on protective oxide thickness thbe
c     need to avoid incompatible states and sudden changes in thbe
c
c     variable ibrk defines the oxidation state
c  < 10   not in breakaway
c     0   oxidation has not started
c     1   oxidation in absence of N2 from the start
c     2   oxidation in presence of N2 from the start
c     3   oxidation swith from presence of N2 to absence  
c     4   oxidation swith from absence of N2 to presence 
c  > 10   breakaway, for the above environments 10 added to ibrk
c  <  0   first time (only) condition occurs multiply ibrk by -1
c    
c     set criteria for onset of breakaway
c
c     set starting values thx, ibrk, thbe, thbsa
c     nominal initial value is 2.54e-6
      if (thx .le. 2.5401e-6) then 
         ibrk = 0
         thbe =thbk
         thbsa = thbe
         thxd = 0.0
c
      else if ((((ibrk .eq. 0) .or. (ibrk .eq. 1) .or. (ibrk .eq. 3))
     1         .and. (yn2 .le. ynlim) .and. (thx .le. thbe)) 
     2         .or.
     3         (((ibrk .eq. 6) .or. (ibrk .eq. 8))
     4         .and. (yn2 .le. ynlim))) then
c 
c     not exposed to air and not in breakaway
         if (ibrk .eq. 0) then 
            ibrk = -1
         endif
         thbk = thbks
         thb = thbs
clfm
         if ((ibrk .eq. 6) .or. (ibrk .eq. 8)) then
clfm     Make thbe = thx in for ibrk = 6 or 8      
           thbe = thx
         else
c          if not already in breakaway dont let thbe < current thbe
           thbe = max(thbe, thbk)
         endif
c
c        introduce dependence on preox memory
c        set thbe instead of thbks as base thickness
         thbsa = min(thbe, thbka + frx*thx*(thbe - thbka)/thbe)   
c         
c     extent break away parameter (unitless)
        f1 = thx/thbe
c

      else if ((((ibrk .eq. 0) .or. (ibrk .eq. 2) .or. (ibrk .eq. 4))
     1         .and. (yn2 .gt. ynlim) .and. (thx .le. thbe)) 
     2         .or.
clfm 3         (((ibrk .eq. 2) .or. (ibrk .eq. 7))
clfm 4         .and. (yn2 .gt. ynlim))) then
     3         ((ibrk .eq. 2) .and. 
     4         (yn2 .gt. ynlim))) then
c
c     exposed to air and not in breakaway
         if (ibrk .eq. 0) then 
            ibrk = -2
         endif
         thbk = thbka
         thb = thba
c
c        if not already in breakaway dont let thbe < current thbe
         thbe = max(thbe, thbk)
         thbsa = thbe
c         
c     extent break away parameter (unitless)
         f1 = thx/thbe
c
      else if ((((ibrk .eq. 2) .or. (ibrk .eq. 4)) .and. 
     1            (yn2 .le. ynlim) .and. (thx .le. thbe))
     2            .or. 
     3            (((ibrk .eq. 7) .or. (ibrk .eq. 9)) 
     4            .and. (yn2 .le. ynlim))) then  
c
c     switched from air to steam/o2 and not already in breakaway
         ibrk = -3
         thbk = thbks
         thb = thbs
c
c        if not already in breakaway dont let thbe < current thbe
         thbe = max(thbe, thbk)
         thbsa = min(thbe, thbka + thx*(thbe - thbka)/thbe)         
         f1 = thx/thbe
c
      else if ((((ibrk .eq. 1) .or. (ibrk .eq. 3)) .and.
     1         (yn2 .gt. ynlim) .and. (thx .le. thbe))
     2         .or.
     3         (((ibrk .eq. 6) .or. (ibrk .eq. 8)) 
     4         .and. (yn2 .gt. ynlim))) then
c
c     switched from steam/O2 to air, not already in breakaway
         ibrk = -4
         thbk = thbka
         thb = thba
c
c        define starting value for thbe upon switch to air
c        according to amount of steam oxidation and minimum
c        value thsa it might later attain because of air oxidation
c
c        introduce dependence on preox memory
c        set thbe instead of thbks as base thickness
         thbsa = min(thbe, thbka + frx*thx*(thbe-thbka)/thbe)        
         thbe = thbsa        
         thsa = min(thbsa,thbka + thx*(thbsa - thbka)/thbsa)
c         
c     extent break away parameter (unitless)
         f1 = thx/thbe
c
c     test if breakaway has already occurred (unlikely)
c     if thickness > onset of breakaway already  
c
         if (thx .gt. thbe) then
            ibrk = -14
            thbsa = max(thbks, thbe)
            thsa = thbe*thb/thbk
         endif
c
      else if ((ibrk .eq. 1) .and. (thx .gt. thbe)) then
c     has just gone into breakaway in steam/O2 
c
         if ((nobrk .eq. 1) .or. (nobrk . eq. 6)) then
            ibrk = -6
         else
            ibrk = -11
         endif
         thb = thbs
         thbk = thbks
         thbe = max(thbe, thbk)
         thbsa = max(thbks, thbe)
         thsa = thbe*thb/thbk
         f1 = thx/thbe
c
      else if ((ibrk .eq. 2) .and. (thx . gt. thbe)) then
c     has just gone into breakaway in air (thbe MAY already < thbka)
c
         if ((nobrk .eq. 3) .or. (nobrk . eq. 7)) then
	    ibrk = -7
	 else
	    ibrk = -12
         endif
         thb = thba
         thbk = thbka
         thbe = max(thbe,thbk)
         thbsa = max(thbka, thbe)
         thsa = thbe*thb/thbk
         f1 = thx/thbe
c
      else if ((ibrk .eq. 3) .and. (thx .gt. thbe)) then 
c     has just gone into breakaway in steam/O2 after earlier air
c
         if ((nobrk .eq. 1) .or. (nobrk . eq. 6)) then
	    ibrk = -8
	 else
	    ibrk = -13
         endif
         thb = thbs
         thbk = thbks
         thbe = max(thbe, thbk)
         thbsa = max(thbks, thbe)
         thsa = thbe*thb/thbk
         f1 = thx/thbe
c
      else if ((ibrk .eq. 4) .and. (thx .gt. max(thbe,thbk))) then
c     oxidation after switch to air just gone into breakaway
c
         if ((nobrk .eq. 3) .or. (nobrk . eq. 7) 
     1      .or. (nobrk .eq. 8)) then
	    ibrk = -9
	 else
	    ibrk = -14
         endif
         thb = thba
         thbk = thbka
         thbe = max(thbe,thbk)
         thbsa = max(thbka, thbe)
         thsa = thbe*thb/thbk
         f1 = thx/thbe
c
c

      else if (ibrk .eq. 4) then
c
c     oxidation in air without breakaway after preox
c     represent progressive reduction in thbe due to continued
c     air oxidation beyond thsa
c     but keep thbka as underpinning minimum value of thbe
c
c        introduce dependence on preox memory
         thbe = max(thbka, frx*(thbsa - max(0.0, (thx - thsa))))
         f1 = thx/thbe
c
c  
clfm  add ibrk = -5
      else if (((ibrk .eq. 11) .or. (ibrk .eq. 13)  
     1    .or. (ibrk .eq. 15)) .and. (yn2 .gt. ynlim) 
     2    .and. (nobrk .eq. 3)) then
c     steam breakaway has happened and air brkwy is dissabled
           ibrk = -5
            thbe = thbe
c
clfm add ibrk = -22 and -24
      else if ((ibrk .eq. 12) .and. (yn2 .le. ynlim) 
     1    .and. (nobrk .eq. 1)) then
c     air breakaway has happened and steam brkwy is dissabled
c Dissable the effect of bkwy in steam by making parallel to thx
           ibrk = -22
            thbe = thbe
c
      else if ((ibrk .eq. 14) .and. (yn2 .le. ynlim) 
     1    .and. (nobrk .eq. 1)) then
c     air breakaway has happened and steam brkwy is dissabled
c Dissable the effect of bkwy in steam by making parallel to thx
           ibrk = -24
            thbe = thbe
c
c
      else if (ibrk .eq. 5) then

         if (yn2 .gt. ynlim) then
            thbe = thbe
         else
c    introduce ibrk = -15 so go again into steam brky  
           ibrk = -15           
           thb = thb
	   thbk = thbk
	   thbe = thbe
	   thbsa = thbsa
           thsa = thsa
c
         endif
c

      else if ((ibrk .eq. 22) .or. (ibrk .eq. 24)) then   
        if (yn2 .le. ynlim) then
            thbe = thbe
c     go back to breakawy in air after steam oxidation
        else
           ibrk = -14
           thb = thb
	   thbk = thbk
	   thbe = thbe
	   thbsa = thbsa
           thsa = thsa
        endif
      
c
c
c
c
clfm  includde option 9 in the logic
clfm  else if (ibrk .gt. 10) then
      else if (((ibrk .gt. 10) .and. (ibrk .lt. 20))
     1     .or. (ibrk .eq. 7) .or. (ibrk .eq. 9)) then
c
c     ibrk > 10 breakaway oxidation
c     calculate "effective" thickness and breakaway thickness
c     if very close to nominal assume nominal;
c     if greater than nominal breakaway thickness assume oxide
c     scale protection degrades at finite rate towards its nominal 
c     breakaway thickness; 
c     if less than nomimal assume it increases no faster than 
c     some fraction of the rate of oxide scale growth
c     which we assume zero for now
c
clfm
       if (ibrk. eq. 15) then
         thbe = thbe - delt*deg
         thbe = max(thbe, thsa)
       else
         thb = max(thb, thsa)
         thbk = max(thbk,thbsa)
         thdf = thb - thbe
         athdf = abs(thdf)
         if (athdf .le. 0.2*onemu) then
            thbe = thb
         else if (thbe .gt. thb) then
            thbe = thbe - delt*deg
            thbe = max(thb,thbe)
         else if (yn2 .le. ynlim) then
            rep = 0.5*a*delt/(2.0*c2*min(thx,thbe))
c            rep = 0.5*ma*delt/(2.0*c2*min(thx,thbe))
            thbe = min(thb, thbe + delt*rep)
         else
            thbe = min(thb,thbe)         
         endif  
      endif
c
c     set breakaway progression ratio
         f1 = thx/thbe
c
      else
c
c     the condition has not been picked up in the logic
         write(output,9019) 
9019     format(' condition not picked up in oxdair ')

         write(output,9020) ibrk, thx, thxe, yn2, thsa, thbsa,
     &                      thbe, thb, thbk, f1, tempc, ta, tb,
     &                      a, k, l, m, mtpco, thxd
9020     format(' ibrk = ',i6, 
     &   '  thx = ',e16.4,'  thxe = ',e16.4,'  yn2 = ',e16.4,/
     &   '  thsa = ',e16.4,'  thbsa = ',e16.4,'  thbe = ',e16.4,/
     &   '  thb = ',e16.4,'  thbk = ',e16.4,'  f1 = ',e16.4,/
     &   '  tempc = ',e16.4, '  ta = ',e16.4,'  tb = ',e16.4,/  
     &   '  a = ',e16.4, '  k = ',i4,'  l = ',i4,'  m = ',i4,/
     &   '  mtpco = ',e16.4,'  thxd = ',e16.4)
      stop
c
      endif
c
c     end of "if-then-else-if" logic to determine breakaway
c     state and breakaway parameters
c     now set "effective" breakaway thickness thbe to minimum of
c     calculated effective breakaway and actual scale thickness
c
c     for cases nobrk = 1,2,3,6,7,8 this is  only place we make a change
c
      iabk = iabs(ibrk)
      if (iabk .lt. 10) then 
clfm
         if ((nobrk .eq. 3) .and. (iabk .eq. 5)) then
           thxe = thbe      
         else
           thxe = thx
         endif
c
      else if (nobrk .eq. 2) then
           thxe = thx
c       
      else if (nobrk .ge. 6) then   
         if ((nobrk .eq. 6) .and. (yn2 .lt. ynlim) 
     1       .and. ((iabk .eq. 11) .or. (iabk .eq. 13))) then
            thxe = thx
         else if ((nobrk .eq. 7) .and. (yn2 .ge. ynlim) 
     1            .and. ((iabk .eq. 12) .or. (iabk .eq. 14))) then
            thxe = thx
         else if ((nobrk .eq. 8) .and. (yn2 .ge. ynlim) 
     1           .and. (iabk .eq. 14)) then
            thxe = thx
         else if (iabk .gt. 20) then
            thxe = thbe
         else
                     thxe = max(min(thx,thbe),onemu)
         endif
      else
         thxe = max(min(thx,thbe),onemu)
      endif
c
c     print current thickness, breakaway parameters and temperature if
c     its just gone into breakaway
c
      if (ibrk .lt. 0) then
         write(output,9020) ibrk, thx, thxe, yn2, thsa, thbsa,
     &                      thbe, thb, thbk, f1, tempc, ta, tb,
     &                      a, k, l, m, mtpco, thxd
         ibrk = -ibrk
      endif
c
c
c
c     increment in scale thickness, wt gain, update variables
c
      wgrat = a/(2.0*thxe*c1)
c       wgrat = ma/(2.0*thxe*c1)
      if(wgrat.lt.0.0)then
         write(output,9018)a,thxe,c1,timehy,kz,icomp
9018     format(' OXDAIR Warning; negative wgrat; a=',e10.4,
     &   ' thxe=',e10.4,' c1=',e10.4,' timehy=',e10.4,
     &   ' kz=',i5,' icomp=',i5)
      end if
c
c     number of gram/sec oxygen per unit area as upper limit on rate
cljs
cljs  oflo = flow*(yo2*32.0 + yh2o*16.0)*0.001/(3600.0*22.4*area)        
      oflo = flow              
        if(oflo.le.0.0)oflo = 0.0
        if(wgrat.le.0.0)wgrat = 0.0
      wgrat = min(wgrat,oflo)
c      
      delwg = wgrat*delt
      wg = wg + delwg
      delth = delwg/c1
      thrat = delth/delt
      thx = thx + delth
clfm
          if ((ibrk .eq. 5) .or. (ibrk .gt. 20)) then
            thxe = thxe + delth
            thbe = thbe + delth
          else
            thxe = thxe
            thbe = thbe
          endif
          if(delth.le.-1.e-10)then
          write(output,8097)kz,timehy,delth,icomp
8097      format(' Warning negative delth; OXDAIR; kz=',i5,
     &    ' timehy=',e10.4,' delth=',e10.4,' icomp=',i5)
          end if
      thm = thm1 - e1*thx
        if(thm.le.0.0)then
        thm = 0.0
        end if
      rcm = rci + thm
      rcx = rcm + thx
      thtot = thx + thm
c
c     energy generation this time step
      if (yo2 .gt. yolim) then
         dheat = delwg*delho
      else
         dheat = delwg*delhs
      endif
c     set thx0 for thickness at end of steam oxidation     
      if (yn2 .le. ynlim) thx0 = thx
c
  603 format(' ',10e10.3)
c
      return
      end
*endif
