*mlist
*if def,selap
       subroutine oxcongt (rcil,rcol,tclad0,oxlis0,oxdeo,oxdwc,alfao,
     &rnoxd, rnalf,noxide,oxdwc0,fadrpa,wtgmax,effoxw,i,flag)
!  Computes steady state cladding oxidation for B4C control rod.
! 
!  The correlations in this subroutine were taken from zoxdat.ff
!  correlations were originally used for oak ridge BWR channelbox
!  model
!
!   Cognizant engineer: cma.
!     calling subroutines:  oxidiz
!     subroutines called:  rcfunc
!     engineer/programmer:  c. m. allison
!
!     input variables                  description
!        oxlis0         oxidation steam starvation rate limit per
!                         unit surface area for previous time step
!                         (kg/m2-s)
!        tclad0         average cladding temperature for previous time
!                         step (k)
!        wtlim          weight gain limit (kg/m2)
!        fadrop    fraction of surface area of axial node that is
!                  covered with drops of relaocated material and whose
!                  oxidation is calculated in subroutine drpflo.
!                  If there are no drops at this axial node, then
!                  fadrop=0.0.
!     i/o variables                    description
!        alfao          cladding outer alpha thickness (m)
!        noxide         cladding oxidation flag, 
!        oxdeo          cladding outer oxide thickness (m)
!        oxdeol         effective cladding outer oxide thickness (m)
!        oxdwc          cladding oxide weight gain (kg/m2)
!        oxdeil          effective cladding outer oxide thickness(m)
!        alfai             cladding outer alpha oxide thikness(m)
!        oxdwil         oxide weight gain (kg/m2)
!           three variables above are after the layer development
!      wtgmax    weight gain of oxygen for total oxidation of
!                cladding at axial node i of component j (kg O/m length)
!      effoxw    weight gain in cladding since last shattering (kg/m2).
!     output variables                 description
!        rnalf          inner radius or leftmost coordinate of outer
!                         alpha layer (m)
!        rnoxd          inner radius or leftmost coordinate of outer
!                         oxide layer (m)
!        c        oxdwcl = start of time step weight gain adjusted to
!                          account for spalling of oxide layer.
!
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
!
       real(kr) rcil,tclad0,oxlis0,oxdeo,oxdwc,alfao,rnoxd,rnalf,oxdwc0,
     & fadrpa,wtgmax,effoxw,rcol
       integer noxide,flag,i
!
       include 'scddat.h'
       include 'scdcom.h'
       include 'scdout.h'
       include 'buntim.h'
       include 'cmatp.h'
       include 'cons.h'
       include 'miscon.h'
       include 'fecom.h'
       include 'ndxara.h'
       include 'oxcom1.h'
       include 'oxcom4.h'
       include 'ufiles.h'
       include 'fast.h'
       include 'contrl.h'
!
!  Local variables.
       real(kr) atol(5),cden,fadrop,oxdwcl,oxlsdt,oxnolm,rhozr,wgleft,
     * rmetot,treftm,yoxid(3),ydot(5)
       real(kr) coxthk,coxthkr,coxwtk,coxwtkr,doxide,newoxd,rcfunc,
     & oxdeol
       integer  zrflag1, zrflag2
       real  oxdeil, alfai, oxdwil
!
       data atol/0.09,0.09,2.55e-7,1.52e-4,6.0e-7/
!
       zrflag1 = 2 
       zrflag2 = 1
       go to (100,200), flag

c outer surface oxidation       
  100    fadrop = fadrpa
       if (fadrop .gt. 1.0) fadrop = 1.0
       thzta = 1.35 * zrden/zoxden
       oxdeol = max(effoxd(icomp,i),atol(3))
       oxdeo = max(oxdeo,atol(3))
       if(oxdeol.gt.oxdeo)oxdeol=oxdeo
!***   oxdwcl = oxdwc0 - ((oxdeo - oxdeol)*zoxden*(32./(91.22+32.)))
!***   oxdwcl = oxdeol*zoxden*(32./(91.22+32.))
       oxdwcl = effoxw
       oxdwcl = max(oxdwcl,atol(4))
! 2 * d(oxide thickness)/dt * oxide thickness
       if (tclad0.le.273. .or. tclad0.gt.4000.) then
         write(output,'(a,e15.3)')'0tclad0 (out of range in oxstat) = ',
     &   tclad0
         write(output,9092)timehy,icomp,i
9092     format(' OXSTAT, timehy=',e10.4,' component no. =',i5,
     &   ' axial node =',i5)
         write (output,'(a)') '0please reduce time step and resubmit'
          fail = .true.
          return
      endif

       call zoxdat (zrflag1,zrflag2,tclad0,dt,oxdeol,alfao,oxdwcl,
     &  oxdeil, alfai,oxdwil)
     
       yoxid(1) = oxdeil
       yoxid(2) = alfai
       yoxid(3) = oxdwil
       
!  Apply oxidation limits.
      oxnolm=(yoxid(3) - oxdwcl)/dt
      nolmt(i,icomp)=(yoxid(3) - oxdwcl)/dt
      if (yoxid(3) .le. atol(4)) then
        yoxid(1) = atol(3)
        yoxid(2) = atol(5)
      else
        if ((yoxid(3) - oxdwcl) .gt. (oxlis0*dt)) then
          if ((yoxid(3)-oxdwcl) .le. atol(4)*0.01) then
            yoxid(1) = oxdeol
            yoxid(2) = alfao
          else
            yoxid(1)=(yoxid(1)-oxdeol)*oxlis0*dt/(yoxid(3)-oxdwcl)+
     &      oxdeol
            yoxid(2)=(yoxid(2)-alfao)*oxlis0*dt/(yoxid(3)-oxdwcl)+
     &      alfao
          endif
          yoxid(3)=oxlis0*dt + oxdwcl
        endif
      endif
!  Inner radius of oxide layer.
      newoxd = yoxid(1) + (oxdeo - effoxd(icomp,i))
      rnoxd = rcfunc(ngeom(icomp),newoxd,rcoi2(i,icomp) )
!   compute inner radius of oxide layer based on mass of Zr still to be
!   oxidized.
        if(wtgmax.ge.1.e-10)then
          treftm=300.
!   calculate density at same temperature as used in iscdap
          rhozr=cden(treftm)
          if(idcomp(icomp).ne.2)then
            wgleft=max(0.,wtgmax-yoxid(3)*2.0*pi*rco2(i,icomp))
            rmetot=sqrt(rcil**2+(91.22/(pi*32.0*rhozr))*wgleft)
          else
            wgleft=max(0.,wtgmax-yoxid(3))
            rmetot=rcil+(91.22/(32.0*rhozr))*wgleft
          endif
          rnoxd=rmetot
        end if
!  Inner radius of alpha layer.
      rnalf = rnoxd - yoxid(2)
!  Make sure inner oxide radius is not less than inner cladding radius.
      if(rnoxd.le.rcil.or.yoxid(3) .gt. wtlim) then
        rnoxd = rcil
        if(ngeom(icomp).eq.1) then
          yoxid(1) = thzta * (rcoi((icomp-1)*ndax+i) - rnoxd)
        else if(ngeom(icomp).eq.2) then
          yoxid(1)=sqrt(thzta*(rcoi((icomp-1)*ndax+i)**2-rnoxd**2)
     &    + rnoxd**2) - rnoxd
        else if (ngeom(icomp).eq.3) then
          yoxid(1) = (thzta*(rcoi((icomp-1)*ndax+i)**3-rnoxd**3)
     &    + rnoxd**3)**(1.0/3.0) - rnoxd
        endif
        yoxid(3) = min(wtlim,oxlis0*dt + oxdwcl)
        rnalf = rcil
        yoxid(2) = 0.0
        noxide = 1
      endif
      if(rnalf.le.rcil) then
        rnalf = rcil
        yoxid(2) = rnoxd - rcil
      endif
      doxide=yoxid(1)-oxdeol
      effoxd(icomp,i) = effoxd(icomp,i)+doxide
      effoxw=effoxw+yoxid(3)-oxdwcl
      oxdeo=oxdeo+doxide
      oxdwc = yoxid(3)-oxdwcl+oxdwc0
      if(oxdwc.lt.oxdwc0)oxdwc=oxdwc0
      alfao = yoxid(2)
      rco2(i,icomp) = rnoxd + oxdeo
      return

c   Inner surface oxidaion
c   Suppose effoxd = oxdeo      
  200   fadrop = fadrpa
       if (fadrop .gt. 1.0) fadrop = 1.0
       thzta = 1.35 * zrden/zoxden
       oxdeo = max(oxdeo,atol(3))
       oxdeol = oxdeo
       oxdwcl = effoxw
       oxdwcl = max(oxdwcl,atol(4))
       if (tclad0.le.273. .or. tclad0.gt.4000.) then
         write(output,'(a,e15.3)')'0tclad0 (out of range in oxstat) = ',
     &   tclad0
         write(output,9091)timehy,icomp,i
9091     format(' OXSTAT, timehy=',e10.4,' component no. =',i5,
     &   ' axial node =',i5)
         write (output,'(a)') '0please reduce time step and resubmit'
          fail = .true.
          return
      endif

       call zoxdat (zrflag1,zrflag2,tclad0,dt,oxdeol,alfao,oxdwcl,
     &  oxdeil, alfai,oxdwil)
     
       yoxid(1) = oxdeil
       yoxid(2) = alfai
       yoxid(3) = oxdwil
!  Apply oxidation limits.
      if (yoxid(3) .le. atol(4)) then
        yoxid(1) = atol(3)
        yoxid(2) = atol(5)
      else
        if ((yoxid(3) - oxdwcl) .gt. (oxlis0*dt)) then
          if ((yoxid(3)-oxdwcl) .le. atol(4)*0.01) then
            yoxid(1) = oxdeol
            yoxid(2) = alfao
          else
            yoxid(1)=(yoxid(1)-oxdeol)*oxlis0*dt/(yoxid(3)-oxdwcl)+
     &      oxdeol
            yoxid(2)=(yoxid(2)-alfao)*oxlis0*dt/(yoxid(3)-oxdwcl)+
     &      alfao
          endif
          yoxid(3)=oxlis0*dt + oxdwcl
        endif
      endif
!  Following lines can be calculated more precisely      
!  Outer radius of oxide layer.
! Check two lines below work correctly
       rnoxd = yoxid(1)+rci2(i,icomp)
! Adjust rci change
!  Outer radius of alpha layer.
       rnalf = rnoxd + yoxid(2)
!  Make sure outer oxide radius is not less than inner cladding radius.
       if(rnoxd.ge.rcol.or.yoxid(3) .gt. wtlim) then
        rnoxd = rcol
        if(ngeom(icomp).eq.1) then
          yoxid(1) = thzta * (rnoxd-rcil)
        else if(ngeom(icomp).eq.2) then
          yoxid(1)=sqrt(rcil**2.0*thzta-rnoxd**2.0*(thzta-1.0))-rcil
        else if (ngeom(icomp).eq.3) then
          yoxid(1) = (rcil**3.0*thzta-rnoxd**3.0*(thzta-1.0))**(1.0/3.0)
     &    -rcil     
        endif
        yoxid(3) = min(wtlim,oxlis0*dt + oxdwcl)
        rnalf = rcol
        yoxid(2) = 0.0
        noxide = 1
      endif
      if(rnalf.ge.rcol) then
        rnalf = rcol
        yoxid(2) = rcol-rnoxd
      endif
      doxide=yoxid(1)-oxdeol
      effoxw=effoxw+yoxid(3)-oxdwcl
      oxdeo=oxdeo+doxide
      oxdwc = yoxid(3)-oxdwcl+oxdwc0
      if(oxdwc.lt.oxdwc0)oxdwc=oxdwc0
      alfao = yoxid(2)
      return
      end
*endif
