*mlist
*if def,selap
       subroutine oddevn (iaxial,nr,na,n,a,b,c,d,u)
c
c  oddevn solves a system of tridiagonal equations by odd even reduction
c  methods. Operates on vectors of lengths n, n/2, n/4 until the vector
c  length is 2*na or 3*na; or 2*nr or 3*nr.  Then back solve.
c
c  Cognizant engineer: ssa.
c
       implicit none
       integer iaxial,n,na,nr
       real a(n+8),b(n),c(n+8),d(n+8),u(n+8)
c
c  Input variables:
c    a - subdiagonal array
c    b - diagonal array
c    c - superdiagonal array
c    d - right hand side
c    iaxial - directional indicator
c    iaxial = 0 the tridiagonal equations are solved in the radial
c             direction
c    iaxial = 1 the tridiagonal equations are solved in the axial
c             direction
c    na = the number of axial levels
c    nr = the number of radial nodes
c    n = na*nr
c
c  output variables: u - solution vector
c
c  Local variables.
       integer i,inc,jj,jn,k,nn,nna,nnr
       real temp
c
       do 11 i = 1,8
         a(n+i) = 0.
         c(n+i) = 0.
         d(n+i) = 0.
         u(n+i) = 0.
   11  continue
      jj = 1
      if(iaxial.eq.0)goto 14
      jn = na
      do 1 i = 1,nr
         a(jj) = 0.
         c(jn) = 0.
         jj = jj + na
         jn = jn + na
   1  continue
      goto 17
  14  continue
      jn = nr
      do 2 i = 1,na
         a(jj) = 0.
         c(jn) = 0.
         jj = jj + nr
         jn = jn + nr
   2  continue
  17  continue
      do 3 i = 1,n
         a(i) = a(i)/b(i)
         c(i) = c(i)/b(i)
         d(i) = d(i)/b(i)
   3  continue
      nn = n
      if(iaxial.eq.0)nnr = nr
      if(iaxial.eq.1)nnr = na
      inc = 1
   4  continue
      i = 2*inc
      nn = nn/2
      nnr = nnr/2
      do 5 k = 1,nn
         b(i) = 1 - a(i)*c(i-inc) - a(i+inc)*c(i)
         d(i) = d(i) - a(i)*d(i-inc) - c(i)*d(i+inc)
         a(i) = -a(i-inc)*a(i)
         c(i) = -c(i)*c(i+inc)
         i = i + 2*inc
   5  continue
      i = 2*inc
      do 6 k = 1,nn
         a(i) = a(i)/b(i)
         c(i) = c(i)/b(i)
         d(i) = d(i)/b(i)
         i = i + 2*inc
   6  continue
      inc = 2*inc
      if(nnr.ge.4)goto 4
      if(nnr.eq.3)goto 30
c**solves for nnr = 2*2**p, e.g. nnr = 4,8,16,32,...etc.
      if(iaxial.eq.1)nna = nr
      if(iaxial.eq.1)nnr = na
      if(iaxial.eq.0)nna = na
      if(iaxial.eq.0)nnr = nr
      jj = inc
      do 20 i = 1,nna
         temp = 1. - a(jj+inc)*c(jj)
         u(jj) = (d(jj) - d(jj+inc)*c(jj))/temp
         u(jj+inc) = (d(jj+inc) - a(jj+inc)*d(jj))/temp
         jj = jj + nnr
  20  continue
      goto 100
  30  continue
c**solves for nnr = 3*2**p, e.g. nnr = 6,12,24,...etc.
      if(iaxial.eq.1)nna = nr
      if(iaxial.eq.1)nnr = na
      if(iaxial.eq.0)nna = na
      if(iaxial.eq.0)nnr = nr
      jj = 2*inc
      do 70 k = 1,nna
         u(jj) = (d(jj) - a(jj)*d(jj-inc) -c(jj)*d(jj+inc)) /
     +           (1. - a(jj)*c(jj-inc) - c(jj)*a(jj+inc))
         jj = jj + nnr
  70  continue
         jj = 2*inc
      do 80 k =1,nna
         u(jj-inc) = d(jj-inc) - c(jj-inc)*u(jj)
         u(jj+inc) = d(jj+inc) - a(jj+inc)*u(jj)
         jj = jj + nnr
  80  continue
 100  continue
      inc = inc/2
      u(inc) = d(inc) - c(inc)*u(inc+inc)
      i = inc + 2*inc
      do 120 k = 2,nn
         u(i) = d(i) - a(i)*u(i-inc) -c(i)*u(i+inc)
         i = i + 2*inc
 120  continue
      nn = nn*2
      if(inc.eq.1)goto 500
      goto 100
 500  continue
      return
      end
*endif
