       module scdmod
!  Scdap core components storage.
!
!  Cognizant engineer: rjw.
!
!  Any changes to this database will probably require changes to the
!  contained subroutines that read and write this data to the rstplt
!  file.
!
       implicit none
       integer, parameter, private :: kr=selected_real_kind(12,200)
!
       type scd1s
         real qcdt,qrdt,qtdt
         integer cmpno,ibndtb(2),ngrupe,ngrupi
       end type scd1s
!  cmpno   Scdap component number.
!  ibndtb is the general table number (if positive) or the control
!  variable (if negative) to the data which is used to define the top
!  (bndtab(2,icomp)) or the bottom (bndtab(1,icomp)) boundary condition
!  for the simulator rod.
!  ngrupe  Enclosure number in which inner surface resides for
!          component.
!  ngrupi  Enclosure number in which outer surface resides for
!          component.
!  The following variables are not changed during the transient:
!  cmpno,ibndtb.
!
       type scd2s
         real(kr) hcnvcl,hradgx,qoutl,qrdsrl,tgradl,tsur1l
       end type scd2s
!  hcnvcl  Heat transfer coefficient used in radiation routine.
!  hradgx  Derivative of radiation with respect to vapor temperature.
!  qoutl   Heat flux (total use not known).
!  qrdsrl  Radiation heat flux.
!  tgradl  Vapor temperature used in radiation calculation.
!  tsur1l  Surface temperature used in radiation calculation.
!
       type scd21s
         real(kr) gamccd,gamscd,qscd,qwgscd
       end type scd21s
!  gamccd  Mass transfer caused by condensation from Scdap components.
!  gamscd  Mass transfer caused by flashing from Scdap components.
!  qscd    Total heat transferred to hydrodynamic volume by convection
!          and radiation from Scdap components.
!  qwgscd  Heat transferred to liquid of hydrodynamic volume by 
!          convection from Scdap components.
!
       type scd22s
         real(kr) qrdsur,hgrad
       end type scd22s
!
       type snc1s
         integer ncompe,ncpenc,nvfcal
       end type snc1s
!  ncompe  Number of components in enclosure.
!  ncpenc  Number of flow channels in enclosure.
!  nvfcal  Switch on view factor calculation, 0 means view factors and
!          lengths are input by user, 1 means that they are calculated
!          by the code.
!
       type swc1s
         real qcdt,qrdt,qtdt
       end type swc1s
!  qcdt    Contains heat transfered by convection.
!  qrdt    Contains heat transfered by radiation.
!  qtdt    Contains total heat transfered by both convection and
!          radiation.
!
       type (scd1s), allocatable :: scd1(:)
!  Dimension: (number of components).
       type (scd2s), allocatable :: scd2(:,:)
!  Dimension: (number of axial levels,number of components).
       type (scd21s), allocatable :: scd21(:,:,:)
!  Dimension: (number of axial levels,number of components,boundary
!             side).
       type (scd22s), allocatable :: scd22(:,:,:,:)
!  Dimension: (number of axial levels,number of components,boundary
!             side,new vs. old).
       type (snc1s), allocatable :: snc1(:)
!  Dimension: (number of enclosures).
       type (swc1s), allocatable :: swc1(:)
!  Dimension: (number of water channels).
!
!  Temporary declarations for repair and debug.
cljs  To eliminate hardwire dimensions of qradpvx and ncmpch,
cljs  I need of delete reference to scddat in every scdap subroutine
cljs  and activate the coding commented out here.
cljs   include 'scddat.h'
cljs   real qradpvx(15,20,15)
cljs   real qradpvx(64,40,64)
cljs   real qradpvx(ndcomp,ndax,ndcomp)
cljs   activation of above line gives message "conflict of use" for
cljs   various variables defining array dimensions
cljs   integer ncmpch(15,15)
cljs   integer ncmpch(64,64)
cljs   integer ncmpch(ndcomp,ndcomp)
!
       contains
!
       subroutine scdclear
       implicit none
!
       if (allocated(scd1)) deallocate (scd1)
       if (allocated(scd2)) deallocate (scd2,scd21,scd22)
       if (allocated(snc1)) deallocate (snc1)
       if (allocated(swc1)) deallocate (swc1)
       return
       end subroutine scdclear
!
       subroutine scdread (fl)
       implicit none
       logical fl
       include 'scddat.h'
       include 'ndxara.h'
       include 'radata.h'
       include 'tblsp.h'
       include 'ufiles.h'
cljs  testing
cljs  end testing
!
       integer iwrd,len,lent
!
       if (fl) then
         call scdclear
         allocate (scd1(ncomp),scd2(naz,ncomp),scd21(naz,ncomp,2),
     &   scd22(naz,ncomp,2,2),snc1(numenc),swc1(igp))
       endif
       read (rstplt) len,iwrd
       inquire (iolength=lent) scd1,scd2,scd21,scd22,snc1,swc1
c      if (len .ne. lent) go to 200
       if (len .ne. lent) write (6,"('ERROR SCDMOD')")
       read (rstplt) scd1,scd2,scd21,scd22,snc1,swc1
       return
       end subroutine scdread
!
       subroutine scdwrite
       implicit none
       include 'scddat.h'
       include 'ufiles.h'
!
       integer, parameter :: iwrd=1
       integer len
!
       inquire (iolength=len) scd1,scd2,scd21,scd22,snc1,swc1
       write (rstplt) len,iwrd
       write (rstplt) scd1,scd2,scd21,scd22,snc1,swc1
       return
       end subroutine scdwrite
!
       end module scdmod
