*mlist
*if def,selap
      subroutine lsgefa (a, lda, n, ipvt, info)
c
c  Factors a real matrix by gaussian elimination.
c
c  Cognizant engineer: ewc (cxm esm).
c
c  ...1...  arguments / parameters / constants  .......
c  ...2...  notes / remarks  .......
c
       implicit none
c
c  Local variables.
       integer ii,ll,lll,nn
       real tmp,xmax,xmaxa
      integer lda, n, ipvt(1), info
      real a(lda,1)
c
c  ...1...  function / purpose  .......
c       factors a real matrix by gaussian elimination
c  ...2...  arguments / parameters / constants  .......
c     ..a..  input arguments  .....
c          a  r:lda,n  - matrix to be factored
c          lda  i:1  - leading dimension of a
c          n  i:1  - order of the matrix  a
c     ..b..  output arguments  .....
c          a - contains an upper triangular matrix and the
c              multipliers which were used to obtain it.
c              the factorization can be written  a = l*u  where
c              l  is a product of permutation and unit lower
c              triangular matrices and  u  is upper triangular.
c          ipvt  i:n  - pivot indices
c          info  i:1  - completion flag
c              = 0, normal value
c              = k, if  u(k,k) .eq. 0.0 .  this is not an error
c                   condition for this subroutine, but it does
c                   indicate that lsgesl or lsgedi will divide by zero
c                   if called.  use  rcond  in lsgeco for a reliable
c                   indication of singularity.
c     ..c..  internal / local variables  .....
      integer j, k, kp1, l, nm1
      real temp
c     ..d..  external / subprogram references  .....
       save
c     ..e..  constants  .....
c
c  ...3...  notes / remarks  .......
c     ..a..  usage  .....
c          lsgefa is usually called by lsgeco, but it can be called
c          directly with a saving in time if  rcond  is not needed.
c          (time for lsgeco) = (1 + 9/n)*(time for lsgefa) .
c     ..b..  algorithm  .....
c     ..c..  portability  .....
c     ..d..  references  .....
c          (1) j.j. dongarra, c.b. moler, j.r. bunch, and g.w. stewart,
c          linpack user's guide, siam, philadelphia, 1979
c     ..e..  history  .....
c          origin - sgefa - cleve moler, linpack, 08/14/78
c          modified - header, structure - e.s. marwil, 6/5/80
c
      info = 0
      if (n .eq. 1) go to 60
c     gaussian elimination with partial pivoting
      nm1 = n - 1
      do 50 k = 1, nm1
         kp1 = k + 1
c    ---
c     a  find l = pivot index
c    ---
         l = max(n-k+1,0)
         if (l .gt. 1) then
           ll = l
           l = 1
           xmax = abs(a(k,k))
           do 5 lll = 2,ll
             xmaxa = abs(a(lll+k-1,k))
             if (xmaxa .gt. xmax) then
               l = lll
               xmax = xmaxa
             endif
    5      continue
         endif
         l = l + k - 1
         ipvt(k) = l
c    ---
c     b  zero pivot implies this column already triangularized
c    ---
         if (a(l,k) .ne. 0.0) go to 10
         nn = n - k
         if (nn .gt. 0) then
           tmp = -1.0/a(k,k)
           do 31 ii = 1,nn
             a(ii+k,k) = tmp*a(ii+k,k)
   31      continue
         endif
            info = k
            go to 50
c           --------
   10    continue
c    ---
c     c  interchange if necessary
c    ---
         if (l .eq. k) go to 20
            temp   = a(l,k)
            a(l,k) = a(k,k)
            a(k,k) = temp
   20    continue
c    ---
c     d  compute multipliers
       nn = n - k
       if (nn .ge. 0) then
         tmp = -1.0/a(k,k)
         do 21 ii = 1,nn
           a(ii+k,k) = tmp*a(ii+k,k)
   21    continue
       endif
c     e  row elimination with column indexing
c    ---
         do 40 j = kp1, n
            temp = a(l,j)
            if (l .eq. k) go to 30
               a(l,j) = a(k,j)
               a(k,j) = temp
   30       continue
            nn = n - k
            if (nn .gt. 0) then
              do 32 ii = 1,nn
                a(ii+k,j) = a(ii+k,j) + temp*a(ii+k,k)
   32         continue
            endif
   40       continue
   50    continue
c ---------------
   60 continue
      ipvt(n) = n
      if (a(n,n) .eq. 0.0) info = n
      return
      end
*endif
