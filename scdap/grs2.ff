*mlist
*if def,selap
       subroutine grs2 (rd,savg,grira,cc)
c
c  Descriptive sentence goes here.
c
c  Cognizant engineer: ljs.
c
c  subroutine grs2 is called from subroutine grasf.  grs2 calculates
c  the maximum size for bubbles pinned to structural defects. it then
c  determines the coefficients yb(i),yc(i), for the differential
c  equations.  a modified version of anl-d2525- ddfsub solves the set of
c  regular, linear, first-order equations for the bubble size
c  distributions using extrapolation with polynomials by neville's
c  method. finally, average bubble sizes and distributions are tested to
c  determine whether they need to be changed.
c
c  In J.Rest's formulation, the coupling of the diffusive flow
c  problem to other processes affecting fission gas behavior
c  (e.g. gas atom re-solution, gas atom trapping by gas bubbles)
c  is accomplished by solving eqs. of the form
c   dy(i)/dt = -ya(i)y(i)**2-yb(i)y(i)+yc(i)
c   y(i) - density of intragranular gas atoms (bubbles)
c   ya(i)*y(i)**2 - rate at which gas atoms (bubbles) are lost
c   owing to gas bubble nucleation (coalescence)
c   yb(i)*y(i) - rate at which gas atoms (bubbles) are lost
c   owing to diffusive flow and diffusion into gas bubbles
c   (gas atom re-solution)
c   yc(i) - rate at which gas atoms are gained
c   owing to gas atom re-solution and fission of uranium nuclei
c   (rate gas bubbles are gained owing to bubble nucleation and
c   diffusion of gas atoms into bubbles).
c
       implicit none
c
c  Local variables.
       integer i,igr,igr1,ijn,imx1,imx11,ivfp,ix1,ix11,ix2,jj,jr,js,l,
     * ll,m,mm,n
       real cb,cc,grira,hfac,rd,savg,usmach
      dimension rd(4),savg(4),grira(5),cc(5),hfac(9),cb(4)
      external usmach
*call grsparg
*call grsprg
*call grsgra1
*call grsgra2
*call grsgra8
      dimension ijn(5)
      data hfac/1.15  ,1.1  ,1.06  ,1.04  ,1.025  ,1.015  ,
     +1.01  ,1.005  ,1.  /
      data cb/.2876  ,.2176  ,.4216  ,.9268  /
c
      do 5 n=1,5
    5 zc(n)=gsin(n)-flux(n)
      test=crt
      conv=cc(1)
      jjs=0
      s12=1.  /savg(2)
      s23=savg(2)/savg(3)
      gr2=pb(1)*s12
      gr3=pb(3)*s12
      gr4=gbsf/s23
      gr5=gbse*savg(4)/savg(2)
      gr6=pbkgby(2)+rtrs(1)
      ix1=nr4
      ix11=ix1+1
      ix2=ix11+1
      do 8 i=1,nr41
    8 x(i)=rtrs(i)*savg(i+1)
      if(nr4.gt.2) go to 9
      yc(4)=(flux(1)+flux(6)*savg(2))*volume
      go to 12
    9 s13=savg(1)/savg(3)
      prf31=1.  -prf3
      alph1=1.  -alpha
      yb(3)=flxeg+rtrs(2)+gbsf
      if(nr4.eq.4) go to 10
      ix2=ix11
      go to 12
   10 gr13=volume*savg(4)
      s34=savg(3)/savg(4)
      yb(4)=eprf+rtrs(3)+gbse
      fedg=flfl*s34
   12 do 14 i=1,nr4
      yy(i)=y(i)
      ym(i)=y(i)
   14 y0(i)=y(i)
      ktrl=-1
      mm=1
      igr=0
      igr1=1
c
   20 yb(1)=pbkgby(1)+pb(3)*ym(2)+pb(1)*ym(1)
      yb(2)=gr6-gr3*ym(1)
      yc(1)=x(1)*ym(2)+zc(1)
      yc(2)=gr2*ym(1)*ym(1)-flux(6)
      yc(ix11)=flux(7)*ym(nr3)
      if(nr4.gt.2) go to 22
      yb(2)=yb(2)+flxeg
      if(ktrl) 60,140,135
   22 yc(1)=yc(1)+x(2)*ym(3)
      yc(2)=yc(2)+gr4*ym(3)
      yc(3)=(pbkgby(1)*ym(1)+flux(1))*s13+
     +      (pbkgby(2)*ym(2)+flux(6))*s23
      if(nr4.eq.3) go to 28
      yc(1)=yc(1)+x(3)*ym(4)
      yc(2)=yc(2)+gr5*ym(4)
      t=fedg*ym(3)
      yc(4)=t*prf31
      yc(6)=(t*prf3+eprf*ym(4))*gr13
   28 if(ktrl) 60,140,135
   30 igr=igr1
      igr1=igr+1
      conv=cc(igr1)
      test=crt*tsc(igr)
      l=igr+4
      do 32 i=1,nr41
      yy(i)=y(l)
      ym(i)=y(l)
      y0(i)=y(l)
   32 l=l+4
      ktrl=-1
      mm=1
      if(nr4.eq.2) go to 45
      yb(1)=flx0(igr1)
      yc(1)=zc(igr1)
   40 if(nr4.eq.2) go to 50
      c=yb(1)*ym(1)+flux(igr1)
      yc(2)=c*alph1
      yc(ix11)=flux(7)*ym(2)
      if(nr4.eq.3) go to 43
      z=flfl*ym(2)
      yc(3)=z*prf31
      yc(5)=(z*prf3+eprf*ym(3)+c*alpha)*volume
   43 if(ktrl) 60,140,135
   45 yc(1)=zc(igr1)
      yc(3)=flux(igr1)*volume
   50 yc(2)=flux(7)*ym(1)
      if(ktrl) 60,140,135
c
   60 do 65 i=1,ix1
   65 yb0(i)=yb(i)
      do 75 i=1,ix2
   75 yc0(i)=yc(i)
c
c
c     perform integration of y(i) array
      jr=2
      js=3
      jj=0
  119 jj=jj+1
      l=min(jj,7)
      go to (121,122,123,124,125,126,127,128,129),jj
  129 f(7)=63.
  127 f(6)=35.
      f(5)=15.
  125 f(4)=8.
      f(3)=3.
  123 f(2)=1.25
      go to 122
  128 f(7)=63.
      f(6)=(247.  /9.  )
  126 f(5)=15.
      f(4)=(55.  /9.  )
  124 f(3)=3.
      f(2)=(7.  /9.  )
  122 if(jj.eq.l) f(jj)=mm*mm-1
  121 mm=mm+mm
      g=h/mm
      ktrl=-1
      do 130 i=1,ix1
      yl(i)=y0(i)
      ym(i)=y0(i)
      yb(i)=yb0(i)
      yc(i)=yc0(i)
  130 continue
  135 tm=g
  140 do 148 i=1,ix1
      v=tm*yb(i)
      if( abs(v).lt.1.e-4) go to 146
      u=yc(i)/yb(i)
      c=yl(i)-u
      if(c.eq.0.  ) go to 147
      if(v.lt.-160.  ) go to 218
      u=c*exp(-v)+u
      go to 147
  146 u=(1.  -v*(.5  -v*.1666666666666  ))*(tm*yc(i)-v*yl(i))+yl(i)
  147 yl(i)=ym(i)
      ym(i)=u
  148 continue
      if(ktrl) 150,170,210
  150 do 151 i=ix11,ix2
      yl(i)=0.
      ym(i)=yc0(i)*tm
  151 continue
      tm=g+g
      ktrl=0
      nn=1
  169 nn=nn+1
c
      if(igr) 40,20,40
c
  170 do 171 i=ix11,ix2
      u=yl(i)+yc(i)*tm
      yl(i)=ym(i)
      ym(i)=u
  171 continue
      if(nn.lt.mm) go to 169
      ktrl=1
      konv=jj-1
c
      if(igr) 40,20,40
c
  210 tm=g*.5
      do 216 i=1,ix2
      ta=(ym(i)+yl(i))*.5
      if(i.gt.ix1) ta=ta+tm*yc(i)
      if(ta.lt.1.e-37) ta=0.
      if(jj.gt.1) go to 212
      d(1,i)=ta
      go to 216
  212 v=d(1,i)
      d(1,i)=ta
      do 214 n=2,l
      ta=ta+(ta-v)/f(n)
      v=d(n,i)
  214 d(n,i)=ta
c     check for convergence
      if( abs(yy(i)-ta).ge.ta*conv+1.  ) konv=-1
  216 yy(i)=ta
      if(konv.ge.1) go to 220
      mm=jr
      jr=js
      js=mm+mm
      if(jj.lt.9) go to 119
  218 h=-h
      return
  220 jjs=max(jj,jjs)
c mf is never defined ewc 9/10/93
c     if(mf.ne.0) go to 221
      if(jj.gt.7) cc(igr1)=cc(igr1)*hfac(12-jj)
      if(jj.eq.2) cc(igr1)=max(cc(igr1)*.9  ,test)
c 221 continue
      y(igr+17)=yy(ix11)
      if(nr4.ne.3) y(igr+22)=yy(ix2)
      if(nr4.eq.3) y(igr+22)=0.
      if(igr.gt.0) go to 224
      do 222 i=1,nr4
  222 y(i)=yy(i)
      ix1=nr41
      ix11=ix1+1
      ix2=ix11+1
      if(nr4.eq.3) ix2=3
      yb(1)=flxeg
      yb(2)=flxeg
      yb(3)=eprf
      ivfp=0
      if(ivfp) 230,30,230
  224 l=igr+4
      do 226 i=1,nr41
      y(l)=yy(i)
  226 l=l+4
      if(igr.ne.4) go to 30
  230 hnxt=min(hnxt,h*hfac(jjs))
      imx1=16
      do 273 i=1,imx1
  273 ym(i)=y(i)
      if(ivfp.ne.0) go to 277
      i=6
      do 276 n=1,nr41
      t1=y(i+1)
      t2=y(i+2)
      t0=y(i)
      t=(t1-t0)+eqkc
      if(t.lt.usmach(3))then
        y(i)=max((sqrt(4.*(t2+t0)*eqkc)-t)*.5,0.)
      else
        y(i)=max((sqrt(t*t+4.*(t2+t0)*eqkc)-t)*.5,0.)
      endif
      y(i+1)=(t1-t0)+y(i)
      y(i+2)=(t2+t0)-y(i)
  276 i=i+4
      imx11=imx1+1
  277 l=imx11+4
      do 278 i=1,5
      dgs(i)=y(i+l)/avn
  278 dgi(i)=gsin(i)*(h*va)
      gasmgo=savg(nr3)*y(imx11)
      yl(1)=gasmgo/avn
      do 282 i=1,4
  282 yl(i+1)=y(i+imx11)/avn
      do 284 i=1,5
  284 dgs(i)=dgs(i)+yl(i)
      dgs(6)=dgs(2)
      if(icl.eq.0) dgs(2)=dgs(2)/40.
      dgs(3)=dgs(3)+dgs(5)
      dgs(4)=dgs(4)+dgs(5)
c
      ijn(1)=1
      ijn(2)=5
      ijn(3)=6
      ijn(4)=7
      ijn(5)=2
      do 293 mm=1,5
      nn2=mm*3
      nn1=nn2-1
      nn=nn1-1
      ll=ijn(mm)
      t1=cb(1)*cin(nn)+cb(2)*cin(nn1)+cb(3)*cin(nn2)
      if(t1.ne.0.  ) go to 291
      t1=y(ll)/cb(4)
      n=0
      do 290 i=nn,nn2
      n=n+1
  290 cin(i)=cb(n)*t1
      go to 293
  291 t1=y(ll)/t1
      do 292 i=nn,nn2
  292 cin(i)=cin(i)*t1
  293 continue
      grira(1)=grira(1)+flux(1)*h
      grira(2)=grira(2)+bvltce(1)*y(1)*h/byag
      grira(3)=grira(3)+flux(6)*h*savg(2)
      grira(4)=grira(4)+bvltce(2)*y(2)*savg(2)*h/byag
      grira(5)=grira(5)+(y(1)+y(2)*savg(2))*gbs*h
c     calc. rates for bubble growth and shrinkage
      srnk(1)=0.
      grow(1)=0.
      fluxl=y(2)*(pb(4)*y(2)+pb(3)*y(1)*s12-rtrs(1))
      t1= abs(fluxl)+gr4*y(3)+gr5*y(4)
      v=pb(1)*y(1)*y(1)
      if(fluxl.lt.0.  ) srnk(1)=t1+v
      if(fluxl.ge.0.  ) grow(1)=t1-v
      if(nr4.eq.2) go to 298
      srnk(2)=0.
      grow(2)=0.
      grlg2=(pbkgby(2)*y(2)+flux(6))*s23
      if(s23.gt.1.  ) grlg2=-grlg2
      fluxg=y(3)*(pface(1)*y(3)-rtrs(2))
      t2= abs(fluxg)-grlg2
      if(fluxg.lt.0.  ) srnk(2)=t2
      if(fluxg.ge.0.  ) grow(2)=t2
      if(nr4.eq.3) go to 298
      srnk(3)=0.
      yc4=prf31*fedg*y(3)
      if(s34.gt.1.  ) yc4=-yc4
      grow(3)= pface(2)*y(4)**2-yc4-rtrs(3)
c     determine if average bubble sizes and distributions change
  298 b=bump(1)
      do 305 n=1,nr41
      m=n+1
      if(srnk(n).le.0.  ) go to 300
      t=savg(m)/rm
      if(t.lt.2.  ) go to 300
      savg(m)=t
      y(m)=y(m)*rm
      if(n.gt.1) go to 305
      do 299 i=13,15
  299 cin(i)=cin(i)*rm
      go to 305
  300 if(grow(n).le.0.  ) go to 305
      if(nr4.eq.4) go to 302
      if(nr4.eq.3) go to 301
      if(req(2).ge.xdis) go to 305
      t1= exp(min(dlbmp2,pb(4)*y(2)*h))
      go to 303
  301 if(n.ne.2) go to 302
      if(req(3).ge.xmlt) go to 305
      t1= exp(min(dlbmp2,pface(1)*y(3)*h))
      go to 303
  302 t1=grow(n)*taun(n)
      if(n.gt.1) b=bump(2)
      t1=1.  +min(t1/max(y(m),1.  ),b)
  303 savg(m)=savg(m)*t1
      y(m)=y(m)/t1
      rd(m)=rd(m)*t1**third
      if(n.gt.1) go to 305
      do 304 i=13,15
  304 cin(i)=cin(i)/t1
  305 continue
      return
      end
*endif
