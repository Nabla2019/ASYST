*mlist
*if def,selap
       function fnucr(radius,prdpr,xrdpr,nrdpr,elevc,paxpz,naxpz,kshapz)
c
c  fnucr supplies a radial peaking factor for nuclear heat at a given
c  radius and elevation.
c
c  Cognizant engineer: ewc.
c
c     calling subroutines:  effht
c     subroutines called:   polate,pol8
c
c     input variables                  description
c        elevc          axial node for which radial peaking factor is
c                         required
c        kshapz         axial power distribution shape number
c        naxpz          number of points in the axial power distribution
c        nrdpr          number of points in the radial power
c                         distribution
c        paxpz          axial power factor, position pairs  ( ,m)
c        prdpr          radial power factor, position pairs ( ,m)
c        radius         fuel pellet radius for which radial peaking
c                         factor is required (m)
c
c     output variables                 description
c        fnucr          nuclear heat radial peaking factor
c
c     local variables                  description
c        apfd           axial power factor delayed
c        apfp           axial power factor prompt
c        nest            starting point for interpolating routines
c        qdtot          total decay heat at elevation elevr
c        qptot          total prompt heat at elevation elevr
c        rpf            radial power factor
c -----------------------------fnucr outline--------------------------
c     set dimensions
c     interpolate prompt radial peaking factor
c     interpolate prompt and delayed axial peaking factor
c     determine current over all radial peaking factor
c     return
c --------------------------------------------------------------------
      implicit none
*call scddat
*call scdpow
*call contrl
*call ufiles
      integer nrdpr,naxpz,kshapz
      real radius,prdpr,xrdpr,elevc,paxpz
      real fnucr
      dimension prdpr(ndrd),xrdpr(ndrd),paxpz(2,ndax,maxpz)
c  Local variables.
      integer nest
      real apfd,apfp,qdtot,qptot,qtot,rpf
      real polate,pol8
      real dum1
      integer ndbg
      external polate,pol8
        ndbg=0
cljs      if(timehy.ge.1449.0.and.timehy.le.1451.0)ndbg=1
          if(ndbg.eq.1)then
          write(output,9005)timehy
9005      format(' FNUCR entered; timehy=',e10.4)
          end if
      nest   = nrdpr/2
      rpf = pol8(prdpr,xrdpr,radius,nrdpr,nest)
           if(ndbg.eq.1)then
           write(output,9009)radius,rpf
9009       format(' FNUCR; radius=',e10.4,' rpf=',e10.4)
           end if
      nest   = naxpz/2
      apfp = polate( paxpz(1,1,kshapz) ,elevc , naxpz ,nest )
             if(ndbg.eq.1)then
             write(output,9013)elevc,apfp
9013         format(' FNUCR; elevc=',e10.4,' apfp=',e10.4)
             end if
      qptot = (powtot(icomp)-powfdk(icomp))*apfp
      apfd = polate( paxpz(1,1,1) ,elevc , naxpz ,nest )
      qdtot = (powfdk(icomp))*apfd
      qtot = qptot + qdtot
      if (qtot .gt. 0.0) then
          fnucr = ( qdtot*(rpf + 1.)/2. + qptot*rpf ) / qtot
            if(ndbg.eq.1)then
            dum1 = (qdtot*(rpf+1.)/2. +  qptot*rpf)/qtot
            write(output,9021)qdtot,qptot,rpf,qtot,dum1,apfp,apfd
9021        format(' FNUCR at end; qdtot=',e10.4,' qptot=',e10.4,
     &      ' rpf=',e10.4,' qtot=',e10.4,' fnucr=',e10.4,' apfp=',
     &      e10.4,' apfd=',e10.4)
            end if
      else
          fnucr = 1.0
      end if
      return
      end
*endif
