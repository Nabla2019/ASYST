*mlist
*if def,selap
       subroutine oxydef2 (oxlis,kaxn,nlvol,nshap)
c
c  oxydef computes the oxidation rate limit and limit ratio.
c
c  Cognizant engineer: cma.
c   kaxn = axial node (input)
c   nshap = indicator of shape of surface that is oxidizing;
c           0=vertical cylindrical surface,
c           1=vertical slab surface,
c           2=drops of frozen cladding,
c           3=rubble debris.
c     calling subroutines:  oxidiz
c     subroutines called:   polate
c     engineer/programmer:  c m allison
c
       implicit none
       integer kaxn,nlvol
       real oxlis
*call fast
*call comctl
*call voldat
*call ufiles
*call scddat
*call buntim
*call cmptim
*call scdcom
*call scdout
*call tblsp
*call ndxara
*call miscon
*call trnot2
*call oxcom4
*call contrl
*call dbacct
*call oxsrv2
c     input variables                  description
c        oxyftr                    diffusion limit coming
c                                  out of 'statep'
c        kaxn                          axial node number
c
c     output variables                 description
c        oxlis              oxidation rate limit per unit surface area
c                                       (kg/m2 s)
c
c     local variables                  description
c        nn             current index for scdap volume
c
c  Local variables.
       integer nn
       integer nshap,ndifap,kvdef
       integer jb
       integer il1
       integer ndbg
       real tsur,tmltbk
       real dif1,htctot,dif2,facblk
       real flg,ratio
       real snfunc
       external snfunc
       data tmltbk / 3120./
c define the limit on oxidation by consuming all existing steam
         ndbg=0
           il1 = nvad((ndcomp+nsout(icomp)-1)*ndax+kaxn)+filndx(4)
           jb = ndcomp + nsout(icomp)
           flg = hyarg(il1)*abs(velg(il1))*avol(il1)
cljs  assume outer surface only SCDAP component in flow channel
           ratio = 1.
           flstm2(kaxn,icomp) = (1.0 - quala(il1))*flg*ratio
      stmlmt2(kaxn,icomp)= 0.8888889*
     # flstm2(kaxn,icomp)/snfunc(ngeom(icomp),
     # rco2(kaxn,icomp),dzcnd2(kaxn,icomp),slbwd(icomp))
c Define the rate limit based on mass diffusion
c See volume 2 page 3-3
c     To preclude turning off mass diffusion limit for case of
c     stagnant pool of water in part of node, reference voidf in
c     volume one node above node kaxn.
      nn = nlvol
      tsur=tcond3(1,kaxn,icomp)
      htctot=hfixg((jb-1)*ndax+kaxn)
cljs temporarlily eliminate diffusion limit check
      dif1=oxyftr(nn)*htctot
      diflmt2(kaxn,icomp) = dif1
      oxlis=min(dif1,stmlmt2(kaxn,icomp))
cljs  oxlis = stmlmt2(kaxn,icomp)
c   apply protection against numerical instability that may cause
c   temperature to be greater than temperature at which oxidation
c   precluded by blockage formation.
      if(tsur.gt.tmltbk)oxlis=0.0
      return
      end
*endif
