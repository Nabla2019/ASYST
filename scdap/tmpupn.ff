*mlist
*if def,selap
       subroutine tmpupn(tsatlp, j, pitch1, rcos1, nsigl1,
     # dqpool)
c
c
c  tmpupn calculates the temperature distribution through the hardpan
c  on top of the liquefied core debris, the change in thickness of this
c  hardpan, the amount of heat transfer from top of the hardpan into
c  the coolant, and various variables in the equation to calculate heat
c  transfer from the liquefied core debris into the hardpan.
c
c  Cognizant engineer: ewc.
c
c     tsatlp=saturation temperature of water in lower plenum (k)
c             input
c     j = number of component under consideration  input .
c     pitch1=spacing of fuel rods (m)  input .
c     rcos1=original outer radius of fuel rods (m)  input .
c     nsigl1=number of rods in component j  input .
c     dqpool=heat transferred from liquid debris pool to hardpan
c            for all rods in component (joules)  output
c       since hnupan(j) and tupool are input, dqpool is effectively
c      also an input variable.
c
c       tmltuo = melting temperature of mixture of zr-u-o (k)
c
       implicit none
*call scddat
*call uphdpn
*call scdpow
*call hardpn
*call contrl
*call ufiles
       integer j,nsigl1
       real tsatlp,pitch1,rcos1,dqpool
c
c
       real c,d
       dimension c(3,3), d(3)
c
c  Local variables.
       integer itcnt,nconv
       real a0,a1,a1prev,afalum,aflith,afcadm,afsoil,alpha,arad,b0,b1,
     * c0,c1,dtdxi,dtdxo,dthkdt,fdenmt,femiss,fnumrt,hrad,qgmmax,term1,
     * thk0,thk1,thkmn1,thkmn2,thkmin,tihpn0,tmpave,tmprad
       real qdupa1
       real zucp1,zuden1,zutco1
       external zucp1,zuden1,zutco1
c
c     define stefan-boltzmann constant
c
       integer itmax
       real sigrad,acclim
       data sigrad / 5.6697e-8/
c
c      acclim = convergence criteria (fraction)
c      itmax=maximum iteration limit
c
       data acclim / 0.005/, itmax/ 25/
       afalum=0.0
       aflith=0.0
       afcadm=0.0
       afsoil=0.0
c
       if(thkupn(j).lt.1.0e-6)then
c
c      meltthrough of hardpan.
c
       auppan(j)=tmupan(j)
       thk1=thkupn(j)
       buppan(j)=0.0
       cuppan(j)=0.0
       a1=auppan(j)
       b1=buppan(j)
       c1=cuppan(j)
       femiss=1.
       hrad=sigrad*faupan(j)*femiss*(a1**2+tchdpu(j)**2)
     # *(a1+tchdpu(j))
       tiupan(j)=tupool
       go to 790
       end if
       if(nsupan(j).eq.0)then
       a0=t0upan(j)
       b0=0.0
       c0=0.0
       nsupan(j)=1
          else
       a0=auppan(j)
       b0=buppan(j)
       c0=cuppan(j)
          end if
       thk0=thkupn(j)
       tihpn0=a0+b0*thk0+c0*thk0**2
c      calculate average temperature of crust.
c      tmpave=a0+0.5*b0*thk0+0.333333333*c0*thk0**2
       tmpave=tmupan(j)
       rhupan(j)=zuden1(afpool(1),afpool(2),afpool(3),afpool(4),
     # afpool(5), afpool(6), afpool(7), afalum, aflith,
     # afcadm, afsoil, tmpave)
       cpupan(j)=zucp1(afpool(1),afpool(2),afpool(3),afpool(4),
     # afpool(5), afpool(6), afpool(7), afalum, aflith,
     # afcadm, afsoil, tmpave)
       cnupan(j)=zutco1(afpool(1),afpool(2),afpool(3),afpool(4),
     # afpool(5), afpool(6), afpool(7), afalum, aflith,
     # afcadm, afsoil, tmpave)
c***    temporary until matpro common block with heat of fusion
c***     is accessed.
       hfhdpn(j)=27.4e+4
c
c      alpha=thermal diffusivity of hardpan(m**2/s)
c
       alpha=cnupan(j)/(rhupan(j)*cpupan(j))
       itcnt=0
       a1=a0
  100  continue
       itcnt=itcnt+1
       a1prev=a1
c
c      define coefficient matrix and d vector.
c
       c(1,1)=1./thkupn(j)
       c(2,1)=0.5
       c(3,1)=0.33333333*thkupn(j)-2.*alpha*dt/thkupn(j)
       qdupa1=qdupan(j)
       if(nspowi.eq.3)qdupa1=qdupa1*powtot(j)
       d(1)=a0*thk0/thkupn(j)**2 + 0.5*b0*(thk0/thkupn(j))**2
     # +0.33333333*c0*(thk0**3)/thkupn(j)**2
     # +qdupa1*dt/(rhupan(j)*cpupan(j)*thkupn(j))
c      calculate radiation h.t.c.
c      femiss=emissivity factor
       femiss=1.
       if(itcnt.le.1)then
       tmprad=a0
       else
       tmprad=a1
       end if
       if(tmprad.gt.tmupan(j))tmprad=tmupan(j)
       hrad=sigrad*faupan(j)*femiss*(tmprad**2+tchdpu(j)**2)
     # *(tmprad+tchdpu(j))
       c(1,2)=(hrad+hcupan(j))/cnupan(j)
       c(2,2)=-1.
       c(3,2)=0.0
       d(2)=hrad*tchdpu(j)/cnupan(j)+hcupan(j)*tchdpu(J)/cnupan(j)
c
c      check to see whether hardpan is melting.
c
       if(tupool.lt.(tmupan(j)+0.001))then
c
c      case of hardpan not melting.
c
         c(1,3)=0.0
         c(2,3)=1.
         c(3,3)=2.*thk0
         if(tupool.gt.(tmupan(j)+0.001))then
         d(3)=(hnupan(j)/cnupan(j))*(tupool-tmupan(j))
         else
         d(3)=0.0
         end if
c
c      case of hardpan melting.
c
       else
       c(1,3)=1./thkupn(j)
       c(2,3)=1.
       c(3,3)=thkupn(j)
       d(3)=tmupan(j)/thkupn(j)
       end if
c
c      solve for a, b, c
c
       fnumrt=d(3)-c(2,3)*d(2)/c(2,2) - c(3,3)*d(1)/c(3,1)
     # +c(3,3)*c(2,1)*d(2)/(c(3,1)*c(2,2))
       fdenmt=c(1,3)-c(2,3)*c(1,2)/c(2,2)
     # +c(3,3)*c(2,1)*c(1,2)/(c(3,1)*c(2,2))
     # -c(3,3)*c(1,1)/c(3,1)
       a1=fnumrt/fdenmt
       if(a1.lt.tchdpu(j))a1=tchdpu(j)
       b1=d(2)/c(2,2) - c(1,2)*a1/c(2,2)
       c1=(c(2,1)*c(1,2)/(c(3,1)*c(2,2))-c(1,1)/c(3,1))*a1
     # +d(1)/c(3,1) - c(2,1)*d(2)/(c(3,1)*c(2,2))
       if(a1.gt.tupool)then
       a1=tupool
       b1=0.0
       c1=0.0
       end if
c
c     calculate temperature gradients at inner and outer surface
c     of hardpan.
c
       dtdxo=b1
       dtdxi=b1+2.*c1*thkupn(j)
c
c      update thickness of hardpan.
c
       dthkdt=(1./(hfhdpn(j)*rhupan(j)))*
     # (cnupan(j)*(b1+2.*c1*thkupn(j))
     # -hnupan(j)*(tupool-tmupan(j)))
       if(tupool.lt.(tmupan(j)+1.))dthkdt=0.0
       thk1=thk0+dthkdt*dt
       nconv=0
       if(abs((a1-a1prev)/a1).lt.acclim)then
       nconv=1
       end if
c      if thickness less than 1.e-6, then crust failure signalled on
c      next call.
       if(thk1.le.0.9e-6)then
       thk1=0.9e-6
       nconv=1
       a1=tmupan(j)-1.
       b1=0.0
       c1=0.0
       end if
       tiupan(j)=a1+b1*thk1+c1*thk1**2
         if(tiupan(j).gt.tmupan(j))tiupan(j)=tmupan(j)
         if(dtdxi.lt.(-10.0).and.tiupan(j).gt.(tmupan(j)+100.))then
c      upper crust is melting in interior.
c      calculate most exterior location of melting.
       term1=b1**2-4.*c1*(a1-tmupan(j))
       if(term1.lt.0.0)term1=0.0
       thkmn1=(-b1+sqrt(term1))/(2.*c1)
       thkmn2=(-b1-sqrt(term1))/(2.*c1)
       thkmin=thkmn1
       if(thkmin.lt.0.0)thkmin=thkmn2
       if(thkmin.lt.0.9e-6)thkmin=0.9e-6
       if(thkmin.gt.thk0)thkmin=thk0
       thkupn(j)=thkmin
       thk1=thkupn(j)
       nconv=1
       end if
       if(itcnt.ge.itmax.and.nconv.eq.0)then
c***   write(output,921)itcnt,a0,a1,a1prev
c*921  format ('0*** nonconvergence in subroutine tmpupn ***',
c*** # ' itcnt=',i5,' a0=',e10.4,' a1=',e10.4,' a1prev=',e10.4)
       nconv=1
       if(a1prev.lt.a1)a1=a1prev
       end if
       thkupn(j)=thk1
       if(nconv.eq.0)go to 100
  780  continue
       if(a1.gt.tmupan(j))then
       a1=tmupan(j)
       b1=0.0
       c1=0.0
       end if
c
c      update variables.
c
       auppan(j)=a1
       buppan(j)=b1
       cuppan(j)=c1
  790  continue
       tiupan(j)=a1+b1*thk1+c1*thk1**2
       arad=float(nsigl1)*pitch1**2
       tmprad=a1
       if(a1.gt.tmupan(j))tmprad=tmupan(j)
       qgmhpu(j)=(hrad+hcupan(j))*(tmprad-tchdpu(j))*arad
       qgmmax=hnupan(j)*(tupool-tmupan(j))*arad
       if(qgmmax.lt.0.0)qgmmax=0.0
       if(qgmhpu(j).gt.qgmmax)qgmhpu(j)=qgmmax
       qcvhpu(j)=qgmhpu(j)
       dqpool=qcvhpu(j)*dt
  800  continue
       return
       end
*endif
