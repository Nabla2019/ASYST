*mlist
*if def,selap
      subroutine effhtc2(poxfr, poxgt,poxcl,poxab,qnuab,
     #   tsur, tsur0, tclsur, effcp,  effgen,effk)
c 
c  computation of effective material properties and
c  effective heat generation for control rod heat conduction.
c
c  effhtc2 is originated from effhtc.
c  effcpi, effcpo and effqc are deleted since they do nothing 
c  in this model
c
c
c     input variables                  description
c        qnuab          linear heat generation in absorber material due
c                         to neutron capture (w/m)
c        tsur           current temperature in control rod axial zone
c                         (k)
c        tsur0          average temperature in control rod axial zone
c                         at start of time step (k)
c
c     output variables                 description
c        effcp          effective specific heat  (j/m3-k)
c        effgen         effective heat generation rate  (w/m3)
c        effk           effective thermal conductivity  (w/m-k)
c
c     local variables                  description
c        cab            specific heat capacity of absorber material
c                         (j/kg-k)
c        css            specific heat capacity of ss  (j/kg-k)
c        cszox          specific heat capacity of zircaloy/ss oxide
c                         (j/kg-k)
c        cws            specific heat capacity of water/steam  (j/kg-k)
c        czr            specific heat capacity of zircaloy  (j/kg-k)
c        rab            density of absorber material  (kg/m3)
c        rcab           volumetric heat capacity of absorber material
c                         (j/m3-k)
c        rcss           volumetric heat capacity of ss  (j/m3-k)
c        rcszox         volumetric heat capacity of zircaloy/ss oxide
c                         (j/m3-k)
c        rcws           volumetric heat capacity of water/steam
c                         (j/m3-k)
c        rczr           volumetric heat capacity of zircaloy  (j/m3-k)
c        rss            density of ss  (kg/m3)
c        rszox          density of zircaloy/ss oxide  (kg/m3)
c        rws            density of water/steam  (kg/m3)
c        rzr            density of zircaloy  (kg/m3)
c        tcab           thermal conductivity of absorber material
c                         (w/m-k)
c        tcss           thermal conductivity of ss  (w/m-k)
c        tcszox         thermal conductivity of zircaloy/ss oxide
c                         (w/m-k)
c        tcws           thermal conductivity of water/steam  (w/m-k)
c        tczr           thermal conductivity of zircaloy  (w/m-k)
c        vab            volume of absorber material in axial zone (m3)
c        vss            volume of ss in axial zone  (m3)
c        vwast          volume of water/steam in axial zone  (m3)
c        vzr            volume of zircaloy in axial zone  (m3)
c        vzrox          volume of zircaloy oxide in axial zone  (m3)
c        wab            mass of absorber material in axial zone  (kg)
c        wss            mass of ss in axial zone  (kg)
c        wzr            mass of zircaloy in axial zone  (kg)
c        thoxgt       ZrO2 layer thickness inside of guide tube (m)
      implicit none
*call comctl
*call cons
*call contrl
*call fast
*call ufiles
*call voldat
*call scddat
*call ehtc0
*call hfuson
*call intcom
*call ndxara
*call scdcom
*call scdout
*call tblsp
*call debout
*call conele
      real poxfr,qnuab,tsur,tsur0,
     +  effcp,effgen,effk,
     +  poxgt,poxcl,poxab,tclsur
      integer mshmat
      dimension effcp(ndrd), effgen(ndrd), effk(ndrd),
     +  mshmat(ndrd) 
c  Local variables.
      integer ij,in,inode,k,l
      real atot,agt,acl,aab,agp,rso,cso
      real cab,cabi,css,cssi,cszox,cws,czr,czri
      real rab,rcab,rcss,rcszox,rcws,rczr,rr,rss,rssi
      real rszox,rws,rzr,rzri
      real sumcp,sumcpi,sumcpo,sumk,tcab,tcss,tcszox,tcws,tczr,vab
      real vi,vo1, vss,vtot,vwast,vzr,vzrox,wab,wss, wzr
      real vssin,vsoin,wssin,wsoin
      real fncp,fnk,fnro,check,check2
      real hgap,keffgp,thkgp1,pres
      real sden,soden
      real thoxgt
      dimension check(6,naz)
      external fncp,fnk,fnro,gaphtc3
c set volumes/masses/properties equal to zero
      vzr  = 0.
      wzr  = 0.
      rzr  = 0.
      czr  = 0.
      rczr = 0.
      tczr = 0.
      vss  = 0.
      wss  = 0.
      vssin = 0.
      wssin =0.
      vsoin = 0.
      wsoin =0.
      rso = 0.
      cso = 0.
      rss  = 0.
      css  = 0.
      rcss = 0.
      tcss = 0.
      vzrox= 0.
      vab  = 0.
      wab  = 0.
      rab  = 0.
      cab  = 0.
      rcab = 0.
      tcab = 0.
      vwast= 0.
c      do k=1,naz
c         check(1,k)=xcond3(nrcond(ndax*(icomp-1)+k)-2,
c     &  k,icomp)
c         check(2,k)=xcond3(nrcond(ndax*(icomp-1)+k)-1,
c     &  k,icomp)
c         check(3,k)=xcond3(nrcond(ndax*(icomp-1)+k),
c     &  k,icomp)
c         check(4,k)=xcond3( nrcldi2(k,icomp),
c     &  k,icomp)
c         check(5,k)=xcond3( nrods2(k,icomp),
c     &  k,icomp)
c       enddo
         
c computation of material properties
c computation of volumes of oxidized zircaloy and stainless steel.
c ZrO2 volume at outside
      if( rnoxd(ndax*(icomp-1)+inaz).ge. rci2(inaz,icomp) .and.
     #    rnoxd(ndax*(icomp-1 )+inaz).lt. rco2(inaz,icomp) ) then
         vzrox=rco2(inaz,icomp)*rco2(inaz,icomp) -
     #       rnoxd(ndax*(icomp-1 )+inaz)*rnoxd(ndax*(icomp-1 )+inaz)
      else
         vzrox = 0.
      endif
c    ZrO2 volume at inside (+ outside)   
      if( rnoxdi(ndax*(icomp-1)+inaz).ge. rci2(inaz,icomp) .and.
     #    rnoxdi(ndax*(icomp-1 )+inaz).lt. rco2(inaz,icomp) ) then
         vzrox=rnoxdi(ndax*(icomp-1 )+inaz)*rnoxdi(ndax*(icomp-1 )+
     #  inaz)-rci2(inaz,icomp)*rci2(inaz,icomp) + vzrox    
      else
         vzrox = 0. + vzrox
      endif      
      vzrox = pi * dzcnd2(inaz,icomp) * vzrox
      
c  Zr volume     
      if( wremzr(ndax*(icomp-1 )+inaz) .gt. 0. ) then
         vzr = 0.
         vzrox=0.0
      else
         vzr=pi*dzcnd2(inaz,icomp)*(rco2(inaz,icomp)**2-
     #        rci2(inaz,icomp)**2) - vzrox
      endif

c SS volume
      if( wremsr(ndax*(icomp-1)+inaz) .gt. 0. ) then
         vss = 0.
      else
         vss = pi* dzcnd2(inaz,icomp) *
     #   (rpel(inaz+(icomp-1)*inaz)**2-
     #    riss2(inaz,icomp)**2)
      endif

c initiation of SS oxidants       
      if(wrbszi(inaz,icomp,1).ge.0.0)then
        do l=1,3
        wssin = wssin+wrbszi(inaz,icomp,l)
        enddo
        do l=4,7
        wsoin = wsoin+wrbszi(inaz,icomp,l)
        enddo
      endif   
      
      vssin=wssin/sden(tclsur)
      vsoin=wsoin/soden(tclsur)
      aab=pi*riss2(inaz,icomp)**2
      agp=pi*(rci2(inaz,icomp)**2-rpel(inaz+(icomp-1)*ndax)**2)
      acl =pi*(rpel(inaz+(icomp-1)*ndax)**2-riss2(inaz,icomp)**2)
      agt=pi*(rco2(inaz,icomp)**2-rci2(inaz,icomp)**2)
      
c zr guide tube im = 1
      if( wfrozr(ndax*(icomp-1)+inaz) .le. 0. .and.
     #   (wremzr(ndax*(icomp-1 )+inaz).gt.0. .or. vzr.le.0.))goto 20
      if( tsur .ge. cliq .and. tsur0 .lt. cliq ) then
c melting of zr
         rzr = fnro( 1, cliq)
         czr = fncp( 1, cliq)
         rzri= fnro( 1, tsur)
         czri= fncp( 1, tsur)
         rczr= (rzr*czr*(cliq-tsur0) + rzri*czri*(tsur-cliq) + rzr
     +   *chefus) / (tsur - tsur0)
         tczr= fnk(1,cliq,1)
      else
         if( tsur .le. csol .and. tsur0 .gt. csol ) then
c refreezing of zr
            rzr = fnro( 1, csol)
            czr = fncp( 1, csol)
            rzri= fnro( 1, tsur)
            czri= fncp( 1, tsur)
            rczr= (rzr*czr*(tsur0-csol) + rzri*czri*(csol-tsur) + rzr
     +      *chefus) / (tsur0 - tsur)
            tczr= fnk(1,csol,1)
         else
c no crossing of solidus/liquidus temperatures
            rzr = fnro( 1, tsur)
            czr = fncp( 1, tsur)
            rzri= 0.
            czri= 0.
            rczr = rzr * czr
            tczr = fnk(1,tsur,1)
         endif
      endif
      vzr = vzr + wfrozr(ndax*(icomp-1)+inaz) / rzr
      wzr = vzr * rzr
c stainless steel (ss) cladding
c im = 2
   20 continue
      if( wfrosr(ndax*(icomp-1)+inaz).le.0. .and.
     #   (wremsr(ndax*(icomp-1)+inaz).gt.0. .or. vss.le.0.))goto 30
      if( tsur .ge. sliq .and. tsur0 .lt. sliq ) then
c melting of stainless steel cladding
         rss = fnro(18, sliq)
         css = fncp(18, sliq)
         rssi= fnro(18, tsur)
         cssi= fncp(18, tsur)
         rcss= (rss*css*(sliq-tsur0) + rssi*cssi*(tsur-sliq) + rss
     +   *shefus) / (tsur - tsur0)
         tcss= fnk(18,sliq,1)
      else
         if( tsur .le. ssol .and. tsur0 .gt. ssol ) then
c refreezing of ss cladding
            rss = fnro(18, ssol)
            css = fncp(18, ssol)
            rssi= fnro(18, tsur)
            cssi= fncp(18, tsur)
            rcss= (rss*css*(tsur0-ssol) + rssi*cssi*(ssol-tsur) + rss
     +      *shefus) / (tsur0 - tsur)
            tcss= fnk(18,ssol,1)
         else
c no crossing of solidus/liquidus temperatures
            rss = fnro(18, tsur)
            css = fncp(18, tsur)
            rssi= 0.
            cssi= 0.
            rcss= rss * css
            tcss= fnk(18, tsur,1)
         endif
      endif
      vss = vss + wfrosr(ndax*(icomp-1)+inaz) / rss
      wss = vss * rss
c zr/ss oxide
c im = 5
   30 continue
      if( vzrox .gt. 0.) then
         rszox = fnro( 5, tsur)
         cszox = fncp( 5, tsur)
         rcszox= rszox * cszox
         tcszox = fnk( 5, tsur,1)
      endif
c control rod neutron absorber material
c im = 6
      if(wremab(ndax*(icomp-1)+inaz).gt.0. .and.
     #     wfroab(ndax*(icomp-1)+inaz) .le. 0. ) goto 120
c no crossing of solidus/liquidus temperatures
         rab = fnro(20, tsur)
         cab = fncp(20, tsur)
         cabi= 0.
         rcab= rab * cab
         tcab= fnk(20, tsur,1)
      if( wremab(ndax*(icomp-1)+inaz) .le. 0. ) then
         wab = wabbng(inaz,icomp) +  wfroab(ndax*(icomp-1)+inaz)
      else
         wab =  wfroab(ndax*(icomp-1)+inaz)
      endif
      vab = wab / rab
c  calculation of volume of water/steam in axial zone.
  120 continue
      if( rcrst2(inaz,icomp) .ge. rco2(inaz,icomp) ) then
         rr = rcrst2(inaz,icomp)
      else
         rr = rco2(inaz,icomp)
      endif
      vtot = pi * rr*rr * dzcnd2(inaz,icomp)
      vwast = vtot - (vzr + vss + vzrox + vab)
      if ( vwast.le.0. ) then
         vwast = 0.
      else
         in = ( icmp-1 ) * nx + inaz
         ij = nvad(in) + filndx(4)
         if ( tsur.ge.satt(ij) ) then
            rws = rhog(ij)
            cws = csubpg(ij)
            tcws = thcong(ij)
         else
            rws = rhof(ij)
            cws = csubpf(ij)
            tcws = thconf(ij)
         end if
         rcws = rws * cws
      end if
c  computation of effective material properties for heatcn.
      sumcp = 0.
      sumk  = 0.
      if( vzr .gt. 0. ) then
        sumcp = sumcp + rczr*vzr
        sumk  = sumk  + vzr/tczr
      endif
      if( vss .gt. 0. ) then
        sumcp = sumcp + rcss*vss
        sumk  = sumk  + vss/tcss
      endif
      if( vzrox .gt. 0. ) then
        sumcp = sumcp + rcszox*vzrox
        sumk  = sumk  + vzrox/tcszox
      endif
      if( vab .gt. 0. ) then
        sumcp = sumcp + rcab*vab
        sumk  = sumk  + vab/tcab
      endif
      if( vwast .gt. 0. ) then
        sumcp = sumcp + rcws*vwast
        sumk  = sumk  + vwast/tcws
      endif
      
      
c create material number array for gaphtc3 in effhtc2
c 9: steam 20: absorber 18: stainless 304 1 : Zircaloy     
         do k =1,numelm2(inaz,icomp)
            mshmat(k) = mshmt3(k,inaz,icomp)
            if(mshmt3(k, inaz, icomp).eq.20)
     &                nrcrm2(inaz, icomp)=k+1
         end do  
c  computation of effective heat generation for heatc2.
      atot = vtot / dzcnd2(inaz,icomp)
      if( wremsr(ndax*(icomp-1)+inaz) .le. 0. ) then
c    control rod is intact      
         do 166 inode = 1, nrcrm2(inaz, icomp)-1
            rab = fnro( 20, tcond3(inode,inaz,icomp))
            cab = fncp(20, tcond3(inode,inaz,icomp))
            tcab= fnk(20, tcond3(inode,inaz,icomp),1)
            rcab = rab*cab
            effcp( inode) = rcab
            effk( inode) = tcab
            effgen(inode) =(poxab+qnuab)/aab
  166    continue
         if(wsscon(inaz,icomp,1).gt.0.)then
           do 200 inode = nrcrm2(inaz, icomp), 
     &               nrcond(ndax*(icomp-1)+inaz)-1
              rss = fnro( 18, tcond3(inode,inaz,icomp))
              css = fncp(18, tcond3(inode,inaz,icomp))
              rcss= rss * css
              tcss= fnk(18, tcond3(inode,inaz,icomp),1)
              effcp( inode) = rcss
              effk( inode)   = tcss
              effgen(inode) =poxcl/acl
  200    continue
           if(wrbszi(inaz,icomp,1).le.1.e-6)then
           do 266 inode =nrcond(ndax*(icomp-1)+inaz), 
     &          nrcldi2(inaz,icomp)-1
                 in = ( icmp-1 ) * nx + inaz
                 ij = nvad(in) + filndx(4)
                 effgen(inode) =0.0
                 if ( tcond3(inode,inaz,icomp).ge.satt(ij) ) then
                   rws = rhog(ij)
                   cws = csubpg(ij)
                   effcp(inode)=rws*cws
                   effk(inode)= thcong(ij)
                 else
                   rws = rhof(ij)
                   cws = csubpf(ij)
                   effcp(inode)=rws*cws
                   effk(inode) = thconf(ij)
                  endif
                  if(voidg(ij).ge.0.99)then
                      pres=p(ij)
                      thoxgt=oxdei(in)                   
                      call gaphtc3(hgap,keffgp,thkgp1,mshmat,
     &                                     inaz,pres,thoxgt)
                      effk(inode)=keffgp
                  endif   
  266       continue
           else
                 do 276 inode =nrcond(ndax*(icomp-1)+inaz), 
     &             nrcldi2(inaz,icomp)-1
                    rss = fnro( 18, tcond3(inode,inaz,icomp))
                    css = fncp(18, tcond3(inode,inaz,icomp))
                    rso = fnro(19, tcond3(inode,inaz,icomp))
                    cso = fncp(19, tcond3(inode,inaz,icomp))     
                    tcss= fnk(18, tcond3(inode,inaz,icomp),1)
                    effk(inode) = tcss                    
                    effcp(inode) = (rss*css*vssin+rso*cso*vsoin)
     &               /dzcnd2(inaz,icomp)/agp
                    effgen(inode) =0.0     
  276         continue
           endif
         else
           do 286 inode =  nrcrm2(inaz,icomp),
     &    nrcldi2(inaz,icomp)-1
               rss = fnro( 18, tcond3(inode,inaz,icomp))
               css = fncp(18, tcond3(inode,inaz,icomp))
               rso = fnro(19, tcond3(inode,inaz,icomp))
               cso = fncp(19, tcond3(inode,inaz,icomp))     
               tcss= fnk(18, tcond3(inode,inaz,icomp),1)
               effk(inode) = tcss                    
               effcp(inode) = (rss*css*vssin+rso*cso*vsoin)
     &               /dzcnd2(inaz,icomp)/(agp+acl)
               effgen(inode) =0.0     
  286   continue   
         endif                           
         do 366 inode = nrcldi2(inaz,icomp),nrods2(inaz,icomp)-1
            rzr = fnro( 1, tcond3(inode,inaz,icomp))
            czr = fncp( 1, tcond3(inode,inaz,icomp))
            rczr = rzr * czr
            tczr = fnk( 1, tcond3(inode,inaz,icomp),1)
            effcp( inode) = rczr
            effk( inode) = tczr
            effgen(inode) =poxgt/agt
  366    continue
      elseif(b4cox(inaz,icomp).ne.2)then
c    absorber material still be at the position      
         do 380 inode = 1, nrcrm2(inaz,icomp)-1
            rab = fnro( 20, tcond3(inode,inaz,icomp))
            cab = fncp(20, tcond3(inode,inaz,icomp))
            tcab= fnk(20, tcond3(inode,inaz,icomp),1)
            rcab = rab*cab
            effcp( inode) = rcab
            effk( inode) = tcab
            effgen(inode) =(poxab+qnuab)/aab
  380    continue
         do 390 inode =nrcrm2(inaz,icomp),
     &     nrcldi2(inaz,icomp)-1    
            ij = nvad(( icmp-1 )*nx +inaz) + filndx(4)    
            if ( tcond3(inode,inaz,icomp).ge.satt(ij) ) then                
               effcp( inode) =csubpg(ij)*rhog(ij)
            else
               effcp( inode) =csubpf(ij)*rhof(ij)
            endif       
            effk( inode) = 20.0 
            effgen(inode) =0.0
  390   continue
c      override if absorber cladding exist there    
        if(b4cox(inaz,icomp).eq.0)then
           do inode = nrcrm2(inaz,icomp), nrcond(ndax*
     &      (icomp-1)+inaz)-1
              rss = fnro( 18, tcond3(inode,inaz,icomp))
              css = fncp(18, tcond3(inode,inaz,icomp))
              rcss= rss * css
              tcss= fnk(18, tcond3(inode,inaz,icomp),1)
              effcp( inode) = rcss
              effk( inode) = tcss
              effgen(inode) =poxcl/acl
           enddo
       endif                             
       do inode=nrcldi2(inaz,icomp),nrods2(inaz,icomp)-1
c     still some zircaloy exist after relocation to consider radiation
c     heat transfer to other component
c     to stabilize temperature drop after the relocation       
            effcp(inode)=2.0e6
            effk( inode) = 20.0 
            effgen(inode) =0.0
       enddo                    
      else
c       empty node      
         do 400 inode = 1, nrods2(inaz,icomp)-1
            effcp(inode) = sumcp/vtot
            effk(inode) = vtot/sumk
            effgen(inode) = ( qnuab + poxfr ) / atot
  400    continue
      endif

      if(b4cox(inaz,icomp).eq.2)then
            do inode=1,nrods2(inaz,icomp)-1
                 effcp(inode)=2.e+6                  
                 effk(inode)=20.0 
                 effgen(inode)=0.0
            end do
      end if
     
      return
      end
*endif
