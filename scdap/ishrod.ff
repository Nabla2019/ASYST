*mlist
*if def,selap
      subroutine ishrod
c
c  Initialize data read in in rshrod routine.
c
c  Cognizant engineer: ewc.
c
c  Calling subroutine: rscdap
       implicit none
       include 'contrl.h'
       include 'comctl.h'
       include 'ufiles.h'
       include 'fast.h'
       include 'voldat.h'
       include 'cmatp.h'
       include 'scddat.h'
       include 'bconds.h'
       include 'debout.h'
       include 'scdout.h'
       include 'scdcom.h'
       include 'matdat.h'
       include 'ndxara.h'
       include 'tblsp.h'
       include 'fpnonv.h'
       include 'slbcom.h'
       include 'trnot1.h'
       include 'trnot2.h'
       include 'cons.h'
c local variables
       integer i,j,k
       integer iv,ive
       real snfrac,snmass,thkzr
       external rnodes
c  Set heat fluxes to 0.0.
       qclad(1) = 0.0
       qout2(1,icomp,1) = 0.0
c  Assume that oxidation occures at outer layer,
      rci2(1,icomp)=radmt3(nmater2(1,icomp),1,icomp)
      rco2(1,icomp)=radmt3(nmater2(1,icomp)+1,1,icomp)
      afuel2(1,icomp)=slbwd(icomp)*rco2(1,icomp)
      vfuel2(1,icomp)=afuel2(1,icomp)*dzcnd2(1,icomp)
      vfueli(icomp)=vfuel2(1,icomp)
c calculate inventory of tin per axial node.
      snfrac=0.015
      thkzr=rco2(1,icomp)-rci2(1,icomp)
      snmass=snfrac*zrden*slbwd(icomp)*thkzr
      if(thkzr.lt.1.e-5)snmass=0.0
      rl(icomp)=0.
      do 120 i=1,naz
       rl(icomp)=rl(icomp)+dzcnd2(i,icomp)
       fpstt(icomp,i,1)=dzcnd2(i,icomp)*snmass
  120 continue
c determine number of radial nodes in liner and insulator
      call rnodes(xcond3(1,1,icomp), radmt3(nmater2(1,icomp),1,icomp ),
     #      radmt3(nmater2(1,icomp),1,icomp),nrcond2(1,icomp),
     # nrcldi2(1,icomp),nrods2(1,icomp))
c save initial surface temperature for bundle timestep routine
      tsur2 (1,icomp) = tcond3( nrcond( 1 ),1,icomp )
c set initial outer & inner cladding radii
      rcos(icomp) = rco2( 1,icomp )
      rcoi2(1,icomp) = rcos(icomp)
      rcii(icomp)  = rci2(1,icomp)
c set ross (equiv. to pellet radius) to inner cladding radius
      rpel2( 1,icomp ) = rci2( 1,icomp )
c set initial number of radial elements
      numelm2(1,icomp) = nrods2( 1,icomp ) - 1
c loop through axial nodes reading and/or initializing all
c associated component variables
      do 50 i= 2,naz
ccma  moved the coding commented out to rshroud
c        radmt3( 1,i,icomp ) = 0.0
c        nmater2( i,icomp ) = nmater2( 1,icomp )
c        do  15  j = 1,nmater2( 1,icomp )
c            radmt3( j+1,i,icomp ) = radmt3( j+1,1,icomp )
c            imatr3( j,i,icomp )   = imatr3( j,1,icomp )
c   15   continue
ccmaend
        call rnodes(xcond3(1,i,icomp),radmt3(nmater2(i,icomp),i,icomp),
     &  radmt3(nmater2(i,icomp),i,icomp),nrcond2(i,icomp),
     &  nrcldi2(i,icomp),nrods2(i,icomp))
        numelm2(i,icomp) = nrods2(i,icomp) - 1
        rco2(i,icomp)    = rco2(1,icomp)
        rci2(i,icomp)    = rci2(1,icomp)
        rcoi2( i,icomp ) = rcoi2( 1 ,icomp)
        rpel2( i,icomp ) = rpel2( 1 ,icomp)
        afuel2(i,icomp)=slbwd(icomp)*rco2(i,icomp)
        vfuel2(i,icomp)=afuel2(i,icomp)*dzcnd2(i,icomp)
        vfueli(icomp)=vfueli(icomp)+vfuel2(i,icomp)
        qclad2(i,icomp)  = qclad2(1,icomp)
        qout2(i,icomp,1) = qout2(1,icomp,1)
c       do 40 j = 1,nqtim(icomp)
c         qslabt2( j,i,nsh ) = qslabt2( j,1,nsh )
c       enddo
        tsur2(i,icomp)  = tcond3( nrods2(i,icomp),i,icomp )
   50 continue
      do 60 i=1,naz
        wsrbng2(i,icomp)=0.
        wzrbng2(i,icomp)=0.
        wzobng2(i,icomp)=0.
        do 60 j=1,nmater2(i,icomp)
          if(imatr3(j,i,icomp).eq.1)then
            wzrbng2(i,icomp)=wzrbng2(i,icomp)+dzcnd2(i,icomp)*zrden*
     #       slbwd(icomp)*(radmt3(j+1,i,icomp)-radmt3(j,i,icomp))
          else
            wsrbng2(i,icomp)=wsrbng2(i,icomp)+dzcnd2(i,icomp)*
     #       slbwd(icomp)*(radmt3(j+1,i,icomp)-radmt3(j,i,icomp))*
     #       tro(1,imatr3(j,i,icomp))
          endif
   60 continue
c initialization of embedded flow channels
      if(nodech(icomp).ne.0)then
        iv = filndx(4)
        ive = iv + nvols(iv)*ivskp - 1
        do 90 i=1,naz
          do 70 k = iv,ive,ivskp
            if (khydch(i,icomp) .eq. volno(k)) go to 80
   70     continue
          write (output,75) icomp,i,khydch(i,icomp)
   75 format ('0******** scdap component',i3,', axial level',i3,
     &' references a non-existent hydrodynamic volume, ',i9,'.')
           fail=.true.
           goto 90
   80      nvechn(i,icomp) = k - iv
   90   continue
      endif
cljs  add oxide layer to outer metallic layer
        do i=1,naz
        nmater2(i,icomp)=nmater2(i,icomp)+1
cljs    imatr3(nmater2(i,icomp),i,icomp)=5
        imatr3(nmater2(i,icomp),i,icomp)=1
        radmt3(nmater2(i,icomp)+1,i,icomp)=
     &  radmt3(nmater2(i,icomp),i,icomp)
        radmt3(nmater2(i,icomp),i,icomp)=
     &  radmt3(nmater2(i,icomp)+1,i,icomp)-2.5e-6
        end do
      return
      end
*endif
