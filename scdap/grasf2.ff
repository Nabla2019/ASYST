*mlist
*if def,selap
       subroutine grasf2(iquit,itran,kraph,cik,acae,
     & prfk,gsgen,gout,sv,dis,dlmo,ato,tliqs,tcap,grira
     & ,hh,fpivr,rj,fgrk,err,tk,vlm,buk,rad,fgrmgo,iliq,cc)
c
c  Descriptive sentence goes here.
c
c  Cognizant engineer: ljs.
c
       implicit none
c
c  Local variables.
       integer iquit,itran,kraph,iliq
       real cik,acae,prfk,gsgen,gout,sv,dis,dlmo,ato,tliqs,tcap,grira,
     * hh,fpivr,rj,fgrk,err,tk,vlm,buk,rad,fgrmgo,cc
       integer ierrcn
       data ierrcn/0/
      dimension cik(15),gsgen(5),gout(6),sv(4),dis(16),rj(17)
     +,fgrk(4),err(4),fpivr(5),dlmo(4),ato(4),grira(5),rad(4)
     +,savg(4),dist(16),rd(4),cc(5)
*call grsparg
*call grsprg
*call grsgra1
*call grsgra4
*call ufiles
       real bvse,bvsl,bvsf
      equivalence (bvsl,rkj(6)),(bvsf,rkj(12)),(bvse,rkj(18))
      dimension ginj(5),gsrj(6),nami(12)
       integer i,i1,ilq,imx1,jx,k,kinc,l,m,n,ncrk,nm3
       real acaen,dist,dpwd,ginj,gsgens,gsrj,rd,rggj,rgpj,savg
      character*4 nami
      external grs1,grs2,rdcal
c
      data nami/'tel ','il  ','csl ','csil','tef ','if  ',
     +'csf ','csif','tee ','ie  ','cse ','csie'/
c     grasf2 is the main control subroutine for the paragrass
c     subroutine package; the following is a list of the input,
c     output, and local variables relative to the subroutine
c     package.
c
c     input variables
c     itran   itran = 0: steady state mode
c     itran   itran = 1: transientmode
c     pow     linear power in axial sections
c     tkav    average temperature of regions
c     prso    average hydrostatic pressure in regions
c     plemp   plenum pressure
c     rs      radius of the boundary of the region
c     poros   average fractional porosity in region
c     grsiz   average grain diameter in region
c     local variables
c     rs(2)   radii of the two boundaris of region
c     ts(2)   temperatures of the two boundaries of region
c     porxs   average fractional poroxity in region
c     delt    time step
c     volume  volume of the region
c     area    surface area of annular region through which
c             fission products are migrating
c     prfold  pore interlinkage probability fraction during
c             the previous time step
c     tgrad   temperature gradient in region
c     dtdt    heating rate in region
c     gsin    the fission gas generation rate
c     tfpv    fission rate (# of fissions/s/vol)
c     grd     grain size
c     dcie    fission-enhanced diffusion coefficient
c     savg    average number of gas atoms/bubble
c     rad     bubble radii
c     req     equilibrim bubble radius
c     pex     bubble over-pressure
c     bdbble  intragranular diffusion coef of atoms and bubbles
c     bdsurf  diffusion coef for bubble movement based on surface
c             tension
c     bvsurf  bubble velocity based on surface diffusion
c     bdevcd  bubble diffusibility due to an evaporation -
c             condensation mechanism
c     bvevcd  bubble velovity for above
c     bdmodl  semi-empirical/phenomenological diffusion coef
c     bvmodl  bubble velocity based on bdmodl
c     ltce    gas atom and gas bubble concentration in lattice
c     face, edge
c             gas bubble concentrations inlattice, grain faces and
c             edges, tesp.
c     buk     fractional burnup
c     randa   fraction of gas arriving at faces due to random
c             diffusion of gas atoms
c     biasa   same as above, but for biases diffusion
c     randb   fraction of bubbles arriving at faces due to random
c             diffusion of bubbles
c     biasb   same as above, but for biased diffusion
c     fgbs    fraction of gas arriving at faces due to grain bdry
c             sweeping
c     rpin    fraction of retained intragranular fission gas that
c             resides in bubbles
c     bvkj    total strain due to gas bubbles
c     gasmgo  gas migration out of annular region
c     gbs     rate of intergranular gas release due to grain bdry
c             sweeping mechanism
c     bvliq   bubble velocity due to viscous rise in a liquid medium
c     bdvol   bubble diffusibility due to volume diffusion in a
c             liquid volume
c     bvvol   velocity of bubbles due to volume diffusion in a
c             liquid medium in the presence of a temp gradient
c     egre    rate of gas migration from grain faces to edges due to
c             grain face channel formation
c     eprf    number of as atoms released due to increased edge
c             tunnel interconnection
c     prf     pore interlinkage probability fraction at end of
c             current time step
c     tkio    prevcious value of tkav
c     alpha   fractional coverage of grain bdry area per unit vol by
c             microcracks
c     acaen   separated grain bdry area per unit vol
c     gamma   surface tension of uo2
c     fgr(5)  fractional release of fission gases
c     gou(5)  fission gas released
c     fgbaob  fraction of grain face area per unit vol covered by
c             bubbles
c     cc(5)   convergence criteria for the fission gases
c     tav     time for which integration has beeb completed
c     h       current time increment
c     hh      current upper limit on the value of h
c     hnxt    suggested value for next time increment
c     bvs     average swelling strain
c     ilq     flag indicating current state of liquefaction
c     tcap    time elapsed since clad wetting
c     tliqs   time required for liquefaction front to move across
c             pellet radius
c     fgrmgo  fraction of generated gas release due to long range
c             migration processes
c
c     output variables
c     rj(5)    fission gas retained
c     gout(5)  fission gas released
c     gsgen(5) fission gas generated
c     err(5)   errors in the computation of rj(5) and gout(5)
c     fgrk(5)  fractional release of fission gases
c     fpivr(5) ration of fission gas stored intrangranular to
c              fission gas generated
c
c
c     in J. Rest's model, the concentration of gas atoms, Cg, within
c     the spherical grain satisfies a diffusion equation; the
c     spherical grain is divided into two concentric spheres of aprrox.
c     equal vol, i.e. regions 1 and 2.
c     for region 1, Cg = c1*(0.64-a**2)/0.48 + c2*(a**2-0.16)/0.48
c     for region 2, Cg = 5*c2*(10a**2-19a+9)+10c3*(18a-10a**2-8)
c     where a = 2*dist. from origin/grain size
c     for Xe or Kr, cik(1)=c1, cik(2)=c2, cik(3)=c3
c     for Te, cik(4,5,6)=c1,2,3
c     for I, cik(7,8,9) = c1,2,3
c     for Cs, cik(10,11,12)=c1,2,3
c     for CsI, cik(13,14,15) = c1,2,3
      k=1
ccc   ts0pd=w(1)+delt
      del9=delt*.9999999
      nprint=4
      if(nprint.le.1) go to 490
  490 alpha=0.
      iinv=0
      if(icl.ne.0) gout(2)=gout(6)
      jx=1
      ncrk=0
      if(ncrk.ne.0.and.iliq.gt.0.and.iliq.lt.6) iliq=-4
      if(iliq) 505,506,492
  492 if(iliq.gt.1) go to 495
      if(tk.lt.tkliq) go to 506
      t3=56700.  /rcv
      t1= exp(t3/tk)
      t2=(rs(2)-rs(1))**2
      tliqs=t1*xmlt*xmlt/(4.  *1.15  )+t2*8.  *vis/(gammal*cd)
      iliq=2
      go to 508
  495 if(iliq.gt.4) go to 500
      if(tk.ge.tkdis) go to 502
      if(tk.ge.tksol) go to 508
      sv(4)=sv(3)
      go to 504
  500 if(iliq.eq.6) go to 502
      if(tk.lt.tksol) go to 504
      if(iliq.eq.7.or.tk.lt.tkdis) go to 508
  502 iliq=7
      hh=min(hh,5.e-2)
      grsk=rs(2)
      t1=dis(2)+dis(3)+dis(4)
      t2=sv(2)
      sv(2)=(t2*dis(2)+sv(3)*dis(3)+
     +sv(4)*dis(4))/t1
c     initialize bubble radii
      rad(2)=rad(2)*(sv(2)/t2)**third
c     initialize bubble distribution array
      dis(2)=t1+dis(1)/sv(2)
      dis(1)=0.
      dis(3)=0.
      dis(4)=0.
      do 503 n=5,8
      dis(n)=dis(n)+dis(n+4)+dis(n+8)
      dis(n+4)=0.
  503 dis(n+8)=0.
      go to 505
  504 iliq=-iliq
  505 tcap=0.
      tliqs=0.
  506 tcp=0.
  508 continue
      if(kraph.gt.0) go to 514
      hh=100.
      powo=pow
      tko=tk
  514 dpwd=(pow-powo)/delt
      if(ncrk.eq.0)acae=0
      if(ncrk.ne.0) acae=(acon+acon)*alp/grsk
      if(icl.ne.0) gout(2)=gout(6)
      volume=vlm
      va=volume/avn
      dtdt=(tk-tko)/delt
      prsg=prso
      hs=prsg*pdsc
      if(hs.le.0.  ) hs=1.e-3
      tgrad=tgr
      pr1=bvcrit-max(0.  ,porxs-ptpl)
      cnvf=(1.  -porxs)*atw
      xdis=(rs(2)-rs(1))*.5
      do 515 n=1,5
      ginj(n)=0.
  515 gsrj(n)=0.
      gsrj(6)=0.
      taua=0.
  525 kprint=1
      do 528 n=1,4
      rd(n)=rad(n)
  528 savg(n)=sv(n)
      imx1=16
      do 531 n=1,imx1
  531 dist(n)=dis(n)
      acaen=acae
  535 t1=delt-taua
      hnxt=t1+t1
      h=min(t1,hh,xdl(itran+1))
      if(.not.(h+taua.lt.del9.and.h+h+taua.gt.delt)) go to 536
      if(h.lt.t1*.8  ) t1=t1*.5
      h=t1
  536 ht=h+taua
      if(ht.lt.del9) go to 537
      ht=delt
      if(nprint.gt.2) kprint=2
  537 ilq=iliq
      nlq=1
      if(ilq.lt.0) go to 540
      zig2=sig2
      if(ilq.le.1) go to 541
      tcp=tcap+ht
      if(ilq.ne.2) go to 538
      if(tcp.lt.tliqs) go to 541
      ilq=3
      acaen=0.
      t1=dist(3)+dist(4)
      t2=savg(3)
      savg(3)=(savg(3)*dist(3)+savg(4)*dist(4))/t1
      rd(3)=rd(3)*(savg(3)/t2)**third
      dist(3)=t1
      dist(4)=0.
      do 5379 n=9,12
      dist(n)=dist(n+4)+dist(n)
 5379 dist(n+4)=0.
  538 nlq=2
  539 kinc=2
      go to 542
  540 nlq=2
      zig2=sq25*1.e2
  541 if(kgrad.ne.0) go to 539
      kinc=1
  542 nr4=4
      if(ilq.ge.3) nr4=3
      if(abs(ilq).ge.6) nr4=2
      nr41=nr4-1
      nr3=(nr4+1)/2+1
      gbs=0.
      tkio=taua*dtdt+tko
      tki =  ht*dtdt+tko
      area=ara(kinc)
c     computes gsin - the fission gas generation rate
c     tfpv - fission rate (# of fissions/s/vol)
      tfpv=max(ht*dpwd+powo,0.  )*tfp
cc     tfpv=pow*tfp
      do 544 n=1,5
  544 gsin(n)=tfpv*fgpf(n)
c  According to Dr. Jeff Rest of Argonne Nat'l Lab, vers. 50531 is using
c  an incorrect chemistry model for the formation of CsI.  The vers.
c  allows CsI to form in the solid phase (condensation of vapor) even in
c  the absence of any reaction site, the gas bubbles.  In later versions
c  of Paragrass, this problem does not exist because CsI in those vers.
c  can only form in gas bubbles.  Jeff said his calculations in later
c  versions show very little CsI is being formed even in low temps.  He
c  therefore recommends sequestering of CsI formation by using a large
c  equilibrim constant, the eqkc variable in GRASF2.
       eqkc=10.*cnvf/exp(.001*eq1/tki+.001*eq2)
      gsin(6)=0.
      grd=grsk
c     set up the bubble distribution array, y(i)
      do 545 n=1,imx1
  545 y(n)=dist(n)
c
c     update bubble radii
      call rdcal(rd,savg,ato,dlmo,ilq)
c     solves the diffusion eq. for Cg
      call grs1(rd,savg,cik,prfk,acaen,jx,ilq,itran)
c     solves the coupled system of ode's for y(i)
      call grs2(rd,savg,grira,cc)
c
      if(h.gt.0.  ) go to 550
      if(h.le.(-1.e-4)) go to 548
      iquit=1
      return
  548 hh=-h*.5
      go to 525
  550 do 555 n=1,imx1
  555 dist(n)=y(n)
c     compute fission gas generated
      gsgens=0.
      do 559 n=1,5
      gsgen(n)=gsgen(n)+dgi(n)
      gsgens=gsgens+gsgen(n)
  559 ginj(n)=ginj(n)+dgi(n)
c     compute fission gas released
      do 560 n=1,6
      gout(n)=gout(n)+dgs(n)
  560 gsrj(n)=gsrj(n)+dgs(n)
      prfk=prf3
      grsk=grd
      buk=buk+tfpv*h/cnvf
      do 565 i=1,15
  565 cik(i)=cin(i)
      if(ilq.eq.3) ilq=4
      iliq=ilq
      do 570 n=1,nr4
      rad(n)=rd(n)
  570 sv(n)=savg(n)
      do 572 n=1,imx1
  572 dis(n)=dist(n)
      acae=acaen
      fgrmgo=fgrmgo+gasmgo
      if(hnxt.gt.hh) hh=hnxt
      taua=ht
      if(ht.lt.delt) go to 535
      if(ilq.gt.1) tcap=tcp
      powo=pow
      tko=tk
ccc   w(3)=w(3)+gsrj(1)
      nprint=1
      if(nprint.lt.2) go to 720
      do 574 n=1,5
      i1=n
      if(n.eq.5) i1=3
      t1=gsgen(i1)
      if(t1.gt.0.  ) t1=1.  /t1
  574 fr(n)=gout(n)*t1
      rj(1)=0.
      do 575 i=1,4
      sumbn(i)=y(i)*savg(i)*va
  575 rj(1)=rj(1)+sumbn(i)
      rggj=sumbn(3)
      rgpj=sumbn(4)
      bvsl=pi43*(y(1)*rd(1)**3+y(2)*rd(2)**3)
      bvsf=pi43* y(3)*rd(3)**3
      bvse=pi43* y(4)*rd(4)**3
      bvkj=bvsl+bvsf+bvse
      do 578 n=2,5
  578 rj(n)=y(n+3)+y(n+7)+y(n+11)
      rj(3)=rj(3)+rj(5)
      rj(4)=rj(4)+rj(5)
      m=8
      do 579 n=1,3
      rj(n+5)=y(m-3)
      rj(n+8)=y(m-2)+y(m)
      rj(n+11)=y(m-1)+y(m)
      rj(n+14)=y(m)
  579 m=m+4
      do 580 n=2,17
  580 rj(n)=rj(n)*va
      rj(16)=sumbn(1)+sumbn(2)
      if(kprint.eq.1) go to 595
      t1=sumbn(2)
      sumbn(2)=sumbn(2)+sumbn(1)
      rpin=1.
      if(sumbn(2).gt.0.  ) rpin=t1/sumbn(2)
      ratio=(rs(1)+rs(2))*.5  /rs(2)
      t1=rj(1)
      if(t1.gt.0.  ) t1=1.  /t1
      i=1
      do 584 n=2,4
      rkj(i)=sumbn(n)*t1
  584 i=i+6
      m=5
      do 591 n=2,5
      l=n+12
      t2=rj(n)
      if(t2.gt.0.  ) t2=1.  /t2
      do 588 i=n,l,6
      m=m+1
  588 rkj(i)=rj(m)*t2
  591 continue
      t1=1.e-50
      do 592 n=1,5
  592 t1=t1+grira(n)
      do 593 n=1,5
  593 wa2(n)=grira(n)/t1
c
      do 594 n=1,4
  594 write (output,1015) k,nami(n),y(n+4),ym(n+4),nami(n+4),y(n+8),
     * ym(n+8),nami(n+8),y(n+12),ym(n+12)
 1015  format (7h region,i2,3(2x,a,1p,2e12.4))
  595 l=-1
      do 620 n=1,5
      frj(1,n)=gsrj(n)
      wa2(n)=0.
      if(fr(n).gt.0.  ) go to 612
      do 610 m=2,6
  610 frj(m,n)=0.
      go to 620
  612 t3=fr(n)/gout(n)
      frj(3,n)=fr(n)
      t1=delt*(rj(n)+gsrj(n))
      if(t1.gt.0.  ) wa2(n)=gsrj(n)/t1
      if(n.gt.1) go to 614
      frj(4,1)=min(1.  ,(rj(1)-rggj-rgpj)/gsgen(1))
      frj(5,1)=rggj/gsgen(1)
      frj(6,1)=rgpj/gsgen(1)
      go to 618
  614 do 616 m=4,6
  616 frj(m,n)=rj(m+l)*t3
  618 if(n.eq.5) go to 620
      m=n
      if(n.eq.2) m=6
      frj(2,n)= abs(rj(n)+gout(m)-gsgen(n))*t3
  620 l=l+3
ccc   frj(2,5)=w(3)
      t1=0.
      if(gsgen(1).gt.0.  ) t1=fgrmgo/(avn*gsgen(1))
  720 continue
c     compute fission gas remaining in fuel
      rj(1)=0.
      do 675 i=1,4
         sumbn(i)=y(i)*savg(i)*va
 675     rj(1)=rj(1)+sumbn(i)
      rj(2)=(y(5)+y(9)+y(13))*va
      rj(3)=(y(6)+y(8)+y(10)+y(12)+y(14)+y(16))*va
      rj(4)=(y(7)+y(8)+y(11)+y(12)+y(15)+y(16))*va
      rj(6)=y(5)*va
      rj(9)=(y(6)+y(8))*va
      rj(12)=(y(7)+y(8))*va
      rj(16)=sumbn(1)+sumbn(2)
      ncrk=0
      do 820 n=1,4
         if(gsgen(n).gt.0.)goto 815
c     compute fractional release of fission gases
         fgrk(n)=0.
         fpivr(n)=0.
         err(n)=0.
         goto 820
  815    fgrk(n)=gout(n)/gsgen(n)
c
         nm3=3*n
         if(n.eq.1)nm3=16
         fpivr(n)=min(1.0,rj(nm3)/gsgen(n))
         l=n
         if(l.eq.2)l=6
c        compute error within paragrass
         err(n)=abs(rj(n)+gout(l)-gsgen(n))/gsgen(n)
         if(tki .ge. 2200.0)ierrcn = ierrcn + 1
         if (tki .lt. 2200.0 .and. ierrcn .lt. 1) then
         if(err(n).lt.2.2)goto 820
         ierrcn = ierrcn + 1
         err(n)=err(n)*100.
         write (output,2002)n,err(n)
 2002  format ('0$$$$$$$$ Warning in paragrass, n=',i4,'herr=',1p,e16.7)
         end if
  820 continue
      return
      end
*endif
