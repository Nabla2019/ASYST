*mlist
*if def,selap
      subroutine mxitr2(nr,na,n,n2,a,b,c,d,u,r2,repeat)
c
c
c  mxitr2 solves a strongly diagonally dominant matrix equation by point
c  Jacobi iterations after diagonal dominant enhancement by one odd-even
c
c  Cognizant engineer: ssa.
c
       implicit none
*call ufiles
       integer nr,na,n,n2
       real a(n+1),b(n),c(n+1),d(n+1),r2(n2),u(n+2)
       integer repeat
c
c  Programmer/engineer: Art Shieh (208) 526-9460
c
c  input variables:
c           a - subdiagonal array
c           b - diagonal array
c           c - superdiagonal array
c           d - right hand side
c           na = the number of axial levels
c           nr = the number of radial nodes
c           n = na*nr
c  output variables: u - solution vector
c                   repeat - success indicator
c                   repeat = 0, success
c                   repeat = 1, solve again with direct solver
c
c  Local variables.
       integer i,icr,jj,jn,k,nn
       real sum,tol
c
      repeat = 0
      jj = 1
      jn = na
      do 1 i = 1,nr
         a(jj) = 0.
         c(jn) = 0.
         jj = jj + na
         jn = jn + na
   1  continue
      do 3 i = 1,n
         a(i) = a(i)/b(i)
         c(i) = c(i)/b(i)
         d(i) = d(i)/b(i)
   3  continue
      a(n+1) = 0.
      c(n+1) = 0.
      d(n+1) = 0.
      u(n+1) = 0.
      u(n+2) = 0.
      i = 2
      nn = n/2
      do 5 k = 1,nn
         b(i) = 1 - a(i)*c(i-1) - a(i+1)*c(i)
         d(i) = d(i) - a(i)*d(i-1) - c(i)*d(i+1)
         a(i) = -a(i-1)*a(i)
         c(i) = -c(i)*c(i+1)
         i = i + 2
   5  continue
      i = 2
      do 6 k = 1,nn
         a(i) = a(i)/b(i)
         c(i) = c(i)/b(i)
         d(i) = d(i)/b(i)
         i = i + 2
   6  continue
      icr = 10
      tol = 1.0e-04*n
 101  continue
      r2(1) = d(2) - c(2)*u(4) - u(2)
      do 10 i = 2,n2
         r2(i) = d(2*i) - u(2*i) - a(2*i)*u(2*i-2) - c(2*i)*u(2*i+2)
  10  continue
      sum = r2(1)*r2(1)
      do 20 i = 2,n2
         sum = sum + r2(i)*r2(i)
  20  continue
      if(sum.lt.tol)goto 100
      do 30 i= 1,n2
          u(2*i) = u(2*i) + r2(i)
  30  continue
      icr = icr - 1
      if(icr.gt.0)goto 101
c**nonconverging solution
      write(output,*)'0******nonconverging in mxitr2 after 10 itrs.'
      repeat = 1
 100  continue
      u(1) = d(1) - c(1)*u(2)
      do 55 i = 3,n/2*2-1,2
         u(i) = d(i) - a(i)*u(i-1) -c(i)*u(i+1)
  55  continue
      if(mod(n,2).eq.1)u(n) = d(n) - a(n)*u(n-1)
      return
      end
*endif
