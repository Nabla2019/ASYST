*mlist
*if def,selap
       subroutine  cfdamg (denuo2,dzcond,naz,rco,rnoxd,zoxden,vfuel,
     * wbotuo,wbotzr,wfrouo,wfrozr,woxzr,woxzrc,wremuo,
     + wremzr,wuobng,wuo2,wzobng,wzrbng,ndisrp,wuorem,wuomlt,
     + nuflg,nzrflg,uo2ms,uo2nm,zrms,zro2ms)
c
c
c  summarize any solid debris accumulated from fuel component due to
c  liq'n. and solid'n., frag'n. and fuel relocation.
c
c  Cognizant engineer: ewc (sth ghb).
c
c     calling subroutines: fuelan
c
c     input variables                  description
c        denuo2         fabricated density of uo2 (kg/m3)
c        dzcond         height of heat conduction axial node  (m)
c        naz            number of heat conduction axial zones
c        ndisrp         general nodal disruption flag
c        rco            radius to outside cladding surface  (m)
c        rnoxd          inner radius or leftmost coordinate of outer
c                         oxide layer (m)
c        vfuel          volume of fuel in axial zone at end of time step
c                          (m3)
c        wbotuo         mass of uo2 which has dripped below bottom of
c                         fuel rod  (kg)
c        wbotzr         mass of zr which has dripped below bottom of
c                         fuel rod  (kg)
c        wfrouo         mass of uo2 which has dripped into axial zone
c                         and frozen there  (kg)
c        wfrozr         mass of zr which has dripped into axial zone and
c                         frozen there  (kg)
c        woxzr          mass of oxygen absorbed by in situ zr layer in
c                         axial zone.(kg)
c        woxzrc          mass of oxygen in solidified zr-u-o in axial
c                         zone. (kg)
c        wremuo         mass of uo2 removed from axial zone by
c                         dissolution and flow  (kg)
c        wremzr         mass of zr removed from axial zone by
c                         liquefaction and flow  (kg)
c        wuo2           weight of dissolved uo2
c        wuobng         mass of uo2 at the beginning of scdap analysis
c                         for fuel component  (kg)
c        wzobng         mass of zro2 at the beginning of scdap analysis
c                         (kg)
c        wzrbng         mass of zr at the beginning of scdap analysis
c                         for fuel component  (kg)
c        zoxden         density of zro2 (kg/m3)
c        zrden          density of zircaloy (kg/m3)
c
c     output variables                 description
c        nuflg          indicator of uo2 mass balance calculation,
c                         0=mass balanced, 1=mass not balanced
c        nzrflg         indicator of zr mass balance calculation, 0=mass
c                         balanced, 1=mass not balanced
c        uo2ms          total uo2 mass at axial zone  (kg)
c        uo2nm          mass of uo2 which has not yet melted in axial
c                         zone   (kg)
c        zrms           total zr mass at axial zone  (kg)
c        zro2ms         total zro2 mass at axial zone  (kg)
c
c     local variables                  description
c        dfuo2          fractional change in uo2 mass
c        dfzr           fractonal change in zr mass
c        tluo2          current mass of uo2
c        tluo20         original mass of uo2
c        tlzr           current mass of zr
c        tlzr0          original mass of zr
c        wbalim         tolerance on fractional change in masses
c        wtfro2         reciprocal of weight fraction of o2 in zro2
c        wtfrzr         weight fraction of zr in zro2
c
       implicit none
*call cons
*call scddat
c
c  Local variables.
       integer naz,ndisrp,nuflg,nzrflg
       real denuo2,dzcond,rco,rnoxd,zoxden,vfuel,wbotuo,wbotzr,wfrouo,
     * wfrozr,woxzr,woxzrc,wremuo,wremzr,wuobng,wuo2,wzobng,wzrbng,
     * wuorem,wuomlt,uo2ms,uo2nm,zrms,zro2ms
      dimension     dzcond( ndax ), rco   ( ndax ), rnoxd ( ndax ),
     +              vfuel ( ndax ), wfrouo( ndax ), wfrozr( ndax ),
     +              woxzr ( ndax ), woxzrc( ndax ), wremuo( ndax ),
     +              wremzr( ndax ), wuobng( ndax ), wzobng( ndax ),
     +              wzrbng( ndax ), wuorem( ndax ), wuomlt( ndax ),
     +              ndisrp( ndax ),
     +              uo2ms ( ndax ), uo2nm ( ndax ), wuo2  ( ndax ),
     +              zrms  ( ndax ), zro2ms( ndax )
c
       integer i
       real piroz2,wbalim,zro2o2,tlzr,tlzr0,tluo2,tluo20,dfuo2,dfzr,
     * wtfrzr
c
c calculate pi*densities which are repeatively used in mass equations
      piroz2 = pi * zoxden
c pre-set the weight fraction of zr in zro2
      wtfrzr = .7403
c pre-set the ratio of zro2 mass to o2 mass
      zro2o2 = (91.22 + 32.0) / 32.0
c set criteria limit for the mass balance calculations
      wbalim = 0.03
c  initialize mass balance indicators to zero.
      nuflg  = 0
      nzrflg = 0
c  initialize all nodal masses to zero.
      do  50  i = 1,naz
          uo2ms(i)  = 0.0
          uo2nm(i)  = 0.0
          zro2ms(i) = 0.0
          zrms(i)   = 0.0
   50 continue
c calculate total mass of materials at each axial zone
      do  100  i = 1 , naz
       uo2ms(i)=vfuel(i)*denuo2
       uo2nm(i)=wuobng(i)-wremuo(i)-wuorem(i)
          zro2ms(i) = dzcond(i) * piroz2 *
     +                  (rco(i) ** 2 - rnoxd(i) ** 2 ) +
     +                  (woxzrc(i) + woxzr(i)) * zro2o2
          zrms  (i) = wzrbng(i) - ( zro2ms(i) - wzobng(i)) * wtfrzr
     +                   + wfrozr(i) - wremzr(i)
  100 continue
c eliminate negative material masses at each axial zone
      do  200  i = 1 , naz
          if (uo2ms(i)  .lt.  0.0) uo2ms  (i) = 0.0
          if (uo2nm(i)  .lt.  0.0) uo2nm  (i) = 0.0
          if (zro2ms(i) .lt.  0.0) zro2ms (i) = 0.0
          if (zrms(i)   .lt.  0.0) zrms   (i) = 0.0
  200 continue
c  perform mass balance calculation.
      tluo20 = wuobng(1)
      tluo2  = uo2ms(1)
      tlzr0  = wzrbng(1)
      tlzr   = zrms(1) + zro2ms(1) * wtfrzr
      do  300  i = 2 , naz
          tluo20 = tluo20 + wuobng(i)
          tlzr0  = tlzr0 + wzrbng(i)
          tluo2  = tluo2 + uo2ms(i)
          tlzr   = tlzr + zrms(i) + zro2ms(i) * wtfrzr
  300 continue
      tluo2  = tluo2 + wbotuo
      tlzr   = tlzr + wbotzr
c calculate the fractional change of total masses with respect to
c the total beginning masses
      dfuo2  = (tluo20 - tluo2 ) / tluo20
      dfzr   = ( tlzr0 - tlzr ) / tlzr0
      if  ( abs( dfuo2 )  .ge. wbalim )     nuflg  = 1
      if  ( abs( dfzr )   .ge. wbalim )     nzrflg = 1
c evaluate potential for reflood shattering
      call shattr
      return
      end
*endif
