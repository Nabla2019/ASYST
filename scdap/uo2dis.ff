*mlist
*if def,selap
      subroutine uo2dis (temp, fzr, fo, fuo2ds)
c
c  uo2dis determines the maximum atomic fraction of UO2 that can be
c  dissolved in a U-Zr-O solvent for a given temperature and solvent
c  composition, corresponding to the solidus composition of the
c  UO2-solvent isopleth.
c
c  Cognizant engineer: ewc (dlh).
c
c     point 1 - equation #1      point 2 - equation #5
c     point 3 - equation #11     point 4 - equation #12
c     point 5 - equation #14     point 6 - equation #15
c     point 7 - equation #16
c
c     temp   = input temperature (k)
c     fzr    = input zirconium atomic fraction of solvent
c     fo     = input oxygen atomic fraction of solvent
c     fuo2ds = output atomic fraction uo2 dissolved in solvent
c
       implicit none
*call ufiles
c
       real temp,fzr,fo,fuo2ds
       integer npoint
      dimension npoint(4)
c
c  Local variables.
       integer index
       real a,asol,b,bsol,cos60,denom,enume,fos,fzrs,sin60,x1,x2,xint,
     * xl,xr,y1,y2,yint,yl,yr
       external uo2sol
c
      if (temp .lt. 2173) then
c
         fuo2ds = 0.0
         return
c
      else if (temp .gt. 2809) then
c
         fuo2ds = 1.0
         return
c
      end if
c
c        Convert composition endpoints to cartesian coordinates and
c        determine slope and intercept of composition line
c        (solid composition is hardwired to uo2 here but could be input)
c
         fos = 0.666666667
         fzrs = 0.0
         cos60 = 0.5
         sin60 = 0.866025404
         x1 = fzrs + fos*cos60
         y1 = fos*sin60
         x2 = fzr + fo*cos60
         y2 = fo*sin60
         a  = (y2 - y1) / (x2 - x1)
         b  = (x2*y1 - x1*y2) / (x2 - x1)
c
c        set points that are connected to form the solidus boundary
c
         if (temp .lt. 2248) then
            npoint(1) = 4
            npoint(2) = 2
            npoint(3) = 1
            npoint(4) = 0
         else if (temp .lt. 2673) then
            npoint(1) = 4
            npoint(2) = 1
            npoint(3) = 0
         else if (temp .lt. 2700) then
            npoint(1) = 5
            npoint(2) = 1
            npoint(3) = 0
         else
            npoint(1) = 7
            npoint(2) = 5
            npoint(3) = 6
            npoint(4) = 0
         end if
c
c        Determine the right most solidus point, then loop through the
c        solidus line segments from right to left until an intersection
c        between the composition line and solidus boundary is found.
c        If no intersection is found then assume total dissolution
c
         call uo2sol (3, temp, xr, yr)
         index = 1
c
  100    continue
         if (npoint(index) .gt. 0) then
            call uo2sol (npoint(index), temp, xl, yl)
            asol = (yr - yl) / (xr - xl)
            bsol = (xr*yl - xl*yr) / (xr - xl)
            xint = (bsol - b) / (a - asol)
c
            if ((xint .ge. xl) .and. (xint .le. xr)) then
               yint = a*xint + b
            else
               index = index + 1
               xr = xl
               yr = yl
               go to 100
            end if
         else
            write (output,'(10x,''possible error in subroutine uo2dis'')
     *')
            xint = x1
            yint = y1
         end if
c
c        Determine uo2 composition of solidus point from the lever rule
c
         enume = sqrt( (x2-xint)**2 + (y2-yint)**2 )
         denom = sqrt( (x2-x1)**2 + (y2-y1)**2 )
         fuo2ds = enume / denom
c
      return
      end
*endif
