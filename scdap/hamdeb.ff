*mlist
*if def,selap
       subroutine hamdeb (s2,idebri,naz,ifrag,rhozu,tliq1,wfruo,wfrzr,
     & wfrouo,wfrozr,dz,vladeb,avoidl,afracl,dzfrcl,hadd,winliq,
     & winfro,kfail,lcrcb1)
!  hamdeb calculates mass of flowing zr-u-o which is absorbed by debris
!  bed and mass stopped at surface of debris bed.
!
!  Cognizant engineer: ljs.
! 
!  Calling subroutine: slgflo.
!  Subroutines called: centhl, fenthl.
!
!  This subroutine modified in sept. 1986 to focus on calculation of
!  height of cohesive debris.
!
!#       argument definitions:
!#       s2    = volume of liquid zr-u-o which impacts
!#               debris bed. (m**3)    (input)
!#       idebri = number of axial zone at top of debris bed
!#                 impacted by flowinf zr-u-o.   (input)
!#         naz   = total number of axial zones   (input)
!#         ifrag(k) = variable indicating whether or not
!#                    axial zone contains intact or frag-
!#                    mented fuel rod.
!#                    0 = intact fuel rod
!#                    1 or 2 = debris bed
!#                    3 = void region
!#                    (input)
!#         rhozu  = density of flowing zr-u-o (kg/m**3)
!#                  (input)
!#         tliq1  = temperature of flowing zr-u-o (k)
!#                  (input)
!#         wfruo  = weight fraction of uo2 in zr-u-o mixture
!#                  (input)
!#         wfrzr  = weight fraction of zr in zr-u-o mixture
!#                  (input)
!#         wfrouo(k) = mass of uo2 solidified or absorbed in
!#                     axial zone k  (kg)    (output)
!#         wfrozr(k) = mass of zr solidified or absorbed in
!#                     axial zone k  (kg)    (output)
!#         dz(k)     = height of axial zone k  (m)  (input)
!#         vladeb(k) = indicator that slumped metallic material
!                      has fallen into molten pool at this
!                      location; 0.0 = no, >0.0= yes.
!#         avoidl(k) = cross-sectional area of void region
!#                     plus cross-sectional area of zr-u-o crust
!#                     around fuel rod at axial zone k (m**2).
!#                     value of this variable determines max-
!#                     imum amount of zr-u-o which can solidify
!#                     around fuel rod in axial zone k. (input)
!#         afracl(k) = fraction of cross-sectional area of void
!#                     filled with solidified zr-u-o.
!#                     (input)
!#       dzfrcl(k) = fraction of height of axial zone k
!#                   completely filled with zr-u-o mixture.
!#                   (output)
!#       hadd(k)   = heat added to axial zone k by mass trans-
!#                   port. (j)
!#    winfro              mass of inconel which has slumped and frozen
!#    winliq              mass of liquified inconel at axial node k
!#    kfail = axial node from which material originated.
!     lcrcb1 = indicator of whether molten pool at this location;
!              0=no, 1=yes.
!
       implicit none
       integer, parameter :: kr=selected_real_kind(12,200)
!
       include 'scddat.h'
       include 'contrl.h'
       include 'ufiles.h'
!
!  Local variables.
       integer ifrag,naz,kfail
       real(kr) wfrouo,wfrozr,dz,vladeb,avoidl,afracl,hadd,dzfrcl
       real(kr) winfro,winliq
        dimension wfrouo(ndax), wfrozr(ndax), dz(ndax),
     # vladeb(ndax), avoidl(ndax), afracl(ndax), hadd(ndax),
     # ifrag(ndax), dzfrcl(ndax)
       dimension winfro(ndax),winliq(ndax)
       integer idebri,k,kp1,lcrcb1
       real(kr) rftemp,rhozu,s2,tliq1,vavail,vol,volliq,wfruo,wfrzr
       real(kr) frmlt1,frmlt2,fcomp,fotmtl,ftmelt,fhefus
       real(kr) centhl,centhlr,fenthl
       real(kr) wintot
       real gaddum
!
!  Data statements.
        data frmlt1/ 1.0/, frmlt2/ 1.0/,fcomp/ 0.0/
        data fotmtl/ 2.0/, ftmelt/ 3110./
        data fhefus/ 27.4e+4/
!
       rftemp=300.
       gaddum = 0.0
       wintot = winliq(kfail)
!
       k=idebri
          volliq=s2
       vavail=max(0.0,(1.-dzfrcl(k))*dz(k)*avoidl(k))
       if(lcrcb1.eq.1)vavail=1.e+4
       if(volliq.le.vavail)go to 70
       volliq=volliq-vavail
!  Force bypass of more liquid than available volume case.
!      if(volliq.lt.1.e+10)go to 70
       wfrouo(k)=wfrouo(k)+wfruo*rhozu*vavail
       wfrozr(k)=wfrozr(k)+wfrzr*rhozu*vavail
      winfro(k) = winfro(k)+wintot
!  Subtract out inconel mass in the s2 term.
       if (chngno(70)) then
         hadd(k) = hadd(k) + wfrzr*rhozu*vavail*centhlr(tliq1,rftemp) +
     &   wfruo*rhozu*vavail*
     &   fenthl(tliq1,fcomp,fotmtl,ftmelt,frmlt2,fhefus,gaddum)
       else
         hadd(k) = hadd(k) + wfrzr*rhozu*vavail*centhl(tliq1,rftemp) +
     &   wfruo*rhozu*vavail*
     &   fenthl(tliq1,fcomp,fotmtl,ftmelt,frmlt2,fhefus,gaddum)
       endif
       go to 100
   70  continue
      wfrouo(k)=wfrouo(k)+wfruo*rhozu*volliq
       wfrozr(k)=wfrozr(k)+wfrzr*rhozu*volliq
      winfro(k) = winfro(k)+wintot
      if(lcrcb1.eq.1)then
      vladeb(k)=wfrzr*rhozu*volliq+wintot
      end if
!     if(lcrcb1.eq.0)vladeb(k)=vladeb(k)+s2
       volliq=0.0
  100 continue
!
!      if more liquid zr-u-o than could be absorbed by
!
!      debris bed, put balance at top of debris bed.
!
        if(volliq.lt.1.e-15)go to 200
        kp1=min(idebri+1,naz)
        do160k=kp1,naz,1
        if(volliq.lt.1.e-15)go to 160
        if(k.lt.naz)go to 140
        vol=volliq
        go to 150
  140   vol = max(0.0,(1. - dzfrcl(k))*avoidl(k)*dz(k))
        if(vol.gt.volliq)vol=volliq
  150   wfrouo(k) = wfrouo(k)+wfruo*rhozu*vol
        wfrozr(k)=wfrozr(k)+wfrzr*rhozu*vol
        hadd(k)=hadd(k)+wfrzr*rhozu*vol*
     #  centhl(tliq1, rftemp)
     #  + wfruo*rhozu*vol*
     #  fenthl(tliq1, fcomp,fotmtl,ftmelt,frmlt2,fhefus,gaddum)
        volliq=volliq-vol
  160   continue
  200   continue
        return
        end
*endif
