*mlist
*if def,selap
      subroutine dsgewt (y, ewt, n, rtol, atol, job)
c
c  Descriptive sentence goes here.
c
c  Cognizant engineer: ljs.
c
       implicit none
c
      integer n, job
      real y(n), ewt(n), rtol(1), atol(1)
c
c  ...1...  function / purpose  .......
c       initializes or updates the weighting vector for use in the
c       root-mean-square norm
c  ...2...  arguments / parameters / constants  .......
c     ..a..  input arguments  .....
c          y  r:n  - vector used to initialize or update the
c              weighting vector
c          n  i:1  - length of the vectors
c          rtol  r:1/n  relative tolerance parameter(s)
c          atol  r:1/n  absolute tolerance parameter(s)
c          job  i:1  - type of error control for single step error
c              estimates in the weighted root-mean-square norm; the
c              weighting vector must have positive components
c                  = 1, ewt(i) = rtol    * abs(y(i)) + atol
c                  = 2, ewt(i) = rtol    * abs(y(i)) + atol(i)
c                  = 3, ewt(i) = rtol(i) * abs(y(i)) + atol
c                  = 4, ewt(i) = rtol(i) * abs(y(i)) + atol(i)
c     ..b..  output arguments  .....
c          ewt  r:n  - weighting vector
c     ..c..  internal / local variables  .....
      integer av, i, rv
      real atoli, rtoli
c     ..d..  external / subprogram references  .....
       save
c     ..e..  constants  .....
c  ...3...  notes / remarks  .......
c     ..a..  usage  .....
c     ..b..  algorithm  .....
c     ..c..  portability  .....
c     ..d..  references  .....
c     ..e..  history  .....
c          origin - ewset - a.c. hindmarsh, lsode, 3/6/80
c          modified - header, structure - e.s. marwil, 4 may 81
c
      av = 0
      rv = 0
      if (job .eq. 2 .or. job .eq. 4) av = 1
      if (job .eq. 3 .or. job .eq. 4) rv = 1
c
      rtoli = rtol(1)
      atoli = atol(1)
      do 10 i = 1, n
         if (rv .eq. 1) rtoli = rtol(i)
         if (av .eq. 1) atoli = atol(i)
         ewt(i) = rtoli * abs(y(i)) + atoli
   10    continue
      return
      end
*endif
