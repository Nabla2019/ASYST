*mlist
*if def,selap
      subroutine lsgedi (a, lda, n, ipvt, det, wk, job)
c
c  Computes the determinant and inverse of a matrix using the factors
c  computed by lsgefa.
c
c  Cognizant engineer: ewc (cxm esm).
c
c  ...1...  arguments / parameters / constants  .......
c  ...2...  notes / remarks  .......
c
       implicit none
c
c  Local variables.
       integer ii,nn
      integer lda, n, ipvt(1), job
      real a(lda,1), det(2), wk(1)
c
c  ...1...  function / purpose  .......
c       computes the determinant and inverse of a matrix
c       using the factors computed by lsgefa
c  ...2...  arguments / parameters / constants  .......
c     ..a..  input arguments  .....
c          lda  i:1  - leading dimension of a
c          n  i:1  - order of the matrix  a
c          ipvt  i:n  - pivot vector from lsgefa
c          wk  r:n  - working storage
c          job  i:1  - job path parameter
c              = 11, both determinant and inverse
c              = 01, inverse only
c              = 10, determinant only
c     ..b..  output arguments  .....
c          a - inverse of original matrix if requested;
c              otherwise unchanged.
c          det  r:2  - determinant of original matrix if requested;
c              otherwise not referenced.
c              determinant = det(1) * 10.0**det(2)
c              with  1.0 .le. abs(det(1)) .lt. 10.0
c              or  det(1) .eq. 0.0 .
c     ..c..  internal / local variables  .....
      integer i, j, k, kb, kp1, l, nm1
      real temp
c     ..d..  external / subprogram references  .....
c          intrinsic functions - abs, mod
       save
c     ..e..  constants  .....
c
c  ...3...  notes / remarks  .......
c     ..a..  usage  .....
c          (1) error condition:
c          a division by zero will occur if the input factor contains
c          a zero on the diagonal and the inverse is requested.
c          it will not occur if the subroutines are called correctly
c          and if lsgeco has set rcond .gt. 0.0 or lsgefa has set
c          info .eq. 0 .
c     ..b..  algorithm  .....
c     ..c..  portability  .....
c     ..d..  references  .....
c          (1) j.j. dongarra, c.b. moler, j.r. bunch, and g.w. stewart,
c          linpack user's guide, siam, philadelphia, 1979
c     ..e..  history  .....
c          origin - lsgedi - linpack - cleve moler, 08/14/78
c          modified - header, structure - e.s. marwil, 6/5/80
c
      if (job/10 .eq. 0) go to 40
c ---                    --------
c  1  compute determinant
c ---
         det(1) = 1.0
         det(2) = 0.0
c
         do 30 i = 1, n
            if (ipvt(i) .ne. i) det(1) = -det(1)
            det(1) = a(i,i)*det(1)
            if (det(1) .eq. 0.0) go to 40
c                                 --------
   10       continue
            if (abs(det(1)) .ge. 1.0) go to 20
               det(1) = 10.0*det(1)
               det(2) = det(2) - 1.0
               go to 10
c
   20       continue
            if (abs(det(1)) .lt. 10.0) go to 30
               det(1) = det(1)/10.0
               det(2) = det(2) + 1.0
               go to 20
   30       continue
c ------------------
   40 continue
      if (mod(job,10) .eq. 0) go to 90
c ---                         --------
c  2  compute inverse
c ---
c    ---
c     a  compute inverse(u)
c    ---
         do 60 k = 1, n
            a(k,k) = 1.0/a(k,k)
            nn = k - 1
            if (nn .gt. 0) then
              do 61 ii = 1,nn
                a(ii,k) = -a(k,k)*a(ii,k)
   61         continue
            endif
            if (k .eq. n) go to 60
c
               kp1 = k + 1
               do 50 j = kp1, n
                  temp = a(k,j)
                  a(k,j) = 0.0
                  do 51 ii = 1,k
                    a(ii,j) = a(ii,j) + temp*a(ii,k)
   51             continue
   50             continue
   60       continue
c    ---
c     b  form inverse(u)*inverse(l)
c    ---
         if (n .eq. 1) go to 90
c                      ---------
            nm1 = n - 1
            do 80 kb = 1, nm1
               k = n - kb
               kp1 = k + 1
               nn = n - k
               if (nn .gt. 0) then
                 do 82 ii = 1,nn
                   wk(ii+kp1-1) = a(ii+kp1-1,k)
                   a(ii+kp1-1,k) = 0.0
   82            continue
               endif
               do 70 j = kp1, n
                 do 72 ii = 1,n
                   a(ii,k) = a(ii,k) + wk(j)*a(ii,j)
   72            continue
   70             continue
               l = ipvt(k)
               if (l .ne. k) then
                 do 71 j = 1,n
                   temp = a(j,l)
                   a(j,l) = a(j,k)
                   a(j,k) = temp
   71            continue
               endif
   80          continue
c ------------
   90 continue
      return
      end
*endif
