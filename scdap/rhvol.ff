*mlist
*if def,selap
       subroutine rhvol
c
c  Processes volume connection data.
c
c  Cognizant engineer: ewc.
c
*in32 idat
*in32end
c
       use scdmod
       implicit none
       include 'fast.h'
       include 'comctl.h'
       include 'contrl.h'
       include 'ufiles.h'
       include 'scddat.h'
       include 'debcom.h'
       include 'tblsp.h'
       include 'ndxara.h'
      integer idat(80),crd2,knt,istart,inext,ndata,kstart
      integer l4a(8),l4(9)
      real rdat(80)
      equivalence (idat(1),rdat(1))
      data l4a/0,0,2,2,0,1,0,0/
      data l4 /0,0,3,3,0,1,0,0,0/
c 4ccc0400 upper and lower volumes
      l4a(1)=scd1(icomp)%cmpno*10000+40000400
      l4a(6)=1
      call inp2(fa(filndx(1)),rdat,l4a)
      if (l4a(6) .eq. 0) then
        fail=.true.
      else
        voluh(icomp)=idat(1)
        vollh(icomp)=idat(2)
        write(output,'(1x)')
        write(output,2030)'above',voluh(icomp)
        write(output,2030)'below',vollh(icomp)
 2030 format(' Hydrodynamic volume ',a,' component=',i9)
      endif
c 4ccc0401-99 Hydraulic volumes
      kstart=1
      l4(1)=scd1(icomp)%cmpno*10000+40000401
      crd2=l4(1)+98
  100 l4(6)=1
      call inplnk(l4(1),inext,istart,ndata,fa(filndx(1)))
      if(ndata.le.0)then
        if(inext.gt.l4(1).and.inext.le.crd2)then
          l4(1)=inext
          goto 100
        else
          fail=.true.
          write(output,9000)l4(1),crd2
 9000 format('0*********Error, Card(s) ',i9,' to ',i9,
     # ' are incomplete - end of data before top axial node'
     # ' defined.')
        endif
      else
        l4(2)=l4(1)
        call inp2(fa(filndx(1)),rdat,l4)
        if(l4(6) .lt. 0 .or. idat(3).gt.naz ) then
          fail=.true.
          write (output,2020) l4(1)
 2020 format ('0******** Incorrect Data on card ',i8,'.')
        else
          do 402 knt=kstart,idat(3)
            nvhyd(icomp,knt)=idat(1)+(knt-kstart)*idat(2)
  402     continue
        endif
        kstart=idat(3)+1
        l4(1)=l4(1)+1
        if(idat(3).lt.naz .and. l4(1).le.crd2)
     #    goto 100
      endif
      return
      end
*endif
