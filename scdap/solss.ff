*mlist
*if def,selap
       subroutine solss (kb,naz,tsur,tsol,tliqav,wbotss,wflo,haddbt,
     # dz,wfross,avoidl,hadd,rftemp,ifrag,vladeb,dzfrcl)
c
c  Descriptive sentence for solss goes here.
c
c  Cognizant engineer: ljs.
c#
c#     calling subroutine: solab
c#     subroutines called: matpro
c#     engineer/programmer: l.j. siefken
c#
c#     argument list :
c#     kb        = elevation at which liquid neutron ab-
c#                  sorber material begins to flow. (m)
c#                  (input)
c#     naz       = number of axial zones      (input)
c#     tsur(k)   = average temperature of control rod in
c#                 axial zone k at end of time step. (k).
c#                 (input)
c#     tsol      = solidification temperature (k)   (input)
c#      tliqav    = average temperature of liquified mater-
c#                  at start of flow. (k)   (input)
c#    wbotss    = mass of liquified stainless steel
c#                which flowed below bottom
c#                of core. (kg)    (input/output)
c#     wflo      = mass of liquified material at start of
c#                 flow. (kg)    (input)
c#     haddbt    = heat added to region below core due to
c#                 flow of liquified control rod material.
c#                 (j)     (input/output)
c#     dz(k)     = height of each axial zone  (m)  (input)
c#    wfross(k) = mass of solidified stainless steel in
c#                axial zone k. (kg)    (input/output)
c#     avoidl(k) = flow area around guide tube. (m**2)
c#                 (input)
c#     hadd(k)   = heat added to axial zone k during time
c#                 step due to flow of liquified control
c#                 rod material. (j)    (output)
c#     rftemp    = reference temperature for enthalpy cal-
c#                 culations. normally, rftemp is set equal
c#                 to room temperature. (k)    (input)
c#     ifrag(k)  = variable indicating whether or not in-
c#                 tact control rod, debris bed or void
c#                 region exists in axial zone k.
c#                 0 = intact control rod
c#                 1 or 2 = debris bed
c#     vladeb(k) = volume of liquid which can be absorbed
c#                 by debris bed in axial zone k. (m**2)
c#                 (input)
c#                 3 = void region
c#                 (input)
c#    dzfrcl(k) = fraction of height of axial zone k which
c#                is completely filled with liquified/
c#                solidified control rod material resting
c#                on top of debris bed.  (input/output)
c
       implicit none
c
       integer kb,naz
       real tsol,tliqav,wbotss,wflo,haddbt,rftemp
*call scddat
       integer ifrag
       real tsur,dz,avoidl,vladeb,wfross,hadd,dzfrcl
       dimension tsur(ndax),dz(*),avoidl(ndax),ifrag(*),
     +           vladeb(*),wfross(*),
     # hadd(*),dzfrcl(*)
c
c  Local variables.
       integer k,ksol,kbsol,kstack,nsw
       real rho,vol,vols
       real sden,senthl
       external sden,senthl
c
c       find first axial zone below zone kb which is cooler
c       than solidification temperature minus 200 k
        nsw=0
        ksol=0
        do140k=kb,1,-1
        if(nsw.eq.1)go to 140
        if(tsur(k).lt.tsol)then
        nsw=1
        ksol=k
        end if
        if(nsw.eq.1)go to 140
        if(ifrag(k).eq.1.or.ifrag(k).eq.2)then
        nsw=1
        ksol=k
        end if
  140   continue
        if(ksol.ge.1)go to 200
c  calculate mass and heat added to region below bottom of core.
        wbotss=wflo+wbotss
        haddbt=haddbt+wflo*senthl(tliqav,rftemp)
c       go to return
        go to 850
  200   continue
       kbsol=ksol
       if(ifrag(kbsol).eq.0)then
        wfross(kbsol)=wfross(kbsol)+wflo
        hadd(kbsol)=hadd(kbsol)+wflo*senthl(tliqav,rftemp)
        else
        rho=sden(tliqav)
        vol=wflo/rho
        if(vol.le.vladeb(kbsol))vols=vol
        if(vol.gt.vladeb(kbsol))vols=vladeb(k)
        wfross(kbsol)=wfross(kbsol)+vols*rho
        hadd(kbsol)=hadd(kbsol)+vols*rho*
     #  senthl(tliqav, rftemp)
        if((vol-vols).lt.1.e-10)go to 240
        kstack=kbsol+1
c
c      stack balance of liquid on top of debris.
        if(kstack.gt.naz)kstack=naz
        wfross(kstack)=wfross(kstack)+
     #  (vol-vols)*rho
        hadd(kstack)=hadd(kstack)+(vol-vols)*
     #  rho*senthl(tliqav, rftemp)
        dzfrcl(kstack)=dzfrcl(kstack)+
     #  (vol-vols)/avoidl(kstack)
  240    continue
        end if
  850   continue
        return
      end
*endif
