*mlist
*if def,selap
       subroutine gelb(r,a,meq,n,mud,mld,eps,ier)
c
c  Descriptive sentence goes here.
c
c  Cognizant engineer: ewc.
c
c This is a COUPLE ROUTINE
c
c        purpose
c           to solve a system of simultaneous linear equations with a
c           coefficient matrix of band structure.
c        usage
c        description of parameters
c           r      - meq by n right hand side matrix (destroyed).
c                    on return r contains the solution of the equations.
c           a      - meq by meq coefficient matrix with band structure
c                    (destroyed).
c           meq    - the number of equations in the system.
c           n      - the number of right hand side vectors.
c           mud    - the number of upper codiagonals (that means
c                    codiagonals above main diagonal).
c           mld    - the number of lower codiagonals (that means
c                    codiagonals below main diagonal).
c           eps    - an input constant which is used as relative
c                    tolerance for test on loss of significance.
c           ier    - resulting error parameter coded as follows
c                    ier=0  - no error,
c                    ier=-1 - no result because of wrong input parame-
c                             ters meq,mud,mld or because of pivot
c                             element
c                             at any elimination step equal to 0,
c                    ier=k  - warning due to possible loss of signifi-
c                             cance indicated at elimination step k+1,
c                             where pivot element was less than or
c                             equal to the internal tolerance eps times
c                             absolutely greatest element of matrix a.
c
c        remarks
c           band matrix a is assumed to be stored rowwise in the first
c           me successive storage locations of totally needed ma
c           storage locations, where
c             ma=meq*mc-ml*(ml+1)/2    and    me=ma-mu*(mu+1)/2    with
c             mc=min(meq,1+mud+mld),  ml=mc-1-mld,  mu=mc-1-mud.
c           right hand side matrix r is assumed to be stored columnwise
c           in n*meq successive storage locations. on return solution
c           matrix r is stored columnwise too.
c           input parameters meq, mud, mld should satisfy the following
c           restrictions     mud not less than zero
c                            mld not less than zero
c                            mud+mld not greater than 2*meq-2.
c           no action besides error message ier=-1 takes place if these
c           restrictions are not satisfied.
c           the procedure gives results if the restrictions on input
c           parameters are satisfied and if pivot elements at all
c           elimination steps are different from 0. however warning
c           ier=k - if given - indicates possible loss of significance.
c           in case of a well scaled matrix a and appropriate tolerance
c           eps, ier=k may be interpreted that matrix a has the rank k.
c           no warning is given if matrix a has no lower codiagonal.
c
c        subroutines and function subprograms required
c           none
c
c        method
c           solution is done by means of gauss elimination with
c           column pivoting only, in order to preserve band structure
c           in remaining coefficient matrices.
c
       implicit none
c
*call ufiles
c  Local variables.
       integer i,ic,id,idst,ier,ii,ilr,j,jj,k,kst,meq,ma,mc,ml,mld,
     * mr,mu,mud,mz,n,nm
       real a,eps,piv,r,tb,tol
      dimension r(*),a(*)
c
c     test on wrong input parameters
      if(mld)47,1,1
    1 if(mud)47,2,2
    2 mc=1+mld+mud
      if(mc+1-meq-meq)3,3,47
c
c     prepare integer parameters
c        mc=number of columns in matrix a
c        mu=number of zeros to be inserted in first row of matrix a
c        ml=number of missing elements in last row of matrix a
c        mr=index of last row in matrix a with mc elements
c        mz=total number of zeros to be inserted in matrix a
c        ma=total number of storage locations necessary for matrix a
c        nm=number of elements in matrix r
    3 if(mc-meq)5,5,4
    4 mc=meq
    5 mu=mc-mud-1
      ml=mc-mld-1
      mr=meq-ml
      mz=(mu*(mu+1))/2
      ma=meq*mc-(ml*(ml+1))/2
      nm=n*meq
c
c     move elements backward and search for absolutely greatest element
c     (not necessary in case of a matrix without lower codiagonals)
      ier=0
      piv=0.
      if(mld)14,14,6
    6 jj=ma
      j=ma-mz
      kst=j
      do 9 k=1,kst
      tb=a(j)
      a(jj)=tb
      tb=abs(tb)
      if(tb-piv)8,8,7
    7 piv=tb
    8 j=j-1
    9 jj=jj-1
c
c     insert zeros in first mu rows (not necessary in case mz=0)
      if(mz)14,14,10
   10 jj=1
      j=1+mz
      ic=1+mud
      do 13 i=1,mu
      do 12 k=1,mc
      a(jj)=0.
      if(k-ic)11,11,12
   11 a(jj)=a(j)
      j=j+1
   12 jj=jj+1
   13 ic=ic+1
c
c     generate test value for singularity
   14 tol=eps*piv
c
c
c     start decomposition loop
      kst=1
      idst=mc
      ic=mc-1
      do 38 k=1,meq
      if(k-mr-1)16,16,15
   15 idst=idst-1
   16 id=idst
      ilr=k+mld
      if(ilr-meq)18,18,17
   17 ilr=meq
   18 ii=kst
c
c     pivot search in first column (row indexes from i=k up to i=ilr)
      piv=0.
      do 22 i=k,ilr
      tb=abs(a(ii))
      if(tb-piv)20,20,19
   19 piv=tb
      j=i
      jj=ii
   20 if(i-mr)22,22,21
   21 id=id-1
   22 ii=ii+id
c
c     test on singularity
      if (piv .le. 0.0) then
        write (output,110) k, meq, ier, piv
  110   format ('0gelb error; piv le 0.  k, meq, ier, piv =',3i5,e12.4)
        go to 47
      end if
   23 if(ier)26,24,26
   24 if(piv-tol)25,25,26
   25 ier=k-1
   26 piv=1./a(jj)
c
c     pivot row reduction and row interchange in right hand side r
      id=j-k
      do 27 i=k,nm,meq
      ii=i+id
      tb=piv*r(ii)
      r(ii)=r(i)
   27 r(i)=tb
c
c     pivot row reduction and row interchange in coefficient matrix a
      ii=kst
      j=jj+ic
      do 28 i=jj,j
      tb=piv*a(i)
      a(i)=a(ii)
      a(ii)=tb
   28 ii=ii+1
c
c     element reduction
      if(k-ilr)29,34,34
   29 id=kst
      ii=k+1
      mu=kst+1
      mz=kst+ic
      do 33 i=ii,ilr
c
c     in matrix a
      id=id+mc
      jj=i-mr-1
      if(jj)31,31,30
   30 id=id-jj
   31 piv=-a(id)
      j=id+1
      do 32 jj=mu,mz
      a(j-1)=a(j)+piv*a(jj)
   32 j=j+1
      a(j-1)=0.
c
c     in matrix r
      j=k
      do 33 jj=i,nm,meq
      r(jj)=r(jj)+piv*r(j)
   33 j=j+meq
   34 kst=kst+mc
      if(ilr-mr)36,35,35
   35 ic=ic-1
   36 id=k-mr
      if(id)38,38,37
   37 kst=kst-id
   38 continue
c     end of decomposition loop
c
c     back substitution
      if(mc-1)46,46,39
   39 ic=2
      kst=ma+ml-mc+2
      ii=meq
      do 45 i=2,meq
      kst=kst-mc
      ii=ii-1
      j=ii-mr
      if(j)41,41,40
   40 kst=kst+j
   41 do 43 j=ii,nm,meq
      tb=r(j)
      mz=kst+ic-2
      id=j
      do 42 jj=kst,mz
      id=id+1
   42 tb=tb-a(jj)*r(id)
   43 r(j)=tb
      if(ic-mc)44,45,45
   44 ic=ic+1
   45 continue
   46 return
c
c     error return
   47 ier=-1
      return
      end
*endif
