*mlist
*if def,selap
      subroutine dsgeos (yh, ldyh, n, ewt, error, tq, d, nq, rh,
     *                   l, el, nef, lmax, ialth, wa, iflag)
c
c  Descriptive sentence goes here.
c
c  Cognizant engineer: ljs.
c
c
       implicit none
c
      integer ldyh, n, nq, l, nef, lmax, ialth, iflag
      real yh(ldyh,1), ewt(1), error(1), el, wa(1), tq(3), d, rh
       integer ii
       real tmp
c
c  ...1...  function / purpose  .......
c       computes step size ratios for potential change of order
c  ...2...  arguments / parameters / constants  .......
c     ..a..  input arguments  .....
c          yh  r:ldyh,lmax  - nordseick history array
c          ldyh  i:1  - leading dimension of yh
c          n  i:1  - number of first order odes
c          ewt  r:n  - weighting vector used for error control
c              in the weighted root mean square norm
c          error  r:n  - accumulated error from the last corrector steps
c          tq  r:3  - comparison for errors of order changes
c          d  r:1  - weighted root mean square norm of the current error
c          nq  i:1  - current order
c          l  i:1  - number of columns currently used in the nordseick
c              array
c          el  r:1  - coefficient for scaling the next higher derivative
c          nef  i:1  - indicates success or failure of the last error
c              test
c          lmax  i:1  - maximum number of columns in the nordseick array
c          wa  r:n  - working storage
c     ..b..  output arguments  .....
c          nq  i:1  - recommended order to be used next
c          rh  r:1  - recommended ratio to determine next step size
c          iflag  i:1  - completion code
c             = 0, processing complete
c             = 1, continue processing
c     ..c..  internal / local variables  .....
      integer i, newq
      real biasdn, biassm, biasup, fl, micro, rhdn, rhef,
     *   rhsm, rhup, rhwq, temp, thrsh
c     ..d..  external / subprogram references  .....
      real vswrms
       external vswrms
c          minerva real function - vswrms
c          intrinsic functions - max, min, float
       save
c     ..e..  constants  .....
      data micro /1.e-6/, rhef /0.2/
      data thrsh /1.1/, biasdn /1.2/, biassm /1.3/, biasup /1.4/
c  ...3...  notes / remarks  .......
c     ..a..  usage  .....
c     ..b..  algorithm  .....
c     ..c..  portability  .....
c     ..d..  references  .....
c          see dsgedr
c     ..e..  history  .....
c          extracted - stiff, a.c. hindmarsh, gear, 12/20/74
c                    - stode, a.c. hindmarsh, lsode, 3/6/80
c          modified - header, structure - e.s. marwil, 4 may 81
c
      iflag = 0
      fl = float(l)
c  1  initialize ratios
      rhdn = 0.0
      temp = biassm * (micro + (d/tq(2)) ** (1.0/fl))
      rhsm = 1.0 / temp
      rhup = 0.0
c  2  if allowed, compute step size(s) for change of order
      if (nq .eq. 1) go to 10
         d = vswrms (n, yh(1,l), 1, ewt, 1)
         temp = biasdn * (micro + (d/tq(1)) ** (1.0/(fl-1.0)))
         rhdn = 1.0 / temp
   10 continue
      if (nef .ne. 0) go to 30
      if (l .eq. lmax)  go to 30
         do 20 i = 1, n
            wa(i) = error(i) - yh(i,lmax)
   20       continue
         d = vswrms (n, wa, 1, ewt, 1)
         temp = biasup * (micro + (d/tq(3)) ** (1.0/(fl+1.0)))
         rhup = 1.0 / temp
   30 continue
c ---
c  3  largest ratio determines new order and step size
c ---
      if (rhup .gt. max (rhdn, rhsm)) go to 60
      if (rhdn .gt. max (rhsm, rhup)) go to 40
c    ---
c     a  same order
c    ---
         newq = nq
         rhwq = rhsm
         go to 50
c
   40 continue
c    ---
c     b  reduce order
c    ---
         newq = nq - 1
         rhwq = rhdn
         if (nef .gt. 0) rhwq = min (rhwq, 1.0)
   50 continue
         if (nef .eq. 0 .and. rhwq .lt. thrsh) go to 80
c                                              --------
         if (nef .ge. 2) rhwq = min (rhwq, rhef)
         go to 70
c
   60 continue
c    ---
c     c  increase order
c    ---
         newq = nq + 1
         rhwq = rhup
         if (rhwq .lt. thrsh) go to 80
c                             --------
         tmp = el/float(l)
         do 61 ii = 1,n
           yh(ii,newq+1) = tmp*error(ii)
   61    continue
c
   70 continue
         nq = newq
         rh = rhwq
         l = nq + 1
         iflag = 1
c ----------------
   80 continue
      if (iflag .eq. 0) ialth = 3
      return
      end
*endif
