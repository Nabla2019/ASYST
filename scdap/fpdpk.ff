*mlist
*if def,selap
      subroutine fpdpk (maxbin, nbin, pdiam, pdiff, ptau, ptcon,
     &   maxsrf, nsrf, surfda, surfar, surft,
     &   diam, vapnu, vapt, vapmfp, vaptc,
     &   dpdiff, dpthrm, dpgs, dpturb, dpca, trblnt, cturb, clmnr,
     &   cthrm, ta, ca, g0, tbar, kdep)
c
c  Descriptive sentence goes here.
c
c  Cognizant engineer: ljs.
c
      implicit none
*call cons
c     Define the deposition coefficients.
c
c     Earl S. Marwil
c     Scientific Computing Unit
c     EG&G Idaho, Inc.
c     PO Box 1625
c     Idaho Falls, ID 83415-2408
      integer maxbin, nbin, maxsrf, nsrf
      real pdiam(maxbin), pdiff(maxbin), ptau(maxbin), ptcon(maxbin)
      real surfda(maxsrf), surfar(maxsrf), surft(maxsrf)
      real diam, vapnu, vapt, vapmfp, vaptc
      logical dpdiff, dpthrm, dpgs, dpturb, dpca, trblnt
      real cturb, clmnr, cthrm
      real ta, ca, g0, tbar
      real kdep(maxbin,maxsrf)
      integer isrf, ibin
      real kthrm, sc, temp
      real third
      parameter (third = 1.0 / 3.0)
      real vd, vt, vta, vgs
      real vel, kca
      real kn, dist, theta, fract, adep, area, h
c     Deposition Coefficients
      if (nsrf .gt. 0) then
         do 20 isrf = 1, nsrf
            adep = surfda(isrf)
            area = surfar(isrf)
            if (dpthrm) then
               kthrm = cthrm * (vapt - surft(isrf)) * 1.5 * vapnu / vapt
            end if
            do 10 ibin = 1, nbin
               vd = 0.0
               vt = 0.0
               vgs = 0.0
               vta = 0.0
               kca = 0.0
               if (dpdiff) then
c                 Diffusion
c
c                 J.P. Holman, Heat Transfer, McGraw-Hill,
c                 New York, NY, 1981, pp 484-499.
                  if (trblnt) then
c                    Sc is the Schmidt number
                     sc = vapnu / pdiff(ibin)
                     vd = cturb * sc ** third * pdiff(ibin)
                  else
                     vd = clmnr * pdiff(ibin)
                  end if
               end if
               if (dpgs) then
c                 Gravitational Settling
c
c                 Gravitational force - bouyancy force = drag force
c                 Drag force derived from Stokes Law
c                 assume low relative Reynolds number
c                 Assume no slip at particle surface
c                 (pdiam > .1 micrometer)
c
c                 W.C. Hinds, Aerosol Technology, John Wiley & Sons,
c                 New York, NY, 1982, page 84.
c
c                 Assume particle density >> aerosol density
c                 and neglect bouyancy force
                  vgs = ptau(ibin) * g0
               end if
               if (dpturb .and. trblnt) then
c                 Turbulent Acceleration
                  vta = ta * ptau(ibin) / 3.0
               end if
               if (dpca .and. ca .gt. 0.0) then
c                 Centrifugal Acceleration (e.g. pipe bend)
                  vel = ca * (tbar - ptau(ibin))
                  vel = max(vel,0.0)
                  dist = min (diam, vel*tbar)
                  theta = 2.0 * acos (dist/diam)
                  fract = (pi - theta + sin(theta)) / pi
                  kca = fract / tbar
               end if
               if (dpthrm .and. kthrm .gt. 0.0) then
c                 Thermophoresis
c
c                 J.P. Holman, Heat Transfer, McGraw-Hill,
c                 New York, NY, 1981, page 155.
                  kn = 2.0 * vapmfp / pdiam(ibin)
                  temp = vaptc / ptcon(ibin) + 2.2 * kn
                  h = temp / ((1.0 + 2.0*temp) * (1.0 + 3.0*kn))
                  vt = kthrm * h
               end if
               kdep(ibin,isrf) = vgs * adep + (vd + vt + vta) * area
     &           + kca
   10          continue
   20       continue
      end if
      return
      end
*endif
