*mlist
*if def,selap
       subroutine majscd
c
c  Performs a SCDAP major edit.
c
c  Cognizant engineer: ewc.
c
       use scdmod
       implicit none
       include 'cons.h'
       include 'contrl.h'
       include 'scddat.h'
       include 'bconds.h'
       include 'hardpn.h'
       include 'uphdpn.h'
       include 'radata.h'
       include 'scdcom.h'
       include 'iocom.h'
       include 'ndxara.h'
       include 'tblsp.h'
       include 'thplot.h'
       include 'trnot1.h'
       include 'trnot2.h'
       include 'scdout.h'
       include 'ufiles.h'
       include 'debcom.h'
       include 'scdpow.h'
       include 'comctl.h'
       include 'fast.h'
       include 'voldat.h'
       include 'blageo.h'
       include 'dbacct.h'
       include 'rkinc.h'
       include 'cmptim.h'
       include 'trpblk.h'
       include 'convarc.h'
       include 'miscon.h'
       include 'cora.h'
       include 'oxairv.h'
c  Local variables.
       character*5 mapcor(ndax,ndcomp)
       character*2 blk
       integer i,ib,ij,ij1,j,k,kb,ke,kdyn,l,m,m2,n,nr1,ni,ic,ist
       integer llr5,nsave,mapcmp(ndcomp),ivoid,ivnum(ndcomp)
       integer iflwch(ndcomp)
       integer kmprop,nswctc,lhrecv
       integer nswap,kloc1,ilt,lcrbm1
       integer nl1,nl2,nl11,nl22
       integer ncora1
       integer iselct
       integer icmp1,icmglb,icmpmn,icmpmx,jj1,nl,nodsur,ien
       integer ndbg
       real qtemp1
       real qhdot,qdpol1,mlqdeb,dppol1
       real gravac,wtdom1,powcr5
       real veldom,qrddum,htcdum,stmdum,tmpdom
       real tmpmn,tmpmx
       data gravac / 9.8/
       ndbg = 0
c
c  Print out variables just read in.
       write (output,
     & "('1........ CONFIGURATION OF FACILITY .................')")
         write(output,9503)timehy
9503     format('             time =',e10.4, ' s')
         write(output,9505)bgmcth
9505     format(/,' maximum historic reactor core or bundle surface',
     &   ' temperature=',e10.4,' K')
         write(output,9507)tmaxhs
9507     format(' time of maximum historic temperature =',e10.4,' s')
         write(output,9509)jmaxhs
9509     format(' component number with maximum historic',                   
     &   ' temperature =',i5)             
         write(output,9511)kmaxhs
9511     format(' maximum historic temperature at axial node',i5)
         ncora1=0
         if(cora)ncora1=1
         if(ncora1.eq.0)then
         write (output,9010)bgmct,jmaxtp,imaxtp
 9010    format (' maximum current surface temperature in reactor core',
     &   ' or bundle=',f8.2,' K'/,' component no.',i3,' axial node =',
     &   i3)
         else
         write(output,9110)bgmct,jmaxtp,imaxtp
9110     format(' maximum current temperature in core or',
     &   ' test bundle =',f8.2,' K'/,' component no.',i3,
     &   ' axial node =',i3)
         end if
         if(ncora1.eq.0)then
         write (output,9520)bgnhg                          
9520     format(' nuclear heat generation =',e10.4,' W')
         else
         write(output,9120)bgnhg                            
9120     format(' electrical heat generation in heater',
     &   ' portion of simulator components =',e10.4,' W')    
         end if
 9020  format (1x,a,'=',es12.4,1x,a)
         if(ncora1.eq.0)then
         write (output,9021) pwrtot
9021     format(' total reactor power =',es12.4,' W')
         else
         write(output,9121) pwrtot
9121     format(' total test bundle power =',es12.4,' W')
         end if
       if(ncora1.eq.0)then
       write(output,9022) pwrfdk
9022   format(' total fission product and actinide decay =',
     & es12.4,' W')
       end if
       write (output,9020) 'total oxidation heat generation',bgthq,'W'
       write(output,9031)h2prod                                          
9031   format(' cumulative overall hydrogen production =',e10.4,' kg')
       write(output,9082)bgth
9082   format(' overall rate of hydrogen production =',e10.4,' kg/s')
c  Start of "if" on whether molten pool exists.
       if (vlpool .gt. 1.e-3) then
         write (output,9030) timehy
 9030 format(/,t33,'Conditions of in-core molten pool at ',
     &   es13.5,'sec')
c  Print molten pool information.
         qdpol1=qdpool
         qhdot=0.
c  Correct for decay power if relap kinetics.
         if (nspowi.eq.3 .or. nspowi.eq.1) qdpol1 = qdpol1*powtot(1)
         write (output,9040) repool,qdpol1
         write (output,9050) vlpool,qhpool
cljs     if (repool .ge. 1.e-3) then
           write (output,9060) tupool,wupool
           write (output,9070) tmltuo, wmpool
           write (output,9071) wzpool
cljs     endif
 9040  format ('0effective radius of pool     = ',es12.4,' (m)',t67,
     & 'total heat generated in pool = ',es12.4,' (W)')
 9050  format (' volume of molten pool        = ',es12.4,' (m*3)', t67,
     & 'total rate of heat removal   = ',es12.4,' (W)')
 9060  format (' temperature of molten pool   = ',g11.6,'(K)', t67,
     & 'total mass of UO2 in pool    = ',es12.4,'(Kg)')
 9070  format (' liquidus temp of material = ',g11.6,'(K)' t67,
     & 'total mass of metallic Zr     = ',es12.4,' (kg)')
9071   format (' total mass of oxidic Zr    =',g11.6,'(kg)')
       write(output,9072)ztpool
9072   format(' elevation of top of molten pool =',e10.4,' m')
c  Calculate mass of liquefied material in partially liquefied porous
c  debris.
         mlqdeb = 0.0
         do j = 1,ncomp
           if (idcomp(j).ne.0) cycle
           if (rpel((j-1)*ndax+1) .le. 0.2e-3) cycle
           do k = 1,naz
             if (irubpp(k,j).eq.0) cycle
             if (lcrucb(k,j).ge.1) cycle
             mlqdeb = mlqdeb + float(nsigl(j))*frcmcl(ncmpgp(j),k)*
     &       (wuorub(k,j) + wzorub(k,j)) +
     &       float(nsigl(j))*(wagrub(k,j) + wzrdeb(k,j) + wssrub(k,j))
           enddo
         enddo
         write (output,185) mlqdeb
185    format (' mass of liquefied material in partially liquefied',
     & ' porous debris =',es12.4,' kg')
c  Calculate crust stability.
         write (output,9080)
 9080  format(/,t29,'Boundary Conditions at Molten Pool - Fuel ' ,
     &'Component Interfaces')
           if(qcrustr.ge.1.0)then
           write(output,9081)qlpoolr              
9081       format(' molten pool radial heat flux at',
     &     ' periphery of core =',e10.4,' W/m2')
           write(output,9083)qcrustr
9083       format(' radial heat flux from outer surface of crust',
     &     ' of molten pool at periphery of core =',e10.4,' W/m2')
           write(output,9084)
9084       format(' Note: when heat from crust less than molten'
     &     ' pool heat flux, then material from molten pool slumps',
     &     ' to lower head')
           end if
           if(islpot.ge.1)then
           write(output,9601)tslpot
9601       format(' time of last draining of molten pool material',
     &     ' from outer edge of core to lower head =',e10.4,' s')
           write(output,9602)zslpot
9602       format(' elevation of draining at start =',e10.4,
     &     ' m')
           write(output,9603)wdtslp
9603       format(' rate of draining of molten pool =',e10.4,' kg/s')
           write(output,9604)islpot
9604       format(' fuel rod component number at outer edge of',
     &     ' core =',i3)
           end if
           if(wuocum.ge.0.5)then
           write(output,9091)wuocum
9091       format(' cumulative mass of UO2 added to molten pool =',
     &     e10.4,' kg')
           write(output,9092)wzrcum
9092       format(' cumulative mass of Zr added to molten pool =',
     &     e10.4,' kg')
           write(output,9093)wzocum
9093       format(' cumulative mass of ZrO2 added to molten pool =',
     &     e10.4,' kg')
           end if
           if(wuohed.ge.0.5)then
           write(output,9094)wuohed
9094       format(' cumulative mass of UO2 slumped to lower head',
     &     ' from molten pool =',e10.4,' kg')
           write(output,9095)wzrhed
9095       format(' cumulative mass of Zr slumped to lower head',
     &     ' from molten pool =',e10.4,' kg')
           write(output,9096)wzohed
9096       format(' cumulative mass of ZrO2 slumped to lower head',
     &     ' from molten pool =',e10.4,' kg')
           end if
         nswap=0
         do j = 1,ncomp
           if (ishdcr(j).ge.1) nswap = 1
         enddo
       endif
c  End of "if" on whether molten pool exists.
       write (output,9230)
       write (output,9240)
       write (output,9242)
9242  format('                  L = partially liquefied porous debris')
       write (output,9250)
       write (output,9260)
 9230 format(/,'                                                 ' ,
     &'core degradation map',/ ,
     &'                  I = intact fuel component' ,
     &'                      underscore indicates          __I__' ,
     &'   x''s indicate')
 9240 format('                  P = porous debris         ' ,
     &'                     metallic or planar            __V__' ,
     &'   that total or bulk')
 9250 format('                  M = molten or frozen ceramic ' ,
     &'pool              blockage in volume at bottom  xxPxx' ,
     &'   blockage occurs')
 9260 format('                  V = Relap fluid volume now void' ,
     &' of fuel        of indicated node             xxMxx' ,
     &'   in the volume')
c  Set variables that define core degradation map.
       do k = 1,igp
         do n = 1,icp(k)
           ni = ngpc(k,n)
c  iflwch(component #) = scdap flow channel #.
           iflwch(ni) = k
         enddo
       enddo
      iselct=2
      select case(iselct)
      case(1)
*      write(output,9305)
*9305  format(/,' printout of core blockages bypassed')
      case(2)
       do k = naz,1,-1
         n = 1
         do j = 1,ncomp
           mapcor(k,n)='  U  '
           blk = '  '
c  If not a fuel component do not input.
           if (idcomp(j).eq.0 .and. rpel((j-1)*ndax+1).gt.0.2e-3) then
             mapcmp(n) = j
c  Check if flow channel has planar blockage.
             if (nplblk(iflwch(j),k) .eq. 1) blk = '__'
c  Check several conditions for voided core region.
             ivoid = 0
             if (lcrucb(k,j) .eq. 2) ivoid = 1
             if (lcrucb(k,j).eq.1 .and. nbublk(iflwch(j),k).eq.2)
     &       ivoid = 1
             if (ivoid .eq. 1) blk = '  '
             if (nbublk(iflwch(j),k).eq.1 .and. ivoid.eq.0) blk = 'xx'
             if (lcrucb(k,j).eq.1 .and. ivoid.eq.0) blk = 'xx'
c  Calculate height of pool in axial zone of component j.
             if (ivoid .eq. 1) then
               mapcor(k,n)=blk//'V'//blk
             else
               if (lcrucb(k,j) .eq. 1) then
                 mapcor(k,n)=blk//'M'//blk
               else
                 if (lcrucb(k,j).eq.0 .and. irubpp(k,j).eq.1) then
                   if (frcmcl(ncmpgp(j),k) .le. 0.001) then
                     mapcor(k,n) = blk//'P'//blk
                   else
                     mapcor(k,n) = blk//'L'//blk
                   endif
                 else
                   mapcor(k,n) = blk//'I'//blk
                 endif
               endif
             endif
c  Save relap bottom flow volume for fuel component n.
             ivnum(n) = volno(ngpv(iflwch(j),1) + filndx(4))
             n = n + 1
           endif
         enddo
       enddo
       nsave = n - 1
       write (output, 9270) (mapcmp(j),j=1,nsave)
 9270 format(/,'        Fuel rod component # ',15I10)
       write (output,9280)
 9280 format(/, '           Axial node #')
       do k = naz,1,-1
         write (output,9300) k,(mapcor(k,j),j=1,nsave)
         if (k.eq.1 .and. timehy.gt.0.0) then
           write (output,9290) (ivnum(j),j=1,nsave)
 9290  format(' ','      Relap vol. at bottom      ',15i10)
 9300  format(' ',19x,i3,13x,15(a5,5x))
         endif
       enddo
       end select
cljs  write heat transfer to RELPA5 volumes just below and just
cljs  above core.
        do j=1,ncomp
        m = lhvol(j) + filndx(4)
        write(output,9649)j,volno(m)
9649    format(' for comp. #',i3,
     &  ' RELAP5 control volume number just below core =',i10)
        end do
        write(output,9053)
9053    format(/,' heat transfer to RELAP5 control volumes just',
     &  ' above core',/)
        do j=1,ncomp
        m = uhvol(j) + filndx(4)
        write(output,9055)j,qinvtp(j),volno(m)
9055    format(' for comp. #',i3,' heat input to RELAP5 volume just',
     &  ' above core =',e10.4,' W , RELAP5 control volume number=',
     &  i10)
        end do
c
c   Printout of information on crust of frozen material that surrounds
c   molten pool.
       if (vlpool .lt. 1.e-3)go to 79
       if (tupool .le. tmltuo)go to 79
       if (numttp .ge. 1) then
         write(output,9335)
9335  format(/,' conditions of crust at top of molten pool')
         wtdom1   =   wtdome/gravac
         write (output,9337) wtdom1
9337  format(' mass of top of crust and debris on top of crust =',
     & es12.4,' kg')
         write (output,9339) eatadm
9339  format(' height of top crust at centerline',
     & ' relative to that at edge =',es12.4,' m')
         write (output,9341) redome
9341  format(' radius of base of top crust =',es12.4,' m')
         write (output,9343)
9343  format(/,' location and condition of top crust')
c  Note. For upper surface, knumtp(l) is axial node above molten pool
c  that recieves heat transferred from top surface of molten pool. For
c  bottom surfaces, on other hand, knumbt(l) is axial node number in
c  which bottom surface of molten pool resides, and heat is transferred
c  to RELAP5 volume in axial node just below knumbt(l).
         do l = 1,numttp
           kloc1 = knumtp(l) - 1
           write (output,9345) jnumtp(l),kloc1,tmdome(l),wtott(l),
     &     ardtmp(l)
 9345  format(/,' comp. no. =',i3,' axial node =',i3,
     & ' temp. of top surface (K) =',es12.4,' heat flux (W/m2) =',
     & es12.4,' area (m2) =',es12.4)
           if (knumtp(l) .le. naz) then
             lhrecv = nvad((jnumtp(l)-1)*ndax + knumtp(l)) + filndx(4)
           else
             lhrecv = uhvol(jnumtp(l)) + filndx(4)
           endif
           if (l.eq.1) then
             dppol1 = pipool - p(lhrecv)
             write (output,9344) dppol1             
 9344  format(' internal to external pressure differential in',  
     & ' molten pool =',es12.4,' Pa')
           endif
c  Note. RELAP5 volumes receiving heat are identified as in subroutine
c  SCDAD7.
           write (output,9346) volno(lhrecv),tempg(lhrecv)
 9346  format(' RELAP5 control volume receiving heat from top surface',
     & ' of molten pool =',i10,' vapor temperature in this volume =',
     & es12.4,' K')
           write (output,9347) tcdome(l),sedome(l),sudome(l)
 9347  format(' effective thickness of crust (m) =',es12.4,
     & ' effective stress (Pa) =',es12.4,' ult. strength (Pa) =',
     & es12.4)
         enddo
       endif
       if (numrtp .ge. 1) then
         if (jnumrt(numrtp).ne.100 .or. nswap.ne.1) then
           write(output,9381)
9381  format(/,' location and condition of crust on side of molten',
     & ' pool; comp. no. 100 = molten material at periphery of core')
         endif
         do l = 1,numrtp
           if (jnumrt(l).eq.100 .and. nswap.eq.1) cycle
           write (output,9383) jnumrt(l),knumrt(l),wtotr(l),aradmp(l)
 9383 format(/,' comp. no. =',i3,' axial node =',i3,
     & ' heat flux (W/m2) =',es12.4,' area (m2) =',es12.4)
           write(output,9386)tcside(l)
 9386 format(' crust thickness =',es12.4,' m')
           lhrecv = 0
           if (jnumrt(l).eq.100 .and. nswap.ne.1) then
             if (flmpmn .lt. 0.001) then
               lhrecv = lbypss(knumrt(l)) + filndx(4)
             else
               ilt = (ncomp - 1)*ndax + knumrt(l)
               lhrecv = nvad(ilt) + filndx(4)
             endif
           else
             lhrecv = nvad((jnumrt(l) - 1)*ndax + knumrt(l)) + filndx(4)
           endif
           if (lhrecv .ge. 1) then
             write (output,9384) volno(lhrecv),tempg(lhrecv)
9384   format(' RELAP5 control volume receiving heat from side of',
     & ' molten pool =',i10,' vapor temperature in this volume =',
     & es12.4,' K')
           endif
         enddo
       endif
       if (numbtp .ge. 1) then
         write (output,9363)
 9363  format ('0Location and condition of crust at bottom of molten poo
     &l')
         do l = 1,numbtp
           write (output,9365) jnumbt(l),knumbt(l),tmbotm(l),wtotb(l),
     &     ardbmp(l)
 9365  format ('0comp. no. =',i3,' axial node =',i3,
     & ' temp. of bottom surface (K) =',es12.4,' heat flux (W/m2) =',
     & es12.4,' area (m2) =',es12.4)
           if (knumbt(l) .le. naz) then
             lhrecv = nvad((jnumtp(l)-1)*ndax + knumbt(l)) + filndx(4)
           else
             lhrecv = lhvol(jnumtp(l)) + filndx(4)
           endif
           write (output,9366) volno(lhrecv),tempg(lhrecv)
9366   format(' RELAP5 control volume receiving heat from',
     & ' bottom surface of molten pool =',i10,' vapor temperature',
     & ' in this volume =',es12.4,' K')
           write (output,9367) tcbotm(l),sebotm(l),subotm(l)
9367   format(' effective thickness of crust (m) =',es12.4,
     & ' effective stress (Pa) =',es12.4,' ult. strength (Pa) =',
     & es12.4)
           write (output,9369) ztpcoh(jnumbt(l))
9369   format(' elevation at this radial segment of top of molten',
     & ' pool =',es12.4,' m')
           write (output,9375) zbtcoh(jnumbt(l))
9375   format(' elevation at this radial segment of bottom of molten',
     & ' pool =',es12.4,' m')
         enddo
       endif
   79  kmprop = 0
       do j = 1,ncomp
         do k = 1,naz
           if (dmltax(k,j).gt.1.e-5 .and. dmltax(k,j).lt.0.99999)
     &     kmprop=1
         enddo
       enddo
       if (kmprop .eq. 1) then
         write (output,9310)
 9310  format(/,' nodes partially penetrated in axial',
     & ' direction by molten pool: ')
         do j = 1,ncomp
           do k = 1,naz
             if (dmltax(k,j).gt.1.e-5 .and. dmltax(k,j).lt.0.99999)
     &       write(output,9320)j,k,dmltax(k,j)
 9320 format(' component number =',i3,' axial node number =',i3,
     &' fractional penetration of node =',es12.4)
           enddo
         enddo
       endif
       kmprop = 0
       do k = 1,naz
         do j = 1,ncomp
           if (frcspr(k,j).gt.1.e-4 .and. frcspr(k,j).lt.0.99999 .and.
     &     idcomp(j).eq.0 .and. rpel((j-1)*ndax+1).gt.0.2e-3)
     &     kmprop=1
         enddo
       enddo
       if (kmprop .eq. 1) then
         write (output,9330)
 9330  format(/,' nodes partially penetrated in radial direction',
     &' by molten pool: ')
        do k = 1,naz
          do j = 1,ncomp
            if (frcspr(k,j).gt.1.e-5.and.frcspr(k,j).lt.0.99999.and.
     &      idcomp(j).eq.0.and.rpel((j-1)*ndax+1).gt.0.2e-3) then
              llr5 = nvad((j-1)*ndax+k)+filndx(4)
              write(output,9340)k,j,frcspr(k,j)
 9340 format(' axial node number =',i3,' component number =',i3,
     &' fractional penetration of node =',es12.4)
              write (output,9350) volno(llr5),avol(llr5)
 9350 format(' RELAP5 volume number for this node =',i10,
     &' flow area (m2) of this volume =',es12.4)
            endif
          enddo
        enddo
      endif
      do 114 j=1,ncomp
      if (ishdcr(j).le.0 .and. npldrn(j).eq.0) go to 114
      if(npldrn(j).ge.1)then
      write(output,9451)npldrn(j)
9451  format(' molten pool in core region slumping to lower head',
     &' at axial node',i5)
      write(output,9453)mdtslp(j)
9453  format(' rate of slumping =',es12.4,' kg/s')
      write(output,9455)velslp(j)
9455  format(' velocity of slumping material =',es12.4,' m/s')
      endif
      if(ishdcr(j).le.0)go to 114
c      component j is structure at periphery of core that interacts
c      with molten pool that spreads to periphery of core.
      if(repool.lt.1.e-2)go to 114
      nswctc=0
      do k = 1,naz
        if (nssrht(k,j) .eq. 1) nswctc = 1
      enddo
      if (nswctc .eq. 0) go to 114
      write(output,9351) j
 9351 format(/,' component',i3,' is located at periphery of core',
     & ' and interacts with molten pool that spreads to periphery')
      write(output,9352)
 9352 format(' thickness at each axial node of melted layer on'
     & ' core side of component (m)')
      write(output,9353)(thkssm(k,j),k=1,naz)
 9353 format(10es13.4)
      write(output,9354)
 9354 format(' thickness at each axial node of solidified layer',
     & ' of previously molten core material (m)')
       write(output,9353)(thkpls(k,j),k=1,naz)
       write(output,9355)
 9355 format(' heat input at each axial node into structure',
     & ' from core material in embedded flow channel (W/axial node)')
      write(output,9353)(qssrbk(k,j),k=1,naz)
      write(output,9356)
 9356 format(' thickness at each axial node of annulus of melted',
     & ' structural material at surface of embedded flow channels (m)')
      write(output,9353)(thkemb(k,j),k=1,naz)
      write(output,9357)
 9357 format(' thickness at each axial node of annulus of',
     & ' solidified core material in flow channel (m)')
      write(output,9353)(thkcol(k,j),k=1,naz)
      if(nplguo(j).ge.1)then
        write(output,9358)nplguo(j),kbrssr(j)
 9358 format(' column of core material in embedded flow channel,',
     & ' frozen plug supporting column at axial node',i3)
        write(output,9359)kbrssr(j)
 9359 format(' melt through to flow channel at axial node',i3)
      endif
      if(npldrn(j).ge.1)then
      write(output,9361)npldrn(j)
 9361 format(' molten material draining through embedded',
     & ' flow channel; top axial node of drainage =',i3)
      write(output,9362)mdtslp(j)
9362  format(' rate of draining =',es12.4,' kg/s')
      write(output,9364)qdpslp(j)
9364  format(' heat generation per unit mass in draining material =',
     & es12.4,' W/kg')
      write(output,9368)mduslp(j)
9368  format(' rate of draining of UO2 =',es12.4,' kg/s')
      write(output,9372)timslp(j)
9372  format(' temperature of draining material =',es12.4,' K')
       endif
  114 continue
           if(tslpbt.ge.1.0)then
           write(output,9606)tslpbt
9606       format(' time of last slumping of drops of liquefied',  
     &     ' rod material to lower head =',e10.4,' s')
           write(output,9609)wdtslb
9609       format(' rate of slumping of material from molten pool',
     &     ' to lower head at last period of slumping from bottom =',
     &     e10.4,' kg/s')
           end if
      write (output,"(/,'0number of porous debris regions=',i3)") ndbreg
      if (ndbreg .eq. 0) go to 150
      do n = 1,ndbreg
        write (output,9370) n
 9370 format (/,'For debris region',i3,':'/
     &'  Volume    Hydraulic    Porosity    Particle'/
     &'  number     diameter                  size')
        j = idbcom(n)
        m = 0
        do k = ndebbt(n),ndebup(n)
          m = m + 1
          kdyn = (j - 1)*ndax + k
          if (nblkrd(k,j).eq.1 .and. k.lt.naz ) kdyn = kdyn + 1
          l = nvad(kdyn) + filndx(4)
          write (output,9380) volno(l),diamv(l),porvol(m,n),ddbvol(m,n)
 9380 format (i10,3es12.4)
        enddo
      enddo
      do 140 n=1,ndbreg
        m2=ndebup(n)-ndebbt(n)+1
        write(output,9390)n,ndebbt(n),ndebup(n),idbcom(n)
 9390 format (/,'For debris region ',i3,' ,bottom axial node=', i3,
     &' ,top axial node =',i3,' ,component number=',i3)
        write(output,9400)
 9400 format (/,'Heat transfer mode indicator for each axial node')
        write(output,9410)(nqndbl(m,n),m=1,m2)
 9410 format (10(2x,i5))
        write(output,9420)
 9420 format (/,'Debris temperature at each axial node (K)')
        write(output,9490)(tmpdeb(m,n),m=1,m2)
        write(output,9430)
 9430 format(/,'Debris nuclear heat generation at',
     &' each axial node (W/m3)')
        write(output,9490)(powdbl(m,n),m=1,m2)
        write(output,9440)
 9440 format(/,'Debris oxidation heat generation at',
     &' each axial node (W/m3)')
        write(output,9490)(qdboxm(m,n),m=1,m2)
        write(output,9450)
 9450 format(/,'Hydrogen generation at each axial node',
     &' (kg/s per m3)')
        write(output,9490)(hgdebm(m,n),m=1,m2)
        write(output,9460)
 9460 format(/,'Debris region volume at each axial node (m3)')
        write(output,9490)(voldeb(m,n),m=1,m2)
        write(output,9470)
 9470 format(/,'Debris surface area per unit volume area (m2/m3)')
        write(output,9490)(aovrdb(m,n),m=1,m2)
        write(output,9480)
 9480 format(/,'Total heat to coolant for each axial node',' (w)')
        write(output,9490)(qnchdb(m,n),m=1,m2)
 9490 format (10es13.4)
        write(output,9500)
 9500 format (' Heat input to vapor for each axial node (w) ')
        write(output,9490)(qfgdeb(m,n),m=1,m2)
        write(output,9510)
 9510 format (/,'Volumetric vapor generation rate for each node',
     &' (kg/m**3.s)')
        write(output,9490)(gmwdeb(m,n),m=1,m2)
  140 continue
c  Print information on oxidation of debris.
      write(output,9605)
9605  format(/,' oxidation parameters for axial nodes with debris')
      do144j=1,ncomp
      if(idcomp(j).ne.0)go to 144
      if(rpel((j-1)*ndax+1).le.0.2e-3)go to 144
      write(output,9607)j
9607  format(/,' debris oxidation parameters for component no.',i3,
     &'   (zero indcates axial node is not debris)')
      write(output,9709)
9709  format(' weight gain of metallic debris (kg O2/m2)')
      write(output,9490)(wgzrd1(k,j),k=1,naz)
      write(output,9611)
9611  format(' weight gain for complete oxidation of metallic debris')
      write(output,9490)(wmxcld(k,j),k=1,naz)
      write(output,9613)
9613  format(' weight gain of fuel in debris (kg O2/m2)')
      write(output,9490)(wguod1(k,j),k=1,naz)
      write(output,9615)
9615  format(' weight gain for complete oxidation of fuel')
      write(output,9490)(wmxful(k,j),k=1,naz)
144   continue
  150 continue
      write(output,7705)
7705  format(//,' SURFACE HEAT TRANSFER INFORMATION FOR EACH',
     & ' COMPONENT')
       do j=1,ncomp
       nl2 = 0
         if(idcomp(j).eq.2.and.nsout(j).gt.0)then
         nl2 = 1                                               
c     component is shroud and has two heat transfer surfaces
         end if
         if(idcomp(j).eq.8.and.nsout(j).gt.0)then
         nl2 = 1
c      component is BWR control blade component
         end if
       write(output,7605)j,timehy           
7605   format(/,' component no.',i3,' surface heat transfer',          
     & ' information, time =',e10.4,' s',/)             
       write(output,7607)
c              1234567123456789012123456789012123456789012123456789012      
 7607  format(' AXIAL  ELEVATION  RADIATION      HTC      TEMPERATURE ',
     &               'TEMPERATURE    VOL.      VELOCITY  ',                   
     &               ' NONCONDENS    VOLUME')
       write(output,7608)
c              1234567123456789012123456789012123456789012123456789012
 7608  format(' NODE      (m)        FLUX      (W/m2.K)     SURFACE   ',
     &              'DOM. PHASE   FRACTION   DOM. PHASE    QUALITY   ',
     &              '  NUMBER')
       write(output,7610)
 7610  format('                     (W/m2)                    (K)      ',
     &             '   (K)        LIQ.        (m/s)                 ')
         do m=naz,1,-1
         nl11 = nvad((j-1)*ndax+m) + filndx(4)
           if(voidg(nl11).ge.0.999)then
           veldom = velg(nl11)
           tmpdom = tempg(nl11)
           else
           veldom = velf(nl11)
           tmpdom = tempf(nl11)
           end if
cljs  q(nl11)=heat input to volume (W)
         write(output,7615)m,zcond2(m,j),scd22(m,j,1,1)%qrdsur,
     &   hcnvec((j-1)*ndax+m),tcond3(nrods2(1,j),m,j),
     &   tmpdom,voidf(nl11),veldom,quala(nl11),
     &   volno(nl11)     
 7615    format(1x,i3,1x,1x,8(1x,e10.4,1x),1x,i10)
         end do
c  print second surface for shroud
         if(nl2.eq.1)then
         write(output,7606)
 7606     format(/,' surface heat transfer information for second',
     &   ' surface of shroud or BWR control blade component',
     &   ' (surface at radial node 1)',/)
         write(output,7607)
         write(output,7608)
         write(output,7610)
           do m=naz,1,-1
           nl22 = nvad((ndcomp+nsout(j)-1)*ndax+m) + filndx(4)
             if(voidg(nl22).ge.0.999)then
             veldom = velg(nl22)
             tmpdom = tempg(nl22)
             else
             veldom = velf(nl22)
             tmpdom = tempf(nl22)
             end if
           htcdum = hout((nsout(j)-1)*ndax+m)
           qrddum = scd22(m,nsout(j),2,1)%qrdsur
cljs  q(nl22)=heat input to volume at second surface (surface at
cljs  radial node 1, outside surface) (W)
           write(output,7615)m,zcond2(m,j),qrddum,htcdum,
     &     tcond3(1,m,j),tmpdom,voidf(nl22),veldom,
     &     quala(nl22),volno(nl22)
           end do
         end if
cljs  end do loop over components
       end do
cljs do loop to print heat absorbed due to radiation heat transfer
       do ien = 1,numenc
       write(output,7905)ien
7905   format(/,' SCDAP radiation enclosure conditions and heat',
     & ' transfer information for enclosure',i3)
cljs   write(output,7907)
c7907   format(' axial   volno   qradab    tempg       quala      ',
cljs & ' voidf   icmpmx  icmpmn tmpmx tmpmn')   
       write(output,7909)
7909   format('         RELAP5   radiation                          ',
     & '    comp. comp. max.   min.     total   ')
       write(output,7911)
7911   format('         control    heat        gas   noncn.  liquid',
     & '      num. num. surf    surf     heat ')
       write(output,7913)
7913   format(' axial   volume     input      temp.   mass     vol. ',
     & '     max. min. temp.   temp.    input ')
       write(output,7915)
7915   format(' node    number      (W)        (K)    frac.    frac. ',
     & '   temp. temp. (K)     (K)      (W)  ')
         do k= naz,1,-1
cljs   find one component number in enclosure to obtain RELAP5
cljs   control volume number.
cljs     first find the first global channel number in enclosure
cljs     ist = global flow channel number for first flow channel in
cljs           enclosure ien.
         ist = nrepfc(ien,1)
cljs     icmp1 = global component number of first component in
cljs            flow channel.
         icmp1 = ngpc(ist,1)
           if(ndbg.eq.1)then
           write(output,7904)ien,k,ist,icmp1
7904       format(' MAJSCD for enclosures; ien=',i5,' k=',i5,
     &     ' ist=',i5,' icmp1=',i10)
           end if
cljs    find hottest and coolest component surface temperatures,
cljs    and store component numbers of these components.
           tmpmn=5000.
           tmpmx=0.0         
cljs       do loop over components in enclosure.
           do jj1 = 1,icp(ist)
             icmglb = ngpc(ist,jj1)
                 if(ndbg.eq.1)then
                 write(output,7906)jj1,icmglb
7906             format(' MAJSCD; jj1=',i5,' icmglb=',i5)
                 end if
cljs           here may need to use nsout to determine whether first
cljs           or second radial node should be used.
cljs           subroutine scdad6 has line
cljs           do nj = snc(i)%ncompe
cljs           j = ngroup(i,nj,2)
cljs         nodsur = nrods2(k,icmglb)
             nodsur = nensur(ien,icmglb)
                 if(ndbg.eq.1)then
                 write(output,7912)nodsur,tcond3(nodsur,k,icmglb)
7912             format(' MAJSCD; nodsur=',i5,' tcond3=',e10.4)
                 end if
               if(tcond3(nodsur,k,icmglb).lt.tmpmn)then
               icmpmn = icmglb
               tmpmn = tcond3(nodsur,k,icmglb)
               end if
cljs         repeat for component number with maximum temperature.
               if(tcond3(nodsur,k,icmglb).gt.tmpmx)then
               tmpmx = tcond3(nodsur,k,icmglb)
               icmpmx = icmglb
               end if
           end do
cljs     nl = RELAP5 control volume at k-th axial node of
cljs          of k-th enclosure.
         nl = nvad((icmp1-1)*ndax + k) + filndx(4)
              if(ndbg.eq.1)then
              write(output,7914)volno(nl)
7914          format(' MAJSCD; volno=',i10)
              end if
cljs   all components in SCDAP have same axial nodalization, so
cljs   reference first component for qradab component index.
         qtemp1 = dzcnd2(k,1)*qradab(ien,k)
         write(output,7921)k,volno(nl),qtemp1,tempg(nl),           
     &   quala(nl),voidf(nl),icmpmx,icmpmn,tmpmx,tmpmn,q(nl)          
7921     format(1x,i3,2x,i10,2x,e10.4,2x,f6.1,2x,f6.4,1x,e10.4,
     &   2x,i3,2x,i3,2x,f6.1,2x,f6.1,2x,e10.4)
cljs     end do loop over axial nodes for each enclosure
cljs   end do loop over axial nodes
         end do
cljs   end of do loop over enclosures
       end do
       write (output,'(/2x,a/)') 'component conduction option is:'
       if (irfld.eq.2) then
         write (output,9610) irfld
 9610 format (8x,'2d conduction with fine mesh rezoning, irfld=',i3)
      else
        if (irfld.eq.1) then
          write (output,9620) irfld
 9620 format (8x,'2d conduction, irfld=',i3)
        else
          write (output,9630) irfld
 9630 format (8x,'1d conduction, irfld=',i3)
        endif
      endif
       if (irfld.eq.2) then
         write (output,'(/2x,a)') 'component outer surface temperatures 
     &for fine meshes at current step are:'
         do j = 1,ncomp
           ib = (j - 1)*ndax + 1
           nr1 = numelm(ib) + 1
           write (output,9640) j,(temp2d(nr1,i,j),i=1,node(j))
 9640 format (4x,i3,18f6.1)
           write (output,9650) (nflg1(i,j),i=1,node(j))
 9650 format (2x,'flags for mesh location are:',18i3)
           write (output,9660) (nflg(i,j),i=1,node(j))
 9660 format (2x,'flags for mesh types are:',18i3)
         enddo
       endif
c
      write (output,9665) 'Channel heat transfer rates (W)'
 9665 format(/2x,a)
      write (output,'(/10x,a,2x,a,6x,a/)') 'convective','radiative',
     &   'total'
       do i = 1,igp
         write (output,9670) i,swc1(i)%qcdt,swc1(i)%qrdt,swc1(i)%qtdt
 9670 format(4x,i3,3x,1p,3(es10.3,1x))
       enddo
c
c      write (output,9665) 'Heat generation (j)'
c      write (output,9680)'component','nuclear','oxidation','effective',
c    &  'total'
c9680 format(2x,a,5x,a,3x,a,3x,a,7x,a)
c
c      write (output,"('Stored energy increase (j)')")
c      write (output,9700) (qstor(j),j=1,ncomp)
c9700  format (2x,8(es15.6,1x))
c
       write (output,"(/,'0Cumulative core heat transfer (j)')")
       write (output,
     & "('   convective=',es15.6,' radiative=',es15.6,'  total=',
     & es15.6)")
     & qoc,qor,qot
       write (output,
     & "(/,'0 Stored energy increase for all component =',es15.6)")
     & qst
c
       write (output,9730) qon,qoo,qoe,qos
 9730  format(/2x,'Cumulative heat generation (j):'/2x,
     &  '  nuclear=',es15.6, '  oxidation=',es15.6,
     &  '  effective=',es15.6, '  total=',es15.6,/)
c
       do j = 1,ncomp
         do k = 1,naz
           if (igrdsp(k,j) .eq. 3) write (output,9740) zcond(k),j
 9740  format(/,'Cladding has failed due to reaction with grid ',
     & 'spacer at elevation ', es15.6,'  of component ',i3)
         enddo
       enddo
c  Print out component results
       do icomp=1,ncomp
         if (idcomp(icomp) .eq. 0)then
           call cfout('fuel rod  ')
         elseif (idcomp(icomp) .eq. 1)then
           call ccout
         elseif (idcomp(icomp) .eq. 2)then
           call csout
         elseif (idcomp(icomp) .eq. 3)then
           call bwrout
         elseif (idcomp(icomp) .eq. 5) then
           call atrout
         elseif (idcomp(icomp) .eq. 6)then
           call cfout('simulator ')
         elseif (idcomp(icomp) .eq. 8)then
           call blaout
         endif
       enddo
       return
       end
*endif
