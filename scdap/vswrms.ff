*mlist
*if def,selap
       function vswrms(n,sx,incx,sy,incy)
c
c  Finds a weighted euclidean norm of a real vector.
c
c  Cognizant engineer: ewc.
c
       implicit none
       real vswrms
       integer incx,incy,n
       real sx(1),sy(1)
c
c  2...  arguments / parameters / constants  .......
c    a..  input arguments  .....
c          n  i:1  - length of vectors
c          sx, sy  r:n  - real vectors
c          incx, incy  i:1  - increments of storage
c    b..  output arguments  .....
c          vswrms  r:1  - weighted norm of the vector
c    c..  internal / local variables  .....
       integer i,ix,iy
       logical scale
       real atemp,cutlo,hitest,sum,xmax
c    d..  external / subprogram references  .....
       real usmach
c    e..  constants  .....
       cutlo = usmach(4)
       hitest = usmach(8)/float(n)
c  3...  notes / remarks  ......
c    a..  usage  .....
c          if n .le. 0 return with result = 0
c    b..  algorithm  .....
c          brief outline of algorithm..
c          phase 1    scans zero components.
c          move to phase 2 when a component is nonzero and .le. cutlo
c          move to phase 3 when a component is .gt. cutlo
c          move to phase 4 when a component is .ge. hitest
c             for real or d.p. set hitest = cuthi/n
c             for complex      set hitest = cuthi/(2*n)
c    c..  portability  .....
c          machine dependent constants
c          cutlo and cuthi are set by values from usmach
c    d..  references  .....
c          (1) j.j. dongarra, c.b. moler, j.r. bunch, and g.w. stewart,
c          linpack users' guide, siam, philadelphia, 1979
c          (2) c. lawson, r. hanson, d. kincaid, and f. krogh,
c          "basic linear algebra subprograms for fortran usage",
c          acm trans. math. software 5(1979), pp308-325
c    e..  history  .....
c          origin - vsnrm2 - minerva
c                 - vnorm - a.c. hindmarsh, lsode, 3/6/80
c          adapted - for weighted norm - p.c. jones, 9/23/80
c
       vswrms = 0.0
       if (n .eq. 0) return
       scale = .false.
       xmax = 0.0
       sum = 0.0
       if (incx .ge. 0) ix = -incx + 1
       if (incx .lt. 0) ix = -n*incx + 1
       if (incy .ge. 0) iy = -incy + 1
       if (incy .lt. 0) iy = -n*incy + 1
       do i = 1,n
         ix = ix + incx
         iy = iy + incy
         atemp = abs(sx(ix)/sy(iy))
         if (atemp .eq. 0.0) cycle
c  1 Locate range of previous maximum element.
         if (hitest .le. xmax) go to 40
         if (cutlo .lt. xmax) go to 20
         if (xmax .ne. 0.0) go to 10
         if (atemp .gt. cutlo) go to 20
c  a First non-zero lies in low range.
         sum = 1.0
         xmax = atemp
         scale = .true.
         cycle
   10    if (atemp .le. cutlo) go to 40
c  b First non-low-range element, rescale.
         sum = (sum*xmax)*xmax
         scale = .false.
   20    if (atemp .lt. hitest) then
c  c Midrange, no scaling.
           sum = sum + atemp**2
           if (xmax .lt. atemp) xmax = atemp
         else
c  d First high range element, scale.
           sum = 1.0 + (sum/atemp)/atemp
           xmax = atemp
           scale = .true.
         endif
         cycle
c  e Either...xmax .le. cutlo .and. atemp .le. cutlo or
c             xmax .ge. hitest.
   40    if (xmax .ge. atemp) then
c  f Scale new component .le. xmax, and add.
           sum = sum + (atemp/xmax)**2
         else
c  g New out-of-range maximum component.
           sum = 1.0 + sum*(xmax/atemp)**2
           xmax = atemp
         endif
       enddo
c  2 Compute square root and adjust for scaling.
       vswrms = sqrt(sum/float(n))
       if (scale) vswrms = vswrms*xmax
       end
*endif
